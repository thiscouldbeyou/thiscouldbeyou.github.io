// Copyright 2010 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)

if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {
 var loadPackage = function(metadata) {

    var PACKAGE_PATH;
    if (typeof window === 'object') {
      PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
    } else if (typeof location !== 'undefined') {
      // worker
      PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
    } else {
      throw 'using preloaded data can only be done on a web page or in a web worker';
    }
    var PACKAGE_NAME = 'bin/Web/index.data';
    var REMOTE_PACKAGE_BASE = 'index.data';
    if (typeof Module['locateFilePackage'] === 'function' && !Module['locateFile']) {
      Module['locateFile'] = Module['locateFilePackage'];
      err('warning: you defined Module.locateFilePackage, that has been renamed to Module.locateFile (using your locateFilePackage for now)');
    }
    var REMOTE_PACKAGE_NAME = Module['locateFile'] ? Module['locateFile'](REMOTE_PACKAGE_BASE, '') : REMOTE_PACKAGE_BASE;
  
    var REMOTE_PACKAGE_SIZE = metadata.remote_package_size;
    var PACKAGE_UUID = metadata.package_uuid;
  
    function fetchRemotePackage(packageName, packageSize, callback, errback) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', packageName, true);
      xhr.responseType = 'arraybuffer';
      xhr.onprogress = function(event) {
        var url = packageName;
        var size = packageSize;
        if (event.total) size = event.total;
        if (event.loaded) {
          if (!xhr.addedTotal) {
            xhr.addedTotal = true;
            if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
            Module.dataFileDownloads[url] = {
              loaded: event.loaded,
              total: size
            };
          } else {
            Module.dataFileDownloads[url].loaded = event.loaded;
          }
          var total = 0;
          var loaded = 0;
          var num = 0;
          for (var download in Module.dataFileDownloads) {
          var data = Module.dataFileDownloads[download];
            total += data.total;
            loaded += data.loaded;
            num++;
          }
          total = Math.ceil(total * Module.expectedDataFileDownloads/num);
          if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
        } else if (!Module.dataFileDownloads) {
          if (Module['setStatus']) Module['setStatus']('Downloading data...');
        }
      };
      xhr.onerror = function(event) {
        throw new Error("NetworkError for: " + packageName);
      }
      xhr.onload = function(event) {
        if (xhr.status == 200 || xhr.status == 304 || xhr.status == 206 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
          var packageData = xhr.response;
          callback(packageData);
        } else {
          throw new Error(xhr.statusText + " : " + xhr.responseURL);
        }
      };
      xhr.send(null);
    };

    function handleError(error) {
      console.error('package error:', error);
    };
  
      var fetchedCallback = null;
      var fetched = Module['getPreloadedPackage'] ? Module['getPreloadedPackage'](REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE) : null;

      if (!fetched) fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, function(data) {
        if (fetchedCallback) {
          fetchedCallback(data);
          fetchedCallback = null;
        } else {
          fetched = data;
        }
      }, handleError);
    
  function runWithFS() {

    function assert(check, msg) {
      if (!check) throw msg + new Error().stack;
    }
Module['FS_createPath']('/', 'res', true, true);
Module['FS_createPath']('/res', 'textures', true, true);
Module['FS_createPath']('/', 'assets', true, true);
Module['FS_createPath']('/assets', 'configs', true, true);
Module['FS_createPath']('/assets/configs', 'defaults', true, true);
Module['FS_createPath']('/assets', 'web-shaders', true, true);
Module['FS_createPath']('/assets', 'shaders', true, true);

    function DataRequest(start, end, audio) {
      this.start = start;
      this.end = end;
      this.audio = audio;
    }
    DataRequest.prototype = {
      requests: {},
      open: function(mode, name) {
        this.name = name;
        this.requests[name] = this;
        Module['addRunDependency']('fp ' + this.name);
      },
      send: function() {},
      onload: function() {
        var byteArray = this.byteArray.subarray(this.start, this.end);
        this.finish(byteArray);
      },
      finish: function(byteArray) {
        var that = this;

        Module['FS_createDataFile'](this.name, null, byteArray, true, true, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
        Module['removeRunDependency']('fp ' + that.name);

        this.requests[this.name] = null;
      }
    };

        var files = metadata.files;
        for (var i = 0; i < files.length; ++i) {
          new DataRequest(files[i].start, files[i].end, files[i].audio).open('GET', files[i].filename);
        }

  var fileData6 = [];
fileData6.push.apply(fileData6, [83, 104, 97, 100, 101, 114, 115, 10, 99, 111, 110, 102, 105, 103, 115, 10, 101, 99, 116]);
Module['FS_createDataFile']('/assets', 'README', fileData6, true, true, false);
var fileData7 = [];
fileData7.push.apply(fileData7, [115, 116, 97, 114, 116, 109, 101, 110, 117, 95, 115, 105, 110, 103, 108, 101, 112, 108, 97, 121, 101, 114, 32, 9, 83, 105, 110, 103, 108, 101, 112, 108, 97, 121, 101, 114, 10, 115, 116, 97, 114, 116, 109, 101, 110, 117, 95, 109, 117, 108, 116, 105, 112, 108, 97, 121, 101, 114, 32, 9, 77, 117, 108, 116, 105, 112, 108, 97, 121, 101, 114, 10, 115, 116, 97, 114, 116, 109, 101, 110, 117, 95, 115, 101, 116, 116, 105, 110, 103, 115, 32, 9, 83, 101, 116, 116, 105, 110, 103, 115, 10, 115, 116, 97, 114, 116, 109, 101, 110, 117, 95, 101, 120, 105, 116, 32, 9, 9, 69, 120, 105, 116, 10, 115, 101, 116, 116, 105, 110, 103, 115, 95, 103, 101, 110, 101, 114, 97, 108, 32, 9, 71, 101, 110, 101, 114, 97, 108, 10, 115, 101, 116, 116, 105, 110, 103, 115, 95, 115, 111, 117, 110, 100, 32, 9, 9, 83, 111, 117, 110, 100, 10, 115, 101, 116, 116, 105, 110, 103, 115, 95, 103, 114, 97, 112, 104, 105, 99, 97, 108, 32, 9, 71, 114, 97, 112, 104, 105, 99, 115, 10, 10, 115, 97, 118, 101, 32, 83, 97, 118, 101, 10, 115, 97, 118, 101, 95, 97, 110, 100, 95, 113, 117, 105, 116, 32, 9, 9, 83, 97, 118, 101, 96, 97, 110, 100, 96, 81, 117, 105, 116, 10, 115, 97, 118, 101, 95, 119, 105, 116, 104, 111, 117, 116, 95, 113, 117, 105, 116, 105, 110, 103, 32, 9, 81, 117, 105, 116, 96, 119, 105, 116, 104, 111, 117, 116, 96, 83, 97, 118, 105, 110, 103, 10]);
Module['FS_createDataFile']('/assets/configs', 'language_en.lang', fileData7, true, true, false);
var fileData8 = [];
fileData8.push.apply(fileData8, [119, 105, 100, 116, 104, 32, 55, 50, 48, 10, 104, 101, 105, 103, 104, 116, 32, 52, 56, 48, 10, 10, 109, 105, 112, 109, 97, 112, 112, 105, 110, 103, 32, 49, 10, 117, 115, 101, 95, 118, 115, 121, 110, 99, 32, 48, 10, 10, 108, 97, 110, 103, 117, 97, 103, 101, 32, 101, 110, 10, 10]);
Module['FS_createDataFile']('/assets/configs', 'settings.prop', fileData8, true, true, false);
var fileData9 = [];
fileData9.push.apply(fileData9, [9, 9, 68, 79, 32, 78, 79, 84, 32, 84, 79, 85, 67, 72, 10, 9, 65, 78, 89, 32, 70, 73, 76, 69, 32, 73, 78, 32, 84, 72, 73, 83, 32, 68, 73, 82, 69, 67, 84, 79, 82, 89, 33, 33, 33, 10, 10, 84, 104, 105, 115, 32, 105, 115, 32, 116, 104, 101, 32, 108, 111, 99, 97, 116, 105, 111, 110, 32, 119, 104, 101, 114, 101, 32, 100, 101, 102, 97, 117, 108, 116, 115, 32, 97, 114, 101, 32, 108, 111, 99, 97, 116, 101, 100, 32, 10, 105, 110, 99, 97, 115, 101, 32, 111, 102, 32, 97, 32, 110, 101, 101, 100, 101, 100, 32, 102, 105, 108, 101, 32, 105, 115, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 46, 32, 65, 110, 121, 32, 99, 104, 97, 110, 103, 101, 10, 116, 111, 32, 116, 104, 101, 32, 99, 111, 110, 116, 101, 110, 116, 115, 32, 105, 110, 32, 116, 104, 105, 115, 32, 100, 105, 114, 101, 99, 116, 111, 114, 121, 32, 109, 97, 121, 32, 98, 101, 32, 116, 104, 101, 32, 111, 110, 10, 116, 104, 101, 32, 117, 115, 101, 114, 46, 10, 10, 9, 9, 9, 9, 32, 32, 32, 32, 32, 32, 84, 104, 97, 110, 107, 115, 10, 9, 9, 9, 9, 9, 45, 87, 83, 71]);
Module['FS_createDataFile']('/assets/configs/defaults', 'README', fileData9, true, true, false);
var fileData10 = [];
fileData10.push.apply(fileData10, [115, 116, 97, 114, 116, 109, 101, 110, 117, 95, 115, 105, 110, 103, 108, 101, 112, 108, 97, 121, 101, 114, 32, 9, 83, 105, 110, 103, 108, 101, 112, 108, 97, 121, 101, 114, 10, 115, 116, 97, 114, 116, 109, 101, 110, 117, 95, 109, 117, 108, 116, 105, 112, 108, 97, 121, 101, 114, 32, 9, 77, 117, 108, 116, 105, 112, 108, 97, 121, 101, 114, 10, 115, 116, 97, 114, 116, 109, 101, 110, 117, 95, 115, 101, 116, 116, 105, 110, 103, 115, 32, 9, 83, 101, 116, 116, 105, 110, 103, 115, 10, 115, 116, 97, 114, 116, 109, 101, 110, 117, 95, 101, 120, 105, 116, 32, 9, 9, 69, 120, 105, 116, 10, 115, 101, 116, 116, 105, 110, 103, 115, 95, 103, 101, 110, 101, 114, 97, 108, 32, 9, 71, 101, 110, 101, 114, 97, 108, 10, 115, 101, 116, 116, 105, 110, 103, 115, 95, 115, 111, 117, 110, 100, 32, 9, 9, 83, 111, 117, 110, 100, 10, 115, 101, 116, 116, 105, 110, 103, 115, 95, 103, 114, 97, 112, 104, 105, 99, 97, 108, 32, 9, 71, 114, 97, 112, 104, 105, 99, 115, 10, 10, 115, 97, 118, 101, 32, 83, 97, 118, 101, 10, 115, 97, 118, 101, 95, 97, 110, 100, 95, 113, 117, 105, 116, 32, 9, 9, 83, 97, 118, 101, 96, 97, 110, 100, 96, 81, 117, 105, 116, 10, 115, 97, 118, 101, 95, 119, 105, 116, 104, 111, 117, 116, 95, 113, 117, 105, 116, 105, 110, 103, 32, 9, 81, 117, 105, 116, 96, 119, 105, 116, 104, 111, 117, 116, 96, 83, 97, 118, 105, 110, 103, 10]);
Module['FS_createDataFile']('/assets/configs/defaults', 'language_en.lang', fileData10, true, true, false);
var fileData11 = [];
fileData11.push.apply(fileData11, [119, 105, 100, 116, 104, 32, 55, 50, 48, 10, 104, 101, 105, 103, 104, 116, 32, 52, 56, 48, 10, 109, 105, 112, 109, 97, 112, 112, 105, 110, 103, 32, 49, 10, 117, 115, 101, 95, 118, 115, 121, 110, 99, 32, 49, 10, 10]);
Module['FS_createDataFile']('/assets/configs/defaults', 'settings.prop', fileData11, true, true, false);
var fileData12 = [];
fileData12.push.apply(fileData12, [112, 114, 101, 99, 105, 115, 105, 111, 110, 32, 109, 101, 100, 105, 117, 109, 112, 32, 102, 108, 111, 97, 116, 59, 10, 10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101, 99, 51, 32, 97, 95, 112, 111, 115, 105, 116, 105, 111, 110, 115, 59, 10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101, 99, 50, 32, 97, 95, 116, 101, 120, 116, 117, 114, 101, 95, 99, 111, 111, 114, 100, 110, 97, 116, 101, 115, 59, 10, 10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101, 99, 52, 32, 97, 95, 116, 114, 97, 110, 115, 102, 111, 114, 109, 95, 109, 97, 116, 114, 105, 120, 95, 99, 111, 108, 65, 59, 10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101, 99, 52, 32, 97, 95, 116, 114, 97, 110, 115, 102, 111, 114, 109, 95, 109, 97, 116, 114, 105, 120, 95, 99, 111, 108, 66, 59, 10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101, 99, 52, 32, 97, 95, 116, 114, 97, 110, 115, 102, 111, 114, 109, 95, 109, 97, 116, 114, 105, 120, 95, 99, 111, 108, 67, 59, 10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101, 99, 52, 32, 97, 95, 116, 114, 97, 110, 115, 102, 111, 114, 109, 95, 109, 97, 116, 114, 105, 120, 95, 99, 111, 108, 68, 59, 10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101, 99, 52, 32, 97, 95, 116, 101, 120, 116, 117, 114, 101, 95, 117, 118, 95, 100, 105, 109, 101, 110, 115, 105, 111, 110, 95, 116, 114, 97, 110, 115, 102, 111, 114, 109, 59, 10, 10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101, 99, 50, 32, 97, 95, 102, 114, 97, 109, 101, 95, 100, 121, 110, 97, 109, 105, 99, 59, 10, 10, 118, 97, 114, 121, 105, 110, 103, 32, 118, 101, 99, 50, 32, 118, 95, 116, 101, 120, 116, 117, 114, 101, 95, 99, 111, 111, 114, 100, 110, 97, 116, 101, 115, 59, 10, 10, 117, 110, 105, 102, 111, 114, 109, 32, 109, 97, 116, 52, 32, 117, 95, 112, 114, 111, 106, 101, 99, 116, 105, 111, 110, 95, 109, 97, 116, 114, 105, 120, 59, 10, 117, 110, 105, 102, 111, 114, 109, 32, 102, 108, 111, 97, 116, 32, 117, 95, 97, 116, 108, 97, 115, 95, 99, 111, 117, 110, 116, 95, 102, 108, 111, 97, 116, 59, 10, 10, 118, 111, 105, 100, 32, 109, 97, 105, 110, 40, 41, 10, 123, 10, 9, 109, 97, 116, 52, 32, 116, 114, 97, 110, 115, 102, 111, 114, 109, 95, 109, 97, 116, 114, 105, 120, 59, 10, 9, 116, 114, 97, 110, 115, 102, 111, 114, 109, 95, 109, 97, 116, 114, 105, 120, 91, 48, 93, 32, 61, 32, 97, 95, 116, 114, 97, 110, 115, 102, 111, 114, 109, 95, 109, 97, 116, 114, 105, 120, 95, 99, 111, 108, 65, 59, 10, 9, 116, 114, 97, 110, 115, 102, 111, 114, 109, 95, 109, 97, 116, 114, 105, 120, 91, 49, 93, 32, 61, 32, 97, 95, 116, 114, 97, 110, 115, 102, 111, 114, 109, 95, 109, 97, 116, 114, 105, 120, 95, 99, 111, 108, 66, 59, 10, 9, 116, 114, 97, 110, 115, 102, 111, 114, 109, 95, 109, 97, 116, 114, 105, 120, 91, 50, 93, 32, 61, 32, 97, 95, 116, 114, 97, 110, 115, 102, 111, 114, 109, 95, 109, 97, 116, 114, 105, 120, 95, 99, 111, 108, 67, 59, 10, 9, 116, 114, 97, 110, 115, 102, 111, 114, 109, 95, 109, 97, 116, 114, 105, 120, 91, 51, 93, 32, 61, 32, 97, 95, 116, 114, 97, 110, 115, 102, 111, 114, 109, 95, 109, 97, 116, 114, 105, 120, 95, 99, 111, 108, 68, 59, 10, 10, 9, 103, 108, 95, 80, 111, 115, 105, 116, 105, 111, 110, 32, 61, 32, 117, 95, 112, 114, 111, 106, 101, 99, 116, 105, 111, 110, 95, 109, 97, 116, 114, 105, 120, 32, 42, 32, 116, 114, 97, 110, 115, 102, 111, 114, 109, 95, 109, 97, 116, 114, 105, 120, 32, 42, 32, 118, 101, 99, 52, 40, 97, 95, 112, 111, 115, 105, 116, 105, 111, 110, 115, 44, 32, 49, 41, 59, 10, 9, 118, 101, 99, 50, 32, 116, 112, 32, 61, 32, 97, 95, 116, 101, 120, 116, 117, 114, 101, 95, 99, 111, 111, 114, 100, 110, 97, 116, 101, 115, 59, 10, 9, 116, 112, 32, 42, 61, 32, 97, 95, 116, 101, 120, 116, 117, 114, 101, 95, 117, 118, 95, 100, 105, 109, 101, 110, 115, 105, 111, 110, 95, 116, 114, 97, 110, 115, 102, 111, 114, 109, 46, 122, 119, 59, 10, 9, 116, 112, 32, 43, 61, 32, 97, 95, 116, 101, 120, 116, 117, 114, 101, 95, 117, 118, 95, 100, 105, 109, 101, 110, 115, 105, 111, 110, 95, 116, 114, 97, 110, 115, 102, 111, 114, 109, 46, 120, 121, 59, 10, 9, 116, 112, 32, 43, 61, 32, 97, 95, 102, 114, 97, 109, 101, 95, 100, 121, 110, 97, 109, 105, 99, 59, 10, 9, 116, 112, 32, 47, 61, 32, 117, 95, 97, 116, 108, 97, 115, 95, 99, 111, 117, 110, 116, 95, 102, 108, 111, 97, 116, 59, 10, 9, 118, 95, 116, 101, 120, 116, 117, 114, 101, 95, 99, 111, 111, 114, 100, 110, 97, 116, 101, 115, 32, 61, 32, 116, 112, 59, 10, 125, 10]);
Module['FS_createDataFile']('/assets/web-shaders', 'gui.vs.glsl', fileData12, true, true, false);
var fileData13 = [];
fileData13.push.apply(fileData13, [112, 114, 101, 99, 105, 115, 105, 111, 110, 32, 109, 101, 100, 105, 117, 109, 112, 32, 102, 108, 111, 97, 116, 59, 10, 10, 118, 97, 114, 121, 105, 110, 103, 32, 118, 101, 99, 50, 32, 118, 95, 116, 101, 120, 116, 117, 114, 101, 95, 99, 111, 111, 114, 100, 110, 97, 116, 101, 115, 59, 10, 10, 117, 110, 105, 102, 111, 114, 109, 32, 115, 97, 109, 112, 108, 101, 114, 50, 68, 32, 115, 97, 109, 112, 108, 101, 114, 59, 10, 10, 118, 111, 105, 100, 32, 109, 97, 105, 110, 40, 41, 10, 123, 10, 9, 103, 108, 95, 70, 114, 97, 103, 67, 111, 108, 111, 114, 32, 61, 32, 116, 101, 120, 116, 117, 114, 101, 50, 68, 40, 115, 97, 109, 112, 108, 101, 114, 44, 32, 118, 95, 116, 101, 120, 116, 117, 114, 101, 95, 99, 111, 111, 114, 100, 110, 97, 116, 101, 115, 41, 59, 10, 125]);
Module['FS_createDataFile']('/assets/web-shaders', 'bg.fs.glsl', fileData13, true, true, false);
var fileData14 = [];
fileData14.push.apply(fileData14, [112, 114, 101, 99, 105, 115, 105, 111, 110, 32, 109, 101, 100, 105, 117, 109, 112, 32, 102, 108, 111, 97, 116, 59, 10, 10, 118, 97, 114, 121, 105, 110, 103, 32, 118, 101, 99, 50, 32, 118, 95, 116, 101, 120, 116, 117, 114, 101, 95, 99, 111, 111, 114, 100, 110, 97, 116, 101, 115, 59, 10, 10, 117, 110, 105, 102, 111, 114, 109, 32, 115, 97, 109, 112, 108, 101, 114, 50, 68, 32, 115, 97, 109, 112, 108, 101, 114, 59, 10, 10, 118, 111, 105, 100, 32, 109, 97, 105, 110, 40, 41, 10, 123, 10, 9, 103, 108, 95, 70, 114, 97, 103, 67, 111, 108, 111, 114, 32, 61, 32, 116, 101, 120, 116, 117, 114, 101, 50, 68, 40, 115, 97, 109, 112, 108, 101, 114, 44, 32, 118, 95, 116, 101, 120, 116, 117, 114, 101, 95, 99, 111, 111, 114, 100, 110, 97, 116, 101, 115, 41, 59, 10, 125]);
Module['FS_createDataFile']('/assets/web-shaders', 'default.fs.glsl', fileData14, true, true, false);
var fileData15 = [];
fileData15.push.apply(fileData15, [112, 114, 101, 99, 105, 115, 105, 111, 110, 32, 109, 101, 100, 105, 117, 109, 112, 32, 102, 108, 111, 97, 116, 59, 10, 10, 118, 97, 114, 121, 105, 110, 103, 32, 118, 101, 99, 50, 32, 118, 95, 116, 101, 120, 116, 117, 114, 101, 95, 99, 111, 111, 114, 100, 110, 97, 116, 101, 115, 59, 10, 10, 117, 110, 105, 102, 111, 114, 109, 32, 115, 97, 109, 112, 108, 101, 114, 50, 68, 32, 115, 97, 109, 112, 108, 101, 114, 59, 10, 10, 118, 111, 105, 100, 32, 109, 97, 105, 110, 40, 41, 10, 123, 10, 9, 103, 108, 95, 70, 114, 97, 103, 67, 111, 108, 111, 114, 32, 61, 32, 116, 101, 120, 116, 117, 114, 101, 50, 68, 40, 115, 97, 109, 112, 108, 101, 114, 44, 32, 118, 95, 116, 101, 120, 116, 117, 114, 101, 95, 99, 111, 111, 114, 100, 110, 97, 116, 101, 115, 41, 59, 10, 125]);
Module['FS_createDataFile']('/assets/web-shaders', 'gui.fs.glsl', fileData15, true, true, false);
var fileData16 = [];
fileData16.push.apply(fileData16, [112, 114, 101, 99, 105, 115, 105, 111, 110, 32, 109, 101, 100, 105, 117, 109, 112, 32, 102, 108, 111, 97, 116, 59, 10, 10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101, 99, 51, 32, 97, 95, 112, 111, 115, 105, 116, 105, 111, 110, 115, 59, 10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101, 99, 50, 32, 97, 95, 116, 101, 120, 116, 117, 114, 101, 95, 99, 111, 111, 114, 100, 110, 97, 116, 101, 115, 59, 10, 10, 118, 97, 114, 121, 105, 110, 103, 32, 118, 101, 99, 50, 32, 118, 95, 116, 101, 120, 116, 117, 114, 101, 95, 99, 111, 111, 114, 100, 110, 97, 116, 101, 115, 59, 10, 10, 117, 110, 105, 102, 111, 114, 109, 32, 109, 97, 116, 52, 32, 117, 95, 112, 114, 111, 106, 101, 99, 116, 105, 111, 110, 95, 109, 97, 116, 114, 105, 120, 59, 10, 117, 110, 105, 102, 111, 114, 109, 32, 109, 97, 116, 52, 32, 117, 95, 116, 114, 97, 110, 115, 102, 111, 114, 109, 95, 109, 97, 116, 114, 105, 120, 59, 10, 10, 118, 111, 105, 100, 32, 109, 97, 105, 110, 40, 41, 10, 123, 10, 9, 103, 108, 95, 80, 111, 115, 105, 116, 105, 111, 110, 32, 61, 32, 117, 95, 112, 114, 111, 106, 101, 99, 116, 105, 111, 110, 95, 109, 97, 116, 114, 105, 120, 32, 42, 32, 117, 95, 116, 114, 97, 110, 115, 102, 111, 114, 109, 95, 109, 97, 116, 114, 105, 120, 32, 42, 32, 118, 101, 99, 52, 40, 97, 95, 112, 111, 115, 105, 116, 105, 111, 110, 115, 44, 32, 49, 41, 59, 10, 9, 118, 95, 116, 101, 120, 116, 117, 114, 101, 95, 99, 111, 111, 114, 100, 110, 97, 116, 101, 115, 32, 61, 32, 118, 101, 99, 50, 40, 49, 54, 44, 49, 54, 41, 32, 42, 32, 97, 95, 116, 101, 120, 116, 117, 114, 101, 95, 99, 111, 111, 114, 100, 110, 97, 116, 101, 115, 59, 10, 125, 10]);
Module['FS_createDataFile']('/assets/web-shaders', 'default.vs.glsl', fileData16, true, true, false);
var fileData17 = [];
fileData17.push.apply(fileData17, [112, 114, 101, 99, 105, 115, 105, 111, 110, 32, 109, 101, 100, 105, 117, 109, 112, 32, 102, 108, 111, 97, 116, 59, 10, 10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101, 99, 51, 32, 97, 95, 112, 111, 115, 105, 116, 105, 111, 110, 115, 59, 10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101, 99, 50, 32, 97, 95, 116, 101, 120, 116, 117, 114, 101, 95, 99, 111, 111, 114, 100, 110, 97, 116, 101, 115, 59, 10, 10, 118, 97, 114, 121, 105, 110, 103, 32, 118, 101, 99, 50, 32, 118, 95, 116, 101, 120, 116, 117, 114, 101, 95, 99, 111, 111, 114, 100, 110, 97, 116, 101, 115, 59, 10, 10, 117, 110, 105, 102, 111, 114, 109, 32, 109, 97, 116, 52, 32, 117, 95, 112, 114, 111, 106, 101, 99, 116, 105, 111, 110, 95, 109, 97, 116, 114, 105, 120, 59, 10, 117, 110, 105, 102, 111, 114, 109, 32, 109, 97, 116, 52, 32, 117, 95, 116, 114, 97, 110, 115, 102, 111, 114, 109, 95, 109, 97, 116, 114, 105, 120, 59, 10, 117, 110, 105, 102, 111, 114, 109, 32, 118, 101, 99, 52, 32, 117, 95, 115, 99, 97, 108, 101, 100, 59, 10, 10, 118, 111, 105, 100, 32, 109, 97, 105, 110, 40, 41, 10, 123, 10, 9, 103, 108, 95, 80, 111, 115, 105, 116, 105, 111, 110, 32, 61, 32, 117, 95, 112, 114, 111, 106, 101, 99, 116, 105, 111, 110, 95, 109, 97, 116, 114, 105, 120, 32, 42, 32, 117, 95, 116, 114, 97, 110, 115, 102, 111, 114, 109, 95, 109, 97, 116, 114, 105, 120, 32, 42, 32, 117, 95, 115, 99, 97, 108, 101, 100, 32, 42, 32, 118, 101, 99, 52, 40, 97, 95, 112, 111, 115, 105, 116, 105, 111, 110, 115, 44, 32, 49, 41, 59, 10, 9, 118, 95, 116, 101, 120, 116, 117, 114, 101, 95, 99, 111, 111, 114, 100, 110, 97, 116, 101, 115, 32, 61, 32, 117, 95, 115, 99, 97, 108, 101, 100, 46, 120, 121, 32, 42, 32, 118, 101, 99, 50, 40, 49, 54, 44, 49, 54, 41, 32, 42, 32, 97, 95, 116, 101, 120, 116, 117, 114, 101, 95, 99, 111, 111, 114, 100, 110, 97, 116, 101, 115, 59, 10, 125, 10]);
Module['FS_createDataFile']('/assets/web-shaders', 'bg.vs.glsl', fileData17, true, true, false);
var fileData18 = [];
fileData18.push.apply(fileData18, [35, 118, 101, 114, 115, 105, 111, 110, 32, 51, 51, 48, 32, 99, 111, 114, 101, 10, 10, 108, 97, 121, 111, 117, 116, 32, 40, 108, 111, 99, 97, 116, 105, 111, 110, 61, 48, 41, 32, 105, 110, 32, 118, 101, 99, 51, 32, 97, 95, 112, 111, 115, 105, 116, 105, 111, 110, 115, 59, 10, 108, 97, 121, 111, 117, 116, 32, 40, 108, 111, 99, 97, 116, 105, 111, 110, 61, 49, 41, 32, 105, 110, 32, 118, 101, 99, 50, 32, 97, 95, 116, 101, 120, 116, 117, 114, 101, 95, 99, 111, 111, 114, 100, 110, 97, 116, 101, 115, 59, 10, 10, 108, 97, 121, 111, 117, 116, 32, 40, 108, 111, 99, 97, 116, 105, 111, 110, 61, 50, 41, 32, 105, 110, 32, 118, 101, 99, 52, 32, 97, 95, 116, 114, 97, 110, 115, 102, 111, 114, 109, 95, 109, 97, 116, 114, 105, 120, 95, 99, 111, 108, 65, 59, 9, 9, 47, 47, 32, 73, 100, 101, 110, 116, 105, 116, 121, 32, 77, 97, 116, 114, 105, 120, 32, 67, 111, 108, 117, 109, 110, 32, 49, 10, 108, 97, 121, 111, 117, 116, 32, 40, 108, 111, 99, 97, 116, 105, 111, 110, 61, 51, 41, 32, 105, 110, 32, 118, 101, 99, 52, 32, 97, 95, 116, 114, 97, 110, 115, 102, 111, 114, 109, 95, 109, 97, 116, 114, 105, 120, 95, 99, 111, 108, 66, 59, 9, 9, 47, 47, 32, 73, 100, 101, 110, 116, 105, 116, 121, 32, 77, 97, 116, 114, 105, 120, 32, 67, 111, 108, 117, 109, 110, 32, 50, 10, 108, 97, 121, 111, 117, 116, 32, 40, 108, 111, 99, 97, 116, 105, 111, 110, 61, 52, 41, 32, 105, 110, 32, 118, 101, 99, 52, 32, 97, 95, 116, 114, 97, 110, 115, 102, 111, 114, 109, 95, 109, 97, 116, 114, 105, 120, 95, 99, 111, 108, 67, 59, 9, 9, 47, 47, 32, 73, 100, 101, 110, 116, 105, 116, 121, 32, 77, 97, 116, 114, 105, 120, 32, 67, 111, 108, 117, 109, 110, 32, 51, 10, 108, 97, 121, 111, 117, 116, 32, 40, 108, 111, 99, 97, 116, 105, 111, 110, 61, 53, 41, 32, 105, 110, 32, 118, 101, 99, 52, 32, 97, 95, 116, 114, 97, 110, 115, 102, 111, 114, 109, 95, 109, 97, 116, 114, 105, 120, 95, 99, 111, 108, 68, 59, 9, 9, 47, 47, 32, 73, 100, 101, 110, 116, 105, 116, 121, 32, 77, 97, 116, 114, 105, 120, 32, 67, 111, 108, 117, 109, 110, 32, 52, 10, 108, 97, 121, 111, 117, 116, 32, 40, 108, 111, 99, 97, 116, 105, 111, 110, 61, 54, 41, 32, 105, 110, 32, 118, 101, 99, 52, 32, 97, 95, 116, 101, 120, 116, 117, 114, 101, 95, 117, 118, 95, 100, 105, 109, 101, 110, 115, 105, 111, 110, 95, 116, 114, 97, 110, 115, 102, 111, 114, 109, 59, 9, 47, 47, 32, 68, 101, 102, 97, 117, 108, 116, 32, 111, 102, 32, 49, 88, 49, 32, 115, 105, 122, 101, 32, 108, 111, 99, 97, 116, 101, 100, 32, 97, 116, 32, 48, 44, 48, 10, 10, 108, 97, 121, 111, 117, 116, 32, 40, 108, 111, 99, 97, 116, 105, 111, 110, 61, 55, 41, 32, 105, 110, 32, 118, 101, 99, 50, 32, 97, 95, 102, 114, 97, 109, 101, 95, 100, 121, 110, 97, 109, 105, 99, 59, 9, 9, 9, 47, 47, 32, 67, 117, 114, 114, 101, 110, 116, 32, 70, 114, 97, 109, 101, 32, 105, 110, 32, 65, 116, 108, 97, 115, 46, 32, 67, 104, 97, 110, 103, 101, 115, 32, 97, 108, 111, 116, 46, 10, 10, 111, 117, 116, 32, 118, 101, 99, 50, 32, 118, 95, 116, 101, 120, 116, 117, 114, 101, 95, 99, 111, 111, 114, 100, 110, 97, 116, 101, 115, 59, 10, 10, 117, 110, 105, 102, 111, 114, 109, 32, 109, 97, 116, 52, 32, 117, 95, 112, 114, 111, 106, 101, 99, 116, 105, 111, 110, 95, 109, 97, 116, 114, 105, 120, 32, 61, 32, 109, 97, 116, 52, 40, 49, 46, 48, 41, 59, 9, 47, 47, 32, 83, 104, 111, 117, 108, 100, 32, 110, 101, 101, 100, 32, 116, 111, 32, 111, 110, 108, 121, 32, 98, 101, 32, 108, 111, 97, 100, 101, 100, 32, 10, 9, 9, 9, 9, 9, 9, 47, 47, 32, 111, 110, 99, 101, 46, 32, 69, 120, 99, 101, 112, 116, 32, 102, 111, 114, 32, 114, 101, 115, 105, 122, 101, 46, 10, 10, 117, 110, 105, 102, 111, 114, 109, 32, 102, 108, 111, 97, 116, 32, 117, 95, 97, 116, 108, 97, 115, 95, 99, 111, 117, 110, 116, 95, 102, 108, 111, 97, 116, 32, 61, 32, 49, 46, 48, 59, 32, 9, 47, 47, 32, 83, 105, 122, 101, 32, 111, 102, 32, 97, 116, 108, 97, 115, 44, 32, 115, 116, 97, 116, 105, 99, 44, 32, 98, 117, 116, 32, 102, 114, 111, 109, 10, 9, 9, 9, 9, 9, 9, 47, 47, 32, 116, 104, 101, 32, 116, 101, 120, 116, 117, 114, 101, 46, 32, 78, 111, 32, 110, 101, 101, 100, 32, 116, 111, 32, 98, 101, 32, 105, 110, 10, 9, 9, 9, 9, 9, 9, 47, 47, 32, 118, 97, 111, 39, 115, 32, 118, 98, 111, 33, 10, 118, 111, 105, 100, 32, 109, 97, 105, 110, 40, 41, 10, 123, 10, 9, 109, 97, 116, 52, 32, 116, 114, 97, 110, 115, 102, 111, 114, 109, 95, 109, 97, 116, 114, 105, 120, 59, 10, 9, 116, 114, 97, 110, 115, 102, 111, 114, 109, 95, 109, 97, 116, 114, 105, 120, 91, 48, 93, 32, 61, 32, 97, 95, 116, 114, 97, 110, 115, 102, 111, 114, 109, 95, 109, 97, 116, 114, 105, 120, 95, 99, 111, 108, 65, 59, 10, 9, 116, 114, 97, 110, 115, 102, 111, 114, 109, 95, 109, 97, 116, 114, 105, 120, 91, 49, 93, 32, 61, 32, 97, 95, 116, 114, 97, 110, 115, 102, 111, 114, 109, 95, 109, 97, 116, 114, 105, 120, 95, 99, 111, 108, 66, 59, 10, 9, 116, 114, 97, 110, 115, 102, 111, 114, 109, 95, 109, 97, 116, 114, 105, 120, 91, 50, 93, 32, 61, 32, 97, 95, 116, 114, 97, 110, 115, 102, 111, 114, 109, 95, 109, 97, 116, 114, 105, 120, 95, 99, 111, 108, 67, 59, 10, 9, 116, 114, 97, 110, 115, 102, 111, 114, 109, 95, 109, 97, 116, 114, 105, 120, 91, 51, 93, 32, 61, 32, 97, 95, 116, 114, 97, 110, 115, 102, 111, 114, 109, 95, 109, 97, 116, 114, 105, 120, 95, 99, 111, 108, 68, 59, 10, 10, 10, 9, 103, 108, 95, 80, 111, 115, 105, 116, 105, 111, 110, 32, 61, 32, 117, 95, 112, 114, 111, 106, 101, 99, 116, 105, 111, 110, 95, 109, 97, 116, 114, 105, 120, 32, 42, 32, 116, 114, 97, 110, 115, 102, 111, 114, 109, 95, 109, 97, 116, 114, 105, 120, 32, 42, 32, 118, 101, 99, 52, 40, 97, 95, 112, 111, 115, 105, 116, 105, 111, 110, 115, 44, 32, 49, 41, 59, 10, 9, 118, 101, 99, 50, 32, 116, 112, 32, 61, 32, 97, 95, 116, 101, 120, 116, 117, 114, 101, 95, 99, 111, 111, 114, 100, 110, 97, 116, 101, 115, 59, 10, 9, 116, 112, 32, 42, 61, 32, 97, 95, 116, 101, 120, 116, 117, 114, 101, 95, 117, 118, 95, 100, 105, 109, 101, 110, 115, 105, 111, 110, 95, 116, 114, 97, 110, 115, 102, 111, 114, 109, 46, 122, 119, 59, 9, 10, 9, 116, 112, 32, 43, 61, 32, 97, 95, 116, 101, 120, 116, 117, 114, 101, 95, 117, 118, 95, 100, 105, 109, 101, 110, 115, 105, 111, 110, 95, 116, 114, 97, 110, 115, 102, 111, 114, 109, 46, 120, 121, 59, 9, 10, 9, 116, 112, 32, 43, 61, 32, 97, 95, 102, 114, 97, 109, 101, 95, 100, 121, 110, 97, 109, 105, 99, 59, 9, 10, 9, 116, 112, 32, 47, 61, 32, 117, 95, 97, 116, 108, 97, 115, 95, 99, 111, 117, 110, 116, 95, 102, 108, 111, 97, 116, 59, 9, 10, 9, 118, 95, 116, 101, 120, 116, 117, 114, 101, 95, 99, 111, 111, 114, 100, 110, 97, 116, 101, 115, 32, 61, 32, 116, 112, 59, 10, 125, 10]);
Module['FS_createDataFile']('/assets/shaders', 'gui.vs.glsl', fileData18, true, true, false);
var fileData19 = [];
fileData19.push.apply(fileData19, [35, 118, 101, 114, 115, 105, 111, 110, 32, 51, 51, 48, 32, 99, 111, 114, 101, 10, 10, 105, 110, 32, 118, 101, 99, 50, 32, 118, 95, 116, 101, 120, 116, 117, 114, 101, 95, 99, 111, 111, 114, 100, 110, 97, 116, 101, 115, 59, 10, 10, 117, 110, 105, 102, 111, 114, 109, 32, 115, 97, 109, 112, 108, 101, 114, 50, 68, 32, 115, 97, 109, 112, 108, 101, 114, 59, 10, 10, 118, 111, 105, 100, 32, 109, 97, 105, 110, 40, 41, 10, 123, 10, 9, 103, 108, 95, 70, 114, 97, 103, 67, 111, 108, 111, 114, 32, 61, 32, 116, 101, 120, 116, 117, 114, 101, 40, 115, 97, 109, 112, 108, 101, 114, 44, 32, 118, 95, 116, 101, 120, 116, 117, 114, 101, 95, 99, 111, 111, 114, 100, 110, 97, 116, 101, 115, 41, 59, 10, 125]);
Module['FS_createDataFile']('/assets/shaders', 'bg.fs.glsl', fileData19, true, true, false);
var fileData20 = [];
fileData20.push.apply(fileData20, [35, 118, 101, 114, 115, 105, 111, 110, 32, 51, 51, 48, 32, 99, 111, 114, 101, 10, 10, 105, 110, 32, 118, 101, 99, 50, 32, 118, 95, 116, 101, 120, 116, 117, 114, 101, 95, 99, 111, 111, 114, 100, 110, 97, 116, 101, 115, 59, 10, 10, 117, 110, 105, 102, 111, 114, 109, 32, 115, 97, 109, 112, 108, 101, 114, 50, 68, 32, 115, 97, 109, 112, 108, 101, 114, 59, 10, 10, 118, 111, 105, 100, 32, 109, 97, 105, 110, 40, 41, 10, 123, 10, 9, 103, 108, 95, 70, 114, 97, 103, 67, 111, 108, 111, 114, 32, 61, 32, 116, 101, 120, 116, 117, 114, 101, 40, 115, 97, 109, 112, 108, 101, 114, 44, 32, 118, 95, 116, 101, 120, 116, 117, 114, 101, 95, 99, 111, 111, 114, 100, 110, 97, 116, 101, 115, 41, 59, 10, 125]);
Module['FS_createDataFile']('/assets/shaders', 'default.fs.glsl', fileData20, true, true, false);
var fileData21 = [];
fileData21.push.apply(fileData21, [35, 118, 101, 114, 115, 105, 111, 110, 32, 51, 51, 48, 32, 99, 111, 114, 101, 10, 10, 105, 110, 32, 118, 101, 99, 50, 32, 118, 95, 116, 101, 120, 116, 117, 114, 101, 95, 99, 111, 111, 114, 100, 110, 97, 116, 101, 115, 59, 10, 10, 117, 110, 105, 102, 111, 114, 109, 32, 115, 97, 109, 112, 108, 101, 114, 50, 68, 32, 115, 97, 109, 112, 108, 101, 114, 59, 10, 10, 118, 111, 105, 100, 32, 109, 97, 105, 110, 40, 41, 10, 123, 10, 9, 118, 101, 99, 52, 32, 114, 101, 115, 32, 61, 32, 116, 101, 120, 116, 117, 114, 101, 40, 115, 97, 109, 112, 108, 101, 114, 44, 32, 118, 95, 116, 101, 120, 116, 117, 114, 101, 95, 99, 111, 111, 114, 100, 110, 97, 116, 101, 115, 41, 59, 10, 9, 105, 102, 40, 114, 101, 115, 46, 97, 32, 60, 32, 48, 46, 50, 41, 32, 100, 105, 115, 99, 97, 114, 100, 59, 10, 9, 103, 108, 95, 70, 114, 97, 103, 67, 111, 108, 111, 114, 32, 61, 32, 114, 101, 115, 59, 10, 125]);
Module['FS_createDataFile']('/assets/shaders', 'gui.fs.glsl', fileData21, true, true, false);
var fileData22 = [];
fileData22.push.apply(fileData22, [35, 118, 101, 114, 115, 105, 111, 110, 32, 51, 51, 48, 32, 99, 111, 114, 101, 10, 10, 108, 97, 121, 111, 117, 116, 32, 40, 108, 111, 99, 97, 116, 105, 111, 110, 61, 48, 41, 32, 105, 110, 32, 118, 101, 99, 51, 32, 97, 95, 112, 111, 115, 105, 116, 105, 111, 110, 115, 59, 10, 108, 97, 121, 111, 117, 116, 32, 40, 108, 111, 99, 97, 116, 105, 111, 110, 61, 49, 41, 32, 105, 110, 32, 118, 101, 99, 50, 32, 97, 95, 116, 101, 120, 116, 117, 114, 101, 95, 99, 111, 111, 114, 100, 110, 97, 116, 101, 115, 59, 10, 10, 111, 117, 116, 32, 118, 101, 99, 50, 32, 118, 95, 116, 101, 120, 116, 117, 114, 101, 95, 99, 111, 111, 114, 100, 110, 97, 116, 101, 115, 59, 10, 10, 117, 110, 105, 102, 111, 114, 109, 32, 109, 97, 116, 52, 32, 117, 95, 112, 114, 111, 106, 101, 99, 116, 105, 111, 110, 95, 109, 97, 116, 114, 105, 120, 32, 61, 32, 109, 97, 116, 52, 40, 49, 46, 48, 41, 59, 10, 117, 110, 105, 102, 111, 114, 109, 32, 109, 97, 116, 52, 32, 117, 95, 116, 114, 97, 110, 115, 102, 111, 114, 109, 95, 109, 97, 116, 114, 105, 120, 32, 61, 32, 109, 97, 116, 52, 40, 49, 46, 48, 41, 59, 10, 10, 118, 111, 105, 100, 32, 109, 97, 105, 110, 40, 41, 10, 123, 10, 9, 103, 108, 95, 80, 111, 115, 105, 116, 105, 111, 110, 32, 61, 32, 117, 95, 112, 114, 111, 106, 101, 99, 116, 105, 111, 110, 95, 109, 97, 116, 114, 105, 120, 32, 42, 32, 117, 95, 116, 114, 97, 110, 115, 102, 111, 114, 109, 95, 109, 97, 116, 114, 105, 120, 32, 42, 32, 118, 101, 99, 52, 40, 97, 95, 112, 111, 115, 105, 116, 105, 111, 110, 115, 44, 32, 49, 41, 59, 10, 9, 118, 95, 116, 101, 120, 116, 117, 114, 101, 95, 99, 111, 111, 114, 100, 110, 97, 116, 101, 115, 32, 61, 32, 49, 54, 32, 42, 32, 97, 95, 116, 101, 120, 116, 117, 114, 101, 95, 99, 111, 111, 114, 100, 110, 97, 116, 101, 115, 59, 10, 125, 10]);
Module['FS_createDataFile']('/assets/shaders', 'default.vs.glsl', fileData22, true, true, false);
var fileData23 = [];
fileData23.push.apply(fileData23, [35, 118, 101, 114, 115, 105, 111, 110, 32, 51, 51, 48, 32, 99, 111, 114, 101, 10, 10, 108, 97, 121, 111, 117, 116, 32, 40, 108, 111, 99, 97, 116, 105, 111, 110, 61, 48, 41, 32, 105, 110, 32, 118, 101, 99, 51, 32, 97, 95, 112, 111, 115, 105, 116, 105, 111, 110, 115, 59, 10, 108, 97, 121, 111, 117, 116, 32, 40, 108, 111, 99, 97, 116, 105, 111, 110, 61, 49, 41, 32, 105, 110, 32, 118, 101, 99, 50, 32, 97, 95, 116, 101, 120, 116, 117, 114, 101, 95, 99, 111, 111, 114, 100, 110, 97, 116, 101, 115, 59, 10, 10, 111, 117, 116, 32, 118, 101, 99, 50, 32, 118, 95, 116, 101, 120, 116, 117, 114, 101, 95, 99, 111, 111, 114, 100, 110, 97, 116, 101, 115, 59, 10, 10, 117, 110, 105, 102, 111, 114, 109, 32, 109, 97, 116, 52, 32, 117, 95, 112, 114, 111, 106, 101, 99, 116, 105, 111, 110, 95, 109, 97, 116, 114, 105, 120, 32, 61, 32, 109, 97, 116, 52, 40, 49, 46, 48, 41, 59, 10, 117, 110, 105, 102, 111, 114, 109, 32, 109, 97, 116, 52, 32, 117, 95, 116, 114, 97, 110, 115, 102, 111, 114, 109, 95, 109, 97, 116, 114, 105, 120, 32, 61, 32, 109, 97, 116, 52, 40, 49, 46, 48, 41, 59, 10, 117, 110, 105, 102, 111, 114, 109, 32, 118, 101, 99, 52, 32, 117, 95, 115, 99, 97, 108, 101, 100, 32, 61, 32, 118, 101, 99, 52, 40, 49, 44, 32, 49, 44, 32, 49, 44, 32, 49, 41, 59, 10, 10, 118, 111, 105, 100, 32, 109, 97, 105, 110, 40, 41, 10, 123, 10, 9, 103, 108, 95, 80, 111, 115, 105, 116, 105, 111, 110, 32, 61, 32, 117, 95, 112, 114, 111, 106, 101, 99, 116, 105, 111, 110, 95, 109, 97, 116, 114, 105, 120, 32, 42, 32, 117, 95, 116, 114, 97, 110, 115, 102, 111, 114, 109, 95, 109, 97, 116, 114, 105, 120, 32, 42, 32, 117, 95, 115, 99, 97, 108, 101, 100, 32, 42, 32, 118, 101, 99, 52, 40, 97, 95, 112, 111, 115, 105, 116, 105, 111, 110, 115, 44, 32, 49, 41, 59, 10, 9, 118, 95, 116, 101, 120, 116, 117, 114, 101, 95, 99, 111, 111, 114, 100, 110, 97, 116, 101, 115, 32, 61, 32, 49, 54, 32, 32, 42, 32, 117, 95, 115, 99, 97, 108, 101, 100, 46, 120, 121, 32, 42, 32, 97, 95, 116, 101, 120, 116, 117, 114, 101, 95, 99, 111, 111, 114, 100, 110, 97, 116, 101, 115, 59, 32, 10, 125, 10]);
Module['FS_createDataFile']('/assets/shaders', 'bg.vs.glsl', fileData23, true, true, false);

    function processPackageData(arrayBuffer) {
      Module.finishedDataFileDownloads++;
      assert(arrayBuffer, 'Loading data file failed.');
      assert(arrayBuffer instanceof ArrayBuffer, 'bad input to processPackageData');
      var byteArray = new Uint8Array(arrayBuffer);
      var curr;
      
        // copy the entire loaded file into a spot in the heap. Files will refer to slices in that. They cannot be freed though
        // (we may be allocating before malloc is ready, during startup).
        var ptr = Module['getMemory'](byteArray.length);
        Module['HEAPU8'].set(byteArray, ptr);
        DataRequest.prototype.byteArray = Module['HEAPU8'].subarray(ptr, ptr+byteArray.length);
  
          var files = metadata.files;
          for (var i = 0; i < files.length; ++i) {
            DataRequest.prototype.requests[files[i].filename].onload();
          }
              Module['removeRunDependency']('datafile_bin/Web/index.data');

    };
    Module['addRunDependency']('datafile_bin/Web/index.data');
  
    if (!Module.preloadResults) Module.preloadResults = {};
  
      Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
      if (fetched) {
        processPackageData(fetched);
        fetched = null;
      } else {
        fetchedCallback = processPackageData;
      }
    
  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

 }
 loadPackage({"files": [{"filename": "/res/README", "start": 0, "end": 19, "audio": 0}, {"filename": "/res/textures/default_button.png", "start": 19, "end": 118454, "audio": 0}, {"filename": "/res/textures/settings_menu_bg.png", "start": 118454, "end": 124537, "audio": 0}, {"filename": "/res/textures/start_menu_bg.png", "start": 124537, "end": 127379, "audio": 0}, {"filename": "/res/textures/default.png", "start": 127379, "end": 127986, "audio": 0}, {"filename": "/res/textures/demo.png", "start": 127986, "end": 220308, "audio": 0}], "remote_package_size": 226179, "package_uuid": "4b5c9525-092b-4f70-a56a-1ec92c41e6ac"});

})();



// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}


// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)




// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  } else {
    return scriptDirectory + path;
  }
}

if (ENVIRONMENT_IS_NODE) {
  scriptDirectory = __dirname + '/';

  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
    ret = tryParseAsDataURI(filename);
    if (!ret) {
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    }
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', abort);

  Module['quit'] = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status) {
      quit(status);
    }
  }
} else
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  Module['read'] = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  Module['setWindowTitle'] = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
// If the user provided Module.print or printErr, use that. Otherwise,
// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
var out = Module['print'] || (typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null));
var err = Module['printErr'] || (typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || out));

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  abort('staticAlloc is no longer available at runtime; instead, perform static allocations at compile time (using makeStaticAlloc)');
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  if (end <= _emscripten_get_heap_size()) {
    HEAP32[DYNAMICTOP_PTR>>2] = end;
  } else {
    return 0;
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
        debugger;
    }
};



var jsCallStartIndex = 1;
var functionPointers = new Array(0);


// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {
  if (typeof sig === 'undefined') {
    err('warning: addFunction(): You should provide a wasm function signature string as a second argument. This is not necessary for asm.js and asm2wasm, but can be required for the LLVM wasm backend, so it is recommended for full portability.');
  }


  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';

}

function removeFunction(index) {

  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
}

var getTempRet0 = function() {
  return tempRet0;
}

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;




// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html





/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}




// Wasm globals

var wasmMemory;

// Potentially used for direct table calls.
var wasmTable;


//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk
var ALLOC_NONE = 3; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc,
    stackAlloc,
    dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}




/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  abort("this function has been removed - you should use UTF8ToString(ptr, maxBytesToRead) instead!");
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}


// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(u8Array, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (u8Array[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = u8Array[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (u8Array[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).');
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}


// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}





function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (y + ' [' + x + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}



// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}


var STATIC_BASE = 8,
    STACK_BASE = 14720,
    STACKTOP = STACK_BASE,
    STACK_MAX = 5257600,
    DYNAMIC_BASE = 5257600,
    DYNAMICTOP_PTR = 14688;

assert(STACK_BASE % 16 === 0, 'stack must start aligned');
assert(DYNAMIC_BASE % 16 === 0, 'heap must start aligned');



var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (INITIAL_TOTAL_MEMORY < TOTAL_STACK) err('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');







// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === INITIAL_TOTAL_MEMORY, 'provided buffer should be ' + INITIAL_TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(INITIAL_TOTAL_MEMORY);
  }
  assert(buffer.byteLength === INITIAL_TOTAL_MEMORY);
}
updateGlobalBufferViews();


HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}


  HEAP32[0] = 0x63736d65; /* 'emsc' */



// Endianness check (note: assumes compiler arch was little-endian)
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  FS.ignorePermissions = false;
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;



// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;






// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [];

function _say_hello(str){ console.log('hello ' + UTF8ToString(str)); }



// STATICTOP = STATIC_BASE + 14712;
/* global initializers */ /*__ATINIT__.push();*/


memoryInitializer = "data:application/octet-stream;base64,";





/* no memory initializer */
var tempDoublePtr = 14704
assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}

function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

// {{PRE_LIBRARY}}


  function ___assert_fail(condition, filename, line, func) {
      abort('Assertion failed: ' + UTF8ToString(condition) + ', at: ' + [filename ? UTF8ToString(filename) : 'unknown filename', line, func ? UTF8ToString(func) : 'unknown function']);
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        err('exception during cxa_free_exception: ' + e);
      }
    }var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function(adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var key in EXCEPTIONS.infos) {
          var ptr = +key; // the iteration key is a string, and if we throw this, it must be an integer as that is what we look for
          var adj = EXCEPTIONS.infos[ptr].adjusted;
          var len = adj.length;
          for (var i = 0; i < len; i++) {
            if (adj[i] === adjusted) {
              return ptr;
            }
          }
        }
        return adjusted;
      },addRef:function(ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function(ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function(ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted.push(thrown);
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: [ptr],
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

  function ___gxx_personality_v0() {
    }

  function ___lock() {}

  
    

  
  
  var PATH={splitPath:function(filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function(parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function(path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function(path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function(path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function(path) {
        return PATH.splitPath(path)[3];
      },join:function() {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function(l, r) {
        return PATH.normalize(l + '/' + r);
      }};
  
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else err('failed to set errno from JS');
      return value;
    }
  
  var PATH_FS={resolve:function() {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function(from, to) {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function() {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function(dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(19);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function(stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function(stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function(stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(6);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(5);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(11);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function(stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(6);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(5);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function(tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function(tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function(tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function(mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(1);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function(node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function(node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function(node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
        return;
      },resizeFileStorage:function(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function(node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function(parent, name) {
          throw FS.genericErrors[2];
        },mknod:function(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function(old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(39);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function(parent, name) {
          delete parent.contents[name];
        },rmdir:function(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(39);
          }
          delete parent.contents[name];
        },readdir:function(node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(22);
          }
          return node.link;
        }},stream_ops:{read:function(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function(stream, buffer, offset, length, position, canOwn) {
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(22);
          }
          return position;
        },allocate:function(stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function(stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(19);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(12);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function(stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(19);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function() {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function(mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function(mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function(name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function(mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function(mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
  
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
  
            index.openKeyCursor().onsuccess = function(event) {
              var cursor = event.target.result;
  
              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries });
              }
  
              entries[cursor.primaryKey] = { timestamp: cursor.key };
  
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },loadLocalEntry:function(path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function(path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function(path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function(store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function(store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function(store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function(src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function() {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process["binding"]("constants");
        // Node.js 4 compatibility: it has no namespaces for constants
        if (flags["fs"]) {
          flags = flags["fs"];
        }
        NODEFS.flagsForNodeMap = {
          "1024": flags["O_APPEND"],
          "64": flags["O_CREAT"],
          "128": flags["O_EXCL"],
          "0": flags["O_RDONLY"],
          "2": flags["O_RDWR"],
          "4096": flags["O_SYNC"],
          "512": flags["O_TRUNC"],
          "1": flags["O_WRONLY"]
        };
      },bufferFrom:function (arrayBuffer) {
        // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
        // Buffer.from before 4.5 was just a method inherited from Uint8Array
        // Buffer.alloc has been added with Buffer.from together, so check it instead
        return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(22);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // Node.js on Windows never represents permission bit 'x', so
            // propagate read bits to execute bits
            stat.mode = stat.mode | ((stat.mode & 292) >> 2);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(-e.errno); // syscall errnos are negated, node's are not
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsForNode:function(flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
          if (flags & k) {
            newFlags |= NODEFS.flagsForNodeMap[k];
            flags ^= k;
          }
        }
  
        if (!flags) {
          return newFlags;
        } else {
          throw new FS.ErrnoError(22);
        }
      },node_ops:{getattr:function(node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function(node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },unlink:function(parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },rmdir:function(parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },readdir:function(node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },symlink:function(parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },readlink:function(node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },read:function (stream, buffer, offset, length, position) {
          // Node.js < 6 compatibility: node errors on 0 length reads
          if (length === 0) return 0;
          try {
            return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(-e.errno);
          }
        },write:function (stream, buffer, offset, length, position) {
          try {
            return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(-e.errno);
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(-e.errno);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(22);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function(node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function(parent, name) {
          throw new FS.ErrnoError(2);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(1);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(1);
        },unlink:function(parent, name) {
          throw new FS.ErrnoError(1);
        },rmdir:function(parent, name) {
          throw new FS.ErrnoError(1);
        },readdir:function(node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function(parent, newName, oldPath) {
          throw new FS.ErrnoError(1);
        },readlink:function(node) {
          throw new FS.ErrnoError(1);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(5);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(22);
          }
          return position;
        }}};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function(e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function(path, opts) {
        path = PATH_FS.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(40);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(40);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function(node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function(parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function(parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function(parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function(node) {
        FS.hashRemoveNode(node);
      },isRoot:function(node) {
        return node === node.parent;
      },isMountpoint:function(node) {
        return !!node.mounted;
      },isFile:function(mode) {
        return (mode & 61440) === 32768;
      },isDir:function(mode) {
        return (mode & 61440) === 16384;
      },isLink:function(mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function(mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function(mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function(mode) {
        return (mode & 61440) === 4096;
      },isSocket:function(mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function(str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function(flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function(node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return 13;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return 13;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return 13;
        }
        return 0;
      },mayLookup:function(dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return 13;
        return 0;
      },mayCreate:function(dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 17;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function(dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 20;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 16;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 21;
          }
        }
        return 0;
      },mayOpen:function(node, flags) {
        if (!node) {
          return 2;
        }
        if (FS.isLink(node.mode)) {
          return 40;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 21;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function(fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(24);
      },getStream:function(fd) {
        return FS.streams[fd];
      },createStream:function(stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function(fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function(stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function() {
          throw new FS.ErrnoError(29);
        }},major:function(dev) {
        return ((dev) >> 8);
      },minor:function(dev) {
        return ((dev) & 0xff);
      },makedev:function(ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function(dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function(dev) {
        return FS.devices[dev];
      },getMounts:function(mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function(populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function(type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(16);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(16);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(20);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(22);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function(parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function(path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(22);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(1);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function(path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function(path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function(path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 17) throw e;
          }
        }
      },mkdev:function(path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function(oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(2);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(2);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(1);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function(old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(16);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(2);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(18);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(22);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(39);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(16);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(16);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(20);
        }
        return node.node_ops.readdir(node);
      },unlink:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(16);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function(path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(2);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(22);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function(path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(2);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(1);
        }
        return node.node_ops.getattr(node);
      },lstat:function(path) {
        return FS.stat(path, true);
      },chmod:function(path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function(path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function(fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        FS.chmod(stream.node, mode);
      },chown:function(path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function(path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function(fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function(path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(22);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(22);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function(fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(22);
        }
        FS.truncate(stream.node, len);
      },utime:function(path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function(path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(2);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(17);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(2);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(20);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            console.log("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function(stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function(stream) {
        return stream.fd === null;
      },llseek:function(stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(29);
        }
        if (whence != 0 /* SEEK_SET */ && whence != 1 /* SEEK_CUR */ && whence != 2 /* SEEK_END */) {
          throw new FS.ErrnoError(22);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function(stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(22);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(9);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(22);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(29);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function(stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(22);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(9);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(22);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(29);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function(stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(22);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(9);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(19);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(95);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function(stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(13);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(19);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function(stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function(stream) {
        return 0;
      },ioctl:function(stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(25);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function(path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function(path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function() {
        return FS.currentPath;
      },chdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(2);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(20);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function() {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function() {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else
        if (ENVIRONMENT_IS_NODE) {
          // for nodejs with or without crypto support included
          try {
            var crypto_module = require('crypto');
            // nodejs has crypto support
            random_device = function() { return crypto_module['randomBytes'](1)[0]; };
          } catch (e) {
            // nodejs doesn't have crypto support
          }
        } else
        {}
        if (!random_device) {
          // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
          random_device = function() { abort("no cryptographic support found for random_device. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };"); };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function() {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(9);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function() {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        var stdout = FS.open('/dev/stdout', 'w');
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function() {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          // Node.js compatibility: assigning on this.stack fails on Node 4 (but fixed on Node 8)
          if (this.stack) Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [2].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function() {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function(input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function() {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function(canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function(parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function(relative, base) {
        return PATH_FS.resolve(base, relative);
      },standardizePath:function(path) {
        return PATH.normalize(path);
      },findObject:function(path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function(path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function(parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function(parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function(parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function(parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function(parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(5);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(11);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(5);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function(parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function(obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(5);
        return success;
      },createLazyFile:function(parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(5);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(5);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function() {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function() {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function(dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(9);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function(func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -20;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)]=tempI64[0],HEAP32[(((buf)+(44))>>2)]=tempI64[1]);
        HEAP32[(((buf)+(48))>>2)]=4096;
        HEAP32[(((buf)+(52))>>2)]=stat.blocks;
        HEAP32[(((buf)+(56))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(76))>>2)]=0;
        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(80))>>2)]=tempI64[0],HEAP32[(((buf)+(84))>>2)]=tempI64[1]);
        return 0;
      },doMsync:function(addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function(path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function(path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -22;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function(path, buf, bufsize) {
        if (bufsize <= 0) return -22;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function(path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -22;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -13;
        }
        return 0;
      },doDup:function(path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function(varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function() {
        var ret = UTF8ToString(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function() {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(9);
        return stream;
      },get64:function() {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function() {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // Can't handle 64-bit integers
      if (!(offset_high == -1 && offset_low < 0) &&
          !(offset_high == 0 && offset_low >= 0)) {
        return -75;
      }
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((result)>>2)]=tempI64[0],HEAP32[(((result)+(4))>>2)]=tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -22;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        /* case 12: Currently in musl F_GETLK64 has same value as F_GETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */ {
          
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        /* case 13: Currently in musl F_SETLK64 has same value as F_SETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
        /* case 14: Currently in musl F_SETLKW64 has same value as F_SETLKW, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
          
          
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -22; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(22);
          return -1;
        default: {
          return -22;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -25;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -25;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -25;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -25;
          return -22; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -25;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -25;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
     

  function ___unlock() {}

  function _abort() {
      Module['abort']();
    }

   

   

  function _emscripten_get_heap_size() {
      return HEAP8.length;
    }

  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('Cannot enlarge memory arrays to size ' + requestedSize + ' bytes (OOM). Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + HEAP8.length + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
    }function _emscripten_resize_heap(requestedSize) {
      abortOnCannotGrowMemory(requestedSize);
    }

  
  
  
  var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function() {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function() {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function() {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function(func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) err('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function() {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
  
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function(canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false,
            majorVersion: 1,
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          // This check of existence of GL is here to satisfy Closure compiler, which yells if variable GL is referenced below but GL object is not
          // actually compiled in because application is not doing any GL operations. TODO: Ideally if GL is not being used, this function
          // Browser.createContext() should not even be emitted.
          if (typeof GL !== 'undefined') {
            contextHandle = GL.createContext(canvas, contextAttributes);
            if (contextHandle) {
              ctx = GL.getContext(contextHandle).GLctx;
            }
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function(canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function(lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = Browser.exitFullscreen;
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) {
              Browser.setFullscreenCanvasSize();
            } else {
              Browser.updateCanvasDimensions(canvas);
            }
          } else {
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
  
            if (Browser.resizeCanvas) {
              Browser.setWindowedCanvasSize();
            } else {
              Browser.updateCanvasDimensions(canvas);
            }
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function(lockPointer, resizeCanvas, vrDevice) {
          err('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');
          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
          }
          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      },exitFullscreen:function() {
        // This is workaround for chrome. Trying to exit from fullscreen
        // not in fullscreen state will cause "TypeError: Document not active"
        // in chrome. See https://github.com/emscripten-core/emscripten/pull/8236
        if (!Browser.isFullscreen) {
          return false;
        }
  
        var CFS = document['exitFullscreen'] ||
                  document['cancelFullScreen'] ||
                  document['mozCancelFullScreen'] ||
                  document['msExitFullscreen'] ||
                  document['webkitCancelFullScreen'] ||
            (function() {});
        CFS.apply(document, []);
        return true;
      },nextRAF:0,fakeRequestAnimationFrame:function(func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function(func) {
        if (typeof requestAnimationFrame === 'function') {
          requestAnimationFrame(func);
          return;
        }
        var RAF = Browser.fakeRequestAnimationFrame;
        RAF(func);
      },safeCallback:function(func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function() {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function() { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function(func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function(func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function(func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function(name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function(func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function(event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function(event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function(event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll':
            // 3 lines make up a step
            delta = event.detail / 3;
            break;
          case 'mousewheel':
            // 120 units make up a step
            delta = event.wheelDelta / 120;
            break;
          case 'wheel':
            delta = event.deltaY
            switch(event.deltaMode) {
              case 0:
                // DOM_DELTA_PIXEL: 100 pixels make up a step
                delta /= 100;
                break;
              case 1:
                // DOM_DELTA_LINE: 3 lines make up a step
                delta /= 3;
                break;
              case 2:
                // DOM_DELTA_PAGE: A page makes up 80 steps
                delta *= 80;
                break;
              default:
                throw 'unrecognized mouse wheel delta mode: ' + event.deltaMode;
            }
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function(event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
  
          // check if SDL is available
          if (typeof SDL != "undefined") {
            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
            // just add the mouse delta to the current absolut mouse position
            // FIXME: ideally this should be clamped against the canvas size and zero
            Browser.mouseX += Browser.mouseMovementX;
            Browser.mouseY += Browser.mouseMovementY;
          }
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
  
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            }
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function(url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function() {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function(width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function() {
        // check if SDL is available
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateCanvasDimensions(Module['canvas']);
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function() {
        // check if SDL is available
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateCanvasDimensions(Module['canvas']);
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function(canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function() {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (typeof setImmediate === 'undefined') {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          var Browser_setImmediate_messageHandler = function(event) {
            // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,
            // so check for both cases.
            if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          addEventListener("message", Browser_setImmediate_messageHandler, true);
          setImmediate = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          setImmediate(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }
  
  function _emscripten_get_now() { abort() }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        browserIterationFunc = function() {
          Module['dynCall_vi'](func, arg);
        };
      } else {
        browserIterationFunc = function() {
          Module['dynCall_v'](func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
  
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
        GL.newRenderingFrameStarted();
  
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          err('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }function _emscripten_set_main_loop_arg(func, arg, fps, simulateInfiniteLoop) {
      _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg);
    }


  
  var GL={counter:1,lastError:0,buffers:[],mappedBuffers:{},programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:{},currentContext:null,offscreenCanvases:{},timerQueriesEXT:[],currArrayBuffer:0,currElementArrayBuffer:0,byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},unpackAlignment:4,init:function() {
        GL.createLog2ceilLookup(GL.MAX_TEMP_BUFFER_SIZE);
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function(table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:256,miniTempBuffer:null,miniTempBufferViews:[0],MAX_TEMP_BUFFER_SIZE:2097152,numTempVertexBuffersPerSize:64,log2ceilLookup:null,createLog2ceilLookup:function(maxValue) {
        GL.log2ceilLookup = new Uint8Array(maxValue+1);
        var log2 = 0;
        var pow2 = 1;
        GL.log2ceilLookup[0] = 0;
        for (var i = 1; i <= maxValue; ++i) {
          if (i > pow2) {
            pow2 <<= 1;
            ++log2;
          }
          GL.log2ceilLookup[i] = log2;
        }
      },generateTempBuffers:function(quads, context) {
        var largestIndex = GL.log2ceilLookup[GL.MAX_TEMP_BUFFER_SIZE];
        context.tempVertexBufferCounters1 = [];
        context.tempVertexBufferCounters2 = [];
        context.tempVertexBufferCounters1.length = context.tempVertexBufferCounters2.length = largestIndex+1;
        context.tempVertexBuffers1 = [];
        context.tempVertexBuffers2 = [];
        context.tempVertexBuffers1.length = context.tempVertexBuffers2.length = largestIndex+1;
        context.tempIndexBuffers = [];
        context.tempIndexBuffers.length = largestIndex+1;
        for (var i = 0; i <= largestIndex; ++i) {
          context.tempIndexBuffers[i] = null; // Created on-demand
          context.tempVertexBufferCounters1[i] = context.tempVertexBufferCounters2[i] = 0;
          var ringbufferLength = GL.numTempVertexBuffersPerSize;
          context.tempVertexBuffers1[i] = [];
          context.tempVertexBuffers2[i] = [];
          var ringbuffer1 = context.tempVertexBuffers1[i];
          var ringbuffer2 = context.tempVertexBuffers2[i];
          ringbuffer1.length = ringbuffer2.length = ringbufferLength;
          for (var j = 0; j < ringbufferLength; ++j) {
            ringbuffer1[j] = ringbuffer2[j] = null; // Created on-demand
          }
        }
  
        if (quads) {
          // GL_QUAD indexes can be precalculated
          context.tempQuadIndexBuffer = GLctx.createBuffer();
          context.GLctx.bindBuffer(context.GLctx.ELEMENT_ARRAY_BUFFER, context.tempQuadIndexBuffer);
          var numIndexes = GL.MAX_TEMP_BUFFER_SIZE >> 1;
          var quadIndexes = new Uint16Array(numIndexes);
          var i = 0, v = 0;
          while (1) {
            quadIndexes[i++] = v;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+1;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+2;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+2;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+3;
            if (i >= numIndexes) break;
            v += 4;
          }
          context.GLctx.bufferData(context.GLctx.ELEMENT_ARRAY_BUFFER, quadIndexes, context.GLctx.STATIC_DRAW);
          context.GLctx.bindBuffer(context.GLctx.ELEMENT_ARRAY_BUFFER, null);
        }
      },getTempVertexBuffer:function getTempVertexBuffer(sizeBytes) {
        var idx = GL.log2ceilLookup[sizeBytes];
        var ringbuffer = GL.currentContext.tempVertexBuffers1[idx];
        var nextFreeBufferIndex = GL.currentContext.tempVertexBufferCounters1[idx];
        GL.currentContext.tempVertexBufferCounters1[idx] = (GL.currentContext.tempVertexBufferCounters1[idx]+1) & (GL.numTempVertexBuffersPerSize-1);
        var vbo = ringbuffer[nextFreeBufferIndex];
        if (vbo) {
          return vbo;
        }
        var prevVBO = GLctx.getParameter(GLctx.ARRAY_BUFFER_BINDING);
        ringbuffer[nextFreeBufferIndex] = GLctx.createBuffer();
        GLctx.bindBuffer(GLctx.ARRAY_BUFFER, ringbuffer[nextFreeBufferIndex]);
        GLctx.bufferData(GLctx.ARRAY_BUFFER, 1 << idx, GLctx.DYNAMIC_DRAW);
        GLctx.bindBuffer(GLctx.ARRAY_BUFFER, prevVBO);
        return ringbuffer[nextFreeBufferIndex];
      },getTempIndexBuffer:function getTempIndexBuffer(sizeBytes) {
        var idx = GL.log2ceilLookup[sizeBytes];
        var ibo = GL.currentContext.tempIndexBuffers[idx];
        if (ibo) {
          return ibo;
        }
        var prevIBO = GLctx.getParameter(GLctx.ELEMENT_ARRAY_BUFFER_BINDING);
        GL.currentContext.tempIndexBuffers[idx] = GLctx.createBuffer();
        GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, GL.currentContext.tempIndexBuffers[idx]);
        GLctx.bufferData(GLctx.ELEMENT_ARRAY_BUFFER, 1 << idx, GLctx.DYNAMIC_DRAW);
        GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, prevIBO);
        return GL.currentContext.tempIndexBuffers[idx];
      },newRenderingFrameStarted:function newRenderingFrameStarted() {
        if (!GL.currentContext) {
          return;
        }
        var vb = GL.currentContext.tempVertexBuffers1;
        GL.currentContext.tempVertexBuffers1 = GL.currentContext.tempVertexBuffers2;
        GL.currentContext.tempVertexBuffers2 = vb;
        vb = GL.currentContext.tempVertexBufferCounters1;
        GL.currentContext.tempVertexBufferCounters1 = GL.currentContext.tempVertexBufferCounters2;
        GL.currentContext.tempVertexBufferCounters2 = vb;
        var largestIndex = GL.log2ceilLookup[GL.MAX_TEMP_BUFFER_SIZE];
        for (var i = 0; i <= largestIndex; ++i) {
          GL.currentContext.tempVertexBufferCounters1[i] = 0;
        }
      },getSource:function(shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var len = length ? HEAP32[(((length)+(i*4))>>2)] : -1;
          source += UTF8ToString(HEAP32[(((string)+(i*4))>>2)], len < 0 ? undefined : len);
        }
        return source;
      },calcBufLength:function calcBufLength(size, type, stride, count) {
        if (stride > 0) {
          return count * stride;  // XXXvlad this is not exactly correct I don't think
        }
        var typeSize = GL.byteSizeByType[type - GL.byteSizeByTypeRoot];
        return size * typeSize * count;
      },usedTempBuffers:[],preDrawHandleClientVertexAttribBindings:function preDrawHandleClientVertexAttribBindings(count) {
        GL.resetBufferBinding = false;
  
        // TODO: initial pass to detect ranges we need to upload, might not need an upload per attrib
        for (var i = 0; i < GL.currentContext.maxVertexAttribs; ++i) {
          var cb = GL.currentContext.clientBuffers[i];
          if (!cb.clientside || !cb.enabled) continue;
  
          GL.resetBufferBinding = true;
  
          var size = GL.calcBufLength(cb.size, cb.type, cb.stride, count);
          var buf = GL.getTempVertexBuffer(size);
          GLctx.bindBuffer(GLctx.ARRAY_BUFFER, buf);
          GLctx.bufferSubData(GLctx.ARRAY_BUFFER,
                                   0,
                                   HEAPU8.subarray(cb.ptr, cb.ptr + size));
          cb.vertexAttribPointerAdaptor.call(GLctx, i, cb.size, cb.type, cb.normalized, cb.stride, 0);
        }
      },postDrawHandleClientVertexAttribBindings:function postDrawHandleClientVertexAttribBindings() {
        if (GL.resetBufferBinding) {
          GLctx.bindBuffer(GLctx.ARRAY_BUFFER, GL.buffers[GL.currArrayBuffer]);
        }
      },createContext:function(canvas, webGLContextAttributes) {
  
  
  
  
        var ctx = 
          (canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes));
  
  
        return ctx && GL.registerContext(ctx, webGLContextAttributes);
      },registerContext:function(ctx, webGLContextAttributes) {
        var handle = _malloc(8); // Make space on the heap to store GL context attributes that need to be accessible as shared between threads.
        var context = {
          handle: handle,
          attributes: webGLContextAttributes,
          version: webGLContextAttributes.majorVersion,
          GLctx: ctx
        };
  
  
  
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes.enableExtensionsByDefault === 'undefined' || webGLContextAttributes.enableExtensionsByDefault) {
          GL.initExtensions(context);
        }
  
        context.maxVertexAttribs = context.GLctx.getParameter(context.GLctx.MAX_VERTEX_ATTRIBS);
        context.clientBuffers = [];
        for (var i = 0; i < context.maxVertexAttribs; i++) {
          context.clientBuffers[i] = { enabled: false, clientside: false, size: 0, type: 0, normalized: 0, stride: 0, ptr: 0, vertexAttribPointerAdaptor: null };
        }
  
        GL.generateTempBuffers(false, context);
  
  
  
        return handle;
      },makeContextCurrent:function(contextHandle) {
  
        GL.currentContext = GL.contexts[contextHandle]; // Active Emscripten GL layer context object.
        Module.ctx = GLctx = GL.currentContext && GL.currentContext.GLctx; // Active WebGL context object.
        return !(contextHandle && !GLctx);
      },getContext:function(contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function(contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents === 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        _free(GL.contexts[contextHandle]);
        GL.contexts[contextHandle] = null;
      },initExtensions:function(context) {
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist.
  
        if (context.version < 2) {
          // Extension available from Firefox 26 and Google Chrome 30
          var instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
          if (instancedArraysExt) {
            GLctx['vertexAttribDivisor'] = function(index, divisor) { instancedArraysExt['vertexAttribDivisorANGLE'](index, divisor); };
            GLctx['drawArraysInstanced'] = function(mode, first, count, primcount) { instancedArraysExt['drawArraysInstancedANGLE'](mode, first, count, primcount); };
            GLctx['drawElementsInstanced'] = function(mode, count, type, indices, primcount) { instancedArraysExt['drawElementsInstancedANGLE'](mode, count, type, indices, primcount); };
          }
  
          // Extension available from Firefox 25 and WebKit
          var vaoExt = GLctx.getExtension('OES_vertex_array_object');
          if (vaoExt) {
            GLctx['createVertexArray'] = function() { return vaoExt['createVertexArrayOES'](); };
            GLctx['deleteVertexArray'] = function(vao) { vaoExt['deleteVertexArrayOES'](vao); };
            GLctx['bindVertexArray'] = function(vao) { vaoExt['bindVertexArrayOES'](vao); };
            GLctx['isVertexArray'] = function(vao) { return vaoExt['isVertexArrayOES'](vao); };
          }
  
          var drawBuffersExt = GLctx.getExtension('WEBGL_draw_buffers');
          if (drawBuffersExt) {
            GLctx['drawBuffers'] = function(n, bufs) { drawBuffersExt['drawBuffersWEBGL'](n, bufs); };
          }
        }
  
        GLctx.disjointTimerQueryExt = GLctx.getExtension("EXT_disjoint_timer_query");
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ // Khronos ratified WebGL extensions ordered by number (no debug extensions):
                                               "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "EXT_frag_depth",
                                               "WEBGL_draw_buffers", "ANGLE_instanced_arrays", "OES_texture_float_linear",
                                               "OES_texture_half_float_linear", "EXT_blend_minmax", "EXT_shader_texture_lod",
                                               // Community approved WebGL extensions ordered by number:
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_sRGB", "WEBGL_compressed_texture_etc1", "EXT_disjoint_timer_query",
                                               "WEBGL_compressed_texture_etc", "WEBGL_compressed_texture_astc", "EXT_color_buffer_float",
                                               "WEBGL_compressed_texture_s3tc_srgb", "EXT_disjoint_timer_query_webgl2"];
  
        function shouldEnableAutomatically(extension) {
          var ret = false;
          automaticallyEnabledExtensions.forEach(function(include) {
            if (extension.indexOf(include) != -1) {
              ret = true;
            }
          });
          return ret;
        }
  
        var exts = GLctx.getSupportedExtensions();
        if (exts && exts.length > 0) {
          GLctx.getSupportedExtensions().forEach(function(ext) {
            if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
              GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
            }
          });
        }
      },populateUniformTable:function(program) {
        var p = GL.programs[program];
        var ptable = GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1, // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
          maxUniformBlockNameLength: -1 // Lazily computed as well
        };
  
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, 0x8B86/*GL_ACTIVE_UNIFORMS*/);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // If we are dealing with an array, e.g. vec4 foo[3], strip off the array index part to canonicalize that "foo", "foo[]",
          // and "foo[0]" will mean the same. Loop below will populate foo[1] and foo[2].
          if (name.slice(-1) == ']') {
            name = name.slice(0, name.lastIndexOf('['));
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          if (loc) {
            var id = GL.getNewId(GL.uniforms);
            utable[name] = [u.size, id];
            GL.uniforms[id] = loc;
  
            for (var j = 1; j < u.size; ++j) {
              var n = name + '['+j+']';
              loc = GLctx.getUniformLocation(p, n);
              id = GL.getNewId(GL.uniforms);
  
              GL.uniforms[id] = loc;
            }
          }
        }
      }};function _glActiveTexture(x0) { GLctx['activeTexture'](x0) }

  function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _glBindBuffer(target, buffer) {
      if (target == GLctx.ARRAY_BUFFER) {
        GL.currArrayBuffer = buffer;
      } else if (target == GLctx.ELEMENT_ARRAY_BUFFER) {
        GL.currElementArrayBuffer = buffer;
      }
  
      GLctx.bindBuffer(target, GL.buffers[buffer]);
    }

  function _glBindTexture(target, texture) {
      GLctx.bindTexture(target, GL.textures[texture]);
    }

  function _glBindVertexArray(vao) {
      GLctx['bindVertexArray'](GL.vaos[vao]);
      var ibo = GLctx.getParameter(GLctx.ELEMENT_ARRAY_BUFFER_BINDING);
      GL.currElementArrayBuffer = ibo ? (ibo.name | 0) : 0;
    }

  function _glBufferData(target, size, data, usage) {
        // N.b. here first form specifies a heap subarray, second form an integer size, so the ?: code here is polymorphic. It is advised to avoid
        // randomly mixing both uses in calling code, to avoid any potential JS engine JIT issues.
        GLctx.bufferData(target, data ? HEAPU8.subarray(data, data+size) : size, usage);
    }

  function _glBufferSubData(target, offset, size, data) {
      GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data+size));
    }

  function _glClear(x0) { GLctx['clear'](x0) }

  function _glClearColor(x0, x1, x2, x3) { GLctx['clearColor'](x0, x1, x2, x3) }

  function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  function _glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function _glCullFace(x0) { GLctx['cullFace'](x0) }

  function _glDeleteShader(id) {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) { // glDeleteShader actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    }

  function _glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        if (!texture) continue; // GL spec: "glDeleteTextures silently ignores 0s and names that do not correspond to existing textures".
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }

  function _glDeleteVertexArrays(n, vaos) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((vaos)+(i*4))>>2)];
        GLctx['deleteVertexArray'](GL.vaos[id]);
        GL.vaos[id] = null;
      }
    }

  function _glDetachShader(program, shader) {
      GLctx.detachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _glDisableVertexAttribArray(index) {
      var cb = GL.currentContext.clientBuffers[index];
      cb.enabled = false;
      GLctx.disableVertexAttribArray(index);
    }

  function _glDrawArrays(mode, first, count) {
      // bind any client-side buffers
      GL.preDrawHandleClientVertexAttribBindings(first + count);
  
      GLctx.drawArrays(mode, first, count);
  
      GL.postDrawHandleClientVertexAttribBindings();
    }

  function _glDrawArraysInstanced(mode, first, count, primcount) {
      GLctx['drawArraysInstanced'](mode, first, count, primcount);
    }

  function _glEnable(x0) { GLctx['enable'](x0) }

  function _glEnableVertexAttribArray(index) {
      var cb = GL.currentContext.clientBuffers[index];
      cb.enabled = true;
      GLctx.enableVertexAttribArray(index);
    }

  
  function __glGenObject(n, buffers, createFunction, objectTable
      ) {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx[createFunction]();
        var id = buffer && GL.getNewId(objectTable);
        if (buffer) {
          buffer.name = id;
          objectTable[id] = buffer;
        } else {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        }
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }function _glGenBuffers(n, buffers) {
      __glGenObject(n, buffers, 'createBuffer', GL.buffers
        );
    }

  function _glGenTextures(n, textures) {
      __glGenObject(n, textures, 'createTexture', GL.textures
        );
    }

  function _glGenVertexArrays(n, arrays) {
      __glGenObject(n, arrays, 'createVertexArray', GL.vaos
        );
    }

  function _glGetAttribLocation(program, name) {
      return GLctx.getAttribLocation(GL.programs[program], UTF8ToString(name));
    }

  function _glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
  
      if (maxLength > 0 && infoLog) {
        var numBytesWrittenExclNull = stringToUTF8(log, infoLog, maxLength);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _glGetProgramiv(program, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      if (program >= GL.counter) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        return;
      }
  
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        HEAP32[((p)>>2)]=ptable.maxUniformLength;
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        if (ptable.maxAttributeLength == -1) {
          program = GL.programs[program];
          var numAttribs = GLctx.getProgramParameter(program, 0x8B89/*GL_ACTIVE_ATTRIBUTES*/);
          ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
          for (var i = 0; i < numAttribs; ++i) {
            var activeAttrib = GLctx.getActiveAttrib(program, i);
            ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxAttributeLength;
      } else if (pname == 0x8A35 /* GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH */) {
        if (ptable.maxUniformBlockNameLength == -1) {
          program = GL.programs[program];
          var numBlocks = GLctx.getProgramParameter(program, 0x8A36/*GL_ACTIVE_UNIFORM_BLOCKS*/);
          ptable.maxUniformBlockNameLength = 0;
          for (var i = 0; i < numBlocks; ++i) {
            var activeBlockName = GLctx.getActiveUniformBlockName(program, i);
            ptable.maxUniformBlockNameLength = Math.max(ptable.maxUniformBlockNameLength, activeBlockName.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxUniformBlockNameLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

  function _glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      if (maxLength > 0 && infoLog) {
        var numBytesWrittenExclNull = stringToUTF8(log, infoLog, maxLength);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _glGetShaderiv(shader, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B88) { // GL_SHADER_SOURCE_LENGTH
        var source = GLctx.getShaderSource(GL.shaders[shader]);
        var sourceLength = (source === null || source.length == 0) ? 0 : source.length + 1;
        HEAP32[((p)>>2)]=sourceLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

  function _glGetUniformLocation(program, name) {
      name = UTF8ToString(name);
  
      var arrayIndex = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name[name.length - 1] == ']') {
        var leftBrace = name.lastIndexOf('[');
        arrayIndex = name[leftBrace+1] != ']' ? parseInt(name.slice(leftBrace + 1)) : 0; // "index]", parseInt will ignore the ']' at the end; but treat "foo[]" as "foo[0]"
        name = name.slice(0, leftBrace);
      }
  
      var uniformInfo = GL.programInfos[program] && GL.programInfos[program].uniforms[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayIndex >= 0 && arrayIndex < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1] + arrayIndex;
      } else {
        return -1;
      }
    }

  function _glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.populateUniformTable(program);
    }

  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
  
  
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  
  
  function __computeUnpackAlignedImageSize(width, height, sizePerPixel, alignment) {
      function roundedToNextMultipleOf(x, y) {
        return (x + y - 1) & -y;
      }
      var plainRowSize = width * sizePerPixel;
      var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
      return height * alignedRowSize;
    }
  
  var __colorChannelsInGlTextureFormat={6402:1,6406:1,6407:3,6408:4,6409:1,6410:2,35904:3,35906:4};
  
  var __sizeOfGlTextureElementType={5121:1,5123:2,5125:4,5126:4,32819:2,32820:2,33635:2,34042:4,36193:2};function emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) {
      var sizePerPixel = __colorChannelsInGlTextureFormat[format] * __sizeOfGlTextureElementType[type];
      if (!sizePerPixel) {
        GL.recordError(0x0500); // GL_INVALID_ENUM
        return;
      }
      var bytes = __computeUnpackAlignedImageSize(width, height, sizePerPixel, GL.unpackAlignment);
      var end = pixels + bytes;
      switch(type) {
        case 0x1401 /* GL_UNSIGNED_BYTE */:
          return HEAPU8.subarray(pixels, end);
        case 0x1406 /* GL_FLOAT */:
          return HEAPF32.subarray(pixels>>2, end>>2);
        case 0x1405 /* GL_UNSIGNED_INT */:
        case 0x84FA /* GL_UNSIGNED_INT_24_8_WEBGL/GL_UNSIGNED_INT_24_8 */:
          return HEAPU32.subarray(pixels>>2, end>>2);
        case 0x1403 /* GL_UNSIGNED_SHORT */:
        case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
        case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
        case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
        case 0x8D61 /* GL_HALF_FLOAT_OES */:
          return HEAPU16.subarray(pixels>>1, end>>1);
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
      }
    }function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels ? emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) : null);
    }

  function _glTexParameteri(x0, x1, x2) { GLctx['texParameteri'](x0, x1, x2) }

  function _glUniform1f(location, v0) {
      GLctx.uniform1f(GL.uniforms[location], v0);
    }

  function _glUniform2f(location, v0, v1) {
      GLctx.uniform2f(GL.uniforms[location], v0, v1);
    }

  function _glUniform4f(location, v0, v1, v2, v3) {
      GLctx.uniform4f(GL.uniforms[location], v0, v1, v2, v3);
    }

  function _glUniformMatrix4fv(location, count, transpose, value) {
  
  
      if (16*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferViews[16*count-1];
        for (var i = 0; i < 16*count; i += 16) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
          view[i+4] = HEAPF32[(((value)+(4*i+16))>>2)];
          view[i+5] = HEAPF32[(((value)+(4*i+20))>>2)];
          view[i+6] = HEAPF32[(((value)+(4*i+24))>>2)];
          view[i+7] = HEAPF32[(((value)+(4*i+28))>>2)];
          view[i+8] = HEAPF32[(((value)+(4*i+32))>>2)];
          view[i+9] = HEAPF32[(((value)+(4*i+36))>>2)];
          view[i+10] = HEAPF32[(((value)+(4*i+40))>>2)];
          view[i+11] = HEAPF32[(((value)+(4*i+44))>>2)];
          view[i+12] = HEAPF32[(((value)+(4*i+48))>>2)];
          view[i+13] = HEAPF32[(((value)+(4*i+52))>>2)];
          view[i+14] = HEAPF32[(((value)+(4*i+56))>>2)];
          view[i+15] = HEAPF32[(((value)+(4*i+60))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(GL.uniforms[location], !!transpose, view);
    }

  function _glUseProgram(program) {
      GLctx.useProgram(GL.programs[program]);
    }

  function _glValidateProgram(program) {
      GLctx.validateProgram(GL.programs[program]);
    }

  function _glVertexAttribDivisor(index, divisor) {
      GLctx['vertexAttribDivisor'](index, divisor);
    }

  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      var cb = GL.currentContext.clientBuffers[index];
      if (!GL.currArrayBuffer) {
        cb.size = size;
        cb.type = type;
        cb.normalized = normalized;
        cb.stride = stride;
        cb.ptr = ptr;
        cb.clientside = true;
        cb.vertexAttribPointerAdaptor = function(index, size, type, normalized, stride, ptr) {
          this.vertexAttribPointer(index, size, type, normalized, stride, ptr);
        };
        return;
      }
      cb.clientside = false;
      GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
    }

  function _glViewport(x0, x1, x2, x3) { GLctx['viewport'](x0, x1, x2, x3) }

  
  
  
  function stringToNewUTF8(jsString) {
      var length = lengthBytesUTF8(jsString)+1;
      var cString = _malloc(length);
      stringToUTF8(jsString, cString, length);
      return cString;
    }function _glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret;
      switch(name_) {
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions();
          var gl_exts = [];
          for (var i = 0; i < exts.length; ++i) {
            gl_exts.push(exts[i]);
            gl_exts.push("GL_" + exts[i]);
          }
          ret = stringToNewUTF8(gl_exts.join(' '));
          break;
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x9245 /* UNMASKED_VENDOR_WEBGL */:
        case 0x9246 /* UNMASKED_RENDERER_WEBGL */:
          var s = GLctx.getParameter(name_);
          if (!s) {
            GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          }
          ret = stringToNewUTF8(s);
          break;
  
        case 0x1F02 /* GL_VERSION */:
          var glVersion = GLctx.getParameter(GLctx.VERSION);
          // return GLES version string corresponding to the version of the WebGL context
          {
            glVersion = 'OpenGL ES 2.0 (' + glVersion + ')';
          }
          ret = stringToNewUTF8(glVersion);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          var glslVersion = GLctx.getParameter(GLctx.SHADING_LANGUAGE_VERSION);
          // extract the version number 'N.M' from the string 'WebGL GLSL ES N.M ...'
          var ver_re = /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/;
          var ver_num = glslVersion.match(ver_re);
          if (ver_num !== null) {
            if (ver_num[1].length == 3) ver_num[1] = ver_num[1] + '0'; // ensure minor version has 2 digits
            glslVersion = 'OpenGL ES GLSL ES ' + ver_num[1] + ' (' + glslVersion + ')';
          }
          ret = stringToNewUTF8(glslVersion);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }var GLEW={isLinaroFork:1,extensions:null,error:{0:null,1:null,2:null,3:null,4:null,5:null,6:null,7:null,8:null},version:{1:null,2:null,3:null,4:null},errorStringConstantFromCode:function(error) {
        if (GLEW.isLinaroFork) {
          switch (error) {
            case 4:return "OpenGL ES lib expected, found OpenGL lib"; // GLEW_ERROR_NOT_GLES_VERSION
            case 5:return "OpenGL lib expected, found OpenGL ES lib"; // GLEW_ERROR_GLES_VERSION
            case 6:return "Missing EGL version"; // GLEW_ERROR_NO_EGL_VERSION
            case 7:return "EGL 1.1 and up are supported"; // GLEW_ERROR_EGL_VERSION_10_ONLY
            default:break;
          }
        }
  
        switch (error) {
          case 0:return "No error"; // GLEW_OK || GLEW_NO_ERROR
          case 1:return "Missing GL version"; // GLEW_ERROR_NO_GL_VERSION
          case 2:return "GL 1.1 and up are supported"; // GLEW_ERROR_GL_VERSION_10_ONLY
          case 3:return "GLX 1.2 and up are supported"; // GLEW_ERROR_GLX_VERSION_11_ONLY
          default:return null;
        }
      },errorString:function(error) {
        if (!GLEW.error[error]) {
          var string = GLEW.errorStringConstantFromCode(error);
          if (!string) {
            string = "Unknown error";
            error = 8; // prevent array from growing more than this
          }
          GLEW.error[error] = allocate(intArrayFromString(string), 'i8', ALLOC_NORMAL);
        }
        return GLEW.error[error];
      },versionStringConstantFromCode:function(name) {
        switch (name) {
          case 1:return "1.10.0"; // GLEW_VERSION
          case 2:return "1"; // GLEW_VERSION_MAJOR
          case 3:return "10"; // GLEW_VERSION_MINOR
          case 4:return "0"; // GLEW_VERSION_MICRO
          default:return null;
        }
      },versionString:function(name) {
        if (!GLEW.version[name]) {
          var string = GLEW.versionStringConstantFromCode(name);
          if (!string)
            return 0;
          GLEW.version[name] = allocate(intArrayFromString(string), 'i8', ALLOC_NORMAL);
        }
        return GLEW.version[name];
      },extensionIsSupported:function(name) {
        if (!GLEW.extensions) {
          GLEW.extensions = UTF8ToString(_glGetString(0x1F03)).split(' ');
        }
  
        if (GLEW.extensions.indexOf(name) != -1)
          return 1;
  
        // extensions from GLEmulations do not come unprefixed
        // so, try with prefix
        return (GLEW.extensions.indexOf("GL_" + name) != -1);
      }};function _glewGetErrorString(error) {
      return GLEW.errorString(error);
    }

  function _glewInit() { return 0; }

  
  var GLFW={Window:function(id, width, height, title, monitor, share) {
        this.id = id;
        this.x = 0;
        this.y = 0;
        this.fullscreen = false; // Used to determine if app in fullscreen mode
        this.storedX = 0; // Used to store X before fullscreen
        this.storedY = 0; // Used to store Y before fullscreen
        this.width = width;
        this.height = height;
        this.storedWidth = width; // Used to store width before fullscreen
        this.storedHeight = height; // Used to store height before fullscreen
        this.title = title;
        this.monitor = monitor;
        this.share = share;
        this.attributes = GLFW.hints;
        this.inputModes = {
          0x00033001:0x00034001, // GLFW_CURSOR (GLFW_CURSOR_NORMAL)
          0x00033002:0, // GLFW_STICKY_KEYS
          0x00033003:0, // GLFW_STICKY_MOUSE_BUTTONS
        };
        this.buttons = 0;
        this.keys = new Array();
        this.domKeys = new Array();
        this.shouldClose = 0;
        this.title = null;
        this.windowPosFunc = null; // GLFWwindowposfun
        this.windowSizeFunc = null; // GLFWwindowsizefun
        this.windowCloseFunc = null; // GLFWwindowclosefun
        this.windowRefreshFunc = null; // GLFWwindowrefreshfun
        this.windowFocusFunc = null; // GLFWwindowfocusfun
        this.windowIconifyFunc = null; // GLFWwindowiconifyfun
        this.framebufferSizeFunc = null; // GLFWframebuffersizefun
        this.mouseButtonFunc = null; // GLFWmousebuttonfun
        this.cursorPosFunc = null; // GLFWcursorposfun
        this.cursorEnterFunc = null; // GLFWcursorenterfun
        this.scrollFunc = null; // GLFWscrollfun
        this.dropFunc = null; // GLFWdropfun
        this.keyFunc = null; // GLFWkeyfun
        this.charFunc = null; // GLFWcharfun
        this.userptr = null;
      },WindowFromId:function(id) {
        if (id <= 0 || !GLFW.windows) return null;
        return GLFW.windows[id - 1];
      },joystickFunc:null,errorFunc:null,monitorFunc:null,active:null,windows:null,monitors:null,monitorString:null,versionString:null,initialTime:null,extensions:null,hints:null,defaultHints:{131073:0,131074:0,131075:1,131076:1,131077:1,135169:8,135170:8,135171:8,135172:8,135173:24,135174:8,135175:0,135176:0,135177:0,135178:0,135179:0,135180:0,135181:0,135182:0,135183:0,139265:196609,139266:1,139267:0,139268:0,139269:0,139270:0,139271:0,139272:0},DOMToGLFWKeyCode:function(keycode) {
        switch (keycode) {
          // these keycodes are only defined for GLFW3, assume they are the same for GLFW2
          case 0x20:return 32; // DOM_VK_SPACE -> GLFW_KEY_SPACE
          case 0xDE:return 39; // DOM_VK_QUOTE -> GLFW_KEY_APOSTROPHE
          case 0xBC:return 44; // DOM_VK_COMMA -> GLFW_KEY_COMMA
          case 0xAD:return 45; // DOM_VK_HYPHEN_MINUS -> GLFW_KEY_MINUS
          case 0xBD:return 45; // DOM_VK_MINUS -> GLFW_KEY_MINUS
          case 0xBE:return 46; // DOM_VK_PERIOD -> GLFW_KEY_PERIOD
          case 0xBF:return 47; // DOM_VK_SLASH -> GLFW_KEY_SLASH
          case 0x30:return 48; // DOM_VK_0 -> GLFW_KEY_0
          case 0x31:return 49; // DOM_VK_1 -> GLFW_KEY_1
          case 0x32:return 50; // DOM_VK_2 -> GLFW_KEY_2
          case 0x33:return 51; // DOM_VK_3 -> GLFW_KEY_3
          case 0x34:return 52; // DOM_VK_4 -> GLFW_KEY_4
          case 0x35:return 53; // DOM_VK_5 -> GLFW_KEY_5
          case 0x36:return 54; // DOM_VK_6 -> GLFW_KEY_6
          case 0x37:return 55; // DOM_VK_7 -> GLFW_KEY_7
          case 0x38:return 56; // DOM_VK_8 -> GLFW_KEY_8
          case 0x39:return 57; // DOM_VK_9 -> GLFW_KEY_9
          case 0x3B:return 59; // DOM_VK_SEMICOLON -> GLFW_KEY_SEMICOLON
          case 0x3D:return 61; // DOM_VK_EQUALS -> GLFW_KEY_EQUAL
          case 0xBB:return 61; // DOM_VK_EQUALS -> GLFW_KEY_EQUAL
          case 0x41:return 65; // DOM_VK_A -> GLFW_KEY_A
          case 0x42:return 66; // DOM_VK_B -> GLFW_KEY_B
          case 0x43:return 67; // DOM_VK_C -> GLFW_KEY_C
          case 0x44:return 68; // DOM_VK_D -> GLFW_KEY_D
          case 0x45:return 69; // DOM_VK_E -> GLFW_KEY_E
          case 0x46:return 70; // DOM_VK_F -> GLFW_KEY_F
          case 0x47:return 71; // DOM_VK_G -> GLFW_KEY_G
          case 0x48:return 72; // DOM_VK_H -> GLFW_KEY_H
          case 0x49:return 73; // DOM_VK_I -> GLFW_KEY_I
          case 0x4A:return 74; // DOM_VK_J -> GLFW_KEY_J
          case 0x4B:return 75; // DOM_VK_K -> GLFW_KEY_K
          case 0x4C:return 76; // DOM_VK_L -> GLFW_KEY_L
          case 0x4D:return 77; // DOM_VK_M -> GLFW_KEY_M
          case 0x4E:return 78; // DOM_VK_N -> GLFW_KEY_N
          case 0x4F:return 79; // DOM_VK_O -> GLFW_KEY_O
          case 0x50:return 80; // DOM_VK_P -> GLFW_KEY_P
          case 0x51:return 81; // DOM_VK_Q -> GLFW_KEY_Q
          case 0x52:return 82; // DOM_VK_R -> GLFW_KEY_R
          case 0x53:return 83; // DOM_VK_S -> GLFW_KEY_S
          case 0x54:return 84; // DOM_VK_T -> GLFW_KEY_T
          case 0x55:return 85; // DOM_VK_U -> GLFW_KEY_U
          case 0x56:return 86; // DOM_VK_V -> GLFW_KEY_V
          case 0x57:return 87; // DOM_VK_W -> GLFW_KEY_W
          case 0x58:return 88; // DOM_VK_X -> GLFW_KEY_X
          case 0x59:return 89; // DOM_VK_Y -> GLFW_KEY_Y
          case 0x5a:return 90; // DOM_VK_Z -> GLFW_KEY_Z
          case 0xDB:return 91; // DOM_VK_OPEN_BRACKET -> GLFW_KEY_LEFT_BRACKET
          case 0xDC:return 92; // DOM_VK_BACKSLASH -> GLFW_KEY_BACKSLASH
          case 0xDD:return 93; // DOM_VK_CLOSE_BRACKET -> GLFW_KEY_RIGHT_BRACKET
          case 0xC0:return 94; // DOM_VK_BACK_QUOTE -> GLFW_KEY_GRAVE_ACCENT
          
  
          case 0x1B:return 256; // DOM_VK_ESCAPE -> GLFW_KEY_ESCAPE
          case 0x0D:return 257; // DOM_VK_RETURN -> GLFW_KEY_ENTER
          case 0x09:return 258; // DOM_VK_TAB -> GLFW_KEY_TAB
          case 0x08:return 259; // DOM_VK_BACK -> GLFW_KEY_BACKSPACE
          case 0x2D:return 260; // DOM_VK_INSERT -> GLFW_KEY_INSERT
          case 0x2E:return 261; // DOM_VK_DELETE -> GLFW_KEY_DELETE
          case 0x27:return 262; // DOM_VK_RIGHT -> GLFW_KEY_RIGHT
          case 0x25:return 263; // DOM_VK_LEFT -> GLFW_KEY_LEFT
          case 0x28:return 264; // DOM_VK_DOWN -> GLFW_KEY_DOWN
          case 0x26:return 265; // DOM_VK_UP -> GLFW_KEY_UP
          case 0x21:return 266; // DOM_VK_PAGE_UP -> GLFW_KEY_PAGE_UP
          case 0x22:return 267; // DOM_VK_PAGE_DOWN -> GLFW_KEY_PAGE_DOWN
          case 0x24:return 268; // DOM_VK_HOME -> GLFW_KEY_HOME
          case 0x23:return 269; // DOM_VK_END -> GLFW_KEY_END
          case 0x14:return 280; // DOM_VK_CAPS_LOCK -> GLFW_KEY_CAPS_LOCK
          case 0x91:return 281; // DOM_VK_SCROLL_LOCK -> GLFW_KEY_SCROLL_LOCK
          case 0x90:return 282; // DOM_VK_NUM_LOCK -> GLFW_KEY_NUM_LOCK
          case 0x2C:return 283; // DOM_VK_SNAPSHOT -> GLFW_KEY_PRINT_SCREEN
          case 0x13:return 284; // DOM_VK_PAUSE -> GLFW_KEY_PAUSE
          case 0x70:return 290; // DOM_VK_F1 -> GLFW_KEY_F1
          case 0x71:return 291; // DOM_VK_F2 -> GLFW_KEY_F2
          case 0x72:return 292; // DOM_VK_F3 -> GLFW_KEY_F3
          case 0x73:return 293; // DOM_VK_F4 -> GLFW_KEY_F4
          case 0x74:return 294; // DOM_VK_F5 -> GLFW_KEY_F5
          case 0x75:return 295; // DOM_VK_F6 -> GLFW_KEY_F6
          case 0x76:return 296; // DOM_VK_F7 -> GLFW_KEY_F7
          case 0x77:return 297; // DOM_VK_F8 -> GLFW_KEY_F8
          case 0x78:return 298; // DOM_VK_F9 -> GLFW_KEY_F9
          case 0x79:return 299; // DOM_VK_F10 -> GLFW_KEY_F10
          case 0x7A:return 300; // DOM_VK_F11 -> GLFW_KEY_F11
          case 0x7B:return 301; // DOM_VK_F12 -> GLFW_KEY_F12
          case 0x7C:return 302; // DOM_VK_F13 -> GLFW_KEY_F13
          case 0x7D:return 303; // DOM_VK_F14 -> GLFW_KEY_F14
          case 0x7E:return 304; // DOM_VK_F15 -> GLFW_KEY_F15
          case 0x7F:return 305; // DOM_VK_F16 -> GLFW_KEY_F16
          case 0x80:return 306; // DOM_VK_F17 -> GLFW_KEY_F17
          case 0x81:return 307; // DOM_VK_F18 -> GLFW_KEY_F18
          case 0x82:return 308; // DOM_VK_F19 -> GLFW_KEY_F19
          case 0x83:return 309; // DOM_VK_F20 -> GLFW_KEY_F20
          case 0x84:return 310; // DOM_VK_F21 -> GLFW_KEY_F21
          case 0x85:return 311; // DOM_VK_F22 -> GLFW_KEY_F22
          case 0x86:return 312; // DOM_VK_F23 -> GLFW_KEY_F23
          case 0x87:return 313; // DOM_VK_F24 -> GLFW_KEY_F24
          case 0x88:return 314; // 0x88 (not used?) -> GLFW_KEY_F25
          case 0x60:return 320; // DOM_VK_NUMPAD0 -> GLFW_KEY_KP_0
          case 0x61:return 321; // DOM_VK_NUMPAD1 -> GLFW_KEY_KP_1
          case 0x62:return 322; // DOM_VK_NUMPAD2 -> GLFW_KEY_KP_2
          case 0x63:return 323; // DOM_VK_NUMPAD3 -> GLFW_KEY_KP_3
          case 0x64:return 324; // DOM_VK_NUMPAD4 -> GLFW_KEY_KP_4
          case 0x65:return 325; // DOM_VK_NUMPAD5 -> GLFW_KEY_KP_5
          case 0x66:return 326; // DOM_VK_NUMPAD6 -> GLFW_KEY_KP_6
          case 0x67:return 327; // DOM_VK_NUMPAD7 -> GLFW_KEY_KP_7
          case 0x68:return 328; // DOM_VK_NUMPAD8 -> GLFW_KEY_KP_8
          case 0x69:return 329; // DOM_VK_NUMPAD9 -> GLFW_KEY_KP_9
          case 0x6E:return 330; // DOM_VK_DECIMAL -> GLFW_KEY_KP_DECIMAL
          case 0x6F:return 331; // DOM_VK_DIVIDE -> GLFW_KEY_KP_DIVIDE
          case 0x6A:return 332; // DOM_VK_MULTIPLY -> GLFW_KEY_KP_MULTIPLY
          case 0x6D:return 333; // DOM_VK_SUBTRACT -> GLFW_KEY_KP_SUBTRACT
          case 0x6B:return 334; // DOM_VK_ADD -> GLFW_KEY_KP_ADD
          // case 0x0D:return 335; // DOM_VK_RETURN -> GLFW_KEY_KP_ENTER (DOM_KEY_LOCATION_RIGHT)
          // case 0x61:return 336; // DOM_VK_EQUALS -> GLFW_KEY_KP_EQUAL (DOM_KEY_LOCATION_RIGHT)
          case 0x10:return 340; // DOM_VK_SHIFT -> GLFW_KEY_LEFT_SHIFT
          case 0x11:return 341; // DOM_VK_CONTROL -> GLFW_KEY_LEFT_CONTROL
          case 0x12:return 342; // DOM_VK_ALT -> GLFW_KEY_LEFT_ALT
          case 0x5B:return 343; // DOM_VK_WIN -> GLFW_KEY_LEFT_SUPER
          // case 0x10:return 344; // DOM_VK_SHIFT -> GLFW_KEY_RIGHT_SHIFT (DOM_KEY_LOCATION_RIGHT)
          // case 0x11:return 345; // DOM_VK_CONTROL -> GLFW_KEY_RIGHT_CONTROL (DOM_KEY_LOCATION_RIGHT)
          // case 0x12:return 346; // DOM_VK_ALT -> GLFW_KEY_RIGHT_ALT (DOM_KEY_LOCATION_RIGHT)
          // case 0x5B:return 347; // DOM_VK_WIN -> GLFW_KEY_RIGHT_SUPER (DOM_KEY_LOCATION_RIGHT)
          case 0x5D:return 348; // DOM_VK_CONTEXT_MENU -> GLFW_KEY_MENU
          // XXX: GLFW_KEY_WORLD_1, GLFW_KEY_WORLD_2 what are these?
          default:return -1; // GLFW_KEY_UNKNOWN
        };
      },getModBits:function(win) {
        var mod = 0;
        if (win.keys[340]) mod |= 0x0001; // GLFW_MOD_SHIFT
        if (win.keys[341]) mod |= 0x0002; // GLFW_MOD_CONTROL
        if (win.keys[342]) mod |= 0x0004; // GLFW_MOD_ALT
        if (win.keys[343]) mod |= 0x0008; // GLFW_MOD_SUPER
        return mod;
      },onKeyPress:function(event) {
        if (!GLFW.active || !GLFW.active.charFunc) return;
        if (event.ctrlKey || event.metaKey) return;
  
        // correct unicode charCode is only available with onKeyPress event
        var charCode = event.charCode;
        if (charCode == 0 || (charCode >= 0x00 && charCode <= 0x1F)) return;
  
  
        dynCall_vii(GLFW.active.charFunc, GLFW.active.id, charCode);
      },onKeyChanged:function(keyCode, status) {
        if (!GLFW.active) return;
  
        var key = GLFW.DOMToGLFWKeyCode(keyCode);
        if (key == -1) return;
  
        var repeat = status && GLFW.active.keys[key];
        GLFW.active.keys[key] = status;
        GLFW.active.domKeys[keyCode] = status;
        if (!GLFW.active.keyFunc) return;
  
  
        if (repeat) status = 2; // GLFW_REPEAT
        dynCall_viiiii(GLFW.active.keyFunc, GLFW.active.id, key, keyCode, status, GLFW.getModBits(GLFW.active));
      },onGamepadConnected:function(event) {
        GLFW.refreshJoysticks();
      },onGamepadDisconnected:function(event) {
        GLFW.refreshJoysticks();
      },onKeydown:function(event) {
        GLFW.onKeyChanged(event.keyCode, 1); // GLFW_PRESS or GLFW_REPEAT
  
        // This logic comes directly from the sdl implementation. We cannot
        // call preventDefault on all keydown events otherwise onKeyPress will
        // not get called
        if (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */) {
          event.preventDefault();
        }
      },onKeyup:function(event) {
        GLFW.onKeyChanged(event.keyCode, 0); // GLFW_RELEASE
      },onBlur:function(event) {
        if (!GLFW.active) return;
  
        for (var i = 0; i < GLFW.active.domKeys.length; ++i) {
          if (GLFW.active.domKeys[i]) {
            GLFW.onKeyChanged(i, 0); // GLFW_RELEASE
          }
        }
      },onMousemove:function(event) {
        if (!GLFW.active) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorPosFunc) return;
  
  
        dynCall_vidd(GLFW.active.cursorPosFunc, GLFW.active.id, Browser.mouseX, Browser.mouseY);
      },DOMToGLFWMouseButton:function(event) {
        // DOM and glfw have different button codes.
        // See http://www.w3schools.com/jsref/event_button.asp.
        var eventButton = event['button'];
        if (eventButton > 0) {
          if (eventButton == 1) {
            eventButton = 2;
          } else {
            eventButton = 1;
          }
        }
        return eventButton;
      },onMouseenter:function(event) {
        if (!GLFW.active) return;
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorEnterFunc) return;
  
        dynCall_vii(GLFW.active.cursorEnterFunc, GLFW.active.id, 1);
      },onMouseleave:function(event) {
        if (!GLFW.active) return;
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorEnterFunc) return;
  
        dynCall_vii(GLFW.active.cursorEnterFunc, GLFW.active.id, 0);
      },onMouseButtonChanged:function(event, status) {
        if (!GLFW.active) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"]) return;
  
        var eventButton = GLFW.DOMToGLFWMouseButton(event);
  
        if (status == 1) { // GLFW_PRESS
          GLFW.active.buttons |= (1 << eventButton);
          try {
            event.target.setCapture();
          } catch (e) {}
        } else {  // GLFW_RELEASE
          GLFW.active.buttons &= ~(1 << eventButton);
        }
  
        if (!GLFW.active.mouseButtonFunc) return;
  
  
        dynCall_viiii(GLFW.active.mouseButtonFunc, GLFW.active.id, eventButton, status, GLFW.getModBits(GLFW.active));
      },onMouseButtonDown:function(event) {
        if (!GLFW.active) return;
        GLFW.onMouseButtonChanged(event, 1); // GLFW_PRESS
      },onMouseButtonUp:function(event) {
        if (!GLFW.active) return;
        GLFW.onMouseButtonChanged(event, 0); // GLFW_RELEASE
      },onMouseWheel:function(event) {
        // Note the minus sign that flips browser wheel direction (positive direction scrolls page down) to native wheel direction (positive direction is mouse wheel up)
        var delta = -Browser.getMouseWheelDelta(event);
        delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
        GLFW.wheelPos += delta;
  
        if (!GLFW.active || !GLFW.active.scrollFunc || event.target != Module['canvas']) return;
  
  
        var sx = 0;
        var sy = 0;
        if (event.type == 'mousewheel') {
          sx = event.wheelDeltaX;
          sy = event.wheelDeltaY;
        } else {
          sx = event.deltaX;
          sy = event.deltaY;
        }
  
        dynCall_vidd(GLFW.active.scrollFunc, GLFW.active.id, sx, sy);
  
        event.preventDefault();
      },onCanvasResize:function(width, height) {
        if (!GLFW.active) return;
  
        var resizeNeeded = true;
  
        // If the client is requesting fullscreen mode
        if (document["fullscreen"] || document["fullScreen"] || document["mozFullScreen"] || document["webkitIsFullScreen"]) {
          GLFW.active.storedX = GLFW.active.x;
          GLFW.active.storedY = GLFW.active.y;
          GLFW.active.storedWidth = GLFW.active.width;
          GLFW.active.storedHeight = GLFW.active.height;
          GLFW.active.x = GLFW.active.y = 0;
          GLFW.active.width = screen.width;
          GLFW.active.height = screen.height;
          GLFW.active.fullscreen = true;
  
        // If the client is reverting from fullscreen mode
        } else if (GLFW.active.fullscreen == true) {
          GLFW.active.x = GLFW.active.storedX;
          GLFW.active.y = GLFW.active.storedY;
          GLFW.active.width = GLFW.active.storedWidth;
          GLFW.active.height = GLFW.active.storedHeight;
          GLFW.active.fullscreen = false;
  
        // If the width/height values do not match current active window sizes
        } else if (GLFW.active.width != width || GLFW.active.height != height) {
            GLFW.active.width = width;
            GLFW.active.height = height;
        } else {
          resizeNeeded = false;
        }
  
        // If any of the above conditions were true, we need to resize the canvas
        if (resizeNeeded) {
          // resets the canvas size to counter the aspect preservation of Browser.updateCanvasDimensions
          Browser.setCanvasSize(GLFW.active.width, GLFW.active.height, true);
          // TODO: Client dimensions (clientWidth/clientHeight) vs pixel dimensions (width/height) of
          // the canvas should drive window and framebuffer size respectfully.
          GLFW.onWindowSizeChanged();
          GLFW.onFramebufferSizeChanged();
        }
      },onWindowSizeChanged:function() {
        if (!GLFW.active) return;
  
        if (!GLFW.active.windowSizeFunc) return;
  
  
        dynCall_viii(GLFW.active.windowSizeFunc, GLFW.active.id, GLFW.active.width, GLFW.active.height);
      },onFramebufferSizeChanged:function() {
        if (!GLFW.active) return;
  
        if (!GLFW.active.framebufferSizeFunc) return;
  
        dynCall_viii(GLFW.active.framebufferSizeFunc, GLFW.active.id, GLFW.active.width, GLFW.active.height);
      },requestFullscreen:function() {
        var RFS = Module["canvas"]['requestFullscreen'] ||
                  Module["canvas"]['mozRequestFullScreen'] ||
                  Module["canvas"]['webkitRequestFullScreen'] ||
                  (function() {});
        RFS.apply(Module["canvas"], []);
      },requestFullScreen:function() {
        err('GLFW.requestFullScreen() is deprecated. Please call GLFW.requestFullscreen instead.');
        GLFW.requestFullScreen = function() {
          return GLFW.requestFullscreen();
        }
        return GLFW.requestFullscreen();
      },exitFullscreen:function() {
        Browser.exitFullscreen();
      },cancelFullScreen:function() {
        err('GLFW.cancelFullScreen() is deprecated. Please call GLFW.exitFullscreen instead.');
        GLFW.cancelFullScreen = function() {
          return GLFW.exitFullscreen();
        }
        return GLFW.exitFullscreen();
      },getTime:function() {
        return _emscripten_get_now() / 1000;
      },setWindowTitle:function(winid, title) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        win.title = UTF8ToString(title);
        if (GLFW.active.id == win.id) {
          document.title = win.title;
        }
      },setJoystickCallback:function(cbfun) {
        GLFW.joystickFunc = cbfun;
        GLFW.refreshJoysticks();
      },joys:{},lastGamepadState:null,lastGamepadStateFrame:null,refreshJoysticks:function() {
        // Produce a new Gamepad API sample if we are ticking a new game frame, or if not using emscripten_set_main_loop() at all to drive animation.
        if (Browser.mainLoop.currentFrameNumber !== GLFW.lastGamepadStateFrame || !Browser.mainLoop.currentFrameNumber) {
          GLFW.lastGamepadState = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads : null);
          GLFW.lastGamepadStateFrame = Browser.mainLoop.currentFrameNumber;
  
          for (var joy = 0; joy < GLFW.lastGamepadState.length; ++joy) {
            var gamepad = GLFW.lastGamepadState[joy];
  
            if (gamepad) {
              if (!GLFW.joys[joy]) {
                console.log('glfw joystick connected:',joy);
                GLFW.joys[joy] = {
                  id: allocate(intArrayFromString(gamepad.id), 'i8', ALLOC_NORMAL),
                  buttonsCount: gamepad.buttons.length,
                  axesCount: gamepad.axes.length,
                  buttons: allocate(new Array(gamepad.buttons.length), 'i8', ALLOC_NORMAL),
                  axes: allocate(new Array(gamepad.axes.length*4), 'float', ALLOC_NORMAL)
                };
  
                if (GLFW.joystickFunc) {
                  dynCall_vii(GLFW.joystickFunc, joy, 0x00040001); // GLFW_CONNECTED
                }
              }
  
              var data = GLFW.joys[joy];
  
              for (var i = 0; i < gamepad.buttons.length;  ++i) {
                setValue(data.buttons + i, gamepad.buttons[i].pressed, 'i8');
              }
  
              for (var i = 0; i < gamepad.axes.length; ++i) {
                setValue(data.axes + i*4, gamepad.axes[i], 'float');
              }
            } else {
              if (GLFW.joys[joy]) {
                console.log('glfw joystick disconnected',joy);
  
                if (GLFW.joystickFunc) {
                  dynCall_vii(GLFW.joystickFunc, joy, 0x00040002); // GLFW_DISCONNECTED
                }
  
                _free(GLFW.joys[joy].id);
                _free(GLFW.joys[joy].buttons);
                _free(GLFW.joys[joy].axes);
  
                delete GLFW.joys[joy];
              }
            }
          }
        }
      },setKeyCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.keyFunc = cbfun;
      },setCharCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.charFunc = cbfun;
      },setMouseButtonCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.mouseButtonFunc = cbfun;
      },setCursorPosCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.cursorPosFunc = cbfun;
      },setScrollCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.scrollFunc = cbfun;
      },setDropCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.dropFunc = cbfun;
      },onDrop:function(event) {
        if (!GLFW.active || !GLFW.active.dropFunc) return;
        if (!event.dataTransfer || !event.dataTransfer.files || event.dataTransfer.files.length == 0) return;
  
        event.preventDefault();
  
  
        return false;
      },onDragover:function(event) {
        if (!GLFW.active || !GLFW.active.dropFunc) return;
  
        event.preventDefault();
        return false;
      },setWindowSizeCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowSizeFunc = cbfun;
       
      },setWindowCloseCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowCloseFunc = cbfun;
      },setWindowRefreshCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowRefreshFunc = cbfun;
      },onClickRequestPointerLock:function(e) {
        if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
          Module['canvas'].requestPointerLock();
          e.preventDefault();
        }
      },setInputMode:function(winid, mode, value) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        switch(mode) {
          case 0x00033001: { // GLFW_CURSOR
            switch(value) {
              case 0x00034001: { // GLFW_CURSOR_NORMAL
                win.inputModes[mode] = value;
                Module['canvas'].removeEventListener('click', GLFW.onClickRequestPointerLock, true);
                Module['canvas'].exitPointerLock();
                break;
              }
              case 0x00034002: { // GLFW_CURSOR_HIDDEN
                console.log("glfwSetInputMode called with GLFW_CURSOR_HIDDEN value not implemented.");
                break;
              }
              case 0x00034003: { // GLFW_CURSOR_DISABLED
                win.inputModes[mode] = value;
                Module['canvas'].addEventListener('click', GLFW.onClickRequestPointerLock, true);
                Module['canvas'].requestPointerLock();
                break;
              }
              default: {
                console.log("glfwSetInputMode called with unknown value parameter value: " + value + ".");
                break;
              }
            }
            break;
          }
          case 0x00033002: { // GLFW_STICKY_KEYS
            console.log("glfwSetInputMode called with GLFW_STICKY_KEYS mode not implemented.");
            break;
          }
          case 0x00033003: { // GLFW_STICKY_MOUSE_BUTTONS
            console.log("glfwSetInputMode called with GLFW_STICKY_MOUSE_BUTTONS mode not implemented.");
            break;
          }
          default: {
            console.log("glfwSetInputMode called with unknown mode parameter value: " + mode + ".");
            break;
          }
        }
      },getKey:function(winid, key) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return win.keys[key];
      },getMouseButton:function(winid, button) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return (win.buttons & (1 << button)) > 0;
      },getCursorPos:function(winid, x, y) {
        setValue(x, Browser.mouseX, 'double');
        setValue(y, Browser.mouseY, 'double');
      },getMousePos:function(winid, x, y) {
        setValue(x, Browser.mouseX, 'i32');
        setValue(y, Browser.mouseY, 'i32');
      },setCursorPos:function(winid, x, y) {
      },getWindowPos:function(winid, x, y) {
        var wx = 0;
        var wy = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          wx = win.x;
          wy = win.y;
        }
  
        setValue(x, wx, 'i32');
        setValue(y, wy, 'i32');
      },setWindowPos:function(winid, x, y) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.x = x;
        win.y = y;
      },getWindowSize:function(winid, width, height) {
        var ww = 0;
        var wh = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          ww = win.width;
          wh = win.height;
        }
  
        setValue(width, ww, 'i32');
        setValue(height, wh, 'i32');
      },setWindowSize:function(winid, width, height) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        if (GLFW.active.id == win.id) {
          if (width == screen.width && height == screen.height) {
            GLFW.requestFullscreen();
          } else {
            GLFW.exitFullscreen();
            Browser.setCanvasSize(width, height);
            win.width = width;
            win.height = height;
          }
        }
  
        if (!win.windowSizeFunc) return;
  
  
        dynCall_viii(win.windowSizeFunc, win.id, width, height);
      },createWindow:function(width, height, title, monitor, share) {
        var i, id;
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] !== null; i++);
        if (i > 0) throw "glfwCreateWindow only supports one window at time currently";
  
        // id for window
        id = i + 1;
  
        // not valid
        if (width <= 0 || height <= 0) return 0;
  
        if (monitor) {
          GLFW.requestFullscreen();
        } else {
          Browser.setCanvasSize(width, height);
        }
  
        // Create context when there are no existing alive windows
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] == null; i++);
        if (i == GLFW.windows.length) {
          var contextAttributes = {
            antialias: (GLFW.hints[0x0002100D] > 1), // GLFW_SAMPLES
            depth: (GLFW.hints[0x00021005] > 0),     // GLFW_DEPTH_BITS
            stencil: (GLFW.hints[0x00021006] > 0),   // GLFW_STENCIL_BITS
            alpha: (GLFW.hints[0x00021004] > 0)      // GLFW_ALPHA_BITS 
          }
          Module.ctx = Browser.createContext(Module['canvas'], true, true, contextAttributes);
        }
  
        // If context creation failed, do not return a valid window
        if (!Module.ctx) return 0;
  
        // Get non alive id
        var win = new GLFW.Window(id, width, height, title, monitor, share);
  
        // Set window to array
        if (id - 1 == GLFW.windows.length) {
          GLFW.windows.push(win);
        } else {
          GLFW.windows[id - 1] = win;
        }
  
        GLFW.active = win;
        return win.id;
      },destroyWindow:function(winid) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        if (win.windowCloseFunc)
          dynCall_vi(win.windowCloseFunc, win.id);
  
        GLFW.windows[win.id - 1] = null;
        if (GLFW.active.id == win.id)
          GLFW.active = null;
  
        // Destroy context when no alive windows
        for (var i = 0; i < GLFW.windows.length; i++)
          if (GLFW.windows[i] !== null) return;
  
        Module.ctx = Browser.destroyContext(Module['canvas'], true, true);
      },swapBuffers:function(winid) {
      },GLFW2ParamToGLFW3Param:function(param) {
        var table = {
          0x00030001:0, // GLFW_MOUSE_CURSOR
          0x00030002:0, // GLFW_STICKY_KEYS
          0x00030003:0, // GLFW_STICKY_MOUSE_BUTTONS
          0x00030004:0, // GLFW_SYSTEM_KEYS
          0x00030005:0, // GLFW_KEY_REPEAT
          0x00030006:0, // GLFW_AUTO_POLL_EVENTS
          0x00020001:0, // GLFW_OPENED
          0x00020002:0, // GLFW_ACTIVE
          0x00020003:0, // GLFW_ICONIFIED
          0x00020004:0, // GLFW_ACCELERATED
          0x00020005:0x00021001, // GLFW_RED_BITS
          0x00020006:0x00021002, // GLFW_GREEN_BITS
          0x00020007:0x00021003, // GLFW_BLUE_BITS
          0x00020008:0x00021004, // GLFW_ALPHA_BITS
          0x00020009:0x00021005, // GLFW_DEPTH_BITS
          0x0002000A:0x00021006, // GLFW_STENCIL_BITS
          0x0002000B:0x0002100F, // GLFW_REFRESH_RATE
          0x0002000C:0x00021007, // GLFW_ACCUM_RED_BITS
          0x0002000D:0x00021008, // GLFW_ACCUM_GREEN_BITS
          0x0002000E:0x00021009, // GLFW_ACCUM_BLUE_BITS
          0x0002000F:0x0002100A, // GLFW_ACCUM_ALPHA_BITS
          0x00020010:0x0002100B, // GLFW_AUX_BUFFERS
          0x00020011:0x0002100C, // GLFW_STEREO
          0x00020012:0, // GLFW_WINDOW_NO_RESIZE
          0x00020013:0x0002100D, // GLFW_FSAA_SAMPLES
          0x00020014:0x00022002, // GLFW_OPENGL_VERSION_MAJOR
          0x00020015:0x00022003, // GLFW_OPENGL_VERSION_MINOR
          0x00020016:0x00022006, // GLFW_OPENGL_FORWARD_COMPAT
          0x00020017:0x00022007, // GLFW_OPENGL_DEBUG_CONTEXT
          0x00020018:0x00022008, // GLFW_OPENGL_PROFILE
        };
        return table[param];
      }};function _glfwCreateWindow(width, height, title, monitor, share) {
      return GLFW.createWindow(width, height, title, monitor, share);
    }

  function _glfwGetCursorPos(winid, x, y) {
      GLFW.getCursorPos(winid, x, y);
    }

  function _glfwGetPrimaryMonitor() {
      return 1;
    }

  function _glfwGetTime() {
      return GLFW.getTime() - GLFW.initialTime;
    }

  function _glfwInit() {
      if (GLFW.windows) return 1; // GL_TRUE
  
      GLFW.initialTime = GLFW.getTime();
      GLFW.hints = GLFW.defaultHints;
      GLFW.windows = new Array()
      GLFW.active = null;
  
      window.addEventListener("gamepadconnected", GLFW.onGamepadConnected, true);
      window.addEventListener("gamepaddisconnected", GLFW.onGamepadDisconnected, true);
      window.addEventListener("keydown", GLFW.onKeydown, true);
      window.addEventListener("keypress", GLFW.onKeyPress, true);
      window.addEventListener("keyup", GLFW.onKeyup, true);
      window.addEventListener("blur", GLFW.onBlur, true);
      Module["canvas"].addEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].addEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].addEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].addEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].addEventListener('mousewheel', GLFW.onMouseWheel, true);
      Module["canvas"].addEventListener('mouseenter', GLFW.onMouseenter, true);
      Module["canvas"].addEventListener('mouseleave', GLFW.onMouseleave, true);
      Module["canvas"].addEventListener('drop', GLFW.onDrop, true);
      Module["canvas"].addEventListener('dragover', GLFW.onDragover, true);
  
      Browser.resizeListeners.push(function(width, height) {
         GLFW.onCanvasResize(width, height);
      });
      return 1; // GL_TRUE
    }

  function _glfwMakeContextCurrent(winid) {}

  function _glfwPollEvents() {}

  function _glfwSetCharCallback(winid, cbfun) {
      GLFW.setCharCallback(winid, cbfun);
    }

  function _glfwSetCursorEnterCallback(winid, cbfun) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return;
      win.cursorEnterFunc = cbfun;
    }

  function _glfwSetCursorPosCallback(winid, cbfun) {
      GLFW.setCursorPosCallback(winid, cbfun);
    }

  function _glfwSetErrorCallback(cbfun) {
      GLFW.errorFunc = cbfun;
    }

  function _glfwSetFramebufferSizeCallback(winid, cbfun) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return;
      win.framebufferSizeFunc = cbfun;
    }

  function _glfwSetInputMode(winid, mode, value) {
      GLFW.setInputMode(winid, mode, value);
    }

  function _glfwSetKeyCallback(winid, cbfun) {
      GLFW.setKeyCallback(winid, cbfun);
    }

  function _glfwSetMouseButtonCallback(winid, cbfun) {
      GLFW.setMouseButtonCallback(winid, cbfun);
    }

  function _glfwSetScrollCallback(winid, cbfun) {
      GLFW.setScrollCallback(winid, cbfun);
    }

  function _glfwSetWindowCloseCallback(winid, cbfun) {
      GLFW.setWindowCloseCallback(winid, cbfun);
    }

  function _glfwSetWindowPosCallback(winid, cbfun) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return;
      win.windowPosFunc = cbfun;
    }

  function _glfwSetWindowShouldClose(winid, value) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return;
      win.shouldClose = value;
    }

  function _glfwSetWindowSizeCallback(winid, cbfun) {
      GLFW.setWindowSizeCallback(winid, cbfun);
    }

  function _glfwSetWindowSizeLimits(winid, minwidth, minheight, maxwidth, maxheight) {}

  function _glfwSwapBuffers(winid) {
      GLFW.swapBuffers(winid);
    }

  function _glfwTerminate() {
      window.removeEventListener("gamepadconnected", GLFW.onGamepadConnected, true);
      window.removeEventListener("gamepaddisconnected", GLFW.onGamepadDisconnected, true);
      window.removeEventListener("keydown", GLFW.onKeydown, true);
      window.removeEventListener("keypress", GLFW.onKeyPress, true);
      window.removeEventListener("keyup", GLFW.onKeyup, true);
      window.removeEventListener("blur", GLFW.onBlur, true);
      Module["canvas"].removeEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].removeEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].removeEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].removeEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].removeEventListener('mousewheel', GLFW.onMouseWheel, true);
      Module["canvas"].removeEventListener('mouseenter', GLFW.onMouseenter, true);
      Module["canvas"].removeEventListener('mouseleave', GLFW.onMouseleave, true);
      Module["canvas"].removeEventListener('drop', GLFW.onDrop, true);
      Module["canvas"].removeEventListener('dragover', GLFW.onDragover, true);
  
  
      Module["canvas"].width = Module["canvas"].height = 1;
      GLFW.windows = null;
      GLFW.active = null;
    }

  function _glfwWindowHint(target, hint) {
      GLFW.hints[target] = hint;
    }

  function _glfwWindowShouldClose(winid) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return 0;
      return win.shouldClose;
    }



  function _llvm_trap() {
      abort('trap!');
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
    }
  
   

   

   

FS.staticInit();Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { err("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."); Module["requestFullScreen"] = Module["requestFullscreen"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof performance === 'object' && performance && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
var GLctx; GL.init();
var ASSERTIONS = true;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


// ASM_LIBRARY EXTERN PRIMITIVES: Math_imul,Math_clz32,Int8Array,Int32Array


var debug_table_ii = ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZNKSt3__210__function6__funcIZN23MainMenuBackgroundLayer7OnEventERK5EventE3__0NS_9allocatorIS6_EEFbS5_EE7__cloneEv", "0", "0", "0", "0", "0", "__ZNKSt3__210__function6__funcIZN23MainMenuBackgroundLayer7OnEventERK5EventE3__0NS_9allocatorIS6_EEFbS5_EE11target_typeEv", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EE7__cloneEv", "0", "0", "0", "0", "0", "__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EE11target_typeEv", "0", "0", "__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EE7__cloneEv", "0", "0", "0", "0", "0", "__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EE11target_typeEv", "0", "0", "__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EE7__cloneEv", "0", "0", "0", "0", "0", "__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EE11target_typeEv", "0", "0", "__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EE7__cloneEv", "0", "0", "0", "0", "0", "__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EE11target_typeEv", "0", "0", "__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EE7__cloneEv", "0", "0", "0", "0", "0", "__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EE11target_typeEv", "0", "0", "__ZNKSt3__210__function6__funcIZN16MainMenuGUILayer7OnEventERK5EventE4__16NS_9allocatorIS6_EEFbS5_EE7__cloneEv", "0", "0", "0", "0", "0", "__ZNKSt3__210__function6__funcIZN16MainMenuGUILayer7OnEventERK5EventE4__16NS_9allocatorIS6_EEFbS5_EE11target_typeEv", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZNKSt3__210__function6__funcIZN27SettingsMainBackgroundLayer7OnEventERK5EventE4__17NS_9allocatorIS6_EEFbS5_EE7__cloneEv", "0", "0", "0", "0", "0", "__ZNKSt3__210__function6__funcIZN27SettingsMainBackgroundLayer7OnEventERK5EventE4__17NS_9allocatorIS6_EEFbS5_EE11target_typeEv", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EE7__cloneEv", "0", "0", "0", "0", "0", "__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EE11target_typeEv", "0", "0", "__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EE7__cloneEv", "0", "0", "0", "0", "0", "__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EE11target_typeEv", "0", "0", "__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EE7__cloneEv", "0", "0", "0", "0", "0", "__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EE11target_typeEv", "0", "0", "__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EE7__cloneEv", "0", "0", "0", "0", "0", "__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EE11target_typeEv", "0", "0", "__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EE7__cloneEv", "0", "0", "0", "0", "0", "__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EE11target_typeEv", "0", "0", "__ZNKSt3__210__function6__funcIZN20SettingsMainGUILayer7OnEventERK5EventE4__39NS_9allocatorIS6_EEFbS5_EE7__cloneEv", "0", "0", "0", "0", "0", "__ZNKSt3__210__function6__funcIZN20SettingsMainGUILayer7OnEventERK5EventE4__39NS_9allocatorIS6_EEFbS5_EE11target_typeEv", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZNKSt3__210__function6__funcIZ4mainE3__0NS_9allocatorIS2_EEFvvEE7__cloneEv", "0", "0", "0", "0", "0", "__ZNKSt3__210__function6__funcIZ4mainE3__0NS_9allocatorIS2_EEFvvEE11target_typeEv", "0", "0", "0", "0", "0", "0", "0", "__ZL15stbi__stdio_eofPv", "___stdio_close", "0", "0", "0", "0", "0", "0", "__ZNKSt3__217bad_function_call4whatEv", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZNKSt9exception4whatEv", "0", "0", "__ZNKSt11logic_error4whatEv", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iidiiiifmt_fp
var debug_table_iii = ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZNSt3__210__function6__funcIZN23MainMenuBackgroundLayer7OnEventERK5EventE3__0NS_9allocatorIS6_EEFbS5_EEclES5_", "__ZNKSt3__210__function6__funcIZN23MainMenuBackgroundLayer7OnEventERK5EventE3__0NS_9allocatorIS6_EEFbS5_EE6targetERKSt9type_info", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EEclES6_", "__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EE6targetERKSt9type_info", "0", "0", "0", "0", "0", "0", "0", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EEclES6_", "__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EE6targetERKSt9type_info", "0", "0", "0", "0", "0", "0", "0", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EEclES6_", "__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EE6targetERKSt9type_info", "0", "0", "0", "0", "0", "0", "0", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EEclES6_", "__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EE6targetERKSt9type_info", "0", "0", "0", "0", "0", "0", "0", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EEclES6_", "__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EE6targetERKSt9type_info", "0", "0", "0", "0", "0", "0", "0", "__ZNSt3__210__function6__funcIZN16MainMenuGUILayer7OnEventERK5EventE4__16NS_9allocatorIS6_EEFbS5_EEclES5_", "__ZNKSt3__210__function6__funcIZN16MainMenuGUILayer7OnEventERK5EventE4__16NS_9allocatorIS6_EEFbS5_EE6targetERKSt9type_info", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZNSt3__210__function6__funcIZN27SettingsMainBackgroundLayer7OnEventERK5EventE4__17NS_9allocatorIS6_EEFbS5_EEclES5_", "__ZNKSt3__210__function6__funcIZN27SettingsMainBackgroundLayer7OnEventERK5EventE4__17NS_9allocatorIS6_EEFbS5_EE6targetERKSt9type_info", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EEclES6_", "__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EE6targetERKSt9type_info", "0", "0", "0", "0", "0", "0", "0", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EEclES6_", "__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EE6targetERKSt9type_info", "0", "0", "0", "0", "0", "0", "0", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EEclES6_", "__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EE6targetERKSt9type_info", "0", "0", "0", "0", "0", "0", "0", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EEclES6_", "__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EE6targetERKSt9type_info", "0", "0", "0", "0", "0", "0", "0", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EEclES6_", "__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EE6targetERKSt9type_info", "0", "0", "0", "0", "0", "0", "0", "__ZNSt3__210__function6__funcIZN20SettingsMainGUILayer7OnEventERK5EventE4__39NS_9allocatorIS6_EEFbS5_EEclES5_", "__ZNKSt3__210__function6__funcIZN20SettingsMainGUILayer7OnEventERK5EventE4__39NS_9allocatorIS6_EEFbS5_EE6targetERKSt9type_info", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZNKSt3__210__function6__funcIZ4mainE3__0NS_9allocatorIS2_EEFvvEE6targetERKSt9type_info", "0", "0", "0", "__ZNK15SettingsConfigs13GetFieldValueEt", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iiiistbi__stdio_readPvPci", "0", "0", "0", "___stdio_write", "0", "___stdout_write", "_sn_write", "0", "0", "0", "0", "0", "0", "0", "0", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "___stdio_read
var debug_table_iiiiistdio_seek", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iiiiiistbi__resample_row_hv_2PhS_S_ii", "__ZL14resample_row_1PhS_S_ii", "__ZL22stbi__resample_row_v_2PhS_S_ii", "__ZL22stbi__resample_row_h_2PhS_S_ii", "__ZL26stbi__resample_row_genericPhS_S_ii
var debug_table_v = ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "___cxa_pure_virtualdefault_terminate_handlerv", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZZN16MainMenuGUILayerC1EvEN3__18__invokeEv", "__ZZN16MainMenuGUILayerC1EvEN3__28__invokeEv", "__ZZN16MainMenuGUILayerC1EvEN3__38__invokeEv", "__ZZN16MainMenuGUILayerC1EvEN3__48__invokeEv", "__ZZN16MainMenuGUILayerC1EvEN3__58__invokeEv", "__ZZN16MainMenuGUILayerC1EvEN3__68__invokeEv", "__ZZN16MainMenuGUILayerC1EvEN3__78__invokeEv", "__ZZN16MainMenuGUILayerC1EvEN3__88__invokeEv", "__ZZN16MainMenuGUILayerC1EvEN3__98__invokeEv", "__ZZN16MainMenuGUILayerC1EvEN4__108__invokeEv", "__ZZN16MainMenuGUILayerC1EvEN4__118__invokeEv", "__ZZN16MainMenuGUILayerC1EvEN4__128__invokeEv", "__ZZN16MainMenuGUILayerC1EvEN4__138__invokeEv", "__ZZN16MainMenuGUILayerC1EvEN4__148__invokeEv", "__ZZN16MainMenuGUILayerC1EvEN4__158__invokeEv", "__ZZN20SettingsMainGUILayerC1EvEN4__188__invokeEv", "__ZZN20SettingsMainGUILayerC1EvEN4__198__invokeEv", "__ZZN20SettingsMainGUILayerC1EvEN4__208__invokeEv", "__ZZN20SettingsMainGUILayerC1EvEN4__218__invokeEv", "__ZZN20SettingsMainGUILayerC1EvEN4__228__invokeEv", "__ZZN20SettingsMainGUILayerC1EvEN4__238__invokeEv", "__ZZN20SettingsMainGUILayerC1EvEN4__248__invokeEv", "__ZZN20SettingsMainGUILayerC1EvEN4__258__invokeEv", "__ZZN20SettingsMainGUILayerC1EvEN4__268__invokeEv", "__ZZN20SettingsMainGUILayerC1EvEN4__278__invokeEv", "__ZZN20SettingsMainGUILayerC1EvEN4__288__invokeEv", "__ZZN20SettingsMainGUILayerC1EvEN4__298__invokeEv", "__ZZN20SettingsMainGUILayerC1EvEN4__308__invokeEv", "__ZZN20SettingsMainGUILayerC1EvEN4__318__invokeEv", "__ZZN20SettingsMainGUILayerC1EvEN4__328__invokeEv", "__ZZN20SettingsMainGUILayerC1EvEN4__338__invokeEv", "__ZZN20SettingsMainGUILayerC1EvEN4__348__invokeEv", "__ZZN20SettingsMainGUILayerC1EvEN4__358__invokeEv", "__ZZN20SettingsMainGUILayerC1EvEN4__368__invokeEv", "__ZZN20SettingsMainGUILayerC1EvEN4__378__invokeEv", "__ZZN20SettingsMainGUILayerC1EvEN4__388__invokeEv", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_vi = ["0", "__ZN23MainMenuBackgroundLayerD2Ev", "__ZN23MainMenuBackgroundLayerD0Ev", "0", "__ZN23MainMenuBackgroundLayer4InitEv", "__ZN23MainMenuBackgroundLayer4DestEv", "0", "__ZN23MainMenuBackgroundLayer8OnRenderEv", "__ZNSt3__210__function6__baseIFbRK5EventEED2Ev", "__ZNSt3__210__function6__baseIFbRK5EventEED0Ev", "0", "__ZNSt3__210__function6__funcIZN23MainMenuBackgroundLayer7OnEventERK5EventE3__0NS_9allocatorIS6_EEFbS5_EED2Ev", "__ZNSt3__210__function6__funcIZN23MainMenuBackgroundLayer7OnEventERK5EventE3__0NS_9allocatorIS6_EEFbS5_EED0Ev", "0", "0", "__ZNSt3__210__function6__funcIZN23MainMenuBackgroundLayer7OnEventERK5EventE3__0NS_9allocatorIS6_EEFbS5_EE7destroyEv", "__ZNSt3__210__function6__funcIZN23MainMenuBackgroundLayer7OnEventERK5EventE3__0NS_9allocatorIS6_EEFbS5_EE18destroy_deallocateEv", "0", "0", "0", "__ZN16MainMenuGUILayerD2Ev", "__ZN16MainMenuGUILayerD0Ev", "0", "__ZN16MainMenuGUILayer4InitEv", "__ZN16MainMenuGUILayer4DestEv", "0", "__ZN16MainMenuGUILayer8OnRenderEv", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EED2Ev", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EED0Ev", "0", "0", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EE7destroyEv", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EE18destroy_deallocateEv", "0", "0", "0", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EED2Ev", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EED0Ev", "0", "0", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EE7destroyEv", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EE18destroy_deallocateEv", "0", "0", "0", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EED2Ev", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EED0Ev", "0", "0", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EE7destroyEv", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EE18destroy_deallocateEv", "0", "0", "0", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EED2Ev", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EED0Ev", "0", "0", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EE7destroyEv", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EE18destroy_deallocateEv", "0", "0", "0", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EED2Ev", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EED0Ev", "0", "0", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EE7destroyEv", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EE18destroy_deallocateEv", "0", "0", "0", "__ZNSt3__210__function6__funcIZN16MainMenuGUILayer7OnEventERK5EventE4__16NS_9allocatorIS6_EEFbS5_EED2Ev", "__ZNSt3__210__function6__funcIZN16MainMenuGUILayer7OnEventERK5EventE4__16NS_9allocatorIS6_EEFbS5_EED0Ev", "0", "0", "__ZNSt3__210__function6__funcIZN16MainMenuGUILayer7OnEventERK5EventE4__16NS_9allocatorIS6_EEFbS5_EE7destroyEv", "__ZNSt3__210__function6__funcIZN16MainMenuGUILayer7OnEventERK5EventE4__16NS_9allocatorIS6_EEFbS5_EE18destroy_deallocateEv", "0", "0", "0", "__ZN27SettingsMainBackgroundLayerD2Ev", "__ZN27SettingsMainBackgroundLayerD0Ev", "0", "__ZN27SettingsMainBackgroundLayer4InitEv", "__ZN27SettingsMainBackgroundLayer4DestEv", "0", "__ZN27SettingsMainBackgroundLayer8OnRenderEv", "__ZNSt3__210__function6__funcIZN27SettingsMainBackgroundLayer7OnEventERK5EventE4__17NS_9allocatorIS6_EEFbS5_EED2Ev", "__ZNSt3__210__function6__funcIZN27SettingsMainBackgroundLayer7OnEventERK5EventE4__17NS_9allocatorIS6_EEFbS5_EED0Ev", "0", "0", "__ZNSt3__210__function6__funcIZN27SettingsMainBackgroundLayer7OnEventERK5EventE4__17NS_9allocatorIS6_EEFbS5_EE7destroyEv", "__ZNSt3__210__function6__funcIZN27SettingsMainBackgroundLayer7OnEventERK5EventE4__17NS_9allocatorIS6_EEFbS5_EE18destroy_deallocateEv", "0", "0", "0", "__ZN20SettingsMainGUILayerD2Ev", "__ZN20SettingsMainGUILayerD0Ev", "0", "__ZN20SettingsMainGUILayer4InitEv", "__ZN20SettingsMainGUILayer4DestEv", "0", "__ZN20SettingsMainGUILayer8OnRenderEv", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EED2Ev", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EED0Ev", "0", "0", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EE7destroyEv", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EE18destroy_deallocateEv", "0", "0", "0", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EED2Ev", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EED0Ev", "0", "0", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EE7destroyEv", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EE18destroy_deallocateEv", "0", "0", "0", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EED2Ev", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EED0Ev", "0", "0", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EE7destroyEv", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EE18destroy_deallocateEv", "0", "0", "0", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EED2Ev", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EED0Ev", "0", "0", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EE7destroyEv", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EE18destroy_deallocateEv", "0", "0", "0", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EED2Ev", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EED0Ev", "0", "0", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EE7destroyEv", "__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EE18destroy_deallocateEv", "0", "0", "0", "__ZNSt3__210__function6__funcIZN20SettingsMainGUILayer7OnEventERK5EventE4__39NS_9allocatorIS6_EEFbS5_EED2Ev", "__ZNSt3__210__function6__funcIZN20SettingsMainGUILayer7OnEventERK5EventE4__39NS_9allocatorIS6_EEFbS5_EED0Ev", "0", "0", "__ZNSt3__210__function6__funcIZN20SettingsMainGUILayer7OnEventERK5EventE4__39NS_9allocatorIS6_EEFbS5_EE7destroyEv", "__ZNSt3__210__function6__funcIZN20SettingsMainGUILayer7OnEventERK5EventE4__39NS_9allocatorIS6_EEFbS5_EE18destroy_deallocateEv", "0", "0", "0", "__ZN5LayerD2Ev", "__ZN5LayerD0Ev", "__ZN13EventListenerD2Ev", "__ZN13EventListenerD0Ev", "__ZN16GUIButtonClusterILm5EED2Ev", "__ZN16GUIButtonClusterILm5EED0Ev", "0", "0", "__ZN10GUIClusterI13GUIButtonDataLm5EED2Ev", "__ZN10GUIClusterI13GUIButtonDataLm5EED0Ev", "__ZN15GUIMasterObjectD2Ev", "__ZN15GUIMasterObjectD0Ev", "__ZN16GUIButtonClusterILm7EED2Ev", "__ZN16GUIButtonClusterILm7EED0Ev", "0", "0", "__ZN10GUIClusterI13GUIButtonDataLm7EED2Ev", "__ZN10GUIClusterI13GUIButtonDataLm7EED0Ev", "__ZN9MenuStateD2Ev", "__ZN9MenuStateD0Ev", "__ZN9MenuState4InitEv", "__ZN9MenuState4DestEv", "0", "0", "__ZN9MenuState8OnRenderEv", "__ZN5StateD2Ev", "__ZN5StateD0Ev", "__ZNSt3__210__function6__baseIFvvEED2Ev", "__ZNSt3__210__function6__baseIFvvEED0Ev", "__ZNSt3__210__function6__funcIZ4mainE3__0NS_9allocatorIS2_EEFvvEED2Ev", "__ZNSt3__210__function6__funcIZ4mainE3__0NS_9allocatorIS2_EEFvvEED0Ev", "0", "0", "__ZNSt3__210__function6__funcIZ4mainE3__0NS_9allocatorIS2_EEFvvEE7destroyEv", "__ZNSt3__210__function6__funcIZ4mainE3__0NS_9allocatorIS2_EEFvvEE18destroy_deallocateEv", "__ZNSt3__210__function6__funcIZ4mainE3__0NS_9allocatorIS2_EEFvvEEclEv", "0", "0", "__ZN15SettingsConfigsD2Ev", "__ZN15SettingsConfigsD0Ev", "0", "__ZN6ConfigD2Ev", "__ZN6ConfigD0Ev", "0", "0", "0", "0", "0", "0", "0", "0", "__ZNSt3__217bad_function_callD2Ev", "__ZNSt3__217bad_function_callD0Ev", "0", "0", "__ZN10__cxxabiv116__shim_type_infoD2Ev", "__ZN10__cxxabiv117__class_type_infoD0Ev", "__ZNK10__cxxabiv116__shim_type_info5noop1Ev", "__ZNK10__cxxabiv116__shim_type_info5noop2Ev", "0", "0", "0", "0", "__ZN10__cxxabiv120__si_class_type_infoD0Ev", "0", "0", "0", "__ZNSt9exceptionD2Ev", "__ZNSt9exceptionD0Ev", "0", "__ZNSt11logic_errorD2Ev", "__ZNSt11logic_errorD0Ev", "0", "__ZNSt12length_errorD0Ev", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__Z13dispatch_mainPv", "0", "0", "0", "0", "0", "0", "0", "0", "__ZL21window_close_callbackP10GLFWwindow", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv
var debug_table_viduttonClusterILm5EE8OnUpdateEf", "0", "0", "0", "0", "0", "0", "0", "__ZN16GUIButtonClusterILm7EE8OnUpdateEf", "0", "0", "0", "0", "0", "0", "0", "__ZN9MenuState8OnUpdateEf", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_viddcursor_position_callbackP10GLFWwindowdd", "0", "0", "__ZL15scroll_callbackP10GLFWwindowdd
var debug_table_vii = ["0", "0", "0", "__ZN23MainMenuBackgroundLayer7OnEventERK5Event", "0", "0", "__ZN23MainMenuBackgroundLayer8OnUpdateERKf", "0", "0", "0", "0", "0", "0", "0", "__ZNKSt3__210__function6__funcIZN23MainMenuBackgroundLayer7OnEventERK5EventE3__0NS_9allocatorIS6_EEFbS5_EE7__cloneEPNS0_6__baseIS9_EE", "0", "0", "0", "0", "0", "0", "0", "__ZN16MainMenuGUILayer7OnEventERK5Event", "0", "0", "__ZN16MainMenuGUILayer8OnUpdateERKf", "0", "0", "0", "0", "__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EE7__cloneEPNS0_6__baseISA_EE", "0", "0", "0", "0", "0", "0", "0", "0", "__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EE7__cloneEPNS0_6__baseISA_EE", "0", "0", "0", "0", "0", "0", "0", "0", "__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EE7__cloneEPNS0_6__baseISA_EE", "0", "0", "0", "0", "0", "0", "0", "0", "__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EE7__cloneEPNS0_6__baseISA_EE", "0", "0", "0", "0", "0", "0", "0", "0", "__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EE7__cloneEPNS0_6__baseISA_EE", "0", "0", "0", "0", "0", "0", "0", "0", "__ZNKSt3__210__function6__funcIZN16MainMenuGUILayer7OnEventERK5EventE4__16NS_9allocatorIS6_EEFbS5_EE7__cloneEPNS0_6__baseIS9_EE", "0", "0", "0", "0", "0", "0", "0", "__ZN27SettingsMainBackgroundLayer7OnEventERK5Event", "0", "0", "__ZN27SettingsMainBackgroundLayer8OnUpdateERKf", "0", "0", "0", "0", "__ZNKSt3__210__function6__funcIZN27SettingsMainBackgroundLayer7OnEventERK5EventE4__17NS_9allocatorIS6_EEFbS5_EE7__cloneEPNS0_6__baseIS9_EE", "0", "0", "0", "0", "0", "0", "0", "__ZN20SettingsMainGUILayer7OnEventERK5Event", "0", "0", "__ZN20SettingsMainGUILayer8OnUpdateERKf", "0", "0", "0", "0", "__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EE7__cloneEPNS0_6__baseISA_EE", "0", "0", "0", "0", "0", "0", "0", "0", "__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EE7__cloneEPNS0_6__baseISA_EE", "0", "0", "0", "0", "0", "0", "0", "0", "__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EE7__cloneEPNS0_6__baseISA_EE", "0", "0", "0", "0", "0", "0", "0", "0", "__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EE7__cloneEPNS0_6__baseISA_EE", "0", "0", "0", "0", "0", "0", "0", "0", "__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EE7__cloneEPNS0_6__baseISA_EE", "0", "0", "0", "0", "0", "0", "0", "0", "__ZNKSt3__210__function6__funcIZN20SettingsMainGUILayer7OnEventERK5EventE4__39NS_9allocatorIS6_EEFbS5_EE7__cloneEPNS0_6__baseIS9_EE", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZN16GUIButtonClusterILm5EE7OnEventERK5Event", "0", "0", "0", "0", "0", "0", "0", "__ZN16GUIButtonClusterILm7EE7OnEventERK5Event", "0", "0", "0", "0", "0", "0", "0", "__ZN9MenuState7OnEventERK5Event", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZNKSt3__210__function6__funcIZ4mainE3__0NS_9allocatorIS2_EEFvvEE7__cloneEPNS0_6__baseIS5_EE", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZL16stbi__stdio_skipPvi", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZL14error_callbackiPKc", "0", "0", "0", "0", "0", "__ZL18character_callbackP10GLFWwindowj", "0", "__ZL21cursor_enter_callbackP10GLFWwindowi", "0", "0", "0", "_pop_arg_long_double
var debug_table_viiistbi__idct_blockPhiPs", "0", "0", "0", "0", "0", "0", "0", "0", "__ZL20window_size_callbackP10GLFWwindowii", "__ZL19window_pos_callbackP10GLFWwindowii", "__ZL25framebuffer_size_callbackP10GLFWwindowii
var debug_table_viiiicxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "0", "0", "0", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZL21mouse_button_callbackP10GLFWwindowiii
var debug_table_viiiiicxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "0", "0", "0", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZL12key_callbackP10GLFWwindowiiii
var debug_table_viiiiiicxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "0", "0", "0", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZL22stbi__YCbCr_to_RGB_rowPhPKhS1_S1_ii
function nullFunc_ii(x) { err("Invalid function pointer '" + x + "' called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("This pointer might make sense in another type signature: iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iidiiii: " + debug_table_iidiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  vid: " + debug_table_vid[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  vidd: " + debug_table_vidd[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  "); abort(x) }

function nullFunc_iidiiii(x) { err("Invalid function pointer '" + x + "' called with signature 'iidiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  iiiii: " + debug_table_iiiii[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  vid: " + debug_table_vid[x] + "  vii: " + debug_table_vii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vidd: " + debug_table_vidd[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  "); abort(x) }

function nullFunc_iii(x) { err("Invalid function pointer '" + x + "' called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  vid: " + debug_table_vid[x] + "  viiiii: " + debug_table_viiiii[x] + "  vidd: " + debug_table_vidd[x] + "  v: " + debug_table_v[x] + "  iidiiii: " + debug_table_iidiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  "); abort(x) }

function nullFunc_iiii(x) { err("Invalid function pointer '" + x + "' called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("This pointer might make sense in another type signature: iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  vid: " + debug_table_vid[x] + "  vidd: " + debug_table_vidd[x] + "  iidiiii: " + debug_table_iidiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  "); abort(x) }

function nullFunc_iiiii(x) { err("Invalid function pointer '" + x + "' called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vid: " + debug_table_vid[x] + "  vidd: " + debug_table_vidd[x] + "  iidiiii: " + debug_table_iidiiii[x] + "  v: " + debug_table_v[x] + "  "); abort(x) }

function nullFunc_iiiiii(x) { err("Invalid function pointer '" + x + "' called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vi: " + debug_table_vi[x] + "  vid: " + debug_table_vid[x] + "  iidiiii: " + debug_table_iidiiii[x] + "  vidd: " + debug_table_vidd[x] + "  v: " + debug_table_v[x] + "  "); abort(x) }

function nullFunc_v(x) { err("Invalid function pointer '" + x + "' called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  vid: " + debug_table_vid[x] + "  vii: " + debug_table_vii[x] + "  vidd: " + debug_table_vidd[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iidiiii: " + debug_table_iidiiii[x] + "  "); abort(x) }

function nullFunc_vi(x) { err("Invalid function pointer '" + x + "' called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("This pointer might make sense in another type signature: v: " + debug_table_v[x] + "  vid: " + debug_table_vid[x] + "  vii: " + debug_table_vii[x] + "  vidd: " + debug_table_vidd[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iidiiii: " + debug_table_iidiiii[x] + "  "); abort(x) }

function nullFunc_vid(x) { err("Invalid function pointer '" + x + "' called with signature 'vid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  vidd: " + debug_table_vidd[x] + "  v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  ii: " + debug_table_ii[x] + "  viii: " + debug_table_viii[x] + "  iii: " + debug_table_iii[x] + "  viiii: " + debug_table_viiii[x] + "  iiii: " + debug_table_iiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iidiiii: " + debug_table_iidiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  "); abort(x) }

function nullFunc_vidd(x) { err("Invalid function pointer '" + x + "' called with signature 'vidd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("This pointer might make sense in another type signature: vid: " + debug_table_vid[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  ii: " + debug_table_ii[x] + "  viii: " + debug_table_viii[x] + "  iii: " + debug_table_iii[x] + "  viiii: " + debug_table_viiii[x] + "  iiii: " + debug_table_iiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iidiiii: " + debug_table_iidiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  "); abort(x) }

function nullFunc_vii(x) { err("Invalid function pointer '" + x + "' called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  vid: " + debug_table_vid[x] + "  iiii: " + debug_table_iiii[x] + "  vidd: " + debug_table_vidd[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iidiiii: " + debug_table_iidiiii[x] + "  "); abort(x) }

function nullFunc_viii(x) { err("Invalid function pointer '" + x + "' called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("This pointer might make sense in another type signature: vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  v: " + debug_table_v[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  vid: " + debug_table_vid[x] + "  vidd: " + debug_table_vidd[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iidiiii: " + debug_table_iidiiii[x] + "  "); abort(x) }

function nullFunc_viiii(x) { err("Invalid function pointer '" + x + "' called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  vid: " + debug_table_vid[x] + "  vidd: " + debug_table_vidd[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iidiiii: " + debug_table_iidiiii[x] + "  "); abort(x) }

function nullFunc_viiiii(x) { err("Invalid function pointer '" + x + "' called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  vid: " + debug_table_vid[x] + "  vidd: " + debug_table_vidd[x] + "  iidiiii: " + debug_table_iidiiii[x] + "  "); abort(x) }

function nullFunc_viiiiii(x) { err("Invalid function pointer '" + x + "' called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  vid: " + debug_table_vid[x] + "  vidd: " + debug_table_vidd[x] + "  iidiiii: " + debug_table_iidiiii[x] + "  "); abort(x) }

var asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity }

var asmLibraryArg = {
  "abort": abort,
  "setTempRet0": setTempRet0,
  "getTempRet0": getTempRet0,
  "abortStackOverflow": abortStackOverflow,
  "nullFunc_ii": nullFunc_ii,
  "nullFunc_iidiiii": nullFunc_iidiiii,
  "nullFunc_iii": nullFunc_iii,
  "nullFunc_iiii": nullFunc_iiii,
  "nullFunc_iiiii": nullFunc_iiiii,
  "nullFunc_iiiiii": nullFunc_iiiiii,
  "nullFunc_v": nullFunc_v,
  "nullFunc_vi": nullFunc_vi,
  "nullFunc_vid": nullFunc_vid,
  "nullFunc_vidd": nullFunc_vidd,
  "nullFunc_vii": nullFunc_vii,
  "nullFunc_viii": nullFunc_viii,
  "nullFunc_viiii": nullFunc_viiii,
  "nullFunc_viiiii": nullFunc_viiiii,
  "nullFunc_viiiiii": nullFunc_viiiiii,
  "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv,
  "___assert_fail": ___assert_fail,
  "___cxa_allocate_exception": ___cxa_allocate_exception,
  "___cxa_begin_catch": ___cxa_begin_catch,
  "___cxa_find_matching_catch": ___cxa_find_matching_catch,
  "___cxa_free_exception": ___cxa_free_exception,
  "___cxa_pure_virtual": ___cxa_pure_virtual,
  "___cxa_throw": ___cxa_throw,
  "___gxx_personality_v0": ___gxx_personality_v0,
  "___lock": ___lock,
  "___resumeException": ___resumeException,
  "___setErrNo": ___setErrNo,
  "___syscall140": ___syscall140,
  "___syscall145": ___syscall145,
  "___syscall146": ___syscall146,
  "___syscall221": ___syscall221,
  "___syscall5": ___syscall5,
  "___syscall54": ___syscall54,
  "___syscall6": ___syscall6,
  "___unlock": ___unlock,
  "__computeUnpackAlignedImageSize": __computeUnpackAlignedImageSize,
  "__glGenObject": __glGenObject,
  "_abort": _abort,
  "_emscripten_get_heap_size": _emscripten_get_heap_size,
  "_emscripten_get_now": _emscripten_get_now,
  "_emscripten_memcpy_big": _emscripten_memcpy_big,
  "_emscripten_resize_heap": _emscripten_resize_heap,
  "_emscripten_set_main_loop": _emscripten_set_main_loop,
  "_emscripten_set_main_loop_arg": _emscripten_set_main_loop_arg,
  "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing,
  "_glActiveTexture": _glActiveTexture,
  "_glAttachShader": _glAttachShader,
  "_glBindBuffer": _glBindBuffer,
  "_glBindTexture": _glBindTexture,
  "_glBindVertexArray": _glBindVertexArray,
  "_glBufferData": _glBufferData,
  "_glBufferSubData": _glBufferSubData,
  "_glClear": _glClear,
  "_glClearColor": _glClearColor,
  "_glCompileShader": _glCompileShader,
  "_glCreateProgram": _glCreateProgram,
  "_glCreateShader": _glCreateShader,
  "_glCullFace": _glCullFace,
  "_glDeleteShader": _glDeleteShader,
  "_glDeleteTextures": _glDeleteTextures,
  "_glDeleteVertexArrays": _glDeleteVertexArrays,
  "_glDetachShader": _glDetachShader,
  "_glDisableVertexAttribArray": _glDisableVertexAttribArray,
  "_glDrawArrays": _glDrawArrays,
  "_glDrawArraysInstanced": _glDrawArraysInstanced,
  "_glEnable": _glEnable,
  "_glEnableVertexAttribArray": _glEnableVertexAttribArray,
  "_glGenBuffers": _glGenBuffers,
  "_glGenTextures": _glGenTextures,
  "_glGenVertexArrays": _glGenVertexArrays,
  "_glGetAttribLocation": _glGetAttribLocation,
  "_glGetProgramInfoLog": _glGetProgramInfoLog,
  "_glGetProgramiv": _glGetProgramiv,
  "_glGetShaderInfoLog": _glGetShaderInfoLog,
  "_glGetShaderiv": _glGetShaderiv,
  "_glGetString": _glGetString,
  "_glGetUniformLocation": _glGetUniformLocation,
  "_glLinkProgram": _glLinkProgram,
  "_glShaderSource": _glShaderSource,
  "_glTexImage2D": _glTexImage2D,
  "_glTexParameteri": _glTexParameteri,
  "_glUniform1f": _glUniform1f,
  "_glUniform2f": _glUniform2f,
  "_glUniform4f": _glUniform4f,
  "_glUniformMatrix4fv": _glUniformMatrix4fv,
  "_glUseProgram": _glUseProgram,
  "_glValidateProgram": _glValidateProgram,
  "_glVertexAttribDivisor": _glVertexAttribDivisor,
  "_glVertexAttribPointer": _glVertexAttribPointer,
  "_glViewport": _glViewport,
  "_glewGetErrorString": _glewGetErrorString,
  "_glewInit": _glewInit,
  "_glfwCreateWindow": _glfwCreateWindow,
  "_glfwGetCursorPos": _glfwGetCursorPos,
  "_glfwGetPrimaryMonitor": _glfwGetPrimaryMonitor,
  "_glfwGetTime": _glfwGetTime,
  "_glfwInit": _glfwInit,
  "_glfwMakeContextCurrent": _glfwMakeContextCurrent,
  "_glfwPollEvents": _glfwPollEvents,
  "_glfwSetCharCallback": _glfwSetCharCallback,
  "_glfwSetCursorEnterCallback": _glfwSetCursorEnterCallback,
  "_glfwSetCursorPosCallback": _glfwSetCursorPosCallback,
  "_glfwSetErrorCallback": _glfwSetErrorCallback,
  "_glfwSetFramebufferSizeCallback": _glfwSetFramebufferSizeCallback,
  "_glfwSetInputMode": _glfwSetInputMode,
  "_glfwSetKeyCallback": _glfwSetKeyCallback,
  "_glfwSetMouseButtonCallback": _glfwSetMouseButtonCallback,
  "_glfwSetScrollCallback": _glfwSetScrollCallback,
  "_glfwSetWindowCloseCallback": _glfwSetWindowCloseCallback,
  "_glfwSetWindowPosCallback": _glfwSetWindowPosCallback,
  "_glfwSetWindowShouldClose": _glfwSetWindowShouldClose,
  "_glfwSetWindowSizeCallback": _glfwSetWindowSizeCallback,
  "_glfwSetWindowSizeLimits": _glfwSetWindowSizeLimits,
  "_glfwSwapBuffers": _glfwSwapBuffers,
  "_glfwTerminate": _glfwTerminate,
  "_glfwWindowHint": _glfwWindowHint,
  "_glfwWindowShouldClose": _glfwWindowShouldClose,
  "_llvm_trap": _llvm_trap,
  "_say_hello": _say_hello,
  "abortOnCannotGrowMemory": abortOnCannotGrowMemory,
  "emscriptenWebGLGetTexPixelData": emscriptenWebGLGetTexPixelData,
  "stringToNewUTF8": stringToNewUTF8,
  "tempDoublePtr": tempDoublePtr,
  "DYNAMICTOP_PTR": DYNAMICTOP_PTR
}
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'almost asm';

  var HEAP8 = new global.Int8Array(buffer),
  HEAP16 = new global.Int16Array(buffer),
  HEAP32 = new global.Int32Array(buffer),
  HEAPU8 = new global.Uint8Array(buffer),
  HEAPU16 = new global.Uint16Array(buffer),
  HEAPF32 = new global.Float32Array(buffer),
  HEAPF64 = new global.Float64Array(buffer),
  tempDoublePtr=env.tempDoublePtr|0,
  DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0,
  __THREW__ = 0,
  threwValue = 0,
  setjmpId = 0,
  tempInt = 0,
  tempBigInt = 0,
  tempBigIntS = 0,
  tempValue = 0,
  tempDouble = 0.0,
  nan = global.NaN,
  inf = global.Infinity,
  Math_abs=global.Math.abs,
  Math_pow=global.Math.pow,
  Math_imul=global.Math.imul,
  Math_clz32=global.Math.clz32,
  abort=env.abort,
  setTempRet0=env.setTempRet0,
  getTempRet0=env.getTempRet0,
  abortStackOverflow=env.abortStackOverflow,
  nullFunc_ii=env.nullFunc_ii,
  nullFunc_iidiiii=env.nullFunc_iidiiii,
  nullFunc_iii=env.nullFunc_iii,
  nullFunc_iiii=env.nullFunc_iiii,
  nullFunc_iiiii=env.nullFunc_iiiii,
  nullFunc_iiiiii=env.nullFunc_iiiiii,
  nullFunc_v=env.nullFunc_v,
  nullFunc_vi=env.nullFunc_vi,
  nullFunc_vid=env.nullFunc_vid,
  nullFunc_vidd=env.nullFunc_vidd,
  nullFunc_vii=env.nullFunc_vii,
  nullFunc_viii=env.nullFunc_viii,
  nullFunc_viiii=env.nullFunc_viiii,
  nullFunc_viiiii=env.nullFunc_viiiii,
  nullFunc_viiiiii=env.nullFunc_viiiiii,
  __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv,
  ___assert_fail=env.___assert_fail,
  ___cxa_allocate_exception=env.___cxa_allocate_exception,
  ___cxa_begin_catch=env.___cxa_begin_catch,
  ___cxa_find_matching_catch=env.___cxa_find_matching_catch,
  ___cxa_free_exception=env.___cxa_free_exception,
  ___cxa_pure_virtual=env.___cxa_pure_virtual,
  ___cxa_throw=env.___cxa_throw,
  ___gxx_personality_v0=env.___gxx_personality_v0,
  ___lock=env.___lock,
  ___resumeException=env.___resumeException,
  ___setErrNo=env.___setErrNo,
  ___syscall140=env.___syscall140,
  ___syscall145=env.___syscall145,
  ___syscall146=env.___syscall146,
  ___syscall221=env.___syscall221,
  ___syscall5=env.___syscall5,
  ___syscall54=env.___syscall54,
  ___syscall6=env.___syscall6,
  ___unlock=env.___unlock,
  __computeUnpackAlignedImageSize=env.__computeUnpackAlignedImageSize,
  __glGenObject=env.__glGenObject,
  _abort=env._abort,
  _emscripten_get_heap_size=env._emscripten_get_heap_size,
  _emscripten_get_now=env._emscripten_get_now,
  _emscripten_memcpy_big=env._emscripten_memcpy_big,
  _emscripten_resize_heap=env._emscripten_resize_heap,
  _emscripten_set_main_loop=env._emscripten_set_main_loop,
  _emscripten_set_main_loop_arg=env._emscripten_set_main_loop_arg,
  _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing,
  _glActiveTexture=env._glActiveTexture,
  _glAttachShader=env._glAttachShader,
  _glBindBuffer=env._glBindBuffer,
  _glBindTexture=env._glBindTexture,
  _glBindVertexArray=env._glBindVertexArray,
  _glBufferData=env._glBufferData,
  _glBufferSubData=env._glBufferSubData,
  _glClear=env._glClear,
  _glClearColor=env._glClearColor,
  _glCompileShader=env._glCompileShader,
  _glCreateProgram=env._glCreateProgram,
  _glCreateShader=env._glCreateShader,
  _glCullFace=env._glCullFace,
  _glDeleteShader=env._glDeleteShader,
  _glDeleteTextures=env._glDeleteTextures,
  _glDeleteVertexArrays=env._glDeleteVertexArrays,
  _glDetachShader=env._glDetachShader,
  _glDisableVertexAttribArray=env._glDisableVertexAttribArray,
  _glDrawArrays=env._glDrawArrays,
  _glDrawArraysInstanced=env._glDrawArraysInstanced,
  _glEnable=env._glEnable,
  _glEnableVertexAttribArray=env._glEnableVertexAttribArray,
  _glGenBuffers=env._glGenBuffers,
  _glGenTextures=env._glGenTextures,
  _glGenVertexArrays=env._glGenVertexArrays,
  _glGetAttribLocation=env._glGetAttribLocation,
  _glGetProgramInfoLog=env._glGetProgramInfoLog,
  _glGetProgramiv=env._glGetProgramiv,
  _glGetShaderInfoLog=env._glGetShaderInfoLog,
  _glGetShaderiv=env._glGetShaderiv,
  _glGetString=env._glGetString,
  _glGetUniformLocation=env._glGetUniformLocation,
  _glLinkProgram=env._glLinkProgram,
  _glShaderSource=env._glShaderSource,
  _glTexImage2D=env._glTexImage2D,
  _glTexParameteri=env._glTexParameteri,
  _glUniform1f=env._glUniform1f,
  _glUniform2f=env._glUniform2f,
  _glUniform4f=env._glUniform4f,
  _glUniformMatrix4fv=env._glUniformMatrix4fv,
  _glUseProgram=env._glUseProgram,
  _glValidateProgram=env._glValidateProgram,
  _glVertexAttribDivisor=env._glVertexAttribDivisor,
  _glVertexAttribPointer=env._glVertexAttribPointer,
  _glViewport=env._glViewport,
  _glewGetErrorString=env._glewGetErrorString,
  _glewInit=env._glewInit,
  _glfwCreateWindow=env._glfwCreateWindow,
  _glfwGetCursorPos=env._glfwGetCursorPos,
  _glfwGetPrimaryMonitor=env._glfwGetPrimaryMonitor,
  _glfwGetTime=env._glfwGetTime,
  _glfwInit=env._glfwInit,
  _glfwMakeContextCurrent=env._glfwMakeContextCurrent,
  _glfwPollEvents=env._glfwPollEvents,
  _glfwSetCharCallback=env._glfwSetCharCallback,
  _glfwSetCursorEnterCallback=env._glfwSetCursorEnterCallback,
  _glfwSetCursorPosCallback=env._glfwSetCursorPosCallback,
  _glfwSetErrorCallback=env._glfwSetErrorCallback,
  _glfwSetFramebufferSizeCallback=env._glfwSetFramebufferSizeCallback,
  _glfwSetInputMode=env._glfwSetInputMode,
  _glfwSetKeyCallback=env._glfwSetKeyCallback,
  _glfwSetMouseButtonCallback=env._glfwSetMouseButtonCallback,
  _glfwSetScrollCallback=env._glfwSetScrollCallback,
  _glfwSetWindowCloseCallback=env._glfwSetWindowCloseCallback,
  _glfwSetWindowPosCallback=env._glfwSetWindowPosCallback,
  _glfwSetWindowShouldClose=env._glfwSetWindowShouldClose,
  _glfwSetWindowSizeCallback=env._glfwSetWindowSizeCallback,
  _glfwSetWindowSizeLimits=env._glfwSetWindowSizeLimits,
  _glfwSwapBuffers=env._glfwSwapBuffers,
  _glfwTerminate=env._glfwTerminate,
  _glfwWindowHint=env._glfwWindowHint,
  _glfwWindowShouldClose=env._glfwWindowShouldClose,
  _llvm_trap=env._llvm_trap,
  _say_hello=env._say_hello,
  abortOnCannotGrowMemory=env.abortOnCannotGrowMemory,
  emscriptenWebGLGetTexPixelData=env.emscriptenWebGLGetTexPixelData,
  stringToNewUTF8=env.stringToNewUTF8,
  STACKTOP = 14720,
  STACK_MAX = 5257600,
  tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
    if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function __ZN3glm3vecILi3EfLNS_9qualifierE0EEC2IiiiEET_T0_T1_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 $10 = (+($9|0));
 HEAPF32[$8>>2] = $10;
 $11 = ((($8)) + 4|0);
 $12 = $6;
 $13 = (+($12|0));
 HEAPF32[$11>>2] = $13;
 $14 = ((($8)) + 8|0);
 $15 = $7;
 $16 = (+($15|0));
 HEAPF32[$14>>2] = $16;
 STACKTOP = sp;return;
}
function __ZNK10GUIManager20ProcessGUIRenderableERK7TexturePK15GUIButtonParamsm($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$alloca_mul = 0, $$alloca_mul25 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0.0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0;
 var $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $16 = sp + 264|0;
 $17 = sp + 200|0;
 $18 = sp + 136|0;
 $19 = sp + 120|0;
 $20 = sp + 56|0;
 $21 = sp + 40|0;
 $28 = sp;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = 20;
 $29 = $9;
 $30 = $29<<2;
 $31 = ($30*20)|0;
 $$alloca_mul = $31;
 $32 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $11 = $32;
 $12 = 0;
 $13 = 0;
 while(1) {
  $33 = $13;
  $34 = $9;
  $35 = ($33>>>0)<($34>>>0);
  if (!($35)) {
   break;
  }
  $36 = $8;
  $37 = $13;
  $38 = (($36) + (($37*48)|0)|0);
  $14 = $38;
  $39 = $14;
  $15 = $39;
  $40 = (__ZN6Engine11GetInstanceEv()|0);
  $41 = ((($40)) + 4|0);
  $42 = +HEAPF32[$41>>2];
  $43 = (__ZN6Engine11GetInstanceEv()|0);
  $44 = ((($43)) + 8|0);
  $45 = +HEAPF32[$44>>2];
  __ZN3glm3vecILi2EfLNS_9qualifierE0EEC2Eff($16,$42,$45);
  dest=$17; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  HEAPF32[$17>>2] = 1.0;
  $46 = ((($17)) + 16|0);
  $47 = ((($46)) + 4|0);
  HEAPF32[$47>>2] = 1.0;
  $48 = ((($17)) + 32|0);
  $49 = ((($48)) + 8|0);
  HEAPF32[$49>>2] = 1.0;
  $50 = ((($17)) + 48|0);
  $51 = ((($50)) + 12|0);
  HEAPF32[$51>>2] = 1.0;
  $52 = $15;
  $53 = +HEAPF32[$52>>2];
  $54 = +HEAPF32[$16>>2];
  $55 = $53 * $54;
  $56 = $15;
  $57 = ((($56)) + 4|0);
  $58 = +HEAPF32[$57>>2];
  $59 = ((($16)) + 4|0);
  $60 = +HEAPF32[$59>>2];
  $61 = $58 * $60;
  __ZN3glm3vecILi3EfLNS_9qualifierE0EEC2Efff($19,$55,$61,0.99999898672103882);
  __ZN3glm9translateIfLNS_9qualifierE0EEENS_3matILi4ELi4ET_XT0_EEERKS4_RKNS_3vecILi3ES3_XT0_EEE($18,$17,$19);
  dest=$17; src=$18; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $62 = $15;
  $63 = ((($62)) + 8|0);
  $64 = +HEAPF32[$63>>2];
  $65 = $64 * 0.5;
  $66 = +HEAPF32[$16>>2];
  $67 = $65 * $66;
  $68 = $15;
  $69 = ((($68)) + 12|0);
  $70 = +HEAPF32[$69>>2];
  $71 = $70 * 0.5;
  $72 = ((($16)) + 4|0);
  $73 = +HEAPF32[$72>>2];
  $74 = $71 * $73;
  __ZN3glm3vecILi3EfLNS_9qualifierE0EEC2Efff($21,$67,$74,1.0);
  __ZN3glm5scaleIfLNS_9qualifierE0EEENS_3matILi4ELi4ET_XT0_EEERKS4_RKNS_3vecILi3ES3_XT0_EEE($20,$17,$21);
  dest=$17; src=$20; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $22 = 0;
  while(1) {
   $75 = $22;
   $76 = ($75|0)<(4);
   if (!($76)) {
    break;
   }
   $77 = $22;
   $78 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($17,$77)|0);
   $23 = $78;
   $79 = $23;
   $80 = +HEAPF32[$79>>2];
   $81 = $11;
   $82 = $12;
   $83 = (($82) + 1)|0;
   $12 = $83;
   $84 = (($81) + ($82<<2)|0);
   HEAPF32[$84>>2] = $80;
   $85 = $23;
   $86 = ((($85)) + 4|0);
   $87 = +HEAPF32[$86>>2];
   $88 = $11;
   $89 = $12;
   $90 = (($89) + 1)|0;
   $12 = $90;
   $91 = (($88) + ($89<<2)|0);
   HEAPF32[$91>>2] = $87;
   $92 = $23;
   $93 = ((($92)) + 8|0);
   $94 = +HEAPF32[$93>>2];
   $95 = $11;
   $96 = $12;
   $97 = (($96) + 1)|0;
   $12 = $97;
   $98 = (($95) + ($96<<2)|0);
   HEAPF32[$98>>2] = $94;
   $99 = $23;
   $100 = ((($99)) + 12|0);
   $101 = +HEAPF32[$100>>2];
   $102 = $11;
   $103 = $12;
   $104 = (($103) + 1)|0;
   $12 = $104;
   $105 = (($102) + ($103<<2)|0);
   HEAPF32[$105>>2] = $101;
   $106 = $22;
   $107 = (($106) + 1)|0;
   $22 = $107;
  }
  $108 = $14;
  $109 = ((($108)) + 16|0);
  $110 = +HEAPF32[$109>>2];
  $111 = $11;
  $112 = $12;
  $113 = (($112) + 1)|0;
  $12 = $113;
  $114 = (($111) + ($112<<2)|0);
  HEAPF32[$114>>2] = $110;
  $115 = $14;
  $116 = ((($115)) + 16|0);
  $117 = ((($116)) + 4|0);
  $118 = +HEAPF32[$117>>2];
  $119 = $11;
  $120 = $12;
  $121 = (($120) + 1)|0;
  $12 = $121;
  $122 = (($119) + ($120<<2)|0);
  HEAPF32[$122>>2] = $118;
  $123 = $14;
  $124 = ((($123)) + 16|0);
  $125 = ((($124)) + 8|0);
  $126 = +HEAPF32[$125>>2];
  $127 = $11;
  $128 = $12;
  $129 = (($128) + 1)|0;
  $12 = $129;
  $130 = (($127) + ($128<<2)|0);
  HEAPF32[$130>>2] = $126;
  $131 = $14;
  $132 = ((($131)) + 16|0);
  $133 = ((($132)) + 12|0);
  $134 = +HEAPF32[$133>>2];
  $135 = $11;
  $136 = $12;
  $137 = (($136) + 1)|0;
  $12 = $137;
  $138 = (($135) + ($136<<2)|0);
  HEAPF32[$138>>2] = $134;
  $139 = $13;
  $140 = (($139) + 1)|0;
  $13 = $140;
 }
 $24 = 2;
 $141 = $9;
 $142 = $141<<2;
 $143 = $142<<1;
 $$alloca_mul25 = $143;
 $144 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul25)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul25)|0)+15)&-16)|0);;
 $25 = $144;
 $26 = 0;
 $27 = 0;
 while(1) {
  $145 = $27;
  $146 = $9;
  $147 = ($145>>>0)<($146>>>0);
  if (!($147)) {
   break;
  }
  $148 = $25;
  $149 = $26;
  $150 = (($149) + 1)|0;
  $26 = $150;
  $151 = (($148) + ($149<<2)|0);
  HEAPF32[$151>>2] = 0.0;
  $152 = $25;
  $153 = $26;
  $154 = (($153) + 1)|0;
  $26 = $154;
  $155 = (($152) + ($153<<2)|0);
  HEAPF32[$155>>2] = 0.0;
  $156 = $27;
  $157 = (($156) + 1)|0;
  $27 = $157;
 }
 $158 = (__ZN11MeshManager11GetInstanceEv()|0);
 $159 = $11;
 $160 = $9;
 $161 = ($160*20)|0;
 $162 = $25;
 $163 = $9;
 $164 = $163<<1;
 __ZNK11MeshManager19CreateInstancedMeshEPKfmS1_mS1_mPK9Attributem($28,$158,16,20,$159,$161,$162,$164,96,8);
 $5 = $28;
 $165 = $5;
 $166 = $7;
 __ZN13GUIRenderableC2EO4MeshRK7Texture($0,$165,$166);
 STACKTOP = sp;return;
}
function __ZN6Engine11GetInstanceEv() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $32 = sp + 76|0;
 $51 = sp;
 $50 = 13868;
 $52 = $50;
 $49 = $52;
 $53 = $49;
 $48 = $53;
 $54 = $48;
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)!=(0|0);
 if (!($56)) {
  $57 = (__Znwm(16)|0);
  __ZN6EngineC2Ev($57);
  $31 = $51;
  HEAP32[$32>>2] = $57;
  $58 = $31;
  $29 = $58;
  $30 = $32;
  $59 = $29;
  $60 = $30;
  $28 = $60;
  $61 = $28;
  $26 = $59;
  $27 = $61;
  $62 = $26;
  $63 = $27;
  $25 = $63;
  $64 = $25;
  $65 = HEAP32[$64>>2]|0;
  HEAP32[$62>>2] = $65;
  $23 = 13868;
  $24 = $51;
  $66 = $23;
  $67 = $24;
  $21 = $67;
  $68 = $21;
  $20 = $68;
  $69 = $20;
  $19 = $69;
  $70 = $19;
  $71 = HEAP32[$70>>2]|0;
  $22 = $71;
  $18 = $68;
  $72 = $18;
  $17 = $72;
  $73 = $17;
  HEAP32[$73>>2] = 0;
  $74 = $22;
  $8 = $66;
  $9 = $74;
  $75 = $8;
  $7 = $75;
  $76 = $7;
  $6 = $76;
  $77 = $6;
  $78 = HEAP32[$77>>2]|0;
  $10 = $78;
  $79 = $9;
  $3 = $75;
  $80 = $3;
  $2 = $80;
  $81 = $2;
  HEAP32[$81>>2] = $79;
  $82 = $10;
  $83 = ($82|0)!=(0|0);
  if ($83) {
   $1 = $75;
   $84 = $1;
   $0 = $84;
   $85 = $0;
   $86 = $10;
   $4 = $85;
   $5 = $86;
   $87 = $5;
   $88 = ($87|0)==(0|0);
   if (!($88)) {
    __ZN6EngineD2Ev($87);
    __ZdlPv($87);
   }
  }
  $89 = $24;
  $13 = $89;
  $90 = $13;
  $12 = $90;
  $91 = $12;
  $11 = $91;
  $92 = $11;
  $14 = $92;
  $16 = $66;
  $93 = $16;
  $15 = $93;
  $44 = $51;
  $94 = $44;
  $41 = $94;
  $42 = 0;
  $95 = $41;
  $40 = $95;
  $96 = $40;
  $39 = $96;
  $97 = $39;
  $98 = HEAP32[$97>>2]|0;
  $43 = $98;
  $99 = $42;
  $36 = $95;
  $100 = $36;
  $35 = $100;
  $101 = $35;
  HEAP32[$101>>2] = $99;
  $102 = $43;
  $103 = ($102|0)!=(0|0);
  if ($103) {
   $34 = $95;
   $104 = $34;
   $33 = $104;
   $105 = $33;
   $106 = $43;
   $37 = $105;
   $38 = $106;
   $107 = $38;
   $108 = ($107|0)==(0|0);
   if (!($108)) {
    __ZN6EngineD2Ev($107);
    __ZdlPv($107);
   }
  }
 }
 $47 = 13868;
 $109 = $47;
 $46 = $109;
 $110 = $46;
 $45 = $110;
 $111 = $45;
 $112 = HEAP32[$111>>2]|0;
 STACKTOP = sp;return ($112|0);
}
function __ZN3glm3vecILi2EfLNS_9qualifierE0EEC2Eff($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 HEAPF32[$6>>2] = $7;
 $8 = ((($6)) + 4|0);
 $9 = $5;
 HEAPF32[$8>>2] = $9;
 STACKTOP = sp;return;
}
function __ZN3glm3vecILi3EfLNS_9qualifierE0EEC2Efff($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 HEAPF32[$8>>2] = $9;
 $10 = ((($8)) + 4|0);
 $11 = $6;
 HEAPF32[$10>>2] = $11;
 $12 = ((($8)) + 8|0);
 $13 = $7;
 HEAPF32[$12>>2] = $13;
 STACKTOP = sp;return;
}
function __ZN3glm9translateIfLNS_9qualifierE0EEENS_3matILi4ELi4ET_XT0_EEERKS4_RKNS_3vecILi3ES3_XT0_EEE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $5 = sp + 80|0;
 $6 = sp + 64|0;
 $7 = sp + 48|0;
 $8 = sp + 32|0;
 $9 = sp + 16|0;
 $10 = sp;
 $3 = $1;
 $4 = $2;
 $11 = $3;
 dest=$0; src=$11; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $12 = $3;
 $13 = (__ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($12,0)|0);
 $14 = $4;
 $15 = (__ZNK3glm3vecILi3EfLNS_9qualifierE0EEixEi($14,0)|0);
 __ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_($8,$13,$15);
 $16 = $3;
 $17 = (__ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($16,1)|0);
 $18 = $4;
 $19 = (__ZNK3glm3vecILi3EfLNS_9qualifierE0EEixEi($18,1)|0);
 __ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_($9,$17,$19);
 __ZN3glmplIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_S6_($7,$8,$9);
 $20 = $3;
 $21 = (__ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($20,2)|0);
 $22 = $4;
 $23 = (__ZNK3glm3vecILi3EfLNS_9qualifierE0EEixEi($22,2)|0);
 __ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_($10,$21,$23);
 __ZN3glmplIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_S6_($6,$7,$10);
 $24 = $3;
 $25 = (__ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($24,3)|0);
 __ZN3glmplIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_S6_($5,$6,$25);
 $26 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($0,3)|0);
 ;HEAP32[$26>>2]=HEAP32[$5>>2]|0;HEAP32[$26+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$26+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$26+12>>2]=HEAP32[$5+12>>2]|0;
 STACKTOP = sp;return;
}
function __ZN3glm5scaleIfLNS_9qualifierE0EEENS_3matILi4ELi4ET_XT0_EEERKS4_RKNS_3vecILi3ES3_XT0_EEE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 32|0;
 $6 = sp + 16|0;
 $7 = sp;
 $3 = $1;
 $4 = $2;
 $8 = $3;
 $9 = (__ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($8,0)|0);
 $10 = $4;
 $11 = (__ZNK3glm3vecILi3EfLNS_9qualifierE0EEixEi($10,0)|0);
 __ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_($5,$9,$11);
 $12 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($0,0)|0);
 ;HEAP32[$12>>2]=HEAP32[$5>>2]|0;HEAP32[$12+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$12+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$12+12>>2]=HEAP32[$5+12>>2]|0;
 $13 = $3;
 $14 = (__ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($13,1)|0);
 $15 = $4;
 $16 = (__ZNK3glm3vecILi3EfLNS_9qualifierE0EEixEi($15,1)|0);
 __ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_($6,$14,$16);
 $17 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($0,1)|0);
 ;HEAP32[$17>>2]=HEAP32[$6>>2]|0;HEAP32[$17+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$17+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$17+12>>2]=HEAP32[$6+12>>2]|0;
 $18 = $3;
 $19 = (__ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($18,2)|0);
 $20 = $4;
 $21 = (__ZNK3glm3vecILi3EfLNS_9qualifierE0EEixEi($20,2)|0);
 __ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_($7,$19,$21);
 $22 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($0,2)|0);
 ;HEAP32[$22>>2]=HEAP32[$7>>2]|0;HEAP32[$22+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$22+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$22+12>>2]=HEAP32[$7+12>>2]|0;
 $23 = $3;
 $24 = (__ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($23,3)|0);
 $25 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($0,3)|0);
 ;HEAP32[$25>>2]=HEAP32[$24>>2]|0;HEAP32[$25+4>>2]=HEAP32[$24+4>>2]|0;HEAP32[$25+8>>2]=HEAP32[$24+8>>2]|0;HEAP32[$25+12>>2]=HEAP32[$24+12>>2]|0;
 STACKTOP = sp;return;
}
function __ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EE6lengthEv()|0);
 $7 = ($5|0)<($6|0);
 if ($7) {
  $8 = $3;
  $9 = (($4) + ($8<<4)|0);
  STACKTOP = sp;return ($9|0);
 } else {
  ___assert_fail((5596|0),(5615|0),291,(8540|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZN11MeshManager11GetInstanceEv() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $32 = sp + 76|0;
 $51 = sp;
 $50 = 13848;
 $52 = $50;
 $49 = $52;
 $53 = $49;
 $48 = $53;
 $54 = $48;
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)!=(0|0);
 if (!($56)) {
  $57 = (__Znwm(1040)|0);
  __ZN11MeshManagerC2Ev($57);
  $31 = $51;
  HEAP32[$32>>2] = $57;
  $58 = $31;
  $29 = $58;
  $30 = $32;
  $59 = $29;
  $60 = $30;
  $28 = $60;
  $61 = $28;
  $26 = $59;
  $27 = $61;
  $62 = $26;
  $63 = $27;
  $25 = $63;
  $64 = $25;
  $65 = HEAP32[$64>>2]|0;
  HEAP32[$62>>2] = $65;
  $23 = 13848;
  $24 = $51;
  $66 = $23;
  $67 = $24;
  $21 = $67;
  $68 = $21;
  $20 = $68;
  $69 = $20;
  $19 = $69;
  $70 = $19;
  $71 = HEAP32[$70>>2]|0;
  $22 = $71;
  $18 = $68;
  $72 = $18;
  $17 = $72;
  $73 = $17;
  HEAP32[$73>>2] = 0;
  $74 = $22;
  $8 = $66;
  $9 = $74;
  $75 = $8;
  $7 = $75;
  $76 = $7;
  $6 = $76;
  $77 = $6;
  $78 = HEAP32[$77>>2]|0;
  $10 = $78;
  $79 = $9;
  $3 = $75;
  $80 = $3;
  $2 = $80;
  $81 = $2;
  HEAP32[$81>>2] = $79;
  $82 = $10;
  $83 = ($82|0)!=(0|0);
  if ($83) {
   $1 = $75;
   $84 = $1;
   $0 = $84;
   $85 = $0;
   $86 = $10;
   $4 = $85;
   $5 = $86;
   $87 = $5;
   $88 = ($87|0)==(0|0);
   if (!($88)) {
    __ZN11MeshManagerD2Ev($87);
    __ZdlPv($87);
   }
  }
  $89 = $24;
  $13 = $89;
  $90 = $13;
  $12 = $90;
  $91 = $12;
  $11 = $91;
  $92 = $11;
  $14 = $92;
  $16 = $66;
  $93 = $16;
  $15 = $93;
  $44 = $51;
  $94 = $44;
  $41 = $94;
  $42 = 0;
  $95 = $41;
  $40 = $95;
  $96 = $40;
  $39 = $96;
  $97 = $39;
  $98 = HEAP32[$97>>2]|0;
  $43 = $98;
  $99 = $42;
  $36 = $95;
  $100 = $36;
  $35 = $100;
  $101 = $35;
  HEAP32[$101>>2] = $99;
  $102 = $43;
  $103 = ($102|0)!=(0|0);
  if ($103) {
   $34 = $95;
   $104 = $34;
   $33 = $104;
   $105 = $33;
   $106 = $43;
   $37 = $105;
   $38 = $106;
   $107 = $38;
   $108 = ($107|0)==(0|0);
   if (!($108)) {
    __ZN11MeshManagerD2Ev($107);
    __ZdlPv($107);
   }
  }
 }
 $47 = 13848;
 $109 = $47;
 $46 = $109;
 $110 = $46;
 $45 = $110;
 $111 = $45;
 $112 = HEAP32[$111>>2]|0;
 STACKTOP = sp;return ($112|0);
}
function __ZN13GUIRenderableC2EO4MeshRK7Texture($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $4;
 $8 = $5;
 $3 = $8;
 $9 = $3;
 ;HEAP32[$7>>2]=HEAP32[$9>>2]|0;HEAP32[$7+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$9+8>>2]|0;HEAP32[$7+12>>2]=HEAP32[$9+12>>2]|0;
 $10 = ((($7)) + 16|0);
 $11 = $6;
 HEAP32[$10>>2] = $11;
 STACKTOP = sp;return;
}
function __ZN11MeshManagerD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $3;
 $5 = ((($4)) + 16|0);
 $1 = $5;
 $2 = 0;
 $6 = $1;
 $7 = $2;
 $8 = (($6) + ($7<<2)|0);
 _glDeleteVertexArrays(256,($8|0));
 STACKTOP = sp;return;
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZN3glm3matILi4ELi4EfLNS_9qualifierE0EE6lengthEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EE6lengthEv()|0);
 $7 = ($5|0)<($6|0);
 if ($7) {
  $8 = $3;
  $9 = (($4) + ($8<<4)|0);
  STACKTOP = sp;return ($9|0);
 } else {
  ___assert_fail((5596|0),(5615|0),298,(8540|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZNK3glm3vecILi3EfLNS_9qualifierE0EEixEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = $4;
 $7 = ($6|0)>=(0);
 if (!($7)) {
  ___assert_fail((8478|0),(5650|0),189,(8540|0));
  // unreachable;
 }
 $8 = $4;
 $9 = (__ZN3glm3vecILi3EfLNS_9qualifierE0EE6lengthEv()|0);
 $10 = ($8|0)<($9|0);
 if (!($10)) {
  ___assert_fail((8478|0),(5650|0),189,(8540|0));
  // unreachable;
 }
 $11 = $4;
 switch ($11|0) {
 case 2:  {
  $13 = ((($5)) + 8|0);
  $2 = $13;
  break;
 }
 case 1:  {
  $12 = ((($5)) + 4|0);
  $2 = $12;
  break;
 }
 default: {
  $2 = $5;
 }
 }
 $14 = $2;
 STACKTOP = sp;return ($14|0);
}
function __ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp;
 $3 = $1;
 $4 = $2;
 $6 = $4;
 $7 = +HEAPF32[$6>>2];
 $8 = $3;
 ;HEAP32[$5>>2]=HEAP32[$8>>2]|0;HEAP32[$5+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$5+12>>2]=HEAP32[$8+12>>2]|0;
 $9 = (__ZN3glm3vecILi4EfLNS_9qualifierE0EEmLIfEERS2_T_($5,$7)|0);
 ;HEAP32[$0>>2]=HEAP32[$9>>2]|0;HEAP32[$0+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$9+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$9+12>>2]|0;
 STACKTOP = sp;return;
}
function __ZN3glm3vecILi4EfLNS_9qualifierE0EEmLIfEERS2_T_($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 16|0;
 $5 = sp;
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = $3;
 __ZN3glm3vecILi4EfLNS_9qualifierE0EEC2Ef($5,$7);
 __ZN3glm6detail16compute_vec4_mulIfLNS_9qualifierE0ELb0EE4callERKNS_3vecILi4EfLS2_0EEES7_($4,$6,$5);
 ;HEAP32[$6>>2]=HEAP32[$4>>2]|0;HEAP32[$6+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$6+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function __ZN3glm3vecILi4EfLNS_9qualifierE0EEC2Ef($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $10 = 0, $11 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 HEAPF32[$4>>2] = $5;
 $6 = ((($4)) + 4|0);
 $7 = $3;
 HEAPF32[$6>>2] = $7;
 $8 = ((($4)) + 8|0);
 $9 = $3;
 HEAPF32[$8>>2] = $9;
 $10 = ((($4)) + 12|0);
 $11 = $3;
 HEAPF32[$10>>2] = $11;
 STACKTOP = sp;return;
}
function __ZN3glm6detail16compute_vec4_mulIfLNS_9qualifierE0ELb0EE4callERKNS_3vecILi4EfLS2_0EEES7_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = +HEAPF32[$5>>2];
 $7 = $4;
 $8 = +HEAPF32[$7>>2];
 $9 = $6 * $8;
 $10 = $3;
 $11 = ((($10)) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $4;
 $14 = ((($13)) + 4|0);
 $15 = +HEAPF32[$14>>2];
 $16 = $12 * $15;
 $17 = $3;
 $18 = ((($17)) + 8|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $4;
 $21 = ((($20)) + 8|0);
 $22 = +HEAPF32[$21>>2];
 $23 = $19 * $22;
 $24 = $3;
 $25 = ((($24)) + 12|0);
 $26 = +HEAPF32[$25>>2];
 $27 = $4;
 $28 = ((($27)) + 12|0);
 $29 = +HEAPF32[$28>>2];
 $30 = $26 * $29;
 __ZN3glm3vecILi4EfLNS_9qualifierE0EEC2Effff($0,$9,$16,$23,$30);
 STACKTOP = sp;return;
}
function __ZN3glm3vecILi4EfLNS_9qualifierE0EEC2Effff($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 $11 = $6;
 HEAPF32[$10>>2] = $11;
 $12 = ((($10)) + 4|0);
 $13 = $7;
 HEAPF32[$12>>2] = $13;
 $14 = ((($10)) + 8|0);
 $15 = $8;
 HEAPF32[$14>>2] = $15;
 $16 = ((($10)) + 12|0);
 $17 = $9;
 HEAPF32[$16>>2] = $17;
 STACKTOP = sp;return;
}
function __ZN3glm3vecILi3EfLNS_9qualifierE0EE6lengthEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZN3glmplIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_S6_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp;
 $3 = $1;
 $4 = $2;
 $6 = $4;
 $7 = $3;
 ;HEAP32[$5>>2]=HEAP32[$7>>2]|0;HEAP32[$5+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$5+12>>2]=HEAP32[$7+12>>2]|0;
 $8 = (__ZN3glm3vecILi4EfLNS_9qualifierE0EEpLIfEERS2_RKNS0_ILi4ET_LS1_0EEE($5,$6)|0);
 ;HEAP32[$0>>2]=HEAP32[$8>>2]|0;HEAP32[$0+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$8+12>>2]|0;
 STACKTOP = sp;return;
}
function __ZN3glm3vecILi4EfLNS_9qualifierE0EEpLIfEERS2_RKNS0_ILi4ET_LS1_0EEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 16|0;
 $5 = sp;
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = $3;
 ;HEAP32[$5>>2]=HEAP32[$7>>2]|0;HEAP32[$5+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$5+12>>2]=HEAP32[$7+12>>2]|0;
 __ZN3glm6detail16compute_vec4_addIfLNS_9qualifierE0ELb0EE4callERKNS_3vecILi4EfLS2_0EEES7_($4,$6,$5);
 ;HEAP32[$6>>2]=HEAP32[$4>>2]|0;HEAP32[$6+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$6+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function __ZN3glm6detail16compute_vec4_addIfLNS_9qualifierE0ELb0EE4callERKNS_3vecILi4EfLS2_0EEES7_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = +HEAPF32[$5>>2];
 $7 = $4;
 $8 = +HEAPF32[$7>>2];
 $9 = $6 + $8;
 $10 = $3;
 $11 = ((($10)) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $4;
 $14 = ((($13)) + 4|0);
 $15 = +HEAPF32[$14>>2];
 $16 = $12 + $15;
 $17 = $3;
 $18 = ((($17)) + 8|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $4;
 $21 = ((($20)) + 8|0);
 $22 = +HEAPF32[$21>>2];
 $23 = $19 + $22;
 $24 = $3;
 $25 = ((($24)) + 12|0);
 $26 = +HEAPF32[$25>>2];
 $27 = $4;
 $28 = ((($27)) + 12|0);
 $29 = +HEAPF32[$28>>2];
 $30 = $26 + $29;
 __ZN3glm3vecILi4EfLNS_9qualifierE0EEC2Effff($0,$9,$16,$23,$30);
 STACKTOP = sp;return;
}
function __ZN6EngineC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP16[$2>>1] = 0;
 $3 = ((($2)) + 2|0);
 HEAP16[$3>>1] = 0;
 $4 = ((($2)) + 4|0);
 HEAPF32[$4>>2] = 1.0;
 $5 = ((($2)) + 8|0);
 HEAPF32[$5>>2] = 1.0;
 $6 = ((($2)) + 12|0);
 HEAP8[$6>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN6EngineD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZNK10GUIManager19ProcessGUIProcesserEP12GUIProcesserI13GUIButtonDataEPK15GUIButtonParamsm($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0;
 var $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $8 = sp + 16|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $12 = (__ZN6Engine11GetInstanceEv()|0);
 $13 = ((($12)) + 4|0);
 $14 = +HEAPF32[$13>>2];
 $15 = (__ZN6Engine11GetInstanceEv()|0);
 $16 = ((($15)) + 8|0);
 $17 = +HEAPF32[$16>>2];
 __ZN3glm3vecILi2EfLNS_9qualifierE0EEC2Eff($8,$14,$17);
 $9 = 0;
 while(1) {
  $18 = $9;
  $19 = $7;
  $20 = ($18>>>0)<($19>>>0);
  if (!($20)) {
   break;
  }
  $21 = $6;
  $22 = $9;
  $23 = (($21) + (($22*48)|0)|0);
  $10 = $23;
  $24 = $5;
  $25 = $9;
  $26 = (($24) + (($25*40)|0)|0);
  $11 = $26;
  $27 = $10;
  $28 = ((($27)) + 36|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $11;
  HEAP32[$30>>2] = $29;
  $31 = $10;
  $32 = ((($31)) + 40|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $11;
  $35 = ((($34)) + 4|0);
  HEAP32[$35>>2] = $33;
  $36 = $10;
  $37 = ((($36)) + 44|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $11;
  $40 = ((($39)) + 8|0);
  HEAP32[$40>>2] = $38;
  $41 = $10;
  $42 = $11;
  $43 = ((($42)) + 12|0);
  ;HEAP32[$43>>2]=HEAP32[$41>>2]|0;HEAP32[$43+4>>2]=HEAP32[$41+4>>2]|0;HEAP32[$43+8>>2]=HEAP32[$41+8>>2]|0;HEAP32[$43+12>>2]=HEAP32[$41+12>>2]|0;
  $44 = +HEAPF32[$8>>2];
  $45 = $11;
  $46 = ((($45)) + 12|0);
  $47 = +HEAPF32[$46>>2];
  $48 = $47 * $44;
  HEAPF32[$46>>2] = $48;
  $49 = ((($8)) + 4|0);
  $50 = +HEAPF32[$49>>2];
  $51 = $11;
  $52 = ((($51)) + 12|0);
  $53 = ((($52)) + 4|0);
  $54 = +HEAPF32[$53>>2];
  $55 = $54 * $50;
  HEAPF32[$53>>2] = $55;
  $56 = +HEAPF32[$8>>2];
  $57 = $11;
  $58 = ((($57)) + 12|0);
  $59 = ((($58)) + 8|0);
  $60 = +HEAPF32[$59>>2];
  $61 = $60 * $56;
  HEAPF32[$59>>2] = $61;
  $62 = ((($8)) + 4|0);
  $63 = +HEAPF32[$62>>2];
  $64 = $11;
  $65 = ((($64)) + 12|0);
  $66 = ((($65)) + 12|0);
  $67 = +HEAPF32[$66>>2];
  $68 = $67 * $63;
  HEAPF32[$66>>2] = $68;
  $69 = $10;
  $70 = ((($69)) + 32|0);
  $71 = $11;
  $72 = ((($71)) + 12|0);
  $73 = ((($72)) + 16|0);
  ;HEAP8[$73>>0]=HEAP8[$70>>0]|0;
  $74 = $11;
  $75 = ((($74)) + 12|0);
  $76 = ((($75)) + 20|0);
  HEAPF32[$76>>2] = 1.0;
  $77 = $11;
  $78 = ((($77)) + 12|0);
  $79 = ((($78)) + 24|0);
  HEAPF32[$79>>2] = 1.0;
  $80 = $9;
  $81 = (($80) + 1)|0;
  $9 = $81;
 }
 STACKTOP = sp;return;
}
function __ZN23MainMenuBackgroundLayerD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZN5LayerD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN23MainMenuBackgroundLayerD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZN23MainMenuBackgroundLayerD2Ev($2);
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZN23MainMenuBackgroundLayer7OnEventERK5Event($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 40|0;
 $4 = sp + 28|0;
 $5 = sp;
 $6 = sp + 24|0;
 $2 = $0;
 $3 = $1;
 $7 = $2;
 $8 = $3;
 __ZN15EventDispatcherC2ERK5Event($4,$8);
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 __ZNSt3__28functionIFbRK5EventEEC2IZN23MainMenuBackgroundLayer7OnEventES3_E3__0vEET_($5,$$byval_copy);
 __ZN15EventDispatcher8DispatchE9EventTypeNSt3__28functionIFbRK5EventEEE($4,7,$5);
 __ZNSt3__28functionIFbRK5EventEED2Ev($5);
 STACKTOP = sp;return;
}
function __ZN23MainMenuBackgroundLayer4InitEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZN23MainMenuBackgroundLayer4DestEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZN23MainMenuBackgroundLayer8OnUpdateERKf($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 STACKTOP = sp;return;
}
function __ZN23MainMenuBackgroundLayer8OnRenderEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($2)) + 76|0);
 __ZNK14ScreenRenderer6RenderERK15BasicRenderable($4,$5);
 STACKTOP = sp;return;
}
function __ZN15EventDispatcherC2ERK5Event($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 HEAP32[$4>>2] = $5;
 STACKTOP = sp;return;
}
function __ZNSt3__28functionIFbRK5EventEEC2IZN23MainMenuBackgroundLayer7OnEventES3_E3__0vEET_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $10 = sp + 96|0;
 $11 = sp + 88|0;
 $12 = sp + 80|0;
 $13 = sp + 72|0;
 $17 = sp + 235|0;
 $18 = sp + 234|0;
 $19 = sp + 233|0;
 $20 = sp + 232|0;
 $22 = sp + 172|0;
 $25 = sp + 231|0;
 $30 = sp + 64|0;
 $31 = sp + 56|0;
 $32 = sp + 48|0;
 $36 = sp + 40|0;
 $37 = sp + 32|0;
 $38 = sp + 24|0;
 $41 = sp + 230|0;
 $42 = sp + 124|0;
 $43 = sp + 229|0;
 $44 = sp + 228|0;
 $45 = sp + 227|0;
 $46 = sp + 226|0;
 $47 = sp + 16|0;
 $48 = sp + 8|0;
 $49 = sp;
 $53 = sp + 225|0;
 $54 = sp + 108|0;
 $55 = sp + 224|0;
 $57 = $0;
 $58 = $57;
 $59 = ((($58)) + 16|0);
 HEAP32[$59>>2] = 0;
 $56 = $1;
 $2 = $1;
 $60 = $2;
 $51 = $58;
 $52 = $60;
 $61 = $51;
 $50 = $61;
 $62 = $50;
 HEAP32[$62>>2] = (3748);
 HEAP32[$61>>2] = (3792);
 $63 = ((($61)) + 4|0);
 $64 = $52;
 $3 = $64;
 $65 = $3;
 $23 = $65;
 $66 = $23;
 $21 = $66;
 $67 = $21;
 $15 = $22;
 $16 = $67;
 $68 = $15;
 $69 = $16;
 $14 = $69;
 $70 = $14;
 ;HEAP8[$10>>0]=HEAP8[$20>>0]|0;
 ;HEAP8[$11>>0]=HEAP8[$19>>0]|0;
 ;HEAP8[$12>>0]=HEAP8[$18>>0]|0;
 ;HEAP8[$13>>0]=HEAP8[$17>>0]|0;
 $8 = $68;
 $9 = $70;
 $71 = $8;
 $72 = $9;
 $7 = $72;
 $73 = $7;
 $5 = $71;
 $6 = $73;
 $74 = $5;
 $75 = $6;
 $4 = $75;
 $76 = $4;
 HEAP32[$74>>2] = $76;
 $77 = HEAP32[$22>>2]|0;
 HEAP32[$54>>2] = $77;
 $24 = $25;
 ;HEAP8[$47>>0]=HEAP8[$55>>0]|0;
 ;HEAP8[$48>>0]=HEAP8[$54>>0]|0;HEAP8[$48+1>>0]=HEAP8[$54+1>>0]|0;HEAP8[$48+2>>0]=HEAP8[$54+2>>0]|0;HEAP8[$48+3>>0]=HEAP8[$54+3>>0]|0;
 ;HEAP8[$49>>0]=HEAP8[$53>>0]|0;
 $40 = $63;
 $78 = $40;
 $39 = $48;
 $79 = $39;
 ;HEAP32[$42>>2]=HEAP32[$79>>2]|0;
 ;HEAP8[$30>>0]=HEAP8[$43>>0]|0;
 ;HEAP8[$31>>0]=HEAP8[$42>>0]|0;HEAP8[$31+1>>0]=HEAP8[$42+1>>0]|0;HEAP8[$31+2>>0]=HEAP8[$42+2>>0]|0;HEAP8[$31+3>>0]=HEAP8[$42+3>>0]|0;
 ;HEAP8[$32>>0]=HEAP8[$41>>0]|0;
 $29 = $78;
 $80 = $29;
 $28 = $31;
 $81 = $28;
 $27 = $81;
 $82 = $27;
 $83 = HEAP32[$82>>2]|0;
 $26 = $83;
 $84 = $26;
 ;HEAP32[$80>>2]=HEAP32[$84>>2]|0;
 $33 = $47;
 ;HEAP8[$36>>0]=HEAP8[$46>>0]|0;
 ;HEAP8[$37>>0]=HEAP8[$45>>0]|0;
 ;HEAP8[$38>>0]=HEAP8[$44>>0]|0;
 $35 = $78;
 $85 = $35;
 $34 = $85;
 $86 = ((($58)) + 16|0);
 HEAP32[$86>>2] = $58;
 STACKTOP = sp;return;
}
function __ZN15EventDispatcher8DispatchE9EventTypeNSt3__28functionIFbRK5EventEEE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&1;
 if ($9) {
  STACKTOP = sp;return;
 }
 $10 = HEAP32[$5>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = $4;
 $13 = ($11|0)==($12|0);
 if (!($13)) {
  STACKTOP = sp;return;
 }
 $14 = HEAP32[$5>>2]|0;
 $15 = (__ZNKSt3__28functionIFbRK5EventEEclES3_($2,$14)|0);
 $16 = HEAP32[$5>>2]|0;
 $17 = ((($16)) + 4|0);
 $18 = $15&1;
 HEAP8[$17>>0] = $18;
 STACKTOP = sp;return;
}
function __ZNSt3__28functionIFbRK5EventEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($2|0);
 $6 = ((($2)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 if ($5) {
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  FUNCTION_TABLE_vi[$10 & 511]($7);
  STACKTOP = sp;return;
 }
 $11 = ($7|0)!=(0|0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = ((($2)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 FUNCTION_TABLE_vi[$16 & 511]($13);
 STACKTOP = sp;return;
}
function __ZNKSt3__28functionIFbRK5EventEEclES3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = (___cxa_allocate_exception(4)|0);
  ;HEAP32[$9>>2]=0|0;
  __ZNSt3__217bad_function_callC2Ev($9);
  ___cxa_throw(($9|0),(3560|0),(209|0));
  // unreachable;
 } else {
  $10 = ((($5)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($12)) + 24|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $4;
  $2 = $15;
  $16 = $2;
  $17 = (FUNCTION_TABLE_iii[$14 & 255]($11,$16)|0);
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function __ZNSt3__217bad_function_callC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $1 = $3;
 $4 = $1;
 HEAP32[$4>>2] = (5544);
 HEAP32[$3>>2] = (5440);
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN23MainMenuBackgroundLayer7OnEventERK5EventE3__0NS_9allocatorIS6_EEFbS5_EED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $1 = $3;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN23MainMenuBackgroundLayer7OnEventERK5EventE3__0NS_9allocatorIS6_EEFbS5_EED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZNSt3__210__function6__funcIZN23MainMenuBackgroundLayer7OnEventERK5EventE3__0NS_9allocatorIS6_EEFbS5_EED2Ev($2);
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZNKSt3__210__function6__funcIZN23MainMenuBackgroundLayer7OnEventERK5EventE3__0NS_9allocatorIS6_EEFbS5_EE7__cloneEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(608|0);
 $7 = sp + 128|0;
 $8 = sp + 120|0;
 $9 = sp + 112|0;
 $10 = sp + 104|0;
 $13 = sp + 594|0;
 $14 = sp + 593|0;
 $15 = sp + 592|0;
 $16 = sp + 591|0;
 $18 = sp + 540|0;
 $27 = sp + 96|0;
 $28 = sp + 88|0;
 $29 = sp + 80|0;
 $30 = sp + 72|0;
 $34 = sp + 590|0;
 $35 = sp + 589|0;
 $36 = sp + 588|0;
 $37 = sp + 587|0;
 $39 = sp + 488|0;
 $45 = sp + 64|0;
 $46 = sp + 56|0;
 $47 = sp + 48|0;
 $53 = sp + 40|0;
 $54 = sp + 32|0;
 $55 = sp + 24|0;
 $58 = sp + 586|0;
 $59 = sp + 436|0;
 $60 = sp + 585|0;
 $61 = sp + 584|0;
 $62 = sp + 432|0;
 $63 = sp + 583|0;
 $64 = sp + 16|0;
 $65 = sp + 8|0;
 $66 = sp;
 $71 = sp + 582|0;
 $72 = sp + 412|0;
 $73 = sp + 408|0;
 $100 = sp + 300|0;
 $137 = sp + 581|0;
 $138 = sp + 144|0;
 $139 = sp + 136|0;
 $140 = sp + 580|0;
 $136 = $0;
 $141 = $136;
 $142 = ((($141)) + 4|0);
 $135 = $142;
 $143 = $135;
 $134 = $143;
 $144 = $134;
 $132 = $137;
 $133 = $144;
 $110 = $137;
 $111 = 1;
 $112 = 0;
 $145 = $110;
 $146 = $111;
 $109 = $145;
 $147 = ($146>>>0)>(536870911);
 if ($147) {
  $107 = 9129;
  $148 = (___cxa_allocate_exception(8)|0);
  $149 = $107;
  $105 = $148;
  $106 = $149;
  $150 = $105;
  $151 = $106;
  __ZNSt11logic_errorC2EPKc($150,$151);
  HEAP32[$150>>2] = (5584);
  ___cxa_throw(($148|0),(3656|0),(228|0));
  // unreachable;
 }
 $152 = $111;
 $153 = $152<<3;
 $108 = $153;
 $154 = $108;
 $155 = (__Znwm($154)|0);
 $102 = $139;
 $103 = $137;
 $104 = 1;
 $156 = $102;
 $157 = $103;
 HEAP32[$156>>2] = $157;
 $158 = ((($156)) + 4|0);
 $159 = $104;
 HEAP32[$158>>2] = $159;
 $99 = $138;
 HEAP32[$100>>2] = $155;
 $101 = $139;
 $160 = $99;
 $161 = $101;
 $98 = $161;
 $162 = $98;
 $95 = $160;
 $96 = $100;
 $97 = $162;
 $163 = $95;
 $164 = $96;
 $94 = $164;
 $165 = $94;
 $88 = $163;
 $89 = $165;
 $166 = $88;
 $167 = $89;
 $87 = $167;
 $168 = $87;
 $169 = HEAP32[$168>>2]|0;
 HEAP32[$166>>2] = $169;
 $170 = ((($163)) + 4|0);
 $171 = $97;
 $90 = $171;
 $172 = $90;
 $92 = $170;
 $93 = $172;
 $173 = $92;
 $174 = $93;
 $91 = $174;
 $175 = $91;
 ;HEAP32[$173>>2]=HEAP32[$175>>2]|0;HEAP32[$173+4>>2]=HEAP32[$175+4>>2]|0;
 $86 = $138;
 $176 = $86;
 $85 = $176;
 $177 = $85;
 $84 = $177;
 $178 = $84;
 $179 = HEAP32[$178>>2]|0;
 $180 = ((($141)) + 4|0);
 $83 = $180;
 $181 = $83;
 $82 = $181;
 $182 = $82;
 $80 = $140;
 $81 = $137;
 $68 = $179;
 $69 = $182;
 $70 = $140;
 $183 = $68;
 $67 = $183;
 $184 = $67;
 HEAP32[$184>>2] = (3748);
 HEAP32[$183>>2] = (3792);
 $185 = ((($183)) + 4|0);
 $186 = $69;
 $19 = $186;
 $187 = $19;
 $17 = $187;
 $188 = $17;
 $11 = $18;
 $12 = $188;
 $189 = $11;
 $190 = $12;
 ;HEAP8[$7>>0]=HEAP8[$16>>0]|0;
 ;HEAP8[$8>>0]=HEAP8[$15>>0]|0;
 ;HEAP8[$9>>0]=HEAP8[$14>>0]|0;
 ;HEAP8[$10>>0]=HEAP8[$13>>0]|0;
 $5 = $189;
 $6 = $190;
 $191 = $5;
 $192 = $6;
 $4 = $192;
 $193 = $4;
 $2 = $191;
 $3 = $193;
 $194 = $2;
 $195 = $3;
 $1 = $195;
 $196 = $1;
 HEAP32[$194>>2] = $196;
 $197 = HEAP32[$18>>2]|0;
 HEAP32[$72>>2] = $197;
 $198 = $70;
 $20 = $198;
 $199 = $20;
 $40 = $199;
 $200 = $40;
 $38 = $200;
 $201 = $38;
 $32 = $39;
 $33 = $201;
 $202 = $32;
 $203 = $33;
 $31 = $203;
 $204 = $31;
 ;HEAP8[$27>>0]=HEAP8[$37>>0]|0;
 ;HEAP8[$28>>0]=HEAP8[$36>>0]|0;
 ;HEAP8[$29>>0]=HEAP8[$35>>0]|0;
 ;HEAP8[$30>>0]=HEAP8[$34>>0]|0;
 $25 = $202;
 $26 = $204;
 $205 = $25;
 $206 = $26;
 $24 = $206;
 $207 = $24;
 $22 = $205;
 $23 = $207;
 $208 = $22;
 $209 = $23;
 $21 = $209;
 $210 = $21;
 HEAP32[$208>>2] = $210;
 $211 = HEAP32[$39>>2]|0;
 HEAP32[$73>>2] = $211;
 ;HEAP8[$64>>0]=HEAP8[$73>>0]|0;HEAP8[$64+1>>0]=HEAP8[$73+1>>0]|0;HEAP8[$64+2>>0]=HEAP8[$73+2>>0]|0;HEAP8[$64+3>>0]=HEAP8[$73+3>>0]|0;
 ;HEAP8[$65>>0]=HEAP8[$72>>0]|0;HEAP8[$65+1>>0]=HEAP8[$72+1>>0]|0;HEAP8[$65+2>>0]=HEAP8[$72+2>>0]|0;HEAP8[$65+3>>0]=HEAP8[$72+3>>0]|0;
 ;HEAP8[$66>>0]=HEAP8[$71>>0]|0;
 $57 = $185;
 $212 = $57;
 $56 = $65;
 $213 = $56;
 ;HEAP32[$59>>2]=HEAP32[$213>>2]|0;
 ;HEAP8[$45>>0]=HEAP8[$60>>0]|0;
 ;HEAP8[$46>>0]=HEAP8[$59>>0]|0;HEAP8[$46+1>>0]=HEAP8[$59+1>>0]|0;HEAP8[$46+2>>0]=HEAP8[$59+2>>0]|0;HEAP8[$46+3>>0]=HEAP8[$59+3>>0]|0;
 ;HEAP8[$47>>0]=HEAP8[$58>>0]|0;
 $44 = $212;
 $214 = $44;
 $43 = $46;
 $215 = $43;
 $42 = $215;
 $216 = $42;
 $217 = HEAP32[$216>>2]|0;
 $41 = $217;
 $218 = $41;
 ;HEAP32[$214>>2]=HEAP32[$218>>2]|0;
 $48 = $64;
 $219 = $48;
 ;HEAP32[$62>>2]=HEAP32[$219>>2]|0;
 ;HEAP8[$53>>0]=HEAP8[$63>>0]|0;
 ;HEAP8[$54>>0]=HEAP8[$62>>0]|0;HEAP8[$54+1>>0]=HEAP8[$62+1>>0]|0;HEAP8[$54+2>>0]=HEAP8[$62+2>>0]|0;HEAP8[$54+3>>0]=HEAP8[$62+3>>0]|0;
 ;HEAP8[$55>>0]=HEAP8[$61>>0]|0;
 $52 = $212;
 $51 = $54;
 $220 = $51;
 $50 = $220;
 $221 = $50;
 $222 = HEAP32[$221>>2]|0;
 $49 = $222;
 $78 = $138;
 $223 = $78;
 $77 = $223;
 $224 = $77;
 $76 = $224;
 $225 = $76;
 $226 = HEAP32[$225>>2]|0;
 $79 = $226;
 $75 = $223;
 $227 = $75;
 $74 = $227;
 $228 = $74;
 HEAP32[$228>>2] = 0;
 $229 = $79;
 $131 = $138;
 $230 = $131;
 $128 = $230;
 $129 = 0;
 $231 = $128;
 $127 = $231;
 $232 = $127;
 $126 = $232;
 $233 = $126;
 $234 = HEAP32[$233>>2]|0;
 $130 = $234;
 $235 = $129;
 $116 = $231;
 $236 = $116;
 $115 = $236;
 $237 = $115;
 HEAP32[$237>>2] = $235;
 $238 = $130;
 $239 = ($238|0)!=(0|0);
 if (!($239)) {
  STACKTOP = sp;return ($229|0);
 }
 $114 = $231;
 $240 = $114;
 $241 = ((($240)) + 4|0);
 $113 = $241;
 $242 = $113;
 $243 = $130;
 $124 = $242;
 $125 = $243;
 $244 = $124;
 $245 = HEAP32[$244>>2]|0;
 $246 = $125;
 $247 = ((($244)) + 4|0);
 $248 = HEAP32[$247>>2]|0;
 $121 = $245;
 $122 = $246;
 $123 = $248;
 $249 = $121;
 $250 = $122;
 $251 = $123;
 $118 = $249;
 $119 = $250;
 $120 = $251;
 $252 = $119;
 $117 = $252;
 $253 = $117;
 __ZdlPv($253);
 STACKTOP = sp;return ($229|0);
}
function __ZNKSt3__210__function6__funcIZN23MainMenuBackgroundLayer7OnEventERK5EventE3__0NS_9allocatorIS6_EEFbS5_EE7__cloneEPNS0_6__baseIS9_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $10 = sp + 128|0;
 $11 = sp + 120|0;
 $12 = sp + 112|0;
 $13 = sp + 104|0;
 $16 = sp + 332|0;
 $17 = sp + 331|0;
 $18 = sp + 330|0;
 $19 = sp + 329|0;
 $21 = sp + 272|0;
 $29 = sp + 96|0;
 $30 = sp + 88|0;
 $31 = sp + 80|0;
 $32 = sp + 72|0;
 $35 = sp + 328|0;
 $36 = sp + 327|0;
 $37 = sp + 326|0;
 $38 = sp + 325|0;
 $40 = sp + 228|0;
 $46 = sp + 64|0;
 $47 = sp + 56|0;
 $48 = sp + 48|0;
 $54 = sp + 40|0;
 $55 = sp + 32|0;
 $56 = sp + 24|0;
 $59 = sp + 324|0;
 $60 = sp + 176|0;
 $61 = sp + 323|0;
 $62 = sp + 322|0;
 $63 = sp + 172|0;
 $64 = sp + 321|0;
 $65 = sp + 16|0;
 $66 = sp + 8|0;
 $67 = sp;
 $72 = sp + 320|0;
 $73 = sp + 152|0;
 $74 = sp + 148|0;
 $77 = $0;
 $78 = $1;
 $79 = $77;
 $80 = $78;
 $81 = ((($79)) + 4|0);
 $76 = $81;
 $82 = $76;
 $75 = $82;
 $83 = $75;
 $84 = ((($79)) + 4|0);
 $3 = $84;
 $85 = $3;
 $2 = $85;
 $86 = $2;
 $69 = $80;
 $70 = $83;
 $71 = $86;
 $87 = $69;
 $68 = $87;
 $88 = $68;
 HEAP32[$88>>2] = (3748);
 HEAP32[$87>>2] = (3792);
 $89 = ((($87)) + 4|0);
 $90 = $70;
 $22 = $90;
 $91 = $22;
 $20 = $91;
 $92 = $20;
 $14 = $21;
 $15 = $92;
 $93 = $14;
 $94 = $15;
 ;HEAP8[$10>>0]=HEAP8[$19>>0]|0;
 ;HEAP8[$11>>0]=HEAP8[$18>>0]|0;
 ;HEAP8[$12>>0]=HEAP8[$17>>0]|0;
 ;HEAP8[$13>>0]=HEAP8[$16>>0]|0;
 $8 = $93;
 $9 = $94;
 $95 = $8;
 $96 = $9;
 $7 = $96;
 $97 = $7;
 $5 = $95;
 $6 = $97;
 $98 = $5;
 $99 = $6;
 $4 = $99;
 $100 = $4;
 HEAP32[$98>>2] = $100;
 $101 = HEAP32[$21>>2]|0;
 HEAP32[$73>>2] = $101;
 $102 = $71;
 $41 = $102;
 $103 = $41;
 $39 = $103;
 $104 = $39;
 $33 = $40;
 $34 = $104;
 $105 = $33;
 $106 = $34;
 ;HEAP8[$29>>0]=HEAP8[$38>>0]|0;
 ;HEAP8[$30>>0]=HEAP8[$37>>0]|0;
 ;HEAP8[$31>>0]=HEAP8[$36>>0]|0;
 ;HEAP8[$32>>0]=HEAP8[$35>>0]|0;
 $27 = $105;
 $28 = $106;
 $107 = $27;
 $108 = $28;
 $26 = $108;
 $109 = $26;
 $24 = $107;
 $25 = $109;
 $110 = $24;
 $111 = $25;
 $23 = $111;
 $112 = $23;
 HEAP32[$110>>2] = $112;
 $113 = HEAP32[$40>>2]|0;
 HEAP32[$74>>2] = $113;
 ;HEAP8[$65>>0]=HEAP8[$74>>0]|0;HEAP8[$65+1>>0]=HEAP8[$74+1>>0]|0;HEAP8[$65+2>>0]=HEAP8[$74+2>>0]|0;HEAP8[$65+3>>0]=HEAP8[$74+3>>0]|0;
 ;HEAP8[$66>>0]=HEAP8[$73>>0]|0;HEAP8[$66+1>>0]=HEAP8[$73+1>>0]|0;HEAP8[$66+2>>0]=HEAP8[$73+2>>0]|0;HEAP8[$66+3>>0]=HEAP8[$73+3>>0]|0;
 ;HEAP8[$67>>0]=HEAP8[$72>>0]|0;
 $58 = $89;
 $114 = $58;
 $57 = $66;
 $115 = $57;
 ;HEAP32[$60>>2]=HEAP32[$115>>2]|0;
 ;HEAP8[$46>>0]=HEAP8[$61>>0]|0;
 ;HEAP8[$47>>0]=HEAP8[$60>>0]|0;HEAP8[$47+1>>0]=HEAP8[$60+1>>0]|0;HEAP8[$47+2>>0]=HEAP8[$60+2>>0]|0;HEAP8[$47+3>>0]=HEAP8[$60+3>>0]|0;
 ;HEAP8[$48>>0]=HEAP8[$59>>0]|0;
 $45 = $114;
 $116 = $45;
 $44 = $47;
 $117 = $44;
 $43 = $117;
 $118 = $43;
 $119 = HEAP32[$118>>2]|0;
 $42 = $119;
 $120 = $42;
 ;HEAP32[$116>>2]=HEAP32[$120>>2]|0;
 $49 = $65;
 $121 = $49;
 ;HEAP32[$63>>2]=HEAP32[$121>>2]|0;
 ;HEAP8[$54>>0]=HEAP8[$64>>0]|0;
 ;HEAP8[$55>>0]=HEAP8[$63>>0]|0;HEAP8[$55+1>>0]=HEAP8[$63+1>>0]|0;HEAP8[$55+2>>0]=HEAP8[$63+2>>0]|0;HEAP8[$55+3>>0]=HEAP8[$63+3>>0]|0;
 ;HEAP8[$56>>0]=HEAP8[$62>>0]|0;
 $53 = $114;
 $52 = $55;
 $122 = $52;
 $51 = $122;
 $123 = $51;
 $124 = HEAP32[$123>>2]|0;
 $50 = $124;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN23MainMenuBackgroundLayer7OnEventERK5EventE3__0NS_9allocatorIS6_EEFbS5_EE7destroyEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN23MainMenuBackgroundLayer7OnEventERK5EventE3__0NS_9allocatorIS6_EEFbS5_EE18destroy_deallocateEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $10 = sp + 36|0;
 $9 = $0;
 $11 = $9;
 $12 = ((($11)) + 4|0);
 $8 = $12;
 $13 = $8;
 $7 = $13;
 $14 = $7;
 $1 = $10;
 $2 = $14;
 $4 = $10;
 $5 = $11;
 $6 = 1;
 $15 = $5;
 $3 = $15;
 $16 = $3;
 __ZdlPv($16);
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN23MainMenuBackgroundLayer7OnEventERK5EventE3__0NS_9allocatorIS6_EEFbS5_EEclES5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $5;
 $8 = ((($7)) + 4|0);
 $4 = $8;
 $9 = $4;
 $3 = $9;
 $10 = $3;
 $11 = $6;
 $2 = $11;
 $12 = $2;
 $13 = (__ZNSt3__228__invoke_void_return_wrapperIbE6__callIJRZN23MainMenuBackgroundLayer7OnEventERK5EventE3__0S6_EEEbDpOT_($10,$12)|0);
 STACKTOP = sp;return ($13|0);
}
function __ZNKSt3__210__function6__funcIZN23MainMenuBackgroundLayer7OnEventERK5EventE3__0NS_9allocatorIS6_EEFbS5_EE6targetERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $7;
 $10 = $8;
 $4 = $10;
 $5 = 2576;
 $11 = $4;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $5;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($13|0)==($16|0);
 if ($17) {
  $18 = ((($9)) + 4|0);
  $3 = $18;
  $19 = $3;
  $2 = $19;
  $20 = $2;
  $6 = $20;
  $21 = $6;
  STACKTOP = sp;return ($21|0);
 } else {
  $6 = 0;
  $21 = $6;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function __ZNKSt3__210__function6__funcIZN23MainMenuBackgroundLayer7OnEventERK5EventE3__0NS_9allocatorIS6_EEFbS5_EE11target_typeEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (2576|0);
}
function __ZNSt3__228__invoke_void_return_wrapperIbE6__callIJRZN23MainMenuBackgroundLayer7OnEventERK5EventE3__0S6_EEEbDpOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = $0;
 $9 = $1;
 $10 = $8;
 $7 = $10;
 $11 = $7;
 $12 = $9;
 $2 = $12;
 $13 = $2;
 $5 = $11;
 $6 = $13;
 $14 = $5;
 $4 = $14;
 $15 = $4;
 $16 = $6;
 $3 = $16;
 $17 = $3;
 $18 = (__ZZN23MainMenuBackgroundLayer7OnEventERK5EventENK3__0clES2_($15,$17)|0);
 STACKTOP = sp;return ($18|0);
}
function __ZZN23MainMenuBackgroundLayer7OnEventERK5EventENK3__0clES2_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $$byval_copy = sp + 144|0;
 $6 = sp + 64|0;
 $7 = sp;
 $2 = $0;
 $3 = $1;
 $8 = $2;
 $9 = HEAP32[$8>>2]|0;
 $10 = $3;
 $4 = $10;
 $11 = $4;
 $12 = ((($11)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (+($13|0));
 $15 = $4;
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (+($17|0));
 $19 = $14 / $18;
 $5 = $19;
 $20 = $5;
 $21 = -1.0 * $20;
 $22 = $5;
 $23 = 1.0 * $22;
 __ZN3glm5orthoIfEENS_3matILi4ELi4ET_LNS_9qualifierE0EEES2_S2_S2_S2_S2_S2_($6,$21,$23,-1.0,1.0,-1.0,1.0);
 $24 = ((($9)) + 8|0);
 dest=$24; src=$6; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $25 = ((($9)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($9)) + 8|0);
 dest=$7; src=$27; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$$byval_copy; src=$7; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 __ZNK8Renderer19SetProjectionMatrixEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE($26,$$byval_copy);
 STACKTOP = sp;return 0;
}
function __ZN3glm5orthoIfEENS_3matILi4ELi4ET_LNS_9qualifierE0EEES2_S2_S2_S2_S2_S2_($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = $6;
 $13 = $7;
 $14 = $8;
 $15 = $9;
 $16 = $10;
 $17 = $11;
 $18 = $12;
 __ZN3glm10orthoRH_NOIfEENS_3matILi4ELi4ET_LNS_9qualifierE0EEES2_S2_S2_S2_S2_S2_($0,$13,$14,$15,$16,$17,$18);
 STACKTOP = sp;return;
}
function __ZNK8Renderer19SetProjectionMatrixEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 dest=$3; src=$1; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function __ZN3glm10orthoRH_NOIfEENS_3matILi4ELi4ET_LNS_9qualifierE0EEES2_S2_S2_S2_S2_S2_($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = $6;
 dest=$0; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAPF32[$0>>2] = 1.0;
 $13 = ((($0)) + 16|0);
 $14 = ((($13)) + 4|0);
 HEAPF32[$14>>2] = 1.0;
 $15 = ((($0)) + 32|0);
 $16 = ((($15)) + 8|0);
 HEAPF32[$16>>2] = 1.0;
 $17 = ((($0)) + 48|0);
 $18 = ((($17)) + 12|0);
 HEAPF32[$18>>2] = 1.0;
 $19 = $8;
 $20 = $7;
 $21 = $19 - $20;
 $22 = 2.0 / $21;
 $23 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($0,0)|0);
 $24 = (__ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi($23,0)|0);
 HEAPF32[$24>>2] = $22;
 $25 = $10;
 $26 = $9;
 $27 = $25 - $26;
 $28 = 2.0 / $27;
 $29 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($0,1)|0);
 $30 = (__ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi($29,1)|0);
 HEAPF32[$30>>2] = $28;
 $31 = $12;
 $32 = $11;
 $33 = $31 - $32;
 $34 = -2.0 / $33;
 $35 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($0,2)|0);
 $36 = (__ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi($35,2)|0);
 HEAPF32[$36>>2] = $34;
 $37 = $8;
 $38 = $7;
 $39 = $37 + $38;
 $40 = - $39;
 $41 = $8;
 $42 = $7;
 $43 = $41 - $42;
 $44 = $40 / $43;
 $45 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($0,3)|0);
 $46 = (__ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi($45,0)|0);
 HEAPF32[$46>>2] = $44;
 $47 = $10;
 $48 = $9;
 $49 = $47 + $48;
 $50 = - $49;
 $51 = $10;
 $52 = $9;
 $53 = $51 - $52;
 $54 = $50 / $53;
 $55 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($0,3)|0);
 $56 = (__ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi($55,1)|0);
 HEAPF32[$56>>2] = $54;
 $57 = $12;
 $58 = $11;
 $59 = $57 + $58;
 $60 = - $59;
 $61 = $12;
 $62 = $11;
 $63 = $61 - $62;
 $64 = $60 / $63;
 $65 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($0,3)|0);
 $66 = (__ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi($65,2)|0);
 HEAPF32[$66>>2] = $64;
 STACKTOP = sp;return;
}
function __ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = $4;
 $7 = ($6|0)>=(0);
 if (!($7)) {
  ___assert_fail((8478|0),(8507|0),481,(8540|0));
  // unreachable;
 }
 $8 = $4;
 $9 = (__ZN3glm3vecILi4EfLNS_9qualifierE0EE6lengthEv()|0);
 $10 = ($8|0)<($9|0);
 if (!($10)) {
  ___assert_fail((8478|0),(8507|0),481,(8540|0));
  // unreachable;
 }
 $11 = $4;
 switch ($11|0) {
 case 3:  {
  $14 = ((($5)) + 12|0);
  $2 = $14;
  break;
 }
 case 1:  {
  $12 = ((($5)) + 4|0);
  $2 = $12;
  break;
 }
 case 2:  {
  $13 = ((($5)) + 8|0);
  $2 = $13;
  break;
 }
 default: {
  $2 = $5;
 }
 }
 $15 = $2;
 STACKTOP = sp;return ($15|0);
}
function __ZN3glm3vecILi4EfLNS_9qualifierE0EE6lengthEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNSt3__210__function6__baseIFbRK5EventEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__baseIFbRK5EventEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 _llvm_trap();
 // unreachable;
}
function __ZN5LayerD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZN13EventListenerD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN13EventListenerD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZN16MainMenuGUILayerD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 76|0);
 __ZN16GUIButtonClusterILm5EED2Ev($3);
 __ZN5LayerD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN16MainMenuGUILayerD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZN16MainMenuGUILayerD2Ev($2);
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZN16MainMenuGUILayer7OnEventERK5Event($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 40|0;
 $4 = sp + 28|0;
 $5 = sp;
 $6 = sp + 24|0;
 $2 = $0;
 $3 = $1;
 $7 = $2;
 $8 = $3;
 __ZN15EventDispatcherC2ERK5Event($4,$8);
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 __ZNSt3__28functionIFbRK5EventEEC2IZN16MainMenuGUILayer7OnEventES3_E4__16vEET_($5,$$byval_copy);
 __ZN15EventDispatcher8DispatchE9EventTypeNSt3__28functionIFbRK5EventEEE($4,7,$5);
 __ZNSt3__28functionIFbRK5EventEED2Ev($5);
 $9 = ((($7)) + 76|0);
 $10 = $3;
 __ZN16GUIButtonClusterILm5EE7OnEventERK5Event($9,$10);
 STACKTOP = sp;return;
}
function __ZN16MainMenuGUILayer4InitEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZN16MainMenuGUILayer4DestEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZN16MainMenuGUILayer8OnUpdateERKf($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 76|0);
 $6 = $3;
 $7 = +HEAPF32[$6>>2];
 __ZN16GUIButtonClusterILm5EE8OnUpdateEf($5,$7);
 STACKTOP = sp;return;
}
function __ZN16MainMenuGUILayer8OnRenderEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($2)) + 76|0);
 $6 = (__ZNK10GUIClusterI13GUIButtonDataLm5EE16GetGuiRenderableEv($5)|0);
 __ZNK11GUIRenderer6RenderERK13GUIRenderable($4,$6);
 STACKTOP = sp;return;
}
function __ZNK10GUIClusterI13GUIButtonDataLm5EE16GetGuiRenderableEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN16GUIButtonClusterILm5EE8OnUpdateEf($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $$alloca_mul = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $17 = sp;
 $5 = $0;
 $6 = $1;
 $18 = $5;
 $7 = 2;
 $19 = ((($18)) + 24|0);
 $4 = $19;
 $8 = 5;
 $20 = $8;
 $21 = $20<<2;
 $22 = $21<<1;
 $$alloca_mul = $22;
 $23 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $9 = $23;
 $24 = $8;
 $25 = $9;
 __ZN16GUIButtonClusterILm5EE15ClearButtonsVBOEmmPf($18,2,$24,$25);
 $10 = 0;
 $26 = ((($18)) + 24|0);
 $11 = $26;
 $27 = $11;
 $3 = $27;
 $28 = $3;
 $12 = $28;
 $29 = $11;
 $2 = $29;
 $30 = $2;
 $31 = ((($30)) + 200|0);
 $13 = $31;
 while(1) {
  $32 = $12;
  $33 = $13;
  $34 = ($32|0)!=($33|0);
  if (!($34)) {
   break;
  }
  $35 = $12;
  $14 = $35;
  $36 = $14;
  $37 = ((($36)) + 12|0);
  $15 = $37;
  $38 = $14;
  $39 = $6;
  __ZN12GUIProcesserI13GUIButtonDataE8OnUpdateEf($38,$39);
  $40 = $15;
  $41 = ((($40)) + 16|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42 & 1;
  $44 = ($43<<24>>24)!=(0);
  $45 = $44 ^ 1;
  $46 = $45&1;
  $47 = $46<<2;
  $48 = $15;
  $49 = ((($48)) + 16|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = ($50&255) >>> 1;
  $52 = $51 & 1;
  $53 = $52&255;
  $54 = $53<<1;
  $55 = (($47) + ($54))|0;
  $56 = $15;
  $57 = ((($56)) + 16|0);
  $58 = HEAP8[$57>>0]|0;
  $59 = ($58&255) >>> 2;
  $60 = $59 & 1;
  $61 = $60&255;
  $62 = $61;
  $63 = (($55) + ($62))|0;
  $64 = (144 + ($63<<2)|0);
  $65 = +HEAPF32[$64>>2];
  $16 = $65;
  $66 = $10;
  $67 = $16;
  __ZN3glm3vecILi2EfLNS_9qualifierE0EEC2IifEET_T0_($17,0,$67);
  $68 = $9;
  __ZN16GUIButtonClusterILm5EE23UpdateButtonsDynamicVBOEjOKN3glm3vecILi2EfLNS1_9qualifierE0EEEPf($18,$66,$17,$68);
  $69 = $10;
  $70 = (($69) + 1)|0;
  $10 = $70;
  $71 = $12;
  $72 = ((($71)) + 40|0);
  $12 = $72;
 }
 $73 = $8;
 $74 = $9;
 __ZN16GUIButtonClusterILm5EE15FlushButtonsVBOEmmPf($18,2,$73,$74);
 STACKTOP = sp;return;
}
function __ZN16GUIButtonClusterILm5EE15ClearButtonsVBOEmmPf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $7;
 $9 = $6;
 $10 = $5;
 $11 = Math_imul($9, $10)|0;
 $12 = $11<<2;
 _memset(($8|0),0,($12|0))|0;
 STACKTOP = sp;return;
}
function __ZN12GUIProcesserI13GUIButtonDataE8OnUpdateEf($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 STACKTOP = sp;return;
}
function __ZN3glm3vecILi2EfLNS_9qualifierE0EEC2IifEET_T0_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $10 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = (+($7|0));
 HEAPF32[$6>>2] = $8;
 $9 = ((($6)) + 4|0);
 $10 = $5;
 HEAPF32[$9>>2] = $10;
 STACKTOP = sp;return;
}
function __ZN16GUIButtonClusterILm5EE23UpdateButtonsDynamicVBOEjOKN3glm3vecILi2EfLNS1_9qualifierE0EEEPf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = +HEAPF32[$8>>2];
 $10 = $7;
 $11 = $5;
 $12 = $11<<1;
 $13 = (($12) + 0)|0;
 $14 = (($10) + ($13<<2)|0);
 HEAPF32[$14>>2] = $9;
 $15 = $6;
 $16 = ((($15)) + 4|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $7;
 $19 = $5;
 $20 = $19<<1;
 $21 = (($20) + 1)|0;
 $22 = (($18) + ($21<<2)|0);
 HEAPF32[$22>>2] = $17;
 STACKTOP = sp;return;
}
function __ZN16GUIButtonClusterILm5EE15FlushButtonsVBOEmmPf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $4;
 $10 = ((($9)) + 4|0);
 $8 = $10;
 $11 = (__ZN11MeshManager11GetInstanceEv()|0);
 $12 = $8;
 $13 = HEAP32[$12>>2]|0;
 $14 = $8;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $7;
 $18 = $6;
 $19 = $5;
 $20 = Math_imul($18, $19)|0;
 __ZNK11MeshManager9UpdateVBOEjjPKfm($11,$13,$16,$17,$20);
 STACKTOP = sp;return;
}
function __ZNSt3__28functionIFbRK5EventEEC2IZN16MainMenuGUILayer7OnEventES3_E4__16vEET_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $10 = sp + 96|0;
 $11 = sp + 88|0;
 $12 = sp + 80|0;
 $13 = sp + 72|0;
 $17 = sp + 235|0;
 $18 = sp + 234|0;
 $19 = sp + 233|0;
 $20 = sp + 232|0;
 $22 = sp + 172|0;
 $25 = sp + 231|0;
 $30 = sp + 64|0;
 $31 = sp + 56|0;
 $32 = sp + 48|0;
 $36 = sp + 40|0;
 $37 = sp + 32|0;
 $38 = sp + 24|0;
 $41 = sp + 230|0;
 $42 = sp + 124|0;
 $43 = sp + 229|0;
 $44 = sp + 228|0;
 $45 = sp + 227|0;
 $46 = sp + 226|0;
 $47 = sp + 16|0;
 $48 = sp + 8|0;
 $49 = sp;
 $53 = sp + 225|0;
 $54 = sp + 108|0;
 $55 = sp + 224|0;
 $57 = $0;
 $58 = $57;
 $59 = ((($58)) + 16|0);
 HEAP32[$59>>2] = 0;
 $56 = $1;
 $2 = $1;
 $60 = $2;
 $51 = $58;
 $52 = $60;
 $61 = $51;
 $50 = $61;
 $62 = $50;
 HEAP32[$62>>2] = (3748);
 HEAP32[$61>>2] = (4092);
 $63 = ((($61)) + 4|0);
 $64 = $52;
 $3 = $64;
 $65 = $3;
 $23 = $65;
 $66 = $23;
 $21 = $66;
 $67 = $21;
 $15 = $22;
 $16 = $67;
 $68 = $15;
 $69 = $16;
 $14 = $69;
 $70 = $14;
 ;HEAP8[$10>>0]=HEAP8[$20>>0]|0;
 ;HEAP8[$11>>0]=HEAP8[$19>>0]|0;
 ;HEAP8[$12>>0]=HEAP8[$18>>0]|0;
 ;HEAP8[$13>>0]=HEAP8[$17>>0]|0;
 $8 = $68;
 $9 = $70;
 $71 = $8;
 $72 = $9;
 $7 = $72;
 $73 = $7;
 $5 = $71;
 $6 = $73;
 $74 = $5;
 $75 = $6;
 $4 = $75;
 $76 = $4;
 HEAP32[$74>>2] = $76;
 $77 = HEAP32[$22>>2]|0;
 HEAP32[$54>>2] = $77;
 $24 = $25;
 ;HEAP8[$47>>0]=HEAP8[$55>>0]|0;
 ;HEAP8[$48>>0]=HEAP8[$54>>0]|0;HEAP8[$48+1>>0]=HEAP8[$54+1>>0]|0;HEAP8[$48+2>>0]=HEAP8[$54+2>>0]|0;HEAP8[$48+3>>0]=HEAP8[$54+3>>0]|0;
 ;HEAP8[$49>>0]=HEAP8[$53>>0]|0;
 $40 = $63;
 $78 = $40;
 $39 = $48;
 $79 = $39;
 ;HEAP32[$42>>2]=HEAP32[$79>>2]|0;
 ;HEAP8[$30>>0]=HEAP8[$43>>0]|0;
 ;HEAP8[$31>>0]=HEAP8[$42>>0]|0;HEAP8[$31+1>>0]=HEAP8[$42+1>>0]|0;HEAP8[$31+2>>0]=HEAP8[$42+2>>0]|0;HEAP8[$31+3>>0]=HEAP8[$42+3>>0]|0;
 ;HEAP8[$32>>0]=HEAP8[$41>>0]|0;
 $29 = $78;
 $80 = $29;
 $28 = $31;
 $81 = $28;
 $27 = $81;
 $82 = $27;
 $83 = HEAP32[$82>>2]|0;
 $26 = $83;
 $84 = $26;
 ;HEAP32[$80>>2]=HEAP32[$84>>2]|0;
 $33 = $47;
 ;HEAP8[$36>>0]=HEAP8[$46>>0]|0;
 ;HEAP8[$37>>0]=HEAP8[$45>>0]|0;
 ;HEAP8[$38>>0]=HEAP8[$44>>0]|0;
 $35 = $78;
 $85 = $35;
 $34 = $85;
 $86 = ((($58)) + 16|0);
 HEAP32[$86>>2] = $58;
 STACKTOP = sp;return;
}
function __ZN16GUIButtonClusterILm5EE7OnEventERK5Event($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $$byval_copy4 = sp + 188|0;
 $$byval_copy3 = sp + 184|0;
 $$byval_copy2 = sp + 180|0;
 $$byval_copy1 = sp + 193|0;
 $$byval_copy = sp + 176|0;
 $6 = sp + 156|0;
 $12 = sp + 96|0;
 $13 = sp + 132|0;
 $14 = sp + 72|0;
 $15 = sp + 192|0;
 $16 = sp + 48|0;
 $17 = sp + 128|0;
 $18 = sp + 24|0;
 $19 = sp + 124|0;
 $20 = sp;
 $21 = sp + 120|0;
 $4 = $0;
 $5 = $1;
 $22 = $4;
 $23 = $5;
 __ZN15EventDispatcherC2ERK5Event($6,$23);
 $7 = 0;
 $24 = ((($22)) + 24|0);
 $8 = $24;
 $25 = $8;
 $3 = $25;
 $26 = $3;
 $9 = $26;
 $27 = $8;
 $2 = $27;
 $28 = $2;
 $29 = ((($28)) + 200|0);
 $10 = $29;
 while(1) {
  $30 = $9;
  $31 = $10;
  $32 = ($30|0)!=($31|0);
  if (!($32)) {
   break;
  }
  $33 = $9;
  $11 = $33;
  $34 = $11;
  $35 = ((($34)) + 12|0);
  $36 = ((($35)) + 16|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37 & 1;
  $39 = ($38<<24>>24)!=(0);
  if ($39) {
   $40 = $11;
   __ZN12GUIProcesserI13GUIButtonDataE7OnEventER15EventDispatcher($40,$6);
   $41 = $11;
   HEAP32[$13>>2] = $41;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$13>>2]|0;
   __ZNSt3__28functionIFbRK5EventEEC2IZN16GUIButtonClusterILm5EE7OnEventES3_EUlS3_E_vEET_($12,$$byval_copy);
   __ZN15EventDispatcher8DispatchE9EventTypeNSt3__28functionIFbRK5EventEEE($6,6,$12);
   __ZNSt3__28functionIFbRK5EventEED2Ev($12);
   ;HEAP8[$$byval_copy1>>0]=HEAP8[$15>>0]|0;
   __ZNSt3__28functionIFbRK5EventEEC2IZN16GUIButtonClusterILm5EE7OnEventES3_EUlS3_E0_vEET_($14,$$byval_copy1);
   __ZN15EventDispatcher8DispatchE9EventTypeNSt3__28functionIFbRK5EventEEE($6,7,$14);
   __ZNSt3__28functionIFbRK5EventEED2Ev($14);
   $42 = $11;
   HEAP32[$17>>2] = $42;
   ;HEAP32[$$byval_copy2>>2]=HEAP32[$17>>2]|0;
   __ZNSt3__28functionIFbRK5EventEEC2IZN16GUIButtonClusterILm5EE7OnEventES3_EUlS3_E1_vEET_($16,$$byval_copy2);
   __ZN15EventDispatcher8DispatchE9EventTypeNSt3__28functionIFbRK5EventEEE($6,16,$16);
   __ZNSt3__28functionIFbRK5EventEED2Ev($16);
   $43 = $11;
   HEAP32[$19>>2] = $43;
   ;HEAP32[$$byval_copy3>>2]=HEAP32[$19>>2]|0;
   __ZNSt3__28functionIFbRK5EventEEC2IZN16GUIButtonClusterILm5EE7OnEventES3_EUlS3_E2_vEET_($18,$$byval_copy3);
   __ZN15EventDispatcher8DispatchE9EventTypeNSt3__28functionIFbRK5EventEEE($6,14,$18);
   __ZNSt3__28functionIFbRK5EventEED2Ev($18);
   $44 = $11;
   HEAP32[$21>>2] = $44;
   ;HEAP32[$$byval_copy4>>2]=HEAP32[$21>>2]|0;
   __ZNSt3__28functionIFbRK5EventEEC2IZN16GUIButtonClusterILm5EE7OnEventES3_EUlS3_E3_vEET_($20,$$byval_copy4);
   __ZN15EventDispatcher8DispatchE9EventTypeNSt3__28functionIFbRK5EventEEE($6,15,$20);
   __ZNSt3__28functionIFbRK5EventEED2Ev($20);
   $45 = $7;
   $46 = (($45) + 1)|0;
   $7 = $46;
  }
  $47 = $9;
  $48 = ((($47)) + 40|0);
  $9 = $48;
 }
 STACKTOP = sp;return;
}
function __ZN12GUIProcesserI13GUIButtonDataE7OnEventER15EventDispatcher($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 STACKTOP = sp;return;
}
function __ZNSt3__28functionIFbRK5EventEEC2IZN16GUIButtonClusterILm5EE7OnEventES3_EUlS3_E_vEET_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $10 = sp + 96|0;
 $11 = sp + 88|0;
 $12 = sp + 80|0;
 $13 = sp + 72|0;
 $17 = sp + 235|0;
 $18 = sp + 234|0;
 $19 = sp + 233|0;
 $20 = sp + 232|0;
 $22 = sp + 172|0;
 $25 = sp + 231|0;
 $30 = sp + 64|0;
 $31 = sp + 56|0;
 $32 = sp + 48|0;
 $36 = sp + 40|0;
 $37 = sp + 32|0;
 $38 = sp + 24|0;
 $41 = sp + 230|0;
 $42 = sp + 124|0;
 $43 = sp + 229|0;
 $44 = sp + 228|0;
 $45 = sp + 227|0;
 $46 = sp + 226|0;
 $47 = sp + 16|0;
 $48 = sp + 8|0;
 $49 = sp;
 $53 = sp + 225|0;
 $54 = sp + 108|0;
 $55 = sp + 224|0;
 $57 = $0;
 $58 = $57;
 $59 = ((($58)) + 16|0);
 HEAP32[$59>>2] = 0;
 $56 = $1;
 $2 = $1;
 $60 = $2;
 $51 = $58;
 $52 = $60;
 $61 = $51;
 $50 = $61;
 $62 = $50;
 HEAP32[$62>>2] = (3748);
 HEAP32[$61>>2] = (4048);
 $63 = ((($61)) + 4|0);
 $64 = $52;
 $3 = $64;
 $65 = $3;
 $23 = $65;
 $66 = $23;
 $21 = $66;
 $67 = $21;
 $15 = $22;
 $16 = $67;
 $68 = $15;
 $69 = $16;
 $14 = $69;
 $70 = $14;
 ;HEAP8[$10>>0]=HEAP8[$20>>0]|0;
 ;HEAP8[$11>>0]=HEAP8[$19>>0]|0;
 ;HEAP8[$12>>0]=HEAP8[$18>>0]|0;
 ;HEAP8[$13>>0]=HEAP8[$17>>0]|0;
 $8 = $68;
 $9 = $70;
 $71 = $8;
 $72 = $9;
 $7 = $72;
 $73 = $7;
 $5 = $71;
 $6 = $73;
 $74 = $5;
 $75 = $6;
 $4 = $75;
 $76 = $4;
 HEAP32[$74>>2] = $76;
 $77 = HEAP32[$22>>2]|0;
 HEAP32[$54>>2] = $77;
 $24 = $25;
 ;HEAP8[$47>>0]=HEAP8[$55>>0]|0;
 ;HEAP8[$48>>0]=HEAP8[$54>>0]|0;HEAP8[$48+1>>0]=HEAP8[$54+1>>0]|0;HEAP8[$48+2>>0]=HEAP8[$54+2>>0]|0;HEAP8[$48+3>>0]=HEAP8[$54+3>>0]|0;
 ;HEAP8[$49>>0]=HEAP8[$53>>0]|0;
 $40 = $63;
 $78 = $40;
 $39 = $48;
 $79 = $39;
 ;HEAP32[$42>>2]=HEAP32[$79>>2]|0;
 ;HEAP8[$30>>0]=HEAP8[$43>>0]|0;
 ;HEAP8[$31>>0]=HEAP8[$42>>0]|0;HEAP8[$31+1>>0]=HEAP8[$42+1>>0]|0;HEAP8[$31+2>>0]=HEAP8[$42+2>>0]|0;HEAP8[$31+3>>0]=HEAP8[$42+3>>0]|0;
 ;HEAP8[$32>>0]=HEAP8[$41>>0]|0;
 $29 = $78;
 $80 = $29;
 $28 = $31;
 $81 = $28;
 $27 = $81;
 $82 = $27;
 $83 = HEAP32[$82>>2]|0;
 $26 = $83;
 $84 = $26;
 ;HEAP32[$80>>2]=HEAP32[$84>>2]|0;
 $33 = $47;
 ;HEAP8[$36>>0]=HEAP8[$46>>0]|0;
 ;HEAP8[$37>>0]=HEAP8[$45>>0]|0;
 ;HEAP8[$38>>0]=HEAP8[$44>>0]|0;
 $35 = $78;
 $85 = $35;
 $34 = $85;
 $86 = ((($58)) + 16|0);
 HEAP32[$86>>2] = $58;
 STACKTOP = sp;return;
}
function __ZNSt3__28functionIFbRK5EventEEC2IZN16GUIButtonClusterILm5EE7OnEventES3_EUlS3_E0_vEET_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $10 = sp + 96|0;
 $11 = sp + 88|0;
 $12 = sp + 80|0;
 $13 = sp + 72|0;
 $17 = sp + 235|0;
 $18 = sp + 234|0;
 $19 = sp + 233|0;
 $20 = sp + 232|0;
 $22 = sp + 172|0;
 $25 = sp + 231|0;
 $30 = sp + 64|0;
 $31 = sp + 56|0;
 $32 = sp + 48|0;
 $36 = sp + 40|0;
 $37 = sp + 32|0;
 $38 = sp + 24|0;
 $41 = sp + 230|0;
 $42 = sp + 124|0;
 $43 = sp + 229|0;
 $44 = sp + 228|0;
 $45 = sp + 227|0;
 $46 = sp + 226|0;
 $47 = sp + 16|0;
 $48 = sp + 8|0;
 $49 = sp;
 $53 = sp + 225|0;
 $54 = sp + 108|0;
 $55 = sp + 224|0;
 $57 = $0;
 $58 = $57;
 $59 = ((($58)) + 16|0);
 HEAP32[$59>>2] = 0;
 $56 = $1;
 $2 = $1;
 $60 = $2;
 $51 = $58;
 $52 = $60;
 $61 = $51;
 $50 = $61;
 $62 = $50;
 HEAP32[$62>>2] = (3748);
 HEAP32[$61>>2] = (4004);
 $63 = ((($61)) + 4|0);
 $64 = $52;
 $3 = $64;
 $65 = $3;
 $23 = $65;
 $66 = $23;
 $21 = $66;
 $67 = $21;
 $15 = $22;
 $16 = $67;
 $68 = $15;
 $69 = $16;
 $14 = $69;
 $70 = $14;
 ;HEAP8[$10>>0]=HEAP8[$20>>0]|0;
 ;HEAP8[$11>>0]=HEAP8[$19>>0]|0;
 ;HEAP8[$12>>0]=HEAP8[$18>>0]|0;
 ;HEAP8[$13>>0]=HEAP8[$17>>0]|0;
 $8 = $68;
 $9 = $70;
 $71 = $8;
 $72 = $9;
 $7 = $72;
 $73 = $7;
 $5 = $71;
 $6 = $73;
 $74 = $5;
 $75 = $6;
 $4 = $75;
 $76 = $4;
 HEAP32[$74>>2] = $76;
 $77 = HEAP32[$22>>2]|0;
 HEAP32[$54>>2] = $77;
 $24 = $25;
 ;HEAP8[$47>>0]=HEAP8[$55>>0]|0;
 ;HEAP8[$48>>0]=HEAP8[$54>>0]|0;HEAP8[$48+1>>0]=HEAP8[$54+1>>0]|0;HEAP8[$48+2>>0]=HEAP8[$54+2>>0]|0;HEAP8[$48+3>>0]=HEAP8[$54+3>>0]|0;
 ;HEAP8[$49>>0]=HEAP8[$53>>0]|0;
 $40 = $63;
 $78 = $40;
 $39 = $48;
 $79 = $39;
 ;HEAP32[$42>>2]=HEAP32[$79>>2]|0;
 ;HEAP8[$30>>0]=HEAP8[$43>>0]|0;
 ;HEAP8[$31>>0]=HEAP8[$42>>0]|0;HEAP8[$31+1>>0]=HEAP8[$42+1>>0]|0;HEAP8[$31+2>>0]=HEAP8[$42+2>>0]|0;HEAP8[$31+3>>0]=HEAP8[$42+3>>0]|0;
 ;HEAP8[$32>>0]=HEAP8[$41>>0]|0;
 $29 = $78;
 $28 = $31;
 $80 = $28;
 $27 = $80;
 $81 = $27;
 $82 = HEAP32[$81>>2]|0;
 $26 = $82;
 $33 = $47;
 ;HEAP8[$36>>0]=HEAP8[$46>>0]|0;
 ;HEAP8[$37>>0]=HEAP8[$45>>0]|0;
 ;HEAP8[$38>>0]=HEAP8[$44>>0]|0;
 $35 = $78;
 $83 = $35;
 $34 = $83;
 $84 = ((($58)) + 16|0);
 HEAP32[$84>>2] = $58;
 STACKTOP = sp;return;
}
function __ZNSt3__28functionIFbRK5EventEEC2IZN16GUIButtonClusterILm5EE7OnEventES3_EUlS3_E1_vEET_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $10 = sp + 96|0;
 $11 = sp + 88|0;
 $12 = sp + 80|0;
 $13 = sp + 72|0;
 $17 = sp + 235|0;
 $18 = sp + 234|0;
 $19 = sp + 233|0;
 $20 = sp + 232|0;
 $22 = sp + 172|0;
 $25 = sp + 231|0;
 $30 = sp + 64|0;
 $31 = sp + 56|0;
 $32 = sp + 48|0;
 $36 = sp + 40|0;
 $37 = sp + 32|0;
 $38 = sp + 24|0;
 $41 = sp + 230|0;
 $42 = sp + 124|0;
 $43 = sp + 229|0;
 $44 = sp + 228|0;
 $45 = sp + 227|0;
 $46 = sp + 226|0;
 $47 = sp + 16|0;
 $48 = sp + 8|0;
 $49 = sp;
 $53 = sp + 225|0;
 $54 = sp + 108|0;
 $55 = sp + 224|0;
 $57 = $0;
 $58 = $57;
 $59 = ((($58)) + 16|0);
 HEAP32[$59>>2] = 0;
 $56 = $1;
 $2 = $1;
 $60 = $2;
 $51 = $58;
 $52 = $60;
 $61 = $51;
 $50 = $61;
 $62 = $50;
 HEAP32[$62>>2] = (3748);
 HEAP32[$61>>2] = (3960);
 $63 = ((($61)) + 4|0);
 $64 = $52;
 $3 = $64;
 $65 = $3;
 $23 = $65;
 $66 = $23;
 $21 = $66;
 $67 = $21;
 $15 = $22;
 $16 = $67;
 $68 = $15;
 $69 = $16;
 $14 = $69;
 $70 = $14;
 ;HEAP8[$10>>0]=HEAP8[$20>>0]|0;
 ;HEAP8[$11>>0]=HEAP8[$19>>0]|0;
 ;HEAP8[$12>>0]=HEAP8[$18>>0]|0;
 ;HEAP8[$13>>0]=HEAP8[$17>>0]|0;
 $8 = $68;
 $9 = $70;
 $71 = $8;
 $72 = $9;
 $7 = $72;
 $73 = $7;
 $5 = $71;
 $6 = $73;
 $74 = $5;
 $75 = $6;
 $4 = $75;
 $76 = $4;
 HEAP32[$74>>2] = $76;
 $77 = HEAP32[$22>>2]|0;
 HEAP32[$54>>2] = $77;
 $24 = $25;
 ;HEAP8[$47>>0]=HEAP8[$55>>0]|0;
 ;HEAP8[$48>>0]=HEAP8[$54>>0]|0;HEAP8[$48+1>>0]=HEAP8[$54+1>>0]|0;HEAP8[$48+2>>0]=HEAP8[$54+2>>0]|0;HEAP8[$48+3>>0]=HEAP8[$54+3>>0]|0;
 ;HEAP8[$49>>0]=HEAP8[$53>>0]|0;
 $40 = $63;
 $78 = $40;
 $39 = $48;
 $79 = $39;
 ;HEAP32[$42>>2]=HEAP32[$79>>2]|0;
 ;HEAP8[$30>>0]=HEAP8[$43>>0]|0;
 ;HEAP8[$31>>0]=HEAP8[$42>>0]|0;HEAP8[$31+1>>0]=HEAP8[$42+1>>0]|0;HEAP8[$31+2>>0]=HEAP8[$42+2>>0]|0;HEAP8[$31+3>>0]=HEAP8[$42+3>>0]|0;
 ;HEAP8[$32>>0]=HEAP8[$41>>0]|0;
 $29 = $78;
 $80 = $29;
 $28 = $31;
 $81 = $28;
 $27 = $81;
 $82 = $27;
 $83 = HEAP32[$82>>2]|0;
 $26 = $83;
 $84 = $26;
 ;HEAP32[$80>>2]=HEAP32[$84>>2]|0;
 $33 = $47;
 ;HEAP8[$36>>0]=HEAP8[$46>>0]|0;
 ;HEAP8[$37>>0]=HEAP8[$45>>0]|0;
 ;HEAP8[$38>>0]=HEAP8[$44>>0]|0;
 $35 = $78;
 $85 = $35;
 $34 = $85;
 $86 = ((($58)) + 16|0);
 HEAP32[$86>>2] = $58;
 STACKTOP = sp;return;
}
function __ZNSt3__28functionIFbRK5EventEEC2IZN16GUIButtonClusterILm5EE7OnEventES3_EUlS3_E2_vEET_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $10 = sp + 96|0;
 $11 = sp + 88|0;
 $12 = sp + 80|0;
 $13 = sp + 72|0;
 $17 = sp + 235|0;
 $18 = sp + 234|0;
 $19 = sp + 233|0;
 $20 = sp + 232|0;
 $22 = sp + 172|0;
 $25 = sp + 231|0;
 $30 = sp + 64|0;
 $31 = sp + 56|0;
 $32 = sp + 48|0;
 $36 = sp + 40|0;
 $37 = sp + 32|0;
 $38 = sp + 24|0;
 $41 = sp + 230|0;
 $42 = sp + 124|0;
 $43 = sp + 229|0;
 $44 = sp + 228|0;
 $45 = sp + 227|0;
 $46 = sp + 226|0;
 $47 = sp + 16|0;
 $48 = sp + 8|0;
 $49 = sp;
 $53 = sp + 225|0;
 $54 = sp + 108|0;
 $55 = sp + 224|0;
 $57 = $0;
 $58 = $57;
 $59 = ((($58)) + 16|0);
 HEAP32[$59>>2] = 0;
 $56 = $1;
 $2 = $1;
 $60 = $2;
 $51 = $58;
 $52 = $60;
 $61 = $51;
 $50 = $61;
 $62 = $50;
 HEAP32[$62>>2] = (3748);
 HEAP32[$61>>2] = (3916);
 $63 = ((($61)) + 4|0);
 $64 = $52;
 $3 = $64;
 $65 = $3;
 $23 = $65;
 $66 = $23;
 $21 = $66;
 $67 = $21;
 $15 = $22;
 $16 = $67;
 $68 = $15;
 $69 = $16;
 $14 = $69;
 $70 = $14;
 ;HEAP8[$10>>0]=HEAP8[$20>>0]|0;
 ;HEAP8[$11>>0]=HEAP8[$19>>0]|0;
 ;HEAP8[$12>>0]=HEAP8[$18>>0]|0;
 ;HEAP8[$13>>0]=HEAP8[$17>>0]|0;
 $8 = $68;
 $9 = $70;
 $71 = $8;
 $72 = $9;
 $7 = $72;
 $73 = $7;
 $5 = $71;
 $6 = $73;
 $74 = $5;
 $75 = $6;
 $4 = $75;
 $76 = $4;
 HEAP32[$74>>2] = $76;
 $77 = HEAP32[$22>>2]|0;
 HEAP32[$54>>2] = $77;
 $24 = $25;
 ;HEAP8[$47>>0]=HEAP8[$55>>0]|0;
 ;HEAP8[$48>>0]=HEAP8[$54>>0]|0;HEAP8[$48+1>>0]=HEAP8[$54+1>>0]|0;HEAP8[$48+2>>0]=HEAP8[$54+2>>0]|0;HEAP8[$48+3>>0]=HEAP8[$54+3>>0]|0;
 ;HEAP8[$49>>0]=HEAP8[$53>>0]|0;
 $40 = $63;
 $78 = $40;
 $39 = $48;
 $79 = $39;
 ;HEAP32[$42>>2]=HEAP32[$79>>2]|0;
 ;HEAP8[$30>>0]=HEAP8[$43>>0]|0;
 ;HEAP8[$31>>0]=HEAP8[$42>>0]|0;HEAP8[$31+1>>0]=HEAP8[$42+1>>0]|0;HEAP8[$31+2>>0]=HEAP8[$42+2>>0]|0;HEAP8[$31+3>>0]=HEAP8[$42+3>>0]|0;
 ;HEAP8[$32>>0]=HEAP8[$41>>0]|0;
 $29 = $78;
 $80 = $29;
 $28 = $31;
 $81 = $28;
 $27 = $81;
 $82 = $27;
 $83 = HEAP32[$82>>2]|0;
 $26 = $83;
 $84 = $26;
 ;HEAP32[$80>>2]=HEAP32[$84>>2]|0;
 $33 = $47;
 ;HEAP8[$36>>0]=HEAP8[$46>>0]|0;
 ;HEAP8[$37>>0]=HEAP8[$45>>0]|0;
 ;HEAP8[$38>>0]=HEAP8[$44>>0]|0;
 $35 = $78;
 $85 = $35;
 $34 = $85;
 $86 = ((($58)) + 16|0);
 HEAP32[$86>>2] = $58;
 STACKTOP = sp;return;
}
function __ZNSt3__28functionIFbRK5EventEEC2IZN16GUIButtonClusterILm5EE7OnEventES3_EUlS3_E3_vEET_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $10 = sp + 96|0;
 $11 = sp + 88|0;
 $12 = sp + 80|0;
 $13 = sp + 72|0;
 $17 = sp + 235|0;
 $18 = sp + 234|0;
 $19 = sp + 233|0;
 $20 = sp + 232|0;
 $22 = sp + 172|0;
 $25 = sp + 231|0;
 $30 = sp + 64|0;
 $31 = sp + 56|0;
 $32 = sp + 48|0;
 $36 = sp + 40|0;
 $37 = sp + 32|0;
 $38 = sp + 24|0;
 $41 = sp + 230|0;
 $42 = sp + 124|0;
 $43 = sp + 229|0;
 $44 = sp + 228|0;
 $45 = sp + 227|0;
 $46 = sp + 226|0;
 $47 = sp + 16|0;
 $48 = sp + 8|0;
 $49 = sp;
 $53 = sp + 225|0;
 $54 = sp + 108|0;
 $55 = sp + 224|0;
 $57 = $0;
 $58 = $57;
 $59 = ((($58)) + 16|0);
 HEAP32[$59>>2] = 0;
 $56 = $1;
 $2 = $1;
 $60 = $2;
 $51 = $58;
 $52 = $60;
 $61 = $51;
 $50 = $61;
 $62 = $50;
 HEAP32[$62>>2] = (3748);
 HEAP32[$61>>2] = (3872);
 $63 = ((($61)) + 4|0);
 $64 = $52;
 $3 = $64;
 $65 = $3;
 $23 = $65;
 $66 = $23;
 $21 = $66;
 $67 = $21;
 $15 = $22;
 $16 = $67;
 $68 = $15;
 $69 = $16;
 $14 = $69;
 $70 = $14;
 ;HEAP8[$10>>0]=HEAP8[$20>>0]|0;
 ;HEAP8[$11>>0]=HEAP8[$19>>0]|0;
 ;HEAP8[$12>>0]=HEAP8[$18>>0]|0;
 ;HEAP8[$13>>0]=HEAP8[$17>>0]|0;
 $8 = $68;
 $9 = $70;
 $71 = $8;
 $72 = $9;
 $7 = $72;
 $73 = $7;
 $5 = $71;
 $6 = $73;
 $74 = $5;
 $75 = $6;
 $4 = $75;
 $76 = $4;
 HEAP32[$74>>2] = $76;
 $77 = HEAP32[$22>>2]|0;
 HEAP32[$54>>2] = $77;
 $24 = $25;
 ;HEAP8[$47>>0]=HEAP8[$55>>0]|0;
 ;HEAP8[$48>>0]=HEAP8[$54>>0]|0;HEAP8[$48+1>>0]=HEAP8[$54+1>>0]|0;HEAP8[$48+2>>0]=HEAP8[$54+2>>0]|0;HEAP8[$48+3>>0]=HEAP8[$54+3>>0]|0;
 ;HEAP8[$49>>0]=HEAP8[$53>>0]|0;
 $40 = $63;
 $78 = $40;
 $39 = $48;
 $79 = $39;
 ;HEAP32[$42>>2]=HEAP32[$79>>2]|0;
 ;HEAP8[$30>>0]=HEAP8[$43>>0]|0;
 ;HEAP8[$31>>0]=HEAP8[$42>>0]|0;HEAP8[$31+1>>0]=HEAP8[$42+1>>0]|0;HEAP8[$31+2>>0]=HEAP8[$42+2>>0]|0;HEAP8[$31+3>>0]=HEAP8[$42+3>>0]|0;
 ;HEAP8[$32>>0]=HEAP8[$41>>0]|0;
 $29 = $78;
 $80 = $29;
 $28 = $31;
 $81 = $28;
 $27 = $81;
 $82 = $27;
 $83 = HEAP32[$82>>2]|0;
 $26 = $83;
 $84 = $26;
 ;HEAP32[$80>>2]=HEAP32[$84>>2]|0;
 $33 = $47;
 ;HEAP8[$36>>0]=HEAP8[$46>>0]|0;
 ;HEAP8[$37>>0]=HEAP8[$45>>0]|0;
 ;HEAP8[$38>>0]=HEAP8[$44>>0]|0;
 $35 = $78;
 $85 = $35;
 $34 = $85;
 $86 = ((($58)) + 16|0);
 HEAP32[$86>>2] = $58;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $1 = $3;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EED2Ev($2);
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EE7__cloneEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(608|0);
 $7 = sp + 128|0;
 $8 = sp + 120|0;
 $9 = sp + 112|0;
 $10 = sp + 104|0;
 $13 = sp + 594|0;
 $14 = sp + 593|0;
 $15 = sp + 592|0;
 $16 = sp + 591|0;
 $18 = sp + 540|0;
 $27 = sp + 96|0;
 $28 = sp + 88|0;
 $29 = sp + 80|0;
 $30 = sp + 72|0;
 $34 = sp + 590|0;
 $35 = sp + 589|0;
 $36 = sp + 588|0;
 $37 = sp + 587|0;
 $39 = sp + 488|0;
 $45 = sp + 64|0;
 $46 = sp + 56|0;
 $47 = sp + 48|0;
 $53 = sp + 40|0;
 $54 = sp + 32|0;
 $55 = sp + 24|0;
 $58 = sp + 586|0;
 $59 = sp + 436|0;
 $60 = sp + 585|0;
 $61 = sp + 584|0;
 $62 = sp + 432|0;
 $63 = sp + 583|0;
 $64 = sp + 16|0;
 $65 = sp + 8|0;
 $66 = sp;
 $71 = sp + 582|0;
 $72 = sp + 412|0;
 $73 = sp + 408|0;
 $100 = sp + 300|0;
 $137 = sp + 581|0;
 $138 = sp + 144|0;
 $139 = sp + 136|0;
 $140 = sp + 580|0;
 $136 = $0;
 $141 = $136;
 $142 = ((($141)) + 4|0);
 $135 = $142;
 $143 = $135;
 $134 = $143;
 $144 = $134;
 $132 = $137;
 $133 = $144;
 $110 = $137;
 $111 = 1;
 $112 = 0;
 $145 = $110;
 $146 = $111;
 $109 = $145;
 $147 = ($146>>>0)>(536870911);
 if ($147) {
  $107 = 9129;
  $148 = (___cxa_allocate_exception(8)|0);
  $149 = $107;
  $105 = $148;
  $106 = $149;
  $150 = $105;
  $151 = $106;
  __ZNSt11logic_errorC2EPKc($150,$151);
  HEAP32[$150>>2] = (5584);
  ___cxa_throw(($148|0),(3656|0),(228|0));
  // unreachable;
 }
 $152 = $111;
 $153 = $152<<3;
 $108 = $153;
 $154 = $108;
 $155 = (__Znwm($154)|0);
 $102 = $139;
 $103 = $137;
 $104 = 1;
 $156 = $102;
 $157 = $103;
 HEAP32[$156>>2] = $157;
 $158 = ((($156)) + 4|0);
 $159 = $104;
 HEAP32[$158>>2] = $159;
 $99 = $138;
 HEAP32[$100>>2] = $155;
 $101 = $139;
 $160 = $99;
 $161 = $101;
 $98 = $161;
 $162 = $98;
 $95 = $160;
 $96 = $100;
 $97 = $162;
 $163 = $95;
 $164 = $96;
 $94 = $164;
 $165 = $94;
 $88 = $163;
 $89 = $165;
 $166 = $88;
 $167 = $89;
 $87 = $167;
 $168 = $87;
 $169 = HEAP32[$168>>2]|0;
 HEAP32[$166>>2] = $169;
 $170 = ((($163)) + 4|0);
 $171 = $97;
 $90 = $171;
 $172 = $90;
 $92 = $170;
 $93 = $172;
 $173 = $92;
 $174 = $93;
 $91 = $174;
 $175 = $91;
 ;HEAP32[$173>>2]=HEAP32[$175>>2]|0;HEAP32[$173+4>>2]=HEAP32[$175+4>>2]|0;
 $86 = $138;
 $176 = $86;
 $85 = $176;
 $177 = $85;
 $84 = $177;
 $178 = $84;
 $179 = HEAP32[$178>>2]|0;
 $180 = ((($141)) + 4|0);
 $83 = $180;
 $181 = $83;
 $82 = $181;
 $182 = $82;
 $80 = $140;
 $81 = $137;
 $68 = $179;
 $69 = $182;
 $70 = $140;
 $183 = $68;
 $67 = $183;
 $184 = $67;
 HEAP32[$184>>2] = (3748);
 HEAP32[$183>>2] = (3872);
 $185 = ((($183)) + 4|0);
 $186 = $69;
 $19 = $186;
 $187 = $19;
 $17 = $187;
 $188 = $17;
 $11 = $18;
 $12 = $188;
 $189 = $11;
 $190 = $12;
 ;HEAP8[$7>>0]=HEAP8[$16>>0]|0;
 ;HEAP8[$8>>0]=HEAP8[$15>>0]|0;
 ;HEAP8[$9>>0]=HEAP8[$14>>0]|0;
 ;HEAP8[$10>>0]=HEAP8[$13>>0]|0;
 $5 = $189;
 $6 = $190;
 $191 = $5;
 $192 = $6;
 $4 = $192;
 $193 = $4;
 $2 = $191;
 $3 = $193;
 $194 = $2;
 $195 = $3;
 $1 = $195;
 $196 = $1;
 HEAP32[$194>>2] = $196;
 $197 = HEAP32[$18>>2]|0;
 HEAP32[$72>>2] = $197;
 $198 = $70;
 $20 = $198;
 $199 = $20;
 $40 = $199;
 $200 = $40;
 $38 = $200;
 $201 = $38;
 $32 = $39;
 $33 = $201;
 $202 = $32;
 $203 = $33;
 $31 = $203;
 $204 = $31;
 ;HEAP8[$27>>0]=HEAP8[$37>>0]|0;
 ;HEAP8[$28>>0]=HEAP8[$36>>0]|0;
 ;HEAP8[$29>>0]=HEAP8[$35>>0]|0;
 ;HEAP8[$30>>0]=HEAP8[$34>>0]|0;
 $25 = $202;
 $26 = $204;
 $205 = $25;
 $206 = $26;
 $24 = $206;
 $207 = $24;
 $22 = $205;
 $23 = $207;
 $208 = $22;
 $209 = $23;
 $21 = $209;
 $210 = $21;
 HEAP32[$208>>2] = $210;
 $211 = HEAP32[$39>>2]|0;
 HEAP32[$73>>2] = $211;
 ;HEAP8[$64>>0]=HEAP8[$73>>0]|0;HEAP8[$64+1>>0]=HEAP8[$73+1>>0]|0;HEAP8[$64+2>>0]=HEAP8[$73+2>>0]|0;HEAP8[$64+3>>0]=HEAP8[$73+3>>0]|0;
 ;HEAP8[$65>>0]=HEAP8[$72>>0]|0;HEAP8[$65+1>>0]=HEAP8[$72+1>>0]|0;HEAP8[$65+2>>0]=HEAP8[$72+2>>0]|0;HEAP8[$65+3>>0]=HEAP8[$72+3>>0]|0;
 ;HEAP8[$66>>0]=HEAP8[$71>>0]|0;
 $57 = $185;
 $212 = $57;
 $56 = $65;
 $213 = $56;
 ;HEAP32[$59>>2]=HEAP32[$213>>2]|0;
 ;HEAP8[$45>>0]=HEAP8[$60>>0]|0;
 ;HEAP8[$46>>0]=HEAP8[$59>>0]|0;HEAP8[$46+1>>0]=HEAP8[$59+1>>0]|0;HEAP8[$46+2>>0]=HEAP8[$59+2>>0]|0;HEAP8[$46+3>>0]=HEAP8[$59+3>>0]|0;
 ;HEAP8[$47>>0]=HEAP8[$58>>0]|0;
 $44 = $212;
 $214 = $44;
 $43 = $46;
 $215 = $43;
 $42 = $215;
 $216 = $42;
 $217 = HEAP32[$216>>2]|0;
 $41 = $217;
 $218 = $41;
 ;HEAP32[$214>>2]=HEAP32[$218>>2]|0;
 $48 = $64;
 $219 = $48;
 ;HEAP32[$62>>2]=HEAP32[$219>>2]|0;
 ;HEAP8[$53>>0]=HEAP8[$63>>0]|0;
 ;HEAP8[$54>>0]=HEAP8[$62>>0]|0;HEAP8[$54+1>>0]=HEAP8[$62+1>>0]|0;HEAP8[$54+2>>0]=HEAP8[$62+2>>0]|0;HEAP8[$54+3>>0]=HEAP8[$62+3>>0]|0;
 ;HEAP8[$55>>0]=HEAP8[$61>>0]|0;
 $52 = $212;
 $51 = $54;
 $220 = $51;
 $50 = $220;
 $221 = $50;
 $222 = HEAP32[$221>>2]|0;
 $49 = $222;
 $78 = $138;
 $223 = $78;
 $77 = $223;
 $224 = $77;
 $76 = $224;
 $225 = $76;
 $226 = HEAP32[$225>>2]|0;
 $79 = $226;
 $75 = $223;
 $227 = $75;
 $74 = $227;
 $228 = $74;
 HEAP32[$228>>2] = 0;
 $229 = $79;
 $131 = $138;
 $230 = $131;
 $128 = $230;
 $129 = 0;
 $231 = $128;
 $127 = $231;
 $232 = $127;
 $126 = $232;
 $233 = $126;
 $234 = HEAP32[$233>>2]|0;
 $130 = $234;
 $235 = $129;
 $116 = $231;
 $236 = $116;
 $115 = $236;
 $237 = $115;
 HEAP32[$237>>2] = $235;
 $238 = $130;
 $239 = ($238|0)!=(0|0);
 if (!($239)) {
  STACKTOP = sp;return ($229|0);
 }
 $114 = $231;
 $240 = $114;
 $241 = ((($240)) + 4|0);
 $113 = $241;
 $242 = $113;
 $243 = $130;
 $124 = $242;
 $125 = $243;
 $244 = $124;
 $245 = HEAP32[$244>>2]|0;
 $246 = $125;
 $247 = ((($244)) + 4|0);
 $248 = HEAP32[$247>>2]|0;
 $121 = $245;
 $122 = $246;
 $123 = $248;
 $249 = $121;
 $250 = $122;
 $251 = $123;
 $118 = $249;
 $119 = $250;
 $120 = $251;
 $252 = $119;
 $117 = $252;
 $253 = $117;
 __ZdlPv($253);
 STACKTOP = sp;return ($229|0);
}
function __ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EE7__cloneEPNS0_6__baseISA_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $10 = sp + 128|0;
 $11 = sp + 120|0;
 $12 = sp + 112|0;
 $13 = sp + 104|0;
 $16 = sp + 332|0;
 $17 = sp + 331|0;
 $18 = sp + 330|0;
 $19 = sp + 329|0;
 $21 = sp + 272|0;
 $29 = sp + 96|0;
 $30 = sp + 88|0;
 $31 = sp + 80|0;
 $32 = sp + 72|0;
 $35 = sp + 328|0;
 $36 = sp + 327|0;
 $37 = sp + 326|0;
 $38 = sp + 325|0;
 $40 = sp + 228|0;
 $46 = sp + 64|0;
 $47 = sp + 56|0;
 $48 = sp + 48|0;
 $54 = sp + 40|0;
 $55 = sp + 32|0;
 $56 = sp + 24|0;
 $59 = sp + 324|0;
 $60 = sp + 176|0;
 $61 = sp + 323|0;
 $62 = sp + 322|0;
 $63 = sp + 172|0;
 $64 = sp + 321|0;
 $65 = sp + 16|0;
 $66 = sp + 8|0;
 $67 = sp;
 $72 = sp + 320|0;
 $73 = sp + 152|0;
 $74 = sp + 148|0;
 $77 = $0;
 $78 = $1;
 $79 = $77;
 $80 = $78;
 $81 = ((($79)) + 4|0);
 $76 = $81;
 $82 = $76;
 $75 = $82;
 $83 = $75;
 $84 = ((($79)) + 4|0);
 $3 = $84;
 $85 = $3;
 $2 = $85;
 $86 = $2;
 $69 = $80;
 $70 = $83;
 $71 = $86;
 $87 = $69;
 $68 = $87;
 $88 = $68;
 HEAP32[$88>>2] = (3748);
 HEAP32[$87>>2] = (3872);
 $89 = ((($87)) + 4|0);
 $90 = $70;
 $22 = $90;
 $91 = $22;
 $20 = $91;
 $92 = $20;
 $14 = $21;
 $15 = $92;
 $93 = $14;
 $94 = $15;
 ;HEAP8[$10>>0]=HEAP8[$19>>0]|0;
 ;HEAP8[$11>>0]=HEAP8[$18>>0]|0;
 ;HEAP8[$12>>0]=HEAP8[$17>>0]|0;
 ;HEAP8[$13>>0]=HEAP8[$16>>0]|0;
 $8 = $93;
 $9 = $94;
 $95 = $8;
 $96 = $9;
 $7 = $96;
 $97 = $7;
 $5 = $95;
 $6 = $97;
 $98 = $5;
 $99 = $6;
 $4 = $99;
 $100 = $4;
 HEAP32[$98>>2] = $100;
 $101 = HEAP32[$21>>2]|0;
 HEAP32[$73>>2] = $101;
 $102 = $71;
 $41 = $102;
 $103 = $41;
 $39 = $103;
 $104 = $39;
 $33 = $40;
 $34 = $104;
 $105 = $33;
 $106 = $34;
 ;HEAP8[$29>>0]=HEAP8[$38>>0]|0;
 ;HEAP8[$30>>0]=HEAP8[$37>>0]|0;
 ;HEAP8[$31>>0]=HEAP8[$36>>0]|0;
 ;HEAP8[$32>>0]=HEAP8[$35>>0]|0;
 $27 = $105;
 $28 = $106;
 $107 = $27;
 $108 = $28;
 $26 = $108;
 $109 = $26;
 $24 = $107;
 $25 = $109;
 $110 = $24;
 $111 = $25;
 $23 = $111;
 $112 = $23;
 HEAP32[$110>>2] = $112;
 $113 = HEAP32[$40>>2]|0;
 HEAP32[$74>>2] = $113;
 ;HEAP8[$65>>0]=HEAP8[$74>>0]|0;HEAP8[$65+1>>0]=HEAP8[$74+1>>0]|0;HEAP8[$65+2>>0]=HEAP8[$74+2>>0]|0;HEAP8[$65+3>>0]=HEAP8[$74+3>>0]|0;
 ;HEAP8[$66>>0]=HEAP8[$73>>0]|0;HEAP8[$66+1>>0]=HEAP8[$73+1>>0]|0;HEAP8[$66+2>>0]=HEAP8[$73+2>>0]|0;HEAP8[$66+3>>0]=HEAP8[$73+3>>0]|0;
 ;HEAP8[$67>>0]=HEAP8[$72>>0]|0;
 $58 = $89;
 $114 = $58;
 $57 = $66;
 $115 = $57;
 ;HEAP32[$60>>2]=HEAP32[$115>>2]|0;
 ;HEAP8[$46>>0]=HEAP8[$61>>0]|0;
 ;HEAP8[$47>>0]=HEAP8[$60>>0]|0;HEAP8[$47+1>>0]=HEAP8[$60+1>>0]|0;HEAP8[$47+2>>0]=HEAP8[$60+2>>0]|0;HEAP8[$47+3>>0]=HEAP8[$60+3>>0]|0;
 ;HEAP8[$48>>0]=HEAP8[$59>>0]|0;
 $45 = $114;
 $116 = $45;
 $44 = $47;
 $117 = $44;
 $43 = $117;
 $118 = $43;
 $119 = HEAP32[$118>>2]|0;
 $42 = $119;
 $120 = $42;
 ;HEAP32[$116>>2]=HEAP32[$120>>2]|0;
 $49 = $65;
 $121 = $49;
 ;HEAP32[$63>>2]=HEAP32[$121>>2]|0;
 ;HEAP8[$54>>0]=HEAP8[$64>>0]|0;
 ;HEAP8[$55>>0]=HEAP8[$63>>0]|0;HEAP8[$55+1>>0]=HEAP8[$63+1>>0]|0;HEAP8[$55+2>>0]=HEAP8[$63+2>>0]|0;HEAP8[$55+3>>0]=HEAP8[$63+3>>0]|0;
 ;HEAP8[$56>>0]=HEAP8[$62>>0]|0;
 $53 = $114;
 $52 = $55;
 $122 = $52;
 $51 = $122;
 $123 = $51;
 $124 = HEAP32[$123>>2]|0;
 $50 = $124;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EE7destroyEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EE18destroy_deallocateEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $10 = sp + 36|0;
 $9 = $0;
 $11 = $9;
 $12 = ((($11)) + 4|0);
 $8 = $12;
 $13 = $8;
 $7 = $13;
 $14 = $7;
 $1 = $10;
 $2 = $14;
 $4 = $10;
 $5 = $11;
 $6 = 1;
 $15 = $5;
 $3 = $15;
 $16 = $3;
 __ZdlPv($16);
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EEclES6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $5;
 $8 = ((($7)) + 4|0);
 $4 = $8;
 $9 = $4;
 $3 = $9;
 $10 = $3;
 $11 = $6;
 $2 = $11;
 $12 = $2;
 $13 = (__ZNSt3__228__invoke_void_return_wrapperIbE6__callIJRZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS7_E3_S7_EEEbDpOT_($10,$12)|0);
 STACKTOP = sp;return ($13|0);
}
function __ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EE6targetERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $7;
 $10 = $8;
 $4 = $10;
 $5 = 2648;
 $11 = $4;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $5;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($13|0)==($16|0);
 if ($17) {
  $18 = ((($9)) + 4|0);
  $3 = $18;
  $19 = $3;
  $2 = $19;
  $20 = $2;
  $6 = $20;
  $21 = $6;
  STACKTOP = sp;return ($21|0);
 } else {
  $6 = 0;
  $21 = $6;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function __ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EE11target_typeEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (2648|0);
}
function __ZNSt3__228__invoke_void_return_wrapperIbE6__callIJRZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS7_E3_S7_EEEbDpOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = $0;
 $9 = $1;
 $10 = $8;
 $7 = $10;
 $11 = $7;
 $12 = $9;
 $2 = $12;
 $13 = $2;
 $5 = $11;
 $6 = $13;
 $14 = $5;
 $4 = $14;
 $15 = $4;
 $16 = $6;
 $3 = $16;
 $17 = $3;
 $18 = (__ZZN16GUIButtonClusterILm5EE7OnEventERK5EventENKUlS3_E3_clES3_($15,$17)|0);
 $19 = ($18<<24>>24)!=(0);
 STACKTOP = sp;return ($19|0);
}
function __ZZN16GUIButtonClusterILm5EE7OnEventERK5EventENKUlS3_E3_clES3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = $4;
 $5 = $9;
 $10 = HEAP32[$8>>2]|0;
 $11 = ((($10)) + 12|0);
 $6 = $11;
 $12 = $6;
 $13 = ((($12)) + 16|0);
 $7 = $13;
 $14 = $7;
 $15 = HEAP8[$14>>0]|0;
 $16 = ($15&255) >>> 2;
 $17 = $16 & 1;
 $18 = ($17<<24>>24)!=(0);
 if ($18) {
  $19 = $7;
  $20 = HEAP8[$19>>0]|0;
  $21 = ($20&255) >>> 1;
  $22 = $21 & 1;
  $23 = ($22<<24>>24)!=(0);
  if ($23) {
   $28 = $7;
   $29 = HEAP8[$28>>0]|0;
   $30 = $29 & -5;
   HEAP8[$28>>0] = $30;
   $31 = $7;
   $32 = HEAP8[$31>>0]|0;
   $33 = ($32&255) >>> 1;
   $34 = $33 & 1;
   $35 = $7;
   $36 = HEAP8[$35>>0]|0;
   $37 = $34 & 1;
   $38 = ($37 << 4)&255;
   $39 = $36 & -17;
   $40 = $39 | $38;
   HEAP8[$35>>0] = $40;
   $41 = HEAP32[$8>>2]|0;
   $42 = ((($41)) + 8|0);
   $43 = HEAP32[$42>>2]|0;
   FUNCTION_TABLE_v[$43 & 511]();
   $44 = $7;
   $45 = HEAP8[$44>>0]|0;
   $46 = ($45&255) >>> 4;
   $47 = $46 & 1;
   $2 = $47;
   $48 = $2;
   STACKTOP = sp;return ($48|0);
  }
 }
 $24 = $7;
 $25 = HEAP8[$24>>0]|0;
 $26 = ($25&255) >>> 4;
 $27 = $26 & 1;
 $2 = $27;
 $48 = $2;
 STACKTOP = sp;return ($48|0);
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $1 = $3;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EED2Ev($2);
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EE7__cloneEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(608|0);
 $7 = sp + 128|0;
 $8 = sp + 120|0;
 $9 = sp + 112|0;
 $10 = sp + 104|0;
 $13 = sp + 594|0;
 $14 = sp + 593|0;
 $15 = sp + 592|0;
 $16 = sp + 591|0;
 $18 = sp + 540|0;
 $27 = sp + 96|0;
 $28 = sp + 88|0;
 $29 = sp + 80|0;
 $30 = sp + 72|0;
 $34 = sp + 590|0;
 $35 = sp + 589|0;
 $36 = sp + 588|0;
 $37 = sp + 587|0;
 $39 = sp + 488|0;
 $45 = sp + 64|0;
 $46 = sp + 56|0;
 $47 = sp + 48|0;
 $53 = sp + 40|0;
 $54 = sp + 32|0;
 $55 = sp + 24|0;
 $58 = sp + 586|0;
 $59 = sp + 436|0;
 $60 = sp + 585|0;
 $61 = sp + 584|0;
 $62 = sp + 432|0;
 $63 = sp + 583|0;
 $64 = sp + 16|0;
 $65 = sp + 8|0;
 $66 = sp;
 $71 = sp + 582|0;
 $72 = sp + 412|0;
 $73 = sp + 408|0;
 $100 = sp + 300|0;
 $137 = sp + 581|0;
 $138 = sp + 144|0;
 $139 = sp + 136|0;
 $140 = sp + 580|0;
 $136 = $0;
 $141 = $136;
 $142 = ((($141)) + 4|0);
 $135 = $142;
 $143 = $135;
 $134 = $143;
 $144 = $134;
 $132 = $137;
 $133 = $144;
 $110 = $137;
 $111 = 1;
 $112 = 0;
 $145 = $110;
 $146 = $111;
 $109 = $145;
 $147 = ($146>>>0)>(536870911);
 if ($147) {
  $107 = 9129;
  $148 = (___cxa_allocate_exception(8)|0);
  $149 = $107;
  $105 = $148;
  $106 = $149;
  $150 = $105;
  $151 = $106;
  __ZNSt11logic_errorC2EPKc($150,$151);
  HEAP32[$150>>2] = (5584);
  ___cxa_throw(($148|0),(3656|0),(228|0));
  // unreachable;
 }
 $152 = $111;
 $153 = $152<<3;
 $108 = $153;
 $154 = $108;
 $155 = (__Znwm($154)|0);
 $102 = $139;
 $103 = $137;
 $104 = 1;
 $156 = $102;
 $157 = $103;
 HEAP32[$156>>2] = $157;
 $158 = ((($156)) + 4|0);
 $159 = $104;
 HEAP32[$158>>2] = $159;
 $99 = $138;
 HEAP32[$100>>2] = $155;
 $101 = $139;
 $160 = $99;
 $161 = $101;
 $98 = $161;
 $162 = $98;
 $95 = $160;
 $96 = $100;
 $97 = $162;
 $163 = $95;
 $164 = $96;
 $94 = $164;
 $165 = $94;
 $88 = $163;
 $89 = $165;
 $166 = $88;
 $167 = $89;
 $87 = $167;
 $168 = $87;
 $169 = HEAP32[$168>>2]|0;
 HEAP32[$166>>2] = $169;
 $170 = ((($163)) + 4|0);
 $171 = $97;
 $90 = $171;
 $172 = $90;
 $92 = $170;
 $93 = $172;
 $173 = $92;
 $174 = $93;
 $91 = $174;
 $175 = $91;
 ;HEAP32[$173>>2]=HEAP32[$175>>2]|0;HEAP32[$173+4>>2]=HEAP32[$175+4>>2]|0;
 $86 = $138;
 $176 = $86;
 $85 = $176;
 $177 = $85;
 $84 = $177;
 $178 = $84;
 $179 = HEAP32[$178>>2]|0;
 $180 = ((($141)) + 4|0);
 $83 = $180;
 $181 = $83;
 $82 = $181;
 $182 = $82;
 $80 = $140;
 $81 = $137;
 $68 = $179;
 $69 = $182;
 $70 = $140;
 $183 = $68;
 $67 = $183;
 $184 = $67;
 HEAP32[$184>>2] = (3748);
 HEAP32[$183>>2] = (3916);
 $185 = ((($183)) + 4|0);
 $186 = $69;
 $19 = $186;
 $187 = $19;
 $17 = $187;
 $188 = $17;
 $11 = $18;
 $12 = $188;
 $189 = $11;
 $190 = $12;
 ;HEAP8[$7>>0]=HEAP8[$16>>0]|0;
 ;HEAP8[$8>>0]=HEAP8[$15>>0]|0;
 ;HEAP8[$9>>0]=HEAP8[$14>>0]|0;
 ;HEAP8[$10>>0]=HEAP8[$13>>0]|0;
 $5 = $189;
 $6 = $190;
 $191 = $5;
 $192 = $6;
 $4 = $192;
 $193 = $4;
 $2 = $191;
 $3 = $193;
 $194 = $2;
 $195 = $3;
 $1 = $195;
 $196 = $1;
 HEAP32[$194>>2] = $196;
 $197 = HEAP32[$18>>2]|0;
 HEAP32[$72>>2] = $197;
 $198 = $70;
 $20 = $198;
 $199 = $20;
 $40 = $199;
 $200 = $40;
 $38 = $200;
 $201 = $38;
 $32 = $39;
 $33 = $201;
 $202 = $32;
 $203 = $33;
 $31 = $203;
 $204 = $31;
 ;HEAP8[$27>>0]=HEAP8[$37>>0]|0;
 ;HEAP8[$28>>0]=HEAP8[$36>>0]|0;
 ;HEAP8[$29>>0]=HEAP8[$35>>0]|0;
 ;HEAP8[$30>>0]=HEAP8[$34>>0]|0;
 $25 = $202;
 $26 = $204;
 $205 = $25;
 $206 = $26;
 $24 = $206;
 $207 = $24;
 $22 = $205;
 $23 = $207;
 $208 = $22;
 $209 = $23;
 $21 = $209;
 $210 = $21;
 HEAP32[$208>>2] = $210;
 $211 = HEAP32[$39>>2]|0;
 HEAP32[$73>>2] = $211;
 ;HEAP8[$64>>0]=HEAP8[$73>>0]|0;HEAP8[$64+1>>0]=HEAP8[$73+1>>0]|0;HEAP8[$64+2>>0]=HEAP8[$73+2>>0]|0;HEAP8[$64+3>>0]=HEAP8[$73+3>>0]|0;
 ;HEAP8[$65>>0]=HEAP8[$72>>0]|0;HEAP8[$65+1>>0]=HEAP8[$72+1>>0]|0;HEAP8[$65+2>>0]=HEAP8[$72+2>>0]|0;HEAP8[$65+3>>0]=HEAP8[$72+3>>0]|0;
 ;HEAP8[$66>>0]=HEAP8[$71>>0]|0;
 $57 = $185;
 $212 = $57;
 $56 = $65;
 $213 = $56;
 ;HEAP32[$59>>2]=HEAP32[$213>>2]|0;
 ;HEAP8[$45>>0]=HEAP8[$60>>0]|0;
 ;HEAP8[$46>>0]=HEAP8[$59>>0]|0;HEAP8[$46+1>>0]=HEAP8[$59+1>>0]|0;HEAP8[$46+2>>0]=HEAP8[$59+2>>0]|0;HEAP8[$46+3>>0]=HEAP8[$59+3>>0]|0;
 ;HEAP8[$47>>0]=HEAP8[$58>>0]|0;
 $44 = $212;
 $214 = $44;
 $43 = $46;
 $215 = $43;
 $42 = $215;
 $216 = $42;
 $217 = HEAP32[$216>>2]|0;
 $41 = $217;
 $218 = $41;
 ;HEAP32[$214>>2]=HEAP32[$218>>2]|0;
 $48 = $64;
 $219 = $48;
 ;HEAP32[$62>>2]=HEAP32[$219>>2]|0;
 ;HEAP8[$53>>0]=HEAP8[$63>>0]|0;
 ;HEAP8[$54>>0]=HEAP8[$62>>0]|0;HEAP8[$54+1>>0]=HEAP8[$62+1>>0]|0;HEAP8[$54+2>>0]=HEAP8[$62+2>>0]|0;HEAP8[$54+3>>0]=HEAP8[$62+3>>0]|0;
 ;HEAP8[$55>>0]=HEAP8[$61>>0]|0;
 $52 = $212;
 $51 = $54;
 $220 = $51;
 $50 = $220;
 $221 = $50;
 $222 = HEAP32[$221>>2]|0;
 $49 = $222;
 $78 = $138;
 $223 = $78;
 $77 = $223;
 $224 = $77;
 $76 = $224;
 $225 = $76;
 $226 = HEAP32[$225>>2]|0;
 $79 = $226;
 $75 = $223;
 $227 = $75;
 $74 = $227;
 $228 = $74;
 HEAP32[$228>>2] = 0;
 $229 = $79;
 $131 = $138;
 $230 = $131;
 $128 = $230;
 $129 = 0;
 $231 = $128;
 $127 = $231;
 $232 = $127;
 $126 = $232;
 $233 = $126;
 $234 = HEAP32[$233>>2]|0;
 $130 = $234;
 $235 = $129;
 $116 = $231;
 $236 = $116;
 $115 = $236;
 $237 = $115;
 HEAP32[$237>>2] = $235;
 $238 = $130;
 $239 = ($238|0)!=(0|0);
 if (!($239)) {
  STACKTOP = sp;return ($229|0);
 }
 $114 = $231;
 $240 = $114;
 $241 = ((($240)) + 4|0);
 $113 = $241;
 $242 = $113;
 $243 = $130;
 $124 = $242;
 $125 = $243;
 $244 = $124;
 $245 = HEAP32[$244>>2]|0;
 $246 = $125;
 $247 = ((($244)) + 4|0);
 $248 = HEAP32[$247>>2]|0;
 $121 = $245;
 $122 = $246;
 $123 = $248;
 $249 = $121;
 $250 = $122;
 $251 = $123;
 $118 = $249;
 $119 = $250;
 $120 = $251;
 $252 = $119;
 $117 = $252;
 $253 = $117;
 __ZdlPv($253);
 STACKTOP = sp;return ($229|0);
}
function __ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EE7__cloneEPNS0_6__baseISA_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $10 = sp + 128|0;
 $11 = sp + 120|0;
 $12 = sp + 112|0;
 $13 = sp + 104|0;
 $16 = sp + 332|0;
 $17 = sp + 331|0;
 $18 = sp + 330|0;
 $19 = sp + 329|0;
 $21 = sp + 272|0;
 $29 = sp + 96|0;
 $30 = sp + 88|0;
 $31 = sp + 80|0;
 $32 = sp + 72|0;
 $35 = sp + 328|0;
 $36 = sp + 327|0;
 $37 = sp + 326|0;
 $38 = sp + 325|0;
 $40 = sp + 228|0;
 $46 = sp + 64|0;
 $47 = sp + 56|0;
 $48 = sp + 48|0;
 $54 = sp + 40|0;
 $55 = sp + 32|0;
 $56 = sp + 24|0;
 $59 = sp + 324|0;
 $60 = sp + 176|0;
 $61 = sp + 323|0;
 $62 = sp + 322|0;
 $63 = sp + 172|0;
 $64 = sp + 321|0;
 $65 = sp + 16|0;
 $66 = sp + 8|0;
 $67 = sp;
 $72 = sp + 320|0;
 $73 = sp + 152|0;
 $74 = sp + 148|0;
 $77 = $0;
 $78 = $1;
 $79 = $77;
 $80 = $78;
 $81 = ((($79)) + 4|0);
 $76 = $81;
 $82 = $76;
 $75 = $82;
 $83 = $75;
 $84 = ((($79)) + 4|0);
 $3 = $84;
 $85 = $3;
 $2 = $85;
 $86 = $2;
 $69 = $80;
 $70 = $83;
 $71 = $86;
 $87 = $69;
 $68 = $87;
 $88 = $68;
 HEAP32[$88>>2] = (3748);
 HEAP32[$87>>2] = (3916);
 $89 = ((($87)) + 4|0);
 $90 = $70;
 $22 = $90;
 $91 = $22;
 $20 = $91;
 $92 = $20;
 $14 = $21;
 $15 = $92;
 $93 = $14;
 $94 = $15;
 ;HEAP8[$10>>0]=HEAP8[$19>>0]|0;
 ;HEAP8[$11>>0]=HEAP8[$18>>0]|0;
 ;HEAP8[$12>>0]=HEAP8[$17>>0]|0;
 ;HEAP8[$13>>0]=HEAP8[$16>>0]|0;
 $8 = $93;
 $9 = $94;
 $95 = $8;
 $96 = $9;
 $7 = $96;
 $97 = $7;
 $5 = $95;
 $6 = $97;
 $98 = $5;
 $99 = $6;
 $4 = $99;
 $100 = $4;
 HEAP32[$98>>2] = $100;
 $101 = HEAP32[$21>>2]|0;
 HEAP32[$73>>2] = $101;
 $102 = $71;
 $41 = $102;
 $103 = $41;
 $39 = $103;
 $104 = $39;
 $33 = $40;
 $34 = $104;
 $105 = $33;
 $106 = $34;
 ;HEAP8[$29>>0]=HEAP8[$38>>0]|0;
 ;HEAP8[$30>>0]=HEAP8[$37>>0]|0;
 ;HEAP8[$31>>0]=HEAP8[$36>>0]|0;
 ;HEAP8[$32>>0]=HEAP8[$35>>0]|0;
 $27 = $105;
 $28 = $106;
 $107 = $27;
 $108 = $28;
 $26 = $108;
 $109 = $26;
 $24 = $107;
 $25 = $109;
 $110 = $24;
 $111 = $25;
 $23 = $111;
 $112 = $23;
 HEAP32[$110>>2] = $112;
 $113 = HEAP32[$40>>2]|0;
 HEAP32[$74>>2] = $113;
 ;HEAP8[$65>>0]=HEAP8[$74>>0]|0;HEAP8[$65+1>>0]=HEAP8[$74+1>>0]|0;HEAP8[$65+2>>0]=HEAP8[$74+2>>0]|0;HEAP8[$65+3>>0]=HEAP8[$74+3>>0]|0;
 ;HEAP8[$66>>0]=HEAP8[$73>>0]|0;HEAP8[$66+1>>0]=HEAP8[$73+1>>0]|0;HEAP8[$66+2>>0]=HEAP8[$73+2>>0]|0;HEAP8[$66+3>>0]=HEAP8[$73+3>>0]|0;
 ;HEAP8[$67>>0]=HEAP8[$72>>0]|0;
 $58 = $89;
 $114 = $58;
 $57 = $66;
 $115 = $57;
 ;HEAP32[$60>>2]=HEAP32[$115>>2]|0;
 ;HEAP8[$46>>0]=HEAP8[$61>>0]|0;
 ;HEAP8[$47>>0]=HEAP8[$60>>0]|0;HEAP8[$47+1>>0]=HEAP8[$60+1>>0]|0;HEAP8[$47+2>>0]=HEAP8[$60+2>>0]|0;HEAP8[$47+3>>0]=HEAP8[$60+3>>0]|0;
 ;HEAP8[$48>>0]=HEAP8[$59>>0]|0;
 $45 = $114;
 $116 = $45;
 $44 = $47;
 $117 = $44;
 $43 = $117;
 $118 = $43;
 $119 = HEAP32[$118>>2]|0;
 $42 = $119;
 $120 = $42;
 ;HEAP32[$116>>2]=HEAP32[$120>>2]|0;
 $49 = $65;
 $121 = $49;
 ;HEAP32[$63>>2]=HEAP32[$121>>2]|0;
 ;HEAP8[$54>>0]=HEAP8[$64>>0]|0;
 ;HEAP8[$55>>0]=HEAP8[$63>>0]|0;HEAP8[$55+1>>0]=HEAP8[$63+1>>0]|0;HEAP8[$55+2>>0]=HEAP8[$63+2>>0]|0;HEAP8[$55+3>>0]=HEAP8[$63+3>>0]|0;
 ;HEAP8[$56>>0]=HEAP8[$62>>0]|0;
 $53 = $114;
 $52 = $55;
 $122 = $52;
 $51 = $122;
 $123 = $51;
 $124 = HEAP32[$123>>2]|0;
 $50 = $124;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EE7destroyEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EE18destroy_deallocateEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $10 = sp + 36|0;
 $9 = $0;
 $11 = $9;
 $12 = ((($11)) + 4|0);
 $8 = $12;
 $13 = $8;
 $7 = $13;
 $14 = $7;
 $1 = $10;
 $2 = $14;
 $4 = $10;
 $5 = $11;
 $6 = 1;
 $15 = $5;
 $3 = $15;
 $16 = $3;
 __ZdlPv($16);
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EEclES6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $5;
 $8 = ((($7)) + 4|0);
 $4 = $8;
 $9 = $4;
 $3 = $9;
 $10 = $3;
 $11 = $6;
 $2 = $11;
 $12 = $2;
 $13 = (__ZNSt3__228__invoke_void_return_wrapperIbE6__callIJRZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS7_E2_S7_EEEbDpOT_($10,$12)|0);
 STACKTOP = sp;return ($13|0);
}
function __ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EE6targetERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $7;
 $10 = $8;
 $4 = $10;
 $5 = 2672;
 $11 = $4;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $5;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($13|0)==($16|0);
 if ($17) {
  $18 = ((($9)) + 4|0);
  $3 = $18;
  $19 = $3;
  $2 = $19;
  $20 = $2;
  $6 = $20;
  $21 = $6;
  STACKTOP = sp;return ($21|0);
 } else {
  $6 = 0;
  $21 = $6;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function __ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EE11target_typeEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (2672|0);
}
function __ZNSt3__228__invoke_void_return_wrapperIbE6__callIJRZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS7_E2_S7_EEEbDpOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = $0;
 $9 = $1;
 $10 = $8;
 $7 = $10;
 $11 = $7;
 $12 = $9;
 $2 = $12;
 $13 = $2;
 $5 = $11;
 $6 = $13;
 $14 = $5;
 $4 = $14;
 $15 = $4;
 $16 = $6;
 $3 = $16;
 $17 = $3;
 $18 = (__ZZN16GUIButtonClusterILm5EE7OnEventERK5EventENKUlS3_E2_clES3_($15,$17)|0);
 $19 = ($18<<24>>24)!=(0);
 STACKTOP = sp;return ($19|0);
}
function __ZZN16GUIButtonClusterILm5EE7OnEventERK5EventENKUlS3_E2_clES3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = $4;
 $5 = $9;
 $10 = HEAP32[$8>>2]|0;
 $11 = ((($10)) + 12|0);
 $6 = $11;
 $12 = $6;
 $13 = ((($12)) + 16|0);
 $7 = $13;
 $14 = $7;
 $15 = HEAP8[$14>>0]|0;
 $16 = $15 & -17;
 HEAP8[$14>>0] = $16;
 $17 = $7;
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18&255) >>> 1;
 $20 = $19 & 1;
 $21 = $7;
 $22 = HEAP8[$21>>0]|0;
 $23 = $20 & 1;
 $24 = ($23 << 2)&255;
 $25 = $22 & -5;
 $26 = $25 | $24;
 HEAP8[$21>>0] = $26;
 $27 = $7;
 $28 = HEAP8[$27>>0]|0;
 $29 = ($28&255) >>> 2;
 $30 = $29 & 1;
 $31 = ($30<<24>>24)!=(0);
 if ($31) {
  $37 = HEAP32[$8>>2]|0;
  $38 = ((($37)) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  FUNCTION_TABLE_v[$39 & 511]();
  $40 = $6;
  $41 = ((($40)) + 16|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = ($42&255) >>> 2;
  $44 = $43 & 1;
  $2 = $44;
  $45 = $2;
  STACKTOP = sp;return ($45|0);
 } else {
  $32 = $6;
  $33 = ((($32)) + 16|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = ($34&255) >>> 2;
  $36 = $35 & 1;
  $2 = $36;
  $45 = $2;
  STACKTOP = sp;return ($45|0);
 }
 return (0)|0;
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $1 = $3;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EED2Ev($2);
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EE7__cloneEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(608|0);
 $7 = sp + 128|0;
 $8 = sp + 120|0;
 $9 = sp + 112|0;
 $10 = sp + 104|0;
 $13 = sp + 594|0;
 $14 = sp + 593|0;
 $15 = sp + 592|0;
 $16 = sp + 591|0;
 $18 = sp + 540|0;
 $27 = sp + 96|0;
 $28 = sp + 88|0;
 $29 = sp + 80|0;
 $30 = sp + 72|0;
 $34 = sp + 590|0;
 $35 = sp + 589|0;
 $36 = sp + 588|0;
 $37 = sp + 587|0;
 $39 = sp + 488|0;
 $45 = sp + 64|0;
 $46 = sp + 56|0;
 $47 = sp + 48|0;
 $53 = sp + 40|0;
 $54 = sp + 32|0;
 $55 = sp + 24|0;
 $58 = sp + 586|0;
 $59 = sp + 436|0;
 $60 = sp + 585|0;
 $61 = sp + 584|0;
 $62 = sp + 432|0;
 $63 = sp + 583|0;
 $64 = sp + 16|0;
 $65 = sp + 8|0;
 $66 = sp;
 $71 = sp + 582|0;
 $72 = sp + 412|0;
 $73 = sp + 408|0;
 $100 = sp + 300|0;
 $137 = sp + 581|0;
 $138 = sp + 144|0;
 $139 = sp + 136|0;
 $140 = sp + 580|0;
 $136 = $0;
 $141 = $136;
 $142 = ((($141)) + 4|0);
 $135 = $142;
 $143 = $135;
 $134 = $143;
 $144 = $134;
 $132 = $137;
 $133 = $144;
 $110 = $137;
 $111 = 1;
 $112 = 0;
 $145 = $110;
 $146 = $111;
 $109 = $145;
 $147 = ($146>>>0)>(536870911);
 if ($147) {
  $107 = 9129;
  $148 = (___cxa_allocate_exception(8)|0);
  $149 = $107;
  $105 = $148;
  $106 = $149;
  $150 = $105;
  $151 = $106;
  __ZNSt11logic_errorC2EPKc($150,$151);
  HEAP32[$150>>2] = (5584);
  ___cxa_throw(($148|0),(3656|0),(228|0));
  // unreachable;
 }
 $152 = $111;
 $153 = $152<<3;
 $108 = $153;
 $154 = $108;
 $155 = (__Znwm($154)|0);
 $102 = $139;
 $103 = $137;
 $104 = 1;
 $156 = $102;
 $157 = $103;
 HEAP32[$156>>2] = $157;
 $158 = ((($156)) + 4|0);
 $159 = $104;
 HEAP32[$158>>2] = $159;
 $99 = $138;
 HEAP32[$100>>2] = $155;
 $101 = $139;
 $160 = $99;
 $161 = $101;
 $98 = $161;
 $162 = $98;
 $95 = $160;
 $96 = $100;
 $97 = $162;
 $163 = $95;
 $164 = $96;
 $94 = $164;
 $165 = $94;
 $88 = $163;
 $89 = $165;
 $166 = $88;
 $167 = $89;
 $87 = $167;
 $168 = $87;
 $169 = HEAP32[$168>>2]|0;
 HEAP32[$166>>2] = $169;
 $170 = ((($163)) + 4|0);
 $171 = $97;
 $90 = $171;
 $172 = $90;
 $92 = $170;
 $93 = $172;
 $173 = $92;
 $174 = $93;
 $91 = $174;
 $175 = $91;
 ;HEAP32[$173>>2]=HEAP32[$175>>2]|0;HEAP32[$173+4>>2]=HEAP32[$175+4>>2]|0;
 $86 = $138;
 $176 = $86;
 $85 = $176;
 $177 = $85;
 $84 = $177;
 $178 = $84;
 $179 = HEAP32[$178>>2]|0;
 $180 = ((($141)) + 4|0);
 $83 = $180;
 $181 = $83;
 $82 = $181;
 $182 = $82;
 $80 = $140;
 $81 = $137;
 $68 = $179;
 $69 = $182;
 $70 = $140;
 $183 = $68;
 $67 = $183;
 $184 = $67;
 HEAP32[$184>>2] = (3748);
 HEAP32[$183>>2] = (3960);
 $185 = ((($183)) + 4|0);
 $186 = $69;
 $19 = $186;
 $187 = $19;
 $17 = $187;
 $188 = $17;
 $11 = $18;
 $12 = $188;
 $189 = $11;
 $190 = $12;
 ;HEAP8[$7>>0]=HEAP8[$16>>0]|0;
 ;HEAP8[$8>>0]=HEAP8[$15>>0]|0;
 ;HEAP8[$9>>0]=HEAP8[$14>>0]|0;
 ;HEAP8[$10>>0]=HEAP8[$13>>0]|0;
 $5 = $189;
 $6 = $190;
 $191 = $5;
 $192 = $6;
 $4 = $192;
 $193 = $4;
 $2 = $191;
 $3 = $193;
 $194 = $2;
 $195 = $3;
 $1 = $195;
 $196 = $1;
 HEAP32[$194>>2] = $196;
 $197 = HEAP32[$18>>2]|0;
 HEAP32[$72>>2] = $197;
 $198 = $70;
 $20 = $198;
 $199 = $20;
 $40 = $199;
 $200 = $40;
 $38 = $200;
 $201 = $38;
 $32 = $39;
 $33 = $201;
 $202 = $32;
 $203 = $33;
 $31 = $203;
 $204 = $31;
 ;HEAP8[$27>>0]=HEAP8[$37>>0]|0;
 ;HEAP8[$28>>0]=HEAP8[$36>>0]|0;
 ;HEAP8[$29>>0]=HEAP8[$35>>0]|0;
 ;HEAP8[$30>>0]=HEAP8[$34>>0]|0;
 $25 = $202;
 $26 = $204;
 $205 = $25;
 $206 = $26;
 $24 = $206;
 $207 = $24;
 $22 = $205;
 $23 = $207;
 $208 = $22;
 $209 = $23;
 $21 = $209;
 $210 = $21;
 HEAP32[$208>>2] = $210;
 $211 = HEAP32[$39>>2]|0;
 HEAP32[$73>>2] = $211;
 ;HEAP8[$64>>0]=HEAP8[$73>>0]|0;HEAP8[$64+1>>0]=HEAP8[$73+1>>0]|0;HEAP8[$64+2>>0]=HEAP8[$73+2>>0]|0;HEAP8[$64+3>>0]=HEAP8[$73+3>>0]|0;
 ;HEAP8[$65>>0]=HEAP8[$72>>0]|0;HEAP8[$65+1>>0]=HEAP8[$72+1>>0]|0;HEAP8[$65+2>>0]=HEAP8[$72+2>>0]|0;HEAP8[$65+3>>0]=HEAP8[$72+3>>0]|0;
 ;HEAP8[$66>>0]=HEAP8[$71>>0]|0;
 $57 = $185;
 $212 = $57;
 $56 = $65;
 $213 = $56;
 ;HEAP32[$59>>2]=HEAP32[$213>>2]|0;
 ;HEAP8[$45>>0]=HEAP8[$60>>0]|0;
 ;HEAP8[$46>>0]=HEAP8[$59>>0]|0;HEAP8[$46+1>>0]=HEAP8[$59+1>>0]|0;HEAP8[$46+2>>0]=HEAP8[$59+2>>0]|0;HEAP8[$46+3>>0]=HEAP8[$59+3>>0]|0;
 ;HEAP8[$47>>0]=HEAP8[$58>>0]|0;
 $44 = $212;
 $214 = $44;
 $43 = $46;
 $215 = $43;
 $42 = $215;
 $216 = $42;
 $217 = HEAP32[$216>>2]|0;
 $41 = $217;
 $218 = $41;
 ;HEAP32[$214>>2]=HEAP32[$218>>2]|0;
 $48 = $64;
 $219 = $48;
 ;HEAP32[$62>>2]=HEAP32[$219>>2]|0;
 ;HEAP8[$53>>0]=HEAP8[$63>>0]|0;
 ;HEAP8[$54>>0]=HEAP8[$62>>0]|0;HEAP8[$54+1>>0]=HEAP8[$62+1>>0]|0;HEAP8[$54+2>>0]=HEAP8[$62+2>>0]|0;HEAP8[$54+3>>0]=HEAP8[$62+3>>0]|0;
 ;HEAP8[$55>>0]=HEAP8[$61>>0]|0;
 $52 = $212;
 $51 = $54;
 $220 = $51;
 $50 = $220;
 $221 = $50;
 $222 = HEAP32[$221>>2]|0;
 $49 = $222;
 $78 = $138;
 $223 = $78;
 $77 = $223;
 $224 = $77;
 $76 = $224;
 $225 = $76;
 $226 = HEAP32[$225>>2]|0;
 $79 = $226;
 $75 = $223;
 $227 = $75;
 $74 = $227;
 $228 = $74;
 HEAP32[$228>>2] = 0;
 $229 = $79;
 $131 = $138;
 $230 = $131;
 $128 = $230;
 $129 = 0;
 $231 = $128;
 $127 = $231;
 $232 = $127;
 $126 = $232;
 $233 = $126;
 $234 = HEAP32[$233>>2]|0;
 $130 = $234;
 $235 = $129;
 $116 = $231;
 $236 = $116;
 $115 = $236;
 $237 = $115;
 HEAP32[$237>>2] = $235;
 $238 = $130;
 $239 = ($238|0)!=(0|0);
 if (!($239)) {
  STACKTOP = sp;return ($229|0);
 }
 $114 = $231;
 $240 = $114;
 $241 = ((($240)) + 4|0);
 $113 = $241;
 $242 = $113;
 $243 = $130;
 $124 = $242;
 $125 = $243;
 $244 = $124;
 $245 = HEAP32[$244>>2]|0;
 $246 = $125;
 $247 = ((($244)) + 4|0);
 $248 = HEAP32[$247>>2]|0;
 $121 = $245;
 $122 = $246;
 $123 = $248;
 $249 = $121;
 $250 = $122;
 $251 = $123;
 $118 = $249;
 $119 = $250;
 $120 = $251;
 $252 = $119;
 $117 = $252;
 $253 = $117;
 __ZdlPv($253);
 STACKTOP = sp;return ($229|0);
}
function __ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EE7__cloneEPNS0_6__baseISA_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $10 = sp + 128|0;
 $11 = sp + 120|0;
 $12 = sp + 112|0;
 $13 = sp + 104|0;
 $16 = sp + 332|0;
 $17 = sp + 331|0;
 $18 = sp + 330|0;
 $19 = sp + 329|0;
 $21 = sp + 272|0;
 $29 = sp + 96|0;
 $30 = sp + 88|0;
 $31 = sp + 80|0;
 $32 = sp + 72|0;
 $35 = sp + 328|0;
 $36 = sp + 327|0;
 $37 = sp + 326|0;
 $38 = sp + 325|0;
 $40 = sp + 228|0;
 $46 = sp + 64|0;
 $47 = sp + 56|0;
 $48 = sp + 48|0;
 $54 = sp + 40|0;
 $55 = sp + 32|0;
 $56 = sp + 24|0;
 $59 = sp + 324|0;
 $60 = sp + 176|0;
 $61 = sp + 323|0;
 $62 = sp + 322|0;
 $63 = sp + 172|0;
 $64 = sp + 321|0;
 $65 = sp + 16|0;
 $66 = sp + 8|0;
 $67 = sp;
 $72 = sp + 320|0;
 $73 = sp + 152|0;
 $74 = sp + 148|0;
 $77 = $0;
 $78 = $1;
 $79 = $77;
 $80 = $78;
 $81 = ((($79)) + 4|0);
 $76 = $81;
 $82 = $76;
 $75 = $82;
 $83 = $75;
 $84 = ((($79)) + 4|0);
 $3 = $84;
 $85 = $3;
 $2 = $85;
 $86 = $2;
 $69 = $80;
 $70 = $83;
 $71 = $86;
 $87 = $69;
 $68 = $87;
 $88 = $68;
 HEAP32[$88>>2] = (3748);
 HEAP32[$87>>2] = (3960);
 $89 = ((($87)) + 4|0);
 $90 = $70;
 $22 = $90;
 $91 = $22;
 $20 = $91;
 $92 = $20;
 $14 = $21;
 $15 = $92;
 $93 = $14;
 $94 = $15;
 ;HEAP8[$10>>0]=HEAP8[$19>>0]|0;
 ;HEAP8[$11>>0]=HEAP8[$18>>0]|0;
 ;HEAP8[$12>>0]=HEAP8[$17>>0]|0;
 ;HEAP8[$13>>0]=HEAP8[$16>>0]|0;
 $8 = $93;
 $9 = $94;
 $95 = $8;
 $96 = $9;
 $7 = $96;
 $97 = $7;
 $5 = $95;
 $6 = $97;
 $98 = $5;
 $99 = $6;
 $4 = $99;
 $100 = $4;
 HEAP32[$98>>2] = $100;
 $101 = HEAP32[$21>>2]|0;
 HEAP32[$73>>2] = $101;
 $102 = $71;
 $41 = $102;
 $103 = $41;
 $39 = $103;
 $104 = $39;
 $33 = $40;
 $34 = $104;
 $105 = $33;
 $106 = $34;
 ;HEAP8[$29>>0]=HEAP8[$38>>0]|0;
 ;HEAP8[$30>>0]=HEAP8[$37>>0]|0;
 ;HEAP8[$31>>0]=HEAP8[$36>>0]|0;
 ;HEAP8[$32>>0]=HEAP8[$35>>0]|0;
 $27 = $105;
 $28 = $106;
 $107 = $27;
 $108 = $28;
 $26 = $108;
 $109 = $26;
 $24 = $107;
 $25 = $109;
 $110 = $24;
 $111 = $25;
 $23 = $111;
 $112 = $23;
 HEAP32[$110>>2] = $112;
 $113 = HEAP32[$40>>2]|0;
 HEAP32[$74>>2] = $113;
 ;HEAP8[$65>>0]=HEAP8[$74>>0]|0;HEAP8[$65+1>>0]=HEAP8[$74+1>>0]|0;HEAP8[$65+2>>0]=HEAP8[$74+2>>0]|0;HEAP8[$65+3>>0]=HEAP8[$74+3>>0]|0;
 ;HEAP8[$66>>0]=HEAP8[$73>>0]|0;HEAP8[$66+1>>0]=HEAP8[$73+1>>0]|0;HEAP8[$66+2>>0]=HEAP8[$73+2>>0]|0;HEAP8[$66+3>>0]=HEAP8[$73+3>>0]|0;
 ;HEAP8[$67>>0]=HEAP8[$72>>0]|0;
 $58 = $89;
 $114 = $58;
 $57 = $66;
 $115 = $57;
 ;HEAP32[$60>>2]=HEAP32[$115>>2]|0;
 ;HEAP8[$46>>0]=HEAP8[$61>>0]|0;
 ;HEAP8[$47>>0]=HEAP8[$60>>0]|0;HEAP8[$47+1>>0]=HEAP8[$60+1>>0]|0;HEAP8[$47+2>>0]=HEAP8[$60+2>>0]|0;HEAP8[$47+3>>0]=HEAP8[$60+3>>0]|0;
 ;HEAP8[$48>>0]=HEAP8[$59>>0]|0;
 $45 = $114;
 $116 = $45;
 $44 = $47;
 $117 = $44;
 $43 = $117;
 $118 = $43;
 $119 = HEAP32[$118>>2]|0;
 $42 = $119;
 $120 = $42;
 ;HEAP32[$116>>2]=HEAP32[$120>>2]|0;
 $49 = $65;
 $121 = $49;
 ;HEAP32[$63>>2]=HEAP32[$121>>2]|0;
 ;HEAP8[$54>>0]=HEAP8[$64>>0]|0;
 ;HEAP8[$55>>0]=HEAP8[$63>>0]|0;HEAP8[$55+1>>0]=HEAP8[$63+1>>0]|0;HEAP8[$55+2>>0]=HEAP8[$63+2>>0]|0;HEAP8[$55+3>>0]=HEAP8[$63+3>>0]|0;
 ;HEAP8[$56>>0]=HEAP8[$62>>0]|0;
 $53 = $114;
 $52 = $55;
 $122 = $52;
 $51 = $122;
 $123 = $51;
 $124 = HEAP32[$123>>2]|0;
 $50 = $124;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EE7destroyEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EE18destroy_deallocateEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $10 = sp + 36|0;
 $9 = $0;
 $11 = $9;
 $12 = ((($11)) + 4|0);
 $8 = $12;
 $13 = $8;
 $7 = $13;
 $14 = $7;
 $1 = $10;
 $2 = $14;
 $4 = $10;
 $5 = $11;
 $6 = 1;
 $15 = $5;
 $3 = $15;
 $16 = $3;
 __ZdlPv($16);
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EEclES6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $5;
 $8 = ((($7)) + 4|0);
 $4 = $8;
 $9 = $4;
 $3 = $9;
 $10 = $3;
 $11 = $6;
 $2 = $11;
 $12 = $2;
 $13 = (__ZNSt3__228__invoke_void_return_wrapperIbE6__callIJRZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS7_E1_S7_EEEbDpOT_($10,$12)|0);
 STACKTOP = sp;return ($13|0);
}
function __ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EE6targetERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $7;
 $10 = $8;
 $4 = $10;
 $5 = 2696;
 $11 = $4;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $5;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($13|0)==($16|0);
 if ($17) {
  $18 = ((($9)) + 4|0);
  $3 = $18;
  $19 = $3;
  $2 = $19;
  $20 = $2;
  $6 = $20;
  $21 = $6;
  STACKTOP = sp;return ($21|0);
 } else {
  $6 = 0;
  $21 = $6;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function __ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EE11target_typeEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (2696|0);
}
function __ZNSt3__228__invoke_void_return_wrapperIbE6__callIJRZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS7_E1_S7_EEEbDpOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = $0;
 $9 = $1;
 $10 = $8;
 $7 = $10;
 $11 = $7;
 $12 = $9;
 $2 = $12;
 $13 = $2;
 $5 = $11;
 $6 = $13;
 $14 = $5;
 $4 = $14;
 $15 = $4;
 $16 = $6;
 $3 = $16;
 $17 = $3;
 $18 = (__ZZN16GUIButtonClusterILm5EE7OnEventERK5EventENKUlS3_E1_clES3_($15,$17)|0);
 STACKTOP = sp;return ($18|0);
}
function __ZZN16GUIButtonClusterILm5EE7OnEventERK5EventENKUlS3_E1_clES3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0;
 var $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0;
 var $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0;
 var $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = $0;
 $3 = $1;
 $11 = $2;
 $12 = $3;
 $4 = $12;
 $13 = HEAP32[$11>>2]|0;
 $14 = ((($13)) + 12|0);
 $5 = $14;
 $15 = (__ZN6Engine11GetInstanceEv()|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16&65535;
 $18 = (+($17|0));
 $19 = $18 * 0.5;
 $20 = (~~(($19)));
 $6 = $20;
 $21 = (__ZN6Engine11GetInstanceEv()|0);
 $22 = ((($21)) + 2|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = $23&65535;
 $25 = (+($24|0));
 $26 = $25 * 0.5;
 $27 = (~~(($26)));
 $7 = $27;
 $28 = $4;
 $29 = ((($28)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $6;
 $32 = (($30) - ($31))|0;
 $8 = $32;
 $33 = $4;
 $34 = ((($33)) + 12|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (0 - ($35))|0;
 $37 = $7;
 $38 = (($36) + ($37))|0;
 $9 = $38;
 $39 = $8;
 $40 = (+($39|0));
 $41 = $5;
 $42 = +HEAPF32[$41>>2];
 $43 = $42;
 $44 = $5;
 $45 = ((($44)) + 8|0);
 $46 = +HEAPF32[$45>>2];
 $47 = $46;
 $48 = $47 * 0.5;
 $49 = $43 - $48;
 $50 = $40 > $49;
 if ($50) {
  $51 = $8;
  $52 = (+($51|0));
  $53 = $5;
  $54 = +HEAPF32[$53>>2];
  $55 = $54;
  $56 = $5;
  $57 = ((($56)) + 8|0);
  $58 = +HEAPF32[$57>>2];
  $59 = $58;
  $60 = $59 * 0.5;
  $61 = $55 + $60;
  $62 = $52 < $61;
  if ($62) {
   $63 = $9;
   $64 = (+($63|0));
   $65 = $5;
   $66 = ((($65)) + 4|0);
   $67 = +HEAPF32[$66>>2];
   $68 = $67;
   $69 = $5;
   $70 = ((($69)) + 12|0);
   $71 = +HEAPF32[$70>>2];
   $72 = $71;
   $73 = $72 * 0.5;
   $74 = $68 - $73;
   $75 = $64 > $74;
   if ($75) {
    $76 = $9;
    $77 = (+($76|0));
    $78 = $5;
    $79 = ((($78)) + 4|0);
    $80 = +HEAPF32[$79>>2];
    $81 = $80;
    $82 = $5;
    $83 = ((($82)) + 12|0);
    $84 = +HEAPF32[$83>>2];
    $85 = $84;
    $86 = $85 * 0.5;
    $87 = $81 + $86;
    $88 = $77 < $87;
    $90 = $88;
   } else {
    $90 = 0;
   }
  } else {
   $90 = 0;
  }
 } else {
  $90 = 0;
 }
 $89 = $90&1;
 $10 = $89;
 $91 = $10;
 $92 = $91&1;
 $93 = $92&1;
 $94 = $5;
 $95 = ((($94)) + 16|0);
 $96 = HEAP8[$95>>0]|0;
 $97 = $93 & 1;
 $98 = ($97 << 1)&255;
 $99 = $96 & -3;
 $100 = $99 | $98;
 HEAP8[$95>>0] = $100;
 $101 = $5;
 $102 = ((($101)) + 16|0);
 $103 = HEAP8[$102>>0]|0;
 $104 = ($103&255) >>> 2;
 $105 = $104 & 1;
 $106 = $105&255;
 $107 = $10;
 $108 = $107&1;
 $109 = $108&1;
 $110 = Math_imul($106, $109)|0;
 $111 = $110&255;
 $112 = $5;
 $113 = ((($112)) + 16|0);
 $114 = HEAP8[$113>>0]|0;
 $115 = $111 & 1;
 $116 = ($115 << 2)&255;
 $117 = $114 & -5;
 $118 = $117 | $116;
 HEAP8[$113>>0] = $118;
 $119 = $10;
 $120 = $119&1;
 if (!($120)) {
  STACKTOP = sp;return 0;
 }
 $121 = HEAP32[$11>>2]|0;
 $122 = HEAP32[$121>>2]|0;
 FUNCTION_TABLE_v[$122 & 511]();
 STACKTOP = sp;return 0;
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $1 = $3;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EED2Ev($2);
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EE7__cloneEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(608|0);
 $7 = sp + 128|0;
 $8 = sp + 120|0;
 $9 = sp + 112|0;
 $10 = sp + 104|0;
 $13 = sp + 594|0;
 $14 = sp + 593|0;
 $15 = sp + 592|0;
 $16 = sp + 591|0;
 $18 = sp + 540|0;
 $27 = sp + 96|0;
 $28 = sp + 88|0;
 $29 = sp + 80|0;
 $30 = sp + 72|0;
 $34 = sp + 590|0;
 $35 = sp + 589|0;
 $36 = sp + 588|0;
 $37 = sp + 587|0;
 $39 = sp + 488|0;
 $45 = sp + 64|0;
 $46 = sp + 56|0;
 $47 = sp + 48|0;
 $53 = sp + 40|0;
 $54 = sp + 32|0;
 $55 = sp + 24|0;
 $58 = sp + 586|0;
 $59 = sp + 436|0;
 $60 = sp + 585|0;
 $61 = sp + 584|0;
 $62 = sp + 432|0;
 $63 = sp + 583|0;
 $64 = sp + 16|0;
 $65 = sp + 8|0;
 $66 = sp;
 $71 = sp + 582|0;
 $72 = sp + 412|0;
 $73 = sp + 408|0;
 $100 = sp + 300|0;
 $137 = sp + 581|0;
 $138 = sp + 144|0;
 $139 = sp + 136|0;
 $140 = sp + 580|0;
 $136 = $0;
 $141 = $136;
 $142 = ((($141)) + 4|0);
 $135 = $142;
 $143 = $135;
 $134 = $143;
 $144 = $134;
 $132 = $137;
 $133 = $144;
 $110 = $137;
 $111 = 1;
 $112 = 0;
 $145 = $110;
 $146 = $111;
 $109 = $145;
 $147 = ($146>>>0)>(536870911);
 if ($147) {
  $107 = 9129;
  $148 = (___cxa_allocate_exception(8)|0);
  $149 = $107;
  $105 = $148;
  $106 = $149;
  $150 = $105;
  $151 = $106;
  __ZNSt11logic_errorC2EPKc($150,$151);
  HEAP32[$150>>2] = (5584);
  ___cxa_throw(($148|0),(3656|0),(228|0));
  // unreachable;
 }
 $152 = $111;
 $153 = $152<<3;
 $108 = $153;
 $154 = $108;
 $155 = (__Znwm($154)|0);
 $102 = $139;
 $103 = $137;
 $104 = 1;
 $156 = $102;
 $157 = $103;
 HEAP32[$156>>2] = $157;
 $158 = ((($156)) + 4|0);
 $159 = $104;
 HEAP32[$158>>2] = $159;
 $99 = $138;
 HEAP32[$100>>2] = $155;
 $101 = $139;
 $160 = $99;
 $161 = $101;
 $98 = $161;
 $162 = $98;
 $95 = $160;
 $96 = $100;
 $97 = $162;
 $163 = $95;
 $164 = $96;
 $94 = $164;
 $165 = $94;
 $88 = $163;
 $89 = $165;
 $166 = $88;
 $167 = $89;
 $87 = $167;
 $168 = $87;
 $169 = HEAP32[$168>>2]|0;
 HEAP32[$166>>2] = $169;
 $170 = ((($163)) + 4|0);
 $171 = $97;
 $90 = $171;
 $172 = $90;
 $92 = $170;
 $93 = $172;
 $173 = $92;
 $174 = $93;
 $91 = $174;
 $175 = $91;
 ;HEAP32[$173>>2]=HEAP32[$175>>2]|0;HEAP32[$173+4>>2]=HEAP32[$175+4>>2]|0;
 $86 = $138;
 $176 = $86;
 $85 = $176;
 $177 = $85;
 $84 = $177;
 $178 = $84;
 $179 = HEAP32[$178>>2]|0;
 $180 = ((($141)) + 4|0);
 $83 = $180;
 $181 = $83;
 $82 = $181;
 $182 = $82;
 $80 = $140;
 $81 = $137;
 $68 = $179;
 $69 = $182;
 $70 = $140;
 $183 = $68;
 $67 = $183;
 $184 = $67;
 HEAP32[$184>>2] = (3748);
 HEAP32[$183>>2] = (4004);
 $185 = ((($183)) + 4|0);
 $186 = $69;
 $19 = $186;
 $187 = $19;
 $17 = $187;
 $188 = $17;
 $11 = $18;
 $12 = $188;
 $189 = $11;
 $190 = $12;
 ;HEAP8[$7>>0]=HEAP8[$16>>0]|0;
 ;HEAP8[$8>>0]=HEAP8[$15>>0]|0;
 ;HEAP8[$9>>0]=HEAP8[$14>>0]|0;
 ;HEAP8[$10>>0]=HEAP8[$13>>0]|0;
 $5 = $189;
 $6 = $190;
 $191 = $5;
 $192 = $6;
 $4 = $192;
 $193 = $4;
 $2 = $191;
 $3 = $193;
 $194 = $2;
 $195 = $3;
 $1 = $195;
 $196 = $1;
 HEAP32[$194>>2] = $196;
 $197 = HEAP32[$18>>2]|0;
 HEAP32[$72>>2] = $197;
 $198 = $70;
 $20 = $198;
 $199 = $20;
 $40 = $199;
 $200 = $40;
 $38 = $200;
 $201 = $38;
 $32 = $39;
 $33 = $201;
 $202 = $32;
 $203 = $33;
 $31 = $203;
 $204 = $31;
 ;HEAP8[$27>>0]=HEAP8[$37>>0]|0;
 ;HEAP8[$28>>0]=HEAP8[$36>>0]|0;
 ;HEAP8[$29>>0]=HEAP8[$35>>0]|0;
 ;HEAP8[$30>>0]=HEAP8[$34>>0]|0;
 $25 = $202;
 $26 = $204;
 $205 = $25;
 $206 = $26;
 $24 = $206;
 $207 = $24;
 $22 = $205;
 $23 = $207;
 $208 = $22;
 $209 = $23;
 $21 = $209;
 $210 = $21;
 HEAP32[$208>>2] = $210;
 $211 = HEAP32[$39>>2]|0;
 HEAP32[$73>>2] = $211;
 ;HEAP8[$64>>0]=HEAP8[$73>>0]|0;HEAP8[$64+1>>0]=HEAP8[$73+1>>0]|0;HEAP8[$64+2>>0]=HEAP8[$73+2>>0]|0;HEAP8[$64+3>>0]=HEAP8[$73+3>>0]|0;
 ;HEAP8[$65>>0]=HEAP8[$72>>0]|0;HEAP8[$65+1>>0]=HEAP8[$72+1>>0]|0;HEAP8[$65+2>>0]=HEAP8[$72+2>>0]|0;HEAP8[$65+3>>0]=HEAP8[$72+3>>0]|0;
 ;HEAP8[$66>>0]=HEAP8[$71>>0]|0;
 $57 = $185;
 $212 = $57;
 $56 = $65;
 $213 = $56;
 ;HEAP32[$59>>2]=HEAP32[$213>>2]|0;
 ;HEAP8[$45>>0]=HEAP8[$60>>0]|0;
 ;HEAP8[$46>>0]=HEAP8[$59>>0]|0;HEAP8[$46+1>>0]=HEAP8[$59+1>>0]|0;HEAP8[$46+2>>0]=HEAP8[$59+2>>0]|0;HEAP8[$46+3>>0]=HEAP8[$59+3>>0]|0;
 ;HEAP8[$47>>0]=HEAP8[$58>>0]|0;
 $44 = $212;
 $43 = $46;
 $214 = $43;
 $42 = $214;
 $215 = $42;
 $216 = HEAP32[$215>>2]|0;
 $41 = $216;
 $48 = $64;
 $217 = $48;
 ;HEAP32[$62>>2]=HEAP32[$217>>2]|0;
 ;HEAP8[$53>>0]=HEAP8[$63>>0]|0;
 ;HEAP8[$54>>0]=HEAP8[$62>>0]|0;HEAP8[$54+1>>0]=HEAP8[$62+1>>0]|0;HEAP8[$54+2>>0]=HEAP8[$62+2>>0]|0;HEAP8[$54+3>>0]=HEAP8[$62+3>>0]|0;
 ;HEAP8[$55>>0]=HEAP8[$61>>0]|0;
 $52 = $212;
 $51 = $54;
 $218 = $51;
 $50 = $218;
 $219 = $50;
 $220 = HEAP32[$219>>2]|0;
 $49 = $220;
 $78 = $138;
 $221 = $78;
 $77 = $221;
 $222 = $77;
 $76 = $222;
 $223 = $76;
 $224 = HEAP32[$223>>2]|0;
 $79 = $224;
 $75 = $221;
 $225 = $75;
 $74 = $225;
 $226 = $74;
 HEAP32[$226>>2] = 0;
 $227 = $79;
 $131 = $138;
 $228 = $131;
 $128 = $228;
 $129 = 0;
 $229 = $128;
 $127 = $229;
 $230 = $127;
 $126 = $230;
 $231 = $126;
 $232 = HEAP32[$231>>2]|0;
 $130 = $232;
 $233 = $129;
 $116 = $229;
 $234 = $116;
 $115 = $234;
 $235 = $115;
 HEAP32[$235>>2] = $233;
 $236 = $130;
 $237 = ($236|0)!=(0|0);
 if (!($237)) {
  STACKTOP = sp;return ($227|0);
 }
 $114 = $229;
 $238 = $114;
 $239 = ((($238)) + 4|0);
 $113 = $239;
 $240 = $113;
 $241 = $130;
 $124 = $240;
 $125 = $241;
 $242 = $124;
 $243 = HEAP32[$242>>2]|0;
 $244 = $125;
 $245 = ((($242)) + 4|0);
 $246 = HEAP32[$245>>2]|0;
 $121 = $243;
 $122 = $244;
 $123 = $246;
 $247 = $121;
 $248 = $122;
 $249 = $123;
 $118 = $247;
 $119 = $248;
 $120 = $249;
 $250 = $119;
 $117 = $250;
 $251 = $117;
 __ZdlPv($251);
 STACKTOP = sp;return ($227|0);
}
function __ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EE7__cloneEPNS0_6__baseISA_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $10 = sp + 128|0;
 $11 = sp + 120|0;
 $12 = sp + 112|0;
 $13 = sp + 104|0;
 $16 = sp + 332|0;
 $17 = sp + 331|0;
 $18 = sp + 330|0;
 $19 = sp + 329|0;
 $21 = sp + 272|0;
 $29 = sp + 96|0;
 $30 = sp + 88|0;
 $31 = sp + 80|0;
 $32 = sp + 72|0;
 $35 = sp + 328|0;
 $36 = sp + 327|0;
 $37 = sp + 326|0;
 $38 = sp + 325|0;
 $40 = sp + 228|0;
 $46 = sp + 64|0;
 $47 = sp + 56|0;
 $48 = sp + 48|0;
 $54 = sp + 40|0;
 $55 = sp + 32|0;
 $56 = sp + 24|0;
 $59 = sp + 324|0;
 $60 = sp + 176|0;
 $61 = sp + 323|0;
 $62 = sp + 322|0;
 $63 = sp + 172|0;
 $64 = sp + 321|0;
 $65 = sp + 16|0;
 $66 = sp + 8|0;
 $67 = sp;
 $72 = sp + 320|0;
 $73 = sp + 152|0;
 $74 = sp + 148|0;
 $77 = $0;
 $78 = $1;
 $79 = $77;
 $80 = $78;
 $81 = ((($79)) + 4|0);
 $76 = $81;
 $82 = $76;
 $75 = $82;
 $83 = $75;
 $84 = ((($79)) + 4|0);
 $3 = $84;
 $85 = $3;
 $2 = $85;
 $86 = $2;
 $69 = $80;
 $70 = $83;
 $71 = $86;
 $87 = $69;
 $68 = $87;
 $88 = $68;
 HEAP32[$88>>2] = (3748);
 HEAP32[$87>>2] = (4004);
 $89 = ((($87)) + 4|0);
 $90 = $70;
 $22 = $90;
 $91 = $22;
 $20 = $91;
 $92 = $20;
 $14 = $21;
 $15 = $92;
 $93 = $14;
 $94 = $15;
 ;HEAP8[$10>>0]=HEAP8[$19>>0]|0;
 ;HEAP8[$11>>0]=HEAP8[$18>>0]|0;
 ;HEAP8[$12>>0]=HEAP8[$17>>0]|0;
 ;HEAP8[$13>>0]=HEAP8[$16>>0]|0;
 $8 = $93;
 $9 = $94;
 $95 = $8;
 $96 = $9;
 $7 = $96;
 $97 = $7;
 $5 = $95;
 $6 = $97;
 $98 = $5;
 $99 = $6;
 $4 = $99;
 $100 = $4;
 HEAP32[$98>>2] = $100;
 $101 = HEAP32[$21>>2]|0;
 HEAP32[$73>>2] = $101;
 $102 = $71;
 $41 = $102;
 $103 = $41;
 $39 = $103;
 $104 = $39;
 $33 = $40;
 $34 = $104;
 $105 = $33;
 $106 = $34;
 ;HEAP8[$29>>0]=HEAP8[$38>>0]|0;
 ;HEAP8[$30>>0]=HEAP8[$37>>0]|0;
 ;HEAP8[$31>>0]=HEAP8[$36>>0]|0;
 ;HEAP8[$32>>0]=HEAP8[$35>>0]|0;
 $27 = $105;
 $28 = $106;
 $107 = $27;
 $108 = $28;
 $26 = $108;
 $109 = $26;
 $24 = $107;
 $25 = $109;
 $110 = $24;
 $111 = $25;
 $23 = $111;
 $112 = $23;
 HEAP32[$110>>2] = $112;
 $113 = HEAP32[$40>>2]|0;
 HEAP32[$74>>2] = $113;
 ;HEAP8[$65>>0]=HEAP8[$74>>0]|0;HEAP8[$65+1>>0]=HEAP8[$74+1>>0]|0;HEAP8[$65+2>>0]=HEAP8[$74+2>>0]|0;HEAP8[$65+3>>0]=HEAP8[$74+3>>0]|0;
 ;HEAP8[$66>>0]=HEAP8[$73>>0]|0;HEAP8[$66+1>>0]=HEAP8[$73+1>>0]|0;HEAP8[$66+2>>0]=HEAP8[$73+2>>0]|0;HEAP8[$66+3>>0]=HEAP8[$73+3>>0]|0;
 ;HEAP8[$67>>0]=HEAP8[$72>>0]|0;
 $58 = $89;
 $114 = $58;
 $57 = $66;
 $115 = $57;
 ;HEAP32[$60>>2]=HEAP32[$115>>2]|0;
 ;HEAP8[$46>>0]=HEAP8[$61>>0]|0;
 ;HEAP8[$47>>0]=HEAP8[$60>>0]|0;HEAP8[$47+1>>0]=HEAP8[$60+1>>0]|0;HEAP8[$47+2>>0]=HEAP8[$60+2>>0]|0;HEAP8[$47+3>>0]=HEAP8[$60+3>>0]|0;
 ;HEAP8[$48>>0]=HEAP8[$59>>0]|0;
 $45 = $114;
 $44 = $47;
 $116 = $44;
 $43 = $116;
 $117 = $43;
 $118 = HEAP32[$117>>2]|0;
 $42 = $118;
 $49 = $65;
 $119 = $49;
 ;HEAP32[$63>>2]=HEAP32[$119>>2]|0;
 ;HEAP8[$54>>0]=HEAP8[$64>>0]|0;
 ;HEAP8[$55>>0]=HEAP8[$63>>0]|0;HEAP8[$55+1>>0]=HEAP8[$63+1>>0]|0;HEAP8[$55+2>>0]=HEAP8[$63+2>>0]|0;HEAP8[$55+3>>0]=HEAP8[$63+3>>0]|0;
 ;HEAP8[$56>>0]=HEAP8[$62>>0]|0;
 $53 = $114;
 $52 = $55;
 $120 = $52;
 $51 = $120;
 $121 = $51;
 $122 = HEAP32[$121>>2]|0;
 $50 = $122;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EE7destroyEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EE18destroy_deallocateEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $10 = sp + 36|0;
 $9 = $0;
 $11 = $9;
 $12 = ((($11)) + 4|0);
 $8 = $12;
 $13 = $8;
 $7 = $13;
 $14 = $7;
 $1 = $10;
 $2 = $14;
 $4 = $10;
 $5 = $11;
 $6 = 1;
 $15 = $5;
 $3 = $15;
 $16 = $3;
 __ZdlPv($16);
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EEclES6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $5;
 $8 = ((($7)) + 4|0);
 $4 = $8;
 $9 = $4;
 $3 = $9;
 $10 = $3;
 $11 = $6;
 $2 = $11;
 $12 = $2;
 $13 = (__ZNSt3__228__invoke_void_return_wrapperIbE6__callIJRZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS7_E0_S7_EEEbDpOT_($10,$12)|0);
 STACKTOP = sp;return ($13|0);
}
function __ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EE6targetERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $7;
 $10 = $8;
 $4 = $10;
 $5 = 2720;
 $11 = $4;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $5;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($13|0)==($16|0);
 if ($17) {
  $18 = ((($9)) + 4|0);
  $3 = $18;
  $19 = $3;
  $2 = $19;
  $20 = $2;
  $6 = $20;
  $21 = $6;
  STACKTOP = sp;return ($21|0);
 } else {
  $6 = 0;
  $21 = $6;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function __ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EE11target_typeEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (2720|0);
}
function __ZNSt3__228__invoke_void_return_wrapperIbE6__callIJRZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS7_E0_S7_EEEbDpOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = $0;
 $9 = $1;
 $10 = $8;
 $7 = $10;
 $11 = $7;
 $12 = $9;
 $2 = $12;
 $13 = $2;
 $5 = $11;
 $6 = $13;
 $14 = $5;
 $4 = $14;
 $15 = $4;
 $16 = $6;
 $3 = $16;
 $17 = $3;
 $18 = (__ZZN16GUIButtonClusterILm5EE7OnEventERK5EventENKUlS3_E0_clES3_($15,$17)|0);
 STACKTOP = sp;return ($18|0);
}
function __ZZN16GUIButtonClusterILm5EE7OnEventERK5EventENKUlS3_E0_clES3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 STACKTOP = sp;return 0;
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $1 = $3;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EED2Ev($2);
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EE7__cloneEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(608|0);
 $7 = sp + 128|0;
 $8 = sp + 120|0;
 $9 = sp + 112|0;
 $10 = sp + 104|0;
 $13 = sp + 594|0;
 $14 = sp + 593|0;
 $15 = sp + 592|0;
 $16 = sp + 591|0;
 $18 = sp + 540|0;
 $27 = sp + 96|0;
 $28 = sp + 88|0;
 $29 = sp + 80|0;
 $30 = sp + 72|0;
 $34 = sp + 590|0;
 $35 = sp + 589|0;
 $36 = sp + 588|0;
 $37 = sp + 587|0;
 $39 = sp + 488|0;
 $45 = sp + 64|0;
 $46 = sp + 56|0;
 $47 = sp + 48|0;
 $53 = sp + 40|0;
 $54 = sp + 32|0;
 $55 = sp + 24|0;
 $58 = sp + 586|0;
 $59 = sp + 436|0;
 $60 = sp + 585|0;
 $61 = sp + 584|0;
 $62 = sp + 432|0;
 $63 = sp + 583|0;
 $64 = sp + 16|0;
 $65 = sp + 8|0;
 $66 = sp;
 $71 = sp + 582|0;
 $72 = sp + 412|0;
 $73 = sp + 408|0;
 $100 = sp + 300|0;
 $137 = sp + 581|0;
 $138 = sp + 144|0;
 $139 = sp + 136|0;
 $140 = sp + 580|0;
 $136 = $0;
 $141 = $136;
 $142 = ((($141)) + 4|0);
 $135 = $142;
 $143 = $135;
 $134 = $143;
 $144 = $134;
 $132 = $137;
 $133 = $144;
 $110 = $137;
 $111 = 1;
 $112 = 0;
 $145 = $110;
 $146 = $111;
 $109 = $145;
 $147 = ($146>>>0)>(536870911);
 if ($147) {
  $107 = 9129;
  $148 = (___cxa_allocate_exception(8)|0);
  $149 = $107;
  $105 = $148;
  $106 = $149;
  $150 = $105;
  $151 = $106;
  __ZNSt11logic_errorC2EPKc($150,$151);
  HEAP32[$150>>2] = (5584);
  ___cxa_throw(($148|0),(3656|0),(228|0));
  // unreachable;
 }
 $152 = $111;
 $153 = $152<<3;
 $108 = $153;
 $154 = $108;
 $155 = (__Znwm($154)|0);
 $102 = $139;
 $103 = $137;
 $104 = 1;
 $156 = $102;
 $157 = $103;
 HEAP32[$156>>2] = $157;
 $158 = ((($156)) + 4|0);
 $159 = $104;
 HEAP32[$158>>2] = $159;
 $99 = $138;
 HEAP32[$100>>2] = $155;
 $101 = $139;
 $160 = $99;
 $161 = $101;
 $98 = $161;
 $162 = $98;
 $95 = $160;
 $96 = $100;
 $97 = $162;
 $163 = $95;
 $164 = $96;
 $94 = $164;
 $165 = $94;
 $88 = $163;
 $89 = $165;
 $166 = $88;
 $167 = $89;
 $87 = $167;
 $168 = $87;
 $169 = HEAP32[$168>>2]|0;
 HEAP32[$166>>2] = $169;
 $170 = ((($163)) + 4|0);
 $171 = $97;
 $90 = $171;
 $172 = $90;
 $92 = $170;
 $93 = $172;
 $173 = $92;
 $174 = $93;
 $91 = $174;
 $175 = $91;
 ;HEAP32[$173>>2]=HEAP32[$175>>2]|0;HEAP32[$173+4>>2]=HEAP32[$175+4>>2]|0;
 $86 = $138;
 $176 = $86;
 $85 = $176;
 $177 = $85;
 $84 = $177;
 $178 = $84;
 $179 = HEAP32[$178>>2]|0;
 $180 = ((($141)) + 4|0);
 $83 = $180;
 $181 = $83;
 $82 = $181;
 $182 = $82;
 $80 = $140;
 $81 = $137;
 $68 = $179;
 $69 = $182;
 $70 = $140;
 $183 = $68;
 $67 = $183;
 $184 = $67;
 HEAP32[$184>>2] = (3748);
 HEAP32[$183>>2] = (4048);
 $185 = ((($183)) + 4|0);
 $186 = $69;
 $19 = $186;
 $187 = $19;
 $17 = $187;
 $188 = $17;
 $11 = $18;
 $12 = $188;
 $189 = $11;
 $190 = $12;
 ;HEAP8[$7>>0]=HEAP8[$16>>0]|0;
 ;HEAP8[$8>>0]=HEAP8[$15>>0]|0;
 ;HEAP8[$9>>0]=HEAP8[$14>>0]|0;
 ;HEAP8[$10>>0]=HEAP8[$13>>0]|0;
 $5 = $189;
 $6 = $190;
 $191 = $5;
 $192 = $6;
 $4 = $192;
 $193 = $4;
 $2 = $191;
 $3 = $193;
 $194 = $2;
 $195 = $3;
 $1 = $195;
 $196 = $1;
 HEAP32[$194>>2] = $196;
 $197 = HEAP32[$18>>2]|0;
 HEAP32[$72>>2] = $197;
 $198 = $70;
 $20 = $198;
 $199 = $20;
 $40 = $199;
 $200 = $40;
 $38 = $200;
 $201 = $38;
 $32 = $39;
 $33 = $201;
 $202 = $32;
 $203 = $33;
 $31 = $203;
 $204 = $31;
 ;HEAP8[$27>>0]=HEAP8[$37>>0]|0;
 ;HEAP8[$28>>0]=HEAP8[$36>>0]|0;
 ;HEAP8[$29>>0]=HEAP8[$35>>0]|0;
 ;HEAP8[$30>>0]=HEAP8[$34>>0]|0;
 $25 = $202;
 $26 = $204;
 $205 = $25;
 $206 = $26;
 $24 = $206;
 $207 = $24;
 $22 = $205;
 $23 = $207;
 $208 = $22;
 $209 = $23;
 $21 = $209;
 $210 = $21;
 HEAP32[$208>>2] = $210;
 $211 = HEAP32[$39>>2]|0;
 HEAP32[$73>>2] = $211;
 ;HEAP8[$64>>0]=HEAP8[$73>>0]|0;HEAP8[$64+1>>0]=HEAP8[$73+1>>0]|0;HEAP8[$64+2>>0]=HEAP8[$73+2>>0]|0;HEAP8[$64+3>>0]=HEAP8[$73+3>>0]|0;
 ;HEAP8[$65>>0]=HEAP8[$72>>0]|0;HEAP8[$65+1>>0]=HEAP8[$72+1>>0]|0;HEAP8[$65+2>>0]=HEAP8[$72+2>>0]|0;HEAP8[$65+3>>0]=HEAP8[$72+3>>0]|0;
 ;HEAP8[$66>>0]=HEAP8[$71>>0]|0;
 $57 = $185;
 $212 = $57;
 $56 = $65;
 $213 = $56;
 ;HEAP32[$59>>2]=HEAP32[$213>>2]|0;
 ;HEAP8[$45>>0]=HEAP8[$60>>0]|0;
 ;HEAP8[$46>>0]=HEAP8[$59>>0]|0;HEAP8[$46+1>>0]=HEAP8[$59+1>>0]|0;HEAP8[$46+2>>0]=HEAP8[$59+2>>0]|0;HEAP8[$46+3>>0]=HEAP8[$59+3>>0]|0;
 ;HEAP8[$47>>0]=HEAP8[$58>>0]|0;
 $44 = $212;
 $214 = $44;
 $43 = $46;
 $215 = $43;
 $42 = $215;
 $216 = $42;
 $217 = HEAP32[$216>>2]|0;
 $41 = $217;
 $218 = $41;
 ;HEAP32[$214>>2]=HEAP32[$218>>2]|0;
 $48 = $64;
 $219 = $48;
 ;HEAP32[$62>>2]=HEAP32[$219>>2]|0;
 ;HEAP8[$53>>0]=HEAP8[$63>>0]|0;
 ;HEAP8[$54>>0]=HEAP8[$62>>0]|0;HEAP8[$54+1>>0]=HEAP8[$62+1>>0]|0;HEAP8[$54+2>>0]=HEAP8[$62+2>>0]|0;HEAP8[$54+3>>0]=HEAP8[$62+3>>0]|0;
 ;HEAP8[$55>>0]=HEAP8[$61>>0]|0;
 $52 = $212;
 $51 = $54;
 $220 = $51;
 $50 = $220;
 $221 = $50;
 $222 = HEAP32[$221>>2]|0;
 $49 = $222;
 $78 = $138;
 $223 = $78;
 $77 = $223;
 $224 = $77;
 $76 = $224;
 $225 = $76;
 $226 = HEAP32[$225>>2]|0;
 $79 = $226;
 $75 = $223;
 $227 = $75;
 $74 = $227;
 $228 = $74;
 HEAP32[$228>>2] = 0;
 $229 = $79;
 $131 = $138;
 $230 = $131;
 $128 = $230;
 $129 = 0;
 $231 = $128;
 $127 = $231;
 $232 = $127;
 $126 = $232;
 $233 = $126;
 $234 = HEAP32[$233>>2]|0;
 $130 = $234;
 $235 = $129;
 $116 = $231;
 $236 = $116;
 $115 = $236;
 $237 = $115;
 HEAP32[$237>>2] = $235;
 $238 = $130;
 $239 = ($238|0)!=(0|0);
 if (!($239)) {
  STACKTOP = sp;return ($229|0);
 }
 $114 = $231;
 $240 = $114;
 $241 = ((($240)) + 4|0);
 $113 = $241;
 $242 = $113;
 $243 = $130;
 $124 = $242;
 $125 = $243;
 $244 = $124;
 $245 = HEAP32[$244>>2]|0;
 $246 = $125;
 $247 = ((($244)) + 4|0);
 $248 = HEAP32[$247>>2]|0;
 $121 = $245;
 $122 = $246;
 $123 = $248;
 $249 = $121;
 $250 = $122;
 $251 = $123;
 $118 = $249;
 $119 = $250;
 $120 = $251;
 $252 = $119;
 $117 = $252;
 $253 = $117;
 __ZdlPv($253);
 STACKTOP = sp;return ($229|0);
}
function __ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EE7__cloneEPNS0_6__baseISA_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $10 = sp + 128|0;
 $11 = sp + 120|0;
 $12 = sp + 112|0;
 $13 = sp + 104|0;
 $16 = sp + 332|0;
 $17 = sp + 331|0;
 $18 = sp + 330|0;
 $19 = sp + 329|0;
 $21 = sp + 272|0;
 $29 = sp + 96|0;
 $30 = sp + 88|0;
 $31 = sp + 80|0;
 $32 = sp + 72|0;
 $35 = sp + 328|0;
 $36 = sp + 327|0;
 $37 = sp + 326|0;
 $38 = sp + 325|0;
 $40 = sp + 228|0;
 $46 = sp + 64|0;
 $47 = sp + 56|0;
 $48 = sp + 48|0;
 $54 = sp + 40|0;
 $55 = sp + 32|0;
 $56 = sp + 24|0;
 $59 = sp + 324|0;
 $60 = sp + 176|0;
 $61 = sp + 323|0;
 $62 = sp + 322|0;
 $63 = sp + 172|0;
 $64 = sp + 321|0;
 $65 = sp + 16|0;
 $66 = sp + 8|0;
 $67 = sp;
 $72 = sp + 320|0;
 $73 = sp + 152|0;
 $74 = sp + 148|0;
 $77 = $0;
 $78 = $1;
 $79 = $77;
 $80 = $78;
 $81 = ((($79)) + 4|0);
 $76 = $81;
 $82 = $76;
 $75 = $82;
 $83 = $75;
 $84 = ((($79)) + 4|0);
 $3 = $84;
 $85 = $3;
 $2 = $85;
 $86 = $2;
 $69 = $80;
 $70 = $83;
 $71 = $86;
 $87 = $69;
 $68 = $87;
 $88 = $68;
 HEAP32[$88>>2] = (3748);
 HEAP32[$87>>2] = (4048);
 $89 = ((($87)) + 4|0);
 $90 = $70;
 $22 = $90;
 $91 = $22;
 $20 = $91;
 $92 = $20;
 $14 = $21;
 $15 = $92;
 $93 = $14;
 $94 = $15;
 ;HEAP8[$10>>0]=HEAP8[$19>>0]|0;
 ;HEAP8[$11>>0]=HEAP8[$18>>0]|0;
 ;HEAP8[$12>>0]=HEAP8[$17>>0]|0;
 ;HEAP8[$13>>0]=HEAP8[$16>>0]|0;
 $8 = $93;
 $9 = $94;
 $95 = $8;
 $96 = $9;
 $7 = $96;
 $97 = $7;
 $5 = $95;
 $6 = $97;
 $98 = $5;
 $99 = $6;
 $4 = $99;
 $100 = $4;
 HEAP32[$98>>2] = $100;
 $101 = HEAP32[$21>>2]|0;
 HEAP32[$73>>2] = $101;
 $102 = $71;
 $41 = $102;
 $103 = $41;
 $39 = $103;
 $104 = $39;
 $33 = $40;
 $34 = $104;
 $105 = $33;
 $106 = $34;
 ;HEAP8[$29>>0]=HEAP8[$38>>0]|0;
 ;HEAP8[$30>>0]=HEAP8[$37>>0]|0;
 ;HEAP8[$31>>0]=HEAP8[$36>>0]|0;
 ;HEAP8[$32>>0]=HEAP8[$35>>0]|0;
 $27 = $105;
 $28 = $106;
 $107 = $27;
 $108 = $28;
 $26 = $108;
 $109 = $26;
 $24 = $107;
 $25 = $109;
 $110 = $24;
 $111 = $25;
 $23 = $111;
 $112 = $23;
 HEAP32[$110>>2] = $112;
 $113 = HEAP32[$40>>2]|0;
 HEAP32[$74>>2] = $113;
 ;HEAP8[$65>>0]=HEAP8[$74>>0]|0;HEAP8[$65+1>>0]=HEAP8[$74+1>>0]|0;HEAP8[$65+2>>0]=HEAP8[$74+2>>0]|0;HEAP8[$65+3>>0]=HEAP8[$74+3>>0]|0;
 ;HEAP8[$66>>0]=HEAP8[$73>>0]|0;HEAP8[$66+1>>0]=HEAP8[$73+1>>0]|0;HEAP8[$66+2>>0]=HEAP8[$73+2>>0]|0;HEAP8[$66+3>>0]=HEAP8[$73+3>>0]|0;
 ;HEAP8[$67>>0]=HEAP8[$72>>0]|0;
 $58 = $89;
 $114 = $58;
 $57 = $66;
 $115 = $57;
 ;HEAP32[$60>>2]=HEAP32[$115>>2]|0;
 ;HEAP8[$46>>0]=HEAP8[$61>>0]|0;
 ;HEAP8[$47>>0]=HEAP8[$60>>0]|0;HEAP8[$47+1>>0]=HEAP8[$60+1>>0]|0;HEAP8[$47+2>>0]=HEAP8[$60+2>>0]|0;HEAP8[$47+3>>0]=HEAP8[$60+3>>0]|0;
 ;HEAP8[$48>>0]=HEAP8[$59>>0]|0;
 $45 = $114;
 $116 = $45;
 $44 = $47;
 $117 = $44;
 $43 = $117;
 $118 = $43;
 $119 = HEAP32[$118>>2]|0;
 $42 = $119;
 $120 = $42;
 ;HEAP32[$116>>2]=HEAP32[$120>>2]|0;
 $49 = $65;
 $121 = $49;
 ;HEAP32[$63>>2]=HEAP32[$121>>2]|0;
 ;HEAP8[$54>>0]=HEAP8[$64>>0]|0;
 ;HEAP8[$55>>0]=HEAP8[$63>>0]|0;HEAP8[$55+1>>0]=HEAP8[$63+1>>0]|0;HEAP8[$55+2>>0]=HEAP8[$63+2>>0]|0;HEAP8[$55+3>>0]=HEAP8[$63+3>>0]|0;
 ;HEAP8[$56>>0]=HEAP8[$62>>0]|0;
 $53 = $114;
 $52 = $55;
 $122 = $52;
 $51 = $122;
 $123 = $51;
 $124 = HEAP32[$123>>2]|0;
 $50 = $124;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EE7destroyEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EE18destroy_deallocateEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $10 = sp + 36|0;
 $9 = $0;
 $11 = $9;
 $12 = ((($11)) + 4|0);
 $8 = $12;
 $13 = $8;
 $7 = $13;
 $14 = $7;
 $1 = $10;
 $2 = $14;
 $4 = $10;
 $5 = $11;
 $6 = 1;
 $15 = $5;
 $3 = $15;
 $16 = $3;
 __ZdlPv($16);
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EEclES6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $5;
 $8 = ((($7)) + 4|0);
 $4 = $8;
 $9 = $4;
 $3 = $9;
 $10 = $3;
 $11 = $6;
 $2 = $11;
 $12 = $2;
 $13 = (__ZNSt3__228__invoke_void_return_wrapperIbE6__callIJRZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS7_E_S7_EEEbDpOT_($10,$12)|0);
 STACKTOP = sp;return ($13|0);
}
function __ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EE6targetERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $7;
 $10 = $8;
 $4 = $10;
 $5 = 2744;
 $11 = $4;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $5;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($13|0)==($16|0);
 if ($17) {
  $18 = ((($9)) + 4|0);
  $3 = $18;
  $19 = $3;
  $2 = $19;
  $20 = $2;
  $6 = $20;
  $21 = $6;
  STACKTOP = sp;return ($21|0);
 } else {
  $6 = 0;
  $21 = $6;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function __ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EE11target_typeEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (2744|0);
}
function __ZNSt3__228__invoke_void_return_wrapperIbE6__callIJRZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS7_E_S7_EEEbDpOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = $0;
 $9 = $1;
 $10 = $8;
 $7 = $10;
 $11 = $7;
 $12 = $9;
 $2 = $12;
 $13 = $2;
 $5 = $11;
 $6 = $13;
 $14 = $5;
 $4 = $14;
 $15 = $4;
 $16 = $6;
 $3 = $16;
 $17 = $3;
 $18 = (__ZZN16GUIButtonClusterILm5EE7OnEventERK5EventENKUlS3_E_clES3_($15,$17)|0);
 STACKTOP = sp;return ($18|0);
}
function __ZZN16GUIButtonClusterILm5EE7OnEventERK5EventENKUlS3_E_clES3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 12|0);
 $4 = $8;
 $9 = $4;
 $10 = ((($9)) + 16|0);
 $5 = $10;
 $11 = $5;
 $12 = HEAP8[$11>>0]|0;
 $13 = $12 & -3;
 HEAP8[$11>>0] = $13;
 $14 = $5;
 $15 = HEAP8[$14>>0]|0;
 $16 = $15 & -5;
 HEAP8[$14>>0] = $16;
 $17 = $5;
 $18 = HEAP8[$17>>0]|0;
 $19 = $18 & -9;
 HEAP8[$17>>0] = $19;
 $20 = $5;
 $21 = HEAP8[$20>>0]|0;
 $22 = $21 & -17;
 HEAP8[$20>>0] = $22;
 STACKTOP = sp;return 0;
}
function __ZNSt3__210__function6__funcIZN16MainMenuGUILayer7OnEventERK5EventE4__16NS_9allocatorIS6_EEFbS5_EED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $1 = $3;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN16MainMenuGUILayer7OnEventERK5EventE4__16NS_9allocatorIS6_EEFbS5_EED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZNSt3__210__function6__funcIZN16MainMenuGUILayer7OnEventERK5EventE4__16NS_9allocatorIS6_EEFbS5_EED2Ev($2);
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZNKSt3__210__function6__funcIZN16MainMenuGUILayer7OnEventERK5EventE4__16NS_9allocatorIS6_EEFbS5_EE7__cloneEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(608|0);
 $7 = sp + 128|0;
 $8 = sp + 120|0;
 $9 = sp + 112|0;
 $10 = sp + 104|0;
 $13 = sp + 594|0;
 $14 = sp + 593|0;
 $15 = sp + 592|0;
 $16 = sp + 591|0;
 $18 = sp + 540|0;
 $27 = sp + 96|0;
 $28 = sp + 88|0;
 $29 = sp + 80|0;
 $30 = sp + 72|0;
 $34 = sp + 590|0;
 $35 = sp + 589|0;
 $36 = sp + 588|0;
 $37 = sp + 587|0;
 $39 = sp + 488|0;
 $45 = sp + 64|0;
 $46 = sp + 56|0;
 $47 = sp + 48|0;
 $53 = sp + 40|0;
 $54 = sp + 32|0;
 $55 = sp + 24|0;
 $58 = sp + 586|0;
 $59 = sp + 436|0;
 $60 = sp + 585|0;
 $61 = sp + 584|0;
 $62 = sp + 432|0;
 $63 = sp + 583|0;
 $64 = sp + 16|0;
 $65 = sp + 8|0;
 $66 = sp;
 $71 = sp + 582|0;
 $72 = sp + 412|0;
 $73 = sp + 408|0;
 $100 = sp + 300|0;
 $137 = sp + 581|0;
 $138 = sp + 144|0;
 $139 = sp + 136|0;
 $140 = sp + 580|0;
 $136 = $0;
 $141 = $136;
 $142 = ((($141)) + 4|0);
 $135 = $142;
 $143 = $135;
 $134 = $143;
 $144 = $134;
 $132 = $137;
 $133 = $144;
 $110 = $137;
 $111 = 1;
 $112 = 0;
 $145 = $110;
 $146 = $111;
 $109 = $145;
 $147 = ($146>>>0)>(536870911);
 if ($147) {
  $107 = 9129;
  $148 = (___cxa_allocate_exception(8)|0);
  $149 = $107;
  $105 = $148;
  $106 = $149;
  $150 = $105;
  $151 = $106;
  __ZNSt11logic_errorC2EPKc($150,$151);
  HEAP32[$150>>2] = (5584);
  ___cxa_throw(($148|0),(3656|0),(228|0));
  // unreachable;
 }
 $152 = $111;
 $153 = $152<<3;
 $108 = $153;
 $154 = $108;
 $155 = (__Znwm($154)|0);
 $102 = $139;
 $103 = $137;
 $104 = 1;
 $156 = $102;
 $157 = $103;
 HEAP32[$156>>2] = $157;
 $158 = ((($156)) + 4|0);
 $159 = $104;
 HEAP32[$158>>2] = $159;
 $99 = $138;
 HEAP32[$100>>2] = $155;
 $101 = $139;
 $160 = $99;
 $161 = $101;
 $98 = $161;
 $162 = $98;
 $95 = $160;
 $96 = $100;
 $97 = $162;
 $163 = $95;
 $164 = $96;
 $94 = $164;
 $165 = $94;
 $88 = $163;
 $89 = $165;
 $166 = $88;
 $167 = $89;
 $87 = $167;
 $168 = $87;
 $169 = HEAP32[$168>>2]|0;
 HEAP32[$166>>2] = $169;
 $170 = ((($163)) + 4|0);
 $171 = $97;
 $90 = $171;
 $172 = $90;
 $92 = $170;
 $93 = $172;
 $173 = $92;
 $174 = $93;
 $91 = $174;
 $175 = $91;
 ;HEAP32[$173>>2]=HEAP32[$175>>2]|0;HEAP32[$173+4>>2]=HEAP32[$175+4>>2]|0;
 $86 = $138;
 $176 = $86;
 $85 = $176;
 $177 = $85;
 $84 = $177;
 $178 = $84;
 $179 = HEAP32[$178>>2]|0;
 $180 = ((($141)) + 4|0);
 $83 = $180;
 $181 = $83;
 $82 = $181;
 $182 = $82;
 $80 = $140;
 $81 = $137;
 $68 = $179;
 $69 = $182;
 $70 = $140;
 $183 = $68;
 $67 = $183;
 $184 = $67;
 HEAP32[$184>>2] = (3748);
 HEAP32[$183>>2] = (4092);
 $185 = ((($183)) + 4|0);
 $186 = $69;
 $19 = $186;
 $187 = $19;
 $17 = $187;
 $188 = $17;
 $11 = $18;
 $12 = $188;
 $189 = $11;
 $190 = $12;
 ;HEAP8[$7>>0]=HEAP8[$16>>0]|0;
 ;HEAP8[$8>>0]=HEAP8[$15>>0]|0;
 ;HEAP8[$9>>0]=HEAP8[$14>>0]|0;
 ;HEAP8[$10>>0]=HEAP8[$13>>0]|0;
 $5 = $189;
 $6 = $190;
 $191 = $5;
 $192 = $6;
 $4 = $192;
 $193 = $4;
 $2 = $191;
 $3 = $193;
 $194 = $2;
 $195 = $3;
 $1 = $195;
 $196 = $1;
 HEAP32[$194>>2] = $196;
 $197 = HEAP32[$18>>2]|0;
 HEAP32[$72>>2] = $197;
 $198 = $70;
 $20 = $198;
 $199 = $20;
 $40 = $199;
 $200 = $40;
 $38 = $200;
 $201 = $38;
 $32 = $39;
 $33 = $201;
 $202 = $32;
 $203 = $33;
 $31 = $203;
 $204 = $31;
 ;HEAP8[$27>>0]=HEAP8[$37>>0]|0;
 ;HEAP8[$28>>0]=HEAP8[$36>>0]|0;
 ;HEAP8[$29>>0]=HEAP8[$35>>0]|0;
 ;HEAP8[$30>>0]=HEAP8[$34>>0]|0;
 $25 = $202;
 $26 = $204;
 $205 = $25;
 $206 = $26;
 $24 = $206;
 $207 = $24;
 $22 = $205;
 $23 = $207;
 $208 = $22;
 $209 = $23;
 $21 = $209;
 $210 = $21;
 HEAP32[$208>>2] = $210;
 $211 = HEAP32[$39>>2]|0;
 HEAP32[$73>>2] = $211;
 ;HEAP8[$64>>0]=HEAP8[$73>>0]|0;HEAP8[$64+1>>0]=HEAP8[$73+1>>0]|0;HEAP8[$64+2>>0]=HEAP8[$73+2>>0]|0;HEAP8[$64+3>>0]=HEAP8[$73+3>>0]|0;
 ;HEAP8[$65>>0]=HEAP8[$72>>0]|0;HEAP8[$65+1>>0]=HEAP8[$72+1>>0]|0;HEAP8[$65+2>>0]=HEAP8[$72+2>>0]|0;HEAP8[$65+3>>0]=HEAP8[$72+3>>0]|0;
 ;HEAP8[$66>>0]=HEAP8[$71>>0]|0;
 $57 = $185;
 $212 = $57;
 $56 = $65;
 $213 = $56;
 ;HEAP32[$59>>2]=HEAP32[$213>>2]|0;
 ;HEAP8[$45>>0]=HEAP8[$60>>0]|0;
 ;HEAP8[$46>>0]=HEAP8[$59>>0]|0;HEAP8[$46+1>>0]=HEAP8[$59+1>>0]|0;HEAP8[$46+2>>0]=HEAP8[$59+2>>0]|0;HEAP8[$46+3>>0]=HEAP8[$59+3>>0]|0;
 ;HEAP8[$47>>0]=HEAP8[$58>>0]|0;
 $44 = $212;
 $214 = $44;
 $43 = $46;
 $215 = $43;
 $42 = $215;
 $216 = $42;
 $217 = HEAP32[$216>>2]|0;
 $41 = $217;
 $218 = $41;
 ;HEAP32[$214>>2]=HEAP32[$218>>2]|0;
 $48 = $64;
 $219 = $48;
 ;HEAP32[$62>>2]=HEAP32[$219>>2]|0;
 ;HEAP8[$53>>0]=HEAP8[$63>>0]|0;
 ;HEAP8[$54>>0]=HEAP8[$62>>0]|0;HEAP8[$54+1>>0]=HEAP8[$62+1>>0]|0;HEAP8[$54+2>>0]=HEAP8[$62+2>>0]|0;HEAP8[$54+3>>0]=HEAP8[$62+3>>0]|0;
 ;HEAP8[$55>>0]=HEAP8[$61>>0]|0;
 $52 = $212;
 $51 = $54;
 $220 = $51;
 $50 = $220;
 $221 = $50;
 $222 = HEAP32[$221>>2]|0;
 $49 = $222;
 $78 = $138;
 $223 = $78;
 $77 = $223;
 $224 = $77;
 $76 = $224;
 $225 = $76;
 $226 = HEAP32[$225>>2]|0;
 $79 = $226;
 $75 = $223;
 $227 = $75;
 $74 = $227;
 $228 = $74;
 HEAP32[$228>>2] = 0;
 $229 = $79;
 $131 = $138;
 $230 = $131;
 $128 = $230;
 $129 = 0;
 $231 = $128;
 $127 = $231;
 $232 = $127;
 $126 = $232;
 $233 = $126;
 $234 = HEAP32[$233>>2]|0;
 $130 = $234;
 $235 = $129;
 $116 = $231;
 $236 = $116;
 $115 = $236;
 $237 = $115;
 HEAP32[$237>>2] = $235;
 $238 = $130;
 $239 = ($238|0)!=(0|0);
 if (!($239)) {
  STACKTOP = sp;return ($229|0);
 }
 $114 = $231;
 $240 = $114;
 $241 = ((($240)) + 4|0);
 $113 = $241;
 $242 = $113;
 $243 = $130;
 $124 = $242;
 $125 = $243;
 $244 = $124;
 $245 = HEAP32[$244>>2]|0;
 $246 = $125;
 $247 = ((($244)) + 4|0);
 $248 = HEAP32[$247>>2]|0;
 $121 = $245;
 $122 = $246;
 $123 = $248;
 $249 = $121;
 $250 = $122;
 $251 = $123;
 $118 = $249;
 $119 = $250;
 $120 = $251;
 $252 = $119;
 $117 = $252;
 $253 = $117;
 __ZdlPv($253);
 STACKTOP = sp;return ($229|0);
}
function __ZNKSt3__210__function6__funcIZN16MainMenuGUILayer7OnEventERK5EventE4__16NS_9allocatorIS6_EEFbS5_EE7__cloneEPNS0_6__baseIS9_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $10 = sp + 128|0;
 $11 = sp + 120|0;
 $12 = sp + 112|0;
 $13 = sp + 104|0;
 $16 = sp + 332|0;
 $17 = sp + 331|0;
 $18 = sp + 330|0;
 $19 = sp + 329|0;
 $21 = sp + 272|0;
 $29 = sp + 96|0;
 $30 = sp + 88|0;
 $31 = sp + 80|0;
 $32 = sp + 72|0;
 $35 = sp + 328|0;
 $36 = sp + 327|0;
 $37 = sp + 326|0;
 $38 = sp + 325|0;
 $40 = sp + 228|0;
 $46 = sp + 64|0;
 $47 = sp + 56|0;
 $48 = sp + 48|0;
 $54 = sp + 40|0;
 $55 = sp + 32|0;
 $56 = sp + 24|0;
 $59 = sp + 324|0;
 $60 = sp + 176|0;
 $61 = sp + 323|0;
 $62 = sp + 322|0;
 $63 = sp + 172|0;
 $64 = sp + 321|0;
 $65 = sp + 16|0;
 $66 = sp + 8|0;
 $67 = sp;
 $72 = sp + 320|0;
 $73 = sp + 152|0;
 $74 = sp + 148|0;
 $77 = $0;
 $78 = $1;
 $79 = $77;
 $80 = $78;
 $81 = ((($79)) + 4|0);
 $76 = $81;
 $82 = $76;
 $75 = $82;
 $83 = $75;
 $84 = ((($79)) + 4|0);
 $3 = $84;
 $85 = $3;
 $2 = $85;
 $86 = $2;
 $69 = $80;
 $70 = $83;
 $71 = $86;
 $87 = $69;
 $68 = $87;
 $88 = $68;
 HEAP32[$88>>2] = (3748);
 HEAP32[$87>>2] = (4092);
 $89 = ((($87)) + 4|0);
 $90 = $70;
 $22 = $90;
 $91 = $22;
 $20 = $91;
 $92 = $20;
 $14 = $21;
 $15 = $92;
 $93 = $14;
 $94 = $15;
 ;HEAP8[$10>>0]=HEAP8[$19>>0]|0;
 ;HEAP8[$11>>0]=HEAP8[$18>>0]|0;
 ;HEAP8[$12>>0]=HEAP8[$17>>0]|0;
 ;HEAP8[$13>>0]=HEAP8[$16>>0]|0;
 $8 = $93;
 $9 = $94;
 $95 = $8;
 $96 = $9;
 $7 = $96;
 $97 = $7;
 $5 = $95;
 $6 = $97;
 $98 = $5;
 $99 = $6;
 $4 = $99;
 $100 = $4;
 HEAP32[$98>>2] = $100;
 $101 = HEAP32[$21>>2]|0;
 HEAP32[$73>>2] = $101;
 $102 = $71;
 $41 = $102;
 $103 = $41;
 $39 = $103;
 $104 = $39;
 $33 = $40;
 $34 = $104;
 $105 = $33;
 $106 = $34;
 ;HEAP8[$29>>0]=HEAP8[$38>>0]|0;
 ;HEAP8[$30>>0]=HEAP8[$37>>0]|0;
 ;HEAP8[$31>>0]=HEAP8[$36>>0]|0;
 ;HEAP8[$32>>0]=HEAP8[$35>>0]|0;
 $27 = $105;
 $28 = $106;
 $107 = $27;
 $108 = $28;
 $26 = $108;
 $109 = $26;
 $24 = $107;
 $25 = $109;
 $110 = $24;
 $111 = $25;
 $23 = $111;
 $112 = $23;
 HEAP32[$110>>2] = $112;
 $113 = HEAP32[$40>>2]|0;
 HEAP32[$74>>2] = $113;
 ;HEAP8[$65>>0]=HEAP8[$74>>0]|0;HEAP8[$65+1>>0]=HEAP8[$74+1>>0]|0;HEAP8[$65+2>>0]=HEAP8[$74+2>>0]|0;HEAP8[$65+3>>0]=HEAP8[$74+3>>0]|0;
 ;HEAP8[$66>>0]=HEAP8[$73>>0]|0;HEAP8[$66+1>>0]=HEAP8[$73+1>>0]|0;HEAP8[$66+2>>0]=HEAP8[$73+2>>0]|0;HEAP8[$66+3>>0]=HEAP8[$73+3>>0]|0;
 ;HEAP8[$67>>0]=HEAP8[$72>>0]|0;
 $58 = $89;
 $114 = $58;
 $57 = $66;
 $115 = $57;
 ;HEAP32[$60>>2]=HEAP32[$115>>2]|0;
 ;HEAP8[$46>>0]=HEAP8[$61>>0]|0;
 ;HEAP8[$47>>0]=HEAP8[$60>>0]|0;HEAP8[$47+1>>0]=HEAP8[$60+1>>0]|0;HEAP8[$47+2>>0]=HEAP8[$60+2>>0]|0;HEAP8[$47+3>>0]=HEAP8[$60+3>>0]|0;
 ;HEAP8[$48>>0]=HEAP8[$59>>0]|0;
 $45 = $114;
 $116 = $45;
 $44 = $47;
 $117 = $44;
 $43 = $117;
 $118 = $43;
 $119 = HEAP32[$118>>2]|0;
 $42 = $119;
 $120 = $42;
 ;HEAP32[$116>>2]=HEAP32[$120>>2]|0;
 $49 = $65;
 $121 = $49;
 ;HEAP32[$63>>2]=HEAP32[$121>>2]|0;
 ;HEAP8[$54>>0]=HEAP8[$64>>0]|0;
 ;HEAP8[$55>>0]=HEAP8[$63>>0]|0;HEAP8[$55+1>>0]=HEAP8[$63+1>>0]|0;HEAP8[$55+2>>0]=HEAP8[$63+2>>0]|0;HEAP8[$55+3>>0]=HEAP8[$63+3>>0]|0;
 ;HEAP8[$56>>0]=HEAP8[$62>>0]|0;
 $53 = $114;
 $52 = $55;
 $122 = $52;
 $51 = $122;
 $123 = $51;
 $124 = HEAP32[$123>>2]|0;
 $50 = $124;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN16MainMenuGUILayer7OnEventERK5EventE4__16NS_9allocatorIS6_EEFbS5_EE7destroyEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN16MainMenuGUILayer7OnEventERK5EventE4__16NS_9allocatorIS6_EEFbS5_EE18destroy_deallocateEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $10 = sp + 36|0;
 $9 = $0;
 $11 = $9;
 $12 = ((($11)) + 4|0);
 $8 = $12;
 $13 = $8;
 $7 = $13;
 $14 = $7;
 $1 = $10;
 $2 = $14;
 $4 = $10;
 $5 = $11;
 $6 = 1;
 $15 = $5;
 $3 = $15;
 $16 = $3;
 __ZdlPv($16);
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN16MainMenuGUILayer7OnEventERK5EventE4__16NS_9allocatorIS6_EEFbS5_EEclES5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $5;
 $8 = ((($7)) + 4|0);
 $4 = $8;
 $9 = $4;
 $3 = $9;
 $10 = $3;
 $11 = $6;
 $2 = $11;
 $12 = $2;
 $13 = (__ZNSt3__228__invoke_void_return_wrapperIbE6__callIJRZN16MainMenuGUILayer7OnEventERK5EventE4__16S6_EEEbDpOT_($10,$12)|0);
 STACKTOP = sp;return ($13|0);
}
function __ZNKSt3__210__function6__funcIZN16MainMenuGUILayer7OnEventERK5EventE4__16NS_9allocatorIS6_EEFbS5_EE6targetERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $7;
 $10 = $8;
 $4 = $10;
 $5 = 2768;
 $11 = $4;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $5;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($13|0)==($16|0);
 if ($17) {
  $18 = ((($9)) + 4|0);
  $3 = $18;
  $19 = $3;
  $2 = $19;
  $20 = $2;
  $6 = $20;
  $21 = $6;
  STACKTOP = sp;return ($21|0);
 } else {
  $6 = 0;
  $21 = $6;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function __ZNKSt3__210__function6__funcIZN16MainMenuGUILayer7OnEventERK5EventE4__16NS_9allocatorIS6_EEFbS5_EE11target_typeEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (2768|0);
}
function __ZNSt3__228__invoke_void_return_wrapperIbE6__callIJRZN16MainMenuGUILayer7OnEventERK5EventE4__16S6_EEEbDpOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = $0;
 $9 = $1;
 $10 = $8;
 $7 = $10;
 $11 = $7;
 $12 = $9;
 $2 = $12;
 $13 = $2;
 $5 = $11;
 $6 = $13;
 $14 = $5;
 $4 = $14;
 $15 = $4;
 $16 = $6;
 $3 = $16;
 $17 = $3;
 $18 = (__ZZN16MainMenuGUILayer7OnEventERK5EventENK4__16clES2_($15,$17)|0);
 STACKTOP = sp;return ($18|0);
}
function __ZZN16MainMenuGUILayer7OnEventERK5EventENK4__16clES2_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $$byval_copy = sp + 144|0;
 $5 = sp + 64|0;
 $6 = sp;
 $2 = $0;
 $3 = $1;
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $9 = $3;
 $4 = $9;
 $10 = $4;
 $11 = ((($10)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (+($12|0));
 $14 = - $13;
 $15 = $14 * 0.5;
 $16 = $4;
 $17 = ((($16)) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (+($18|0));
 $20 = $19 * 0.5;
 $21 = $4;
 $22 = ((($21)) + 20|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (+($23|0));
 $25 = - $24;
 $26 = $25 * 0.5;
 $27 = $4;
 $28 = ((($27)) + 20|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (+($29|0));
 $31 = $30 * 0.5;
 __ZN3glm5orthoIfEENS_3matILi4ELi4ET_LNS_9qualifierE0EEES2_S2_S2_S2_S2_S2_($5,$15,$20,$26,$31,-1.0,1.0);
 $32 = ((($8)) + 8|0);
 dest=$32; src=$5; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $33 = ((($8)) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($8)) + 8|0);
 dest=$6; src=$35; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$$byval_copy; src=$6; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 __ZNK8Renderer19SetProjectionMatrixEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE($34,$$byval_copy);
 STACKTOP = sp;return 0;
}
function __ZN16GUIButtonClusterILm5EED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZN10GUIClusterI13GUIButtonDataLm5EED2Ev($2);
 STACKTOP = sp;return;
}
function __ZN10GUIClusterI13GUIButtonDataLm5EED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZN15GUIMasterObjectD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN15GUIMasterObjectD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZN27SettingsMainBackgroundLayerD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZN5LayerD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN27SettingsMainBackgroundLayerD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZN27SettingsMainBackgroundLayerD2Ev($2);
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZN27SettingsMainBackgroundLayer7OnEventERK5Event($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 40|0;
 $4 = sp + 28|0;
 $5 = sp;
 $6 = sp + 24|0;
 $2 = $0;
 $3 = $1;
 $7 = $2;
 $8 = $3;
 __ZN15EventDispatcherC2ERK5Event($4,$8);
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 __ZNSt3__28functionIFbRK5EventEEC2IZN27SettingsMainBackgroundLayer7OnEventES3_E4__17vEET_($5,$$byval_copy);
 __ZN15EventDispatcher8DispatchE9EventTypeNSt3__28functionIFbRK5EventEEE($4,7,$5);
 __ZNSt3__28functionIFbRK5EventEED2Ev($5);
 STACKTOP = sp;return;
}
function __ZN27SettingsMainBackgroundLayer4InitEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZN27SettingsMainBackgroundLayer4DestEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZN27SettingsMainBackgroundLayer8OnUpdateERKf($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 STACKTOP = sp;return;
}
function __ZN27SettingsMainBackgroundLayer8OnRenderEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($2)) + 76|0);
 __ZNK14ScreenRenderer6RenderERK15BasicRenderable($4,$5);
 STACKTOP = sp;return;
}
function __ZNSt3__28functionIFbRK5EventEEC2IZN27SettingsMainBackgroundLayer7OnEventES3_E4__17vEET_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $10 = sp + 96|0;
 $11 = sp + 88|0;
 $12 = sp + 80|0;
 $13 = sp + 72|0;
 $17 = sp + 235|0;
 $18 = sp + 234|0;
 $19 = sp + 233|0;
 $20 = sp + 232|0;
 $22 = sp + 172|0;
 $25 = sp + 231|0;
 $30 = sp + 64|0;
 $31 = sp + 56|0;
 $32 = sp + 48|0;
 $36 = sp + 40|0;
 $37 = sp + 32|0;
 $38 = sp + 24|0;
 $41 = sp + 230|0;
 $42 = sp + 124|0;
 $43 = sp + 229|0;
 $44 = sp + 228|0;
 $45 = sp + 227|0;
 $46 = sp + 226|0;
 $47 = sp + 16|0;
 $48 = sp + 8|0;
 $49 = sp;
 $53 = sp + 225|0;
 $54 = sp + 108|0;
 $55 = sp + 224|0;
 $57 = $0;
 $58 = $57;
 $59 = ((($58)) + 16|0);
 HEAP32[$59>>2] = 0;
 $56 = $1;
 $2 = $1;
 $60 = $2;
 $51 = $58;
 $52 = $60;
 $61 = $51;
 $50 = $61;
 $62 = $50;
 HEAP32[$62>>2] = (3748);
 HEAP32[$61>>2] = (4172);
 $63 = ((($61)) + 4|0);
 $64 = $52;
 $3 = $64;
 $65 = $3;
 $23 = $65;
 $66 = $23;
 $21 = $66;
 $67 = $21;
 $15 = $22;
 $16 = $67;
 $68 = $15;
 $69 = $16;
 $14 = $69;
 $70 = $14;
 ;HEAP8[$10>>0]=HEAP8[$20>>0]|0;
 ;HEAP8[$11>>0]=HEAP8[$19>>0]|0;
 ;HEAP8[$12>>0]=HEAP8[$18>>0]|0;
 ;HEAP8[$13>>0]=HEAP8[$17>>0]|0;
 $8 = $68;
 $9 = $70;
 $71 = $8;
 $72 = $9;
 $7 = $72;
 $73 = $7;
 $5 = $71;
 $6 = $73;
 $74 = $5;
 $75 = $6;
 $4 = $75;
 $76 = $4;
 HEAP32[$74>>2] = $76;
 $77 = HEAP32[$22>>2]|0;
 HEAP32[$54>>2] = $77;
 $24 = $25;
 ;HEAP8[$47>>0]=HEAP8[$55>>0]|0;
 ;HEAP8[$48>>0]=HEAP8[$54>>0]|0;HEAP8[$48+1>>0]=HEAP8[$54+1>>0]|0;HEAP8[$48+2>>0]=HEAP8[$54+2>>0]|0;HEAP8[$48+3>>0]=HEAP8[$54+3>>0]|0;
 ;HEAP8[$49>>0]=HEAP8[$53>>0]|0;
 $40 = $63;
 $78 = $40;
 $39 = $48;
 $79 = $39;
 ;HEAP32[$42>>2]=HEAP32[$79>>2]|0;
 ;HEAP8[$30>>0]=HEAP8[$43>>0]|0;
 ;HEAP8[$31>>0]=HEAP8[$42>>0]|0;HEAP8[$31+1>>0]=HEAP8[$42+1>>0]|0;HEAP8[$31+2>>0]=HEAP8[$42+2>>0]|0;HEAP8[$31+3>>0]=HEAP8[$42+3>>0]|0;
 ;HEAP8[$32>>0]=HEAP8[$41>>0]|0;
 $29 = $78;
 $80 = $29;
 $28 = $31;
 $81 = $28;
 $27 = $81;
 $82 = $27;
 $83 = HEAP32[$82>>2]|0;
 $26 = $83;
 $84 = $26;
 ;HEAP32[$80>>2]=HEAP32[$84>>2]|0;
 $33 = $47;
 ;HEAP8[$36>>0]=HEAP8[$46>>0]|0;
 ;HEAP8[$37>>0]=HEAP8[$45>>0]|0;
 ;HEAP8[$38>>0]=HEAP8[$44>>0]|0;
 $35 = $78;
 $85 = $35;
 $34 = $85;
 $86 = ((($58)) + 16|0);
 HEAP32[$86>>2] = $58;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN27SettingsMainBackgroundLayer7OnEventERK5EventE4__17NS_9allocatorIS6_EEFbS5_EED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $1 = $3;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN27SettingsMainBackgroundLayer7OnEventERK5EventE4__17NS_9allocatorIS6_EEFbS5_EED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZNSt3__210__function6__funcIZN27SettingsMainBackgroundLayer7OnEventERK5EventE4__17NS_9allocatorIS6_EEFbS5_EED2Ev($2);
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZNKSt3__210__function6__funcIZN27SettingsMainBackgroundLayer7OnEventERK5EventE4__17NS_9allocatorIS6_EEFbS5_EE7__cloneEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(608|0);
 $7 = sp + 128|0;
 $8 = sp + 120|0;
 $9 = sp + 112|0;
 $10 = sp + 104|0;
 $13 = sp + 594|0;
 $14 = sp + 593|0;
 $15 = sp + 592|0;
 $16 = sp + 591|0;
 $18 = sp + 540|0;
 $27 = sp + 96|0;
 $28 = sp + 88|0;
 $29 = sp + 80|0;
 $30 = sp + 72|0;
 $34 = sp + 590|0;
 $35 = sp + 589|0;
 $36 = sp + 588|0;
 $37 = sp + 587|0;
 $39 = sp + 488|0;
 $45 = sp + 64|0;
 $46 = sp + 56|0;
 $47 = sp + 48|0;
 $53 = sp + 40|0;
 $54 = sp + 32|0;
 $55 = sp + 24|0;
 $58 = sp + 586|0;
 $59 = sp + 436|0;
 $60 = sp + 585|0;
 $61 = sp + 584|0;
 $62 = sp + 432|0;
 $63 = sp + 583|0;
 $64 = sp + 16|0;
 $65 = sp + 8|0;
 $66 = sp;
 $71 = sp + 582|0;
 $72 = sp + 412|0;
 $73 = sp + 408|0;
 $100 = sp + 300|0;
 $137 = sp + 581|0;
 $138 = sp + 144|0;
 $139 = sp + 136|0;
 $140 = sp + 580|0;
 $136 = $0;
 $141 = $136;
 $142 = ((($141)) + 4|0);
 $135 = $142;
 $143 = $135;
 $134 = $143;
 $144 = $134;
 $132 = $137;
 $133 = $144;
 $110 = $137;
 $111 = 1;
 $112 = 0;
 $145 = $110;
 $146 = $111;
 $109 = $145;
 $147 = ($146>>>0)>(536870911);
 if ($147) {
  $107 = 9129;
  $148 = (___cxa_allocate_exception(8)|0);
  $149 = $107;
  $105 = $148;
  $106 = $149;
  $150 = $105;
  $151 = $106;
  __ZNSt11logic_errorC2EPKc($150,$151);
  HEAP32[$150>>2] = (5584);
  ___cxa_throw(($148|0),(3656|0),(228|0));
  // unreachable;
 }
 $152 = $111;
 $153 = $152<<3;
 $108 = $153;
 $154 = $108;
 $155 = (__Znwm($154)|0);
 $102 = $139;
 $103 = $137;
 $104 = 1;
 $156 = $102;
 $157 = $103;
 HEAP32[$156>>2] = $157;
 $158 = ((($156)) + 4|0);
 $159 = $104;
 HEAP32[$158>>2] = $159;
 $99 = $138;
 HEAP32[$100>>2] = $155;
 $101 = $139;
 $160 = $99;
 $161 = $101;
 $98 = $161;
 $162 = $98;
 $95 = $160;
 $96 = $100;
 $97 = $162;
 $163 = $95;
 $164 = $96;
 $94 = $164;
 $165 = $94;
 $88 = $163;
 $89 = $165;
 $166 = $88;
 $167 = $89;
 $87 = $167;
 $168 = $87;
 $169 = HEAP32[$168>>2]|0;
 HEAP32[$166>>2] = $169;
 $170 = ((($163)) + 4|0);
 $171 = $97;
 $90 = $171;
 $172 = $90;
 $92 = $170;
 $93 = $172;
 $173 = $92;
 $174 = $93;
 $91 = $174;
 $175 = $91;
 ;HEAP32[$173>>2]=HEAP32[$175>>2]|0;HEAP32[$173+4>>2]=HEAP32[$175+4>>2]|0;
 $86 = $138;
 $176 = $86;
 $85 = $176;
 $177 = $85;
 $84 = $177;
 $178 = $84;
 $179 = HEAP32[$178>>2]|0;
 $180 = ((($141)) + 4|0);
 $83 = $180;
 $181 = $83;
 $82 = $181;
 $182 = $82;
 $80 = $140;
 $81 = $137;
 $68 = $179;
 $69 = $182;
 $70 = $140;
 $183 = $68;
 $67 = $183;
 $184 = $67;
 HEAP32[$184>>2] = (3748);
 HEAP32[$183>>2] = (4172);
 $185 = ((($183)) + 4|0);
 $186 = $69;
 $19 = $186;
 $187 = $19;
 $17 = $187;
 $188 = $17;
 $11 = $18;
 $12 = $188;
 $189 = $11;
 $190 = $12;
 ;HEAP8[$7>>0]=HEAP8[$16>>0]|0;
 ;HEAP8[$8>>0]=HEAP8[$15>>0]|0;
 ;HEAP8[$9>>0]=HEAP8[$14>>0]|0;
 ;HEAP8[$10>>0]=HEAP8[$13>>0]|0;
 $5 = $189;
 $6 = $190;
 $191 = $5;
 $192 = $6;
 $4 = $192;
 $193 = $4;
 $2 = $191;
 $3 = $193;
 $194 = $2;
 $195 = $3;
 $1 = $195;
 $196 = $1;
 HEAP32[$194>>2] = $196;
 $197 = HEAP32[$18>>2]|0;
 HEAP32[$72>>2] = $197;
 $198 = $70;
 $20 = $198;
 $199 = $20;
 $40 = $199;
 $200 = $40;
 $38 = $200;
 $201 = $38;
 $32 = $39;
 $33 = $201;
 $202 = $32;
 $203 = $33;
 $31 = $203;
 $204 = $31;
 ;HEAP8[$27>>0]=HEAP8[$37>>0]|0;
 ;HEAP8[$28>>0]=HEAP8[$36>>0]|0;
 ;HEAP8[$29>>0]=HEAP8[$35>>0]|0;
 ;HEAP8[$30>>0]=HEAP8[$34>>0]|0;
 $25 = $202;
 $26 = $204;
 $205 = $25;
 $206 = $26;
 $24 = $206;
 $207 = $24;
 $22 = $205;
 $23 = $207;
 $208 = $22;
 $209 = $23;
 $21 = $209;
 $210 = $21;
 HEAP32[$208>>2] = $210;
 $211 = HEAP32[$39>>2]|0;
 HEAP32[$73>>2] = $211;
 ;HEAP8[$64>>0]=HEAP8[$73>>0]|0;HEAP8[$64+1>>0]=HEAP8[$73+1>>0]|0;HEAP8[$64+2>>0]=HEAP8[$73+2>>0]|0;HEAP8[$64+3>>0]=HEAP8[$73+3>>0]|0;
 ;HEAP8[$65>>0]=HEAP8[$72>>0]|0;HEAP8[$65+1>>0]=HEAP8[$72+1>>0]|0;HEAP8[$65+2>>0]=HEAP8[$72+2>>0]|0;HEAP8[$65+3>>0]=HEAP8[$72+3>>0]|0;
 ;HEAP8[$66>>0]=HEAP8[$71>>0]|0;
 $57 = $185;
 $212 = $57;
 $56 = $65;
 $213 = $56;
 ;HEAP32[$59>>2]=HEAP32[$213>>2]|0;
 ;HEAP8[$45>>0]=HEAP8[$60>>0]|0;
 ;HEAP8[$46>>0]=HEAP8[$59>>0]|0;HEAP8[$46+1>>0]=HEAP8[$59+1>>0]|0;HEAP8[$46+2>>0]=HEAP8[$59+2>>0]|0;HEAP8[$46+3>>0]=HEAP8[$59+3>>0]|0;
 ;HEAP8[$47>>0]=HEAP8[$58>>0]|0;
 $44 = $212;
 $214 = $44;
 $43 = $46;
 $215 = $43;
 $42 = $215;
 $216 = $42;
 $217 = HEAP32[$216>>2]|0;
 $41 = $217;
 $218 = $41;
 ;HEAP32[$214>>2]=HEAP32[$218>>2]|0;
 $48 = $64;
 $219 = $48;
 ;HEAP32[$62>>2]=HEAP32[$219>>2]|0;
 ;HEAP8[$53>>0]=HEAP8[$63>>0]|0;
 ;HEAP8[$54>>0]=HEAP8[$62>>0]|0;HEAP8[$54+1>>0]=HEAP8[$62+1>>0]|0;HEAP8[$54+2>>0]=HEAP8[$62+2>>0]|0;HEAP8[$54+3>>0]=HEAP8[$62+3>>0]|0;
 ;HEAP8[$55>>0]=HEAP8[$61>>0]|0;
 $52 = $212;
 $51 = $54;
 $220 = $51;
 $50 = $220;
 $221 = $50;
 $222 = HEAP32[$221>>2]|0;
 $49 = $222;
 $78 = $138;
 $223 = $78;
 $77 = $223;
 $224 = $77;
 $76 = $224;
 $225 = $76;
 $226 = HEAP32[$225>>2]|0;
 $79 = $226;
 $75 = $223;
 $227 = $75;
 $74 = $227;
 $228 = $74;
 HEAP32[$228>>2] = 0;
 $229 = $79;
 $131 = $138;
 $230 = $131;
 $128 = $230;
 $129 = 0;
 $231 = $128;
 $127 = $231;
 $232 = $127;
 $126 = $232;
 $233 = $126;
 $234 = HEAP32[$233>>2]|0;
 $130 = $234;
 $235 = $129;
 $116 = $231;
 $236 = $116;
 $115 = $236;
 $237 = $115;
 HEAP32[$237>>2] = $235;
 $238 = $130;
 $239 = ($238|0)!=(0|0);
 if (!($239)) {
  STACKTOP = sp;return ($229|0);
 }
 $114 = $231;
 $240 = $114;
 $241 = ((($240)) + 4|0);
 $113 = $241;
 $242 = $113;
 $243 = $130;
 $124 = $242;
 $125 = $243;
 $244 = $124;
 $245 = HEAP32[$244>>2]|0;
 $246 = $125;
 $247 = ((($244)) + 4|0);
 $248 = HEAP32[$247>>2]|0;
 $121 = $245;
 $122 = $246;
 $123 = $248;
 $249 = $121;
 $250 = $122;
 $251 = $123;
 $118 = $249;
 $119 = $250;
 $120 = $251;
 $252 = $119;
 $117 = $252;
 $253 = $117;
 __ZdlPv($253);
 STACKTOP = sp;return ($229|0);
}
function __ZNKSt3__210__function6__funcIZN27SettingsMainBackgroundLayer7OnEventERK5EventE4__17NS_9allocatorIS6_EEFbS5_EE7__cloneEPNS0_6__baseIS9_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $10 = sp + 128|0;
 $11 = sp + 120|0;
 $12 = sp + 112|0;
 $13 = sp + 104|0;
 $16 = sp + 332|0;
 $17 = sp + 331|0;
 $18 = sp + 330|0;
 $19 = sp + 329|0;
 $21 = sp + 272|0;
 $29 = sp + 96|0;
 $30 = sp + 88|0;
 $31 = sp + 80|0;
 $32 = sp + 72|0;
 $35 = sp + 328|0;
 $36 = sp + 327|0;
 $37 = sp + 326|0;
 $38 = sp + 325|0;
 $40 = sp + 228|0;
 $46 = sp + 64|0;
 $47 = sp + 56|0;
 $48 = sp + 48|0;
 $54 = sp + 40|0;
 $55 = sp + 32|0;
 $56 = sp + 24|0;
 $59 = sp + 324|0;
 $60 = sp + 176|0;
 $61 = sp + 323|0;
 $62 = sp + 322|0;
 $63 = sp + 172|0;
 $64 = sp + 321|0;
 $65 = sp + 16|0;
 $66 = sp + 8|0;
 $67 = sp;
 $72 = sp + 320|0;
 $73 = sp + 152|0;
 $74 = sp + 148|0;
 $77 = $0;
 $78 = $1;
 $79 = $77;
 $80 = $78;
 $81 = ((($79)) + 4|0);
 $76 = $81;
 $82 = $76;
 $75 = $82;
 $83 = $75;
 $84 = ((($79)) + 4|0);
 $3 = $84;
 $85 = $3;
 $2 = $85;
 $86 = $2;
 $69 = $80;
 $70 = $83;
 $71 = $86;
 $87 = $69;
 $68 = $87;
 $88 = $68;
 HEAP32[$88>>2] = (3748);
 HEAP32[$87>>2] = (4172);
 $89 = ((($87)) + 4|0);
 $90 = $70;
 $22 = $90;
 $91 = $22;
 $20 = $91;
 $92 = $20;
 $14 = $21;
 $15 = $92;
 $93 = $14;
 $94 = $15;
 ;HEAP8[$10>>0]=HEAP8[$19>>0]|0;
 ;HEAP8[$11>>0]=HEAP8[$18>>0]|0;
 ;HEAP8[$12>>0]=HEAP8[$17>>0]|0;
 ;HEAP8[$13>>0]=HEAP8[$16>>0]|0;
 $8 = $93;
 $9 = $94;
 $95 = $8;
 $96 = $9;
 $7 = $96;
 $97 = $7;
 $5 = $95;
 $6 = $97;
 $98 = $5;
 $99 = $6;
 $4 = $99;
 $100 = $4;
 HEAP32[$98>>2] = $100;
 $101 = HEAP32[$21>>2]|0;
 HEAP32[$73>>2] = $101;
 $102 = $71;
 $41 = $102;
 $103 = $41;
 $39 = $103;
 $104 = $39;
 $33 = $40;
 $34 = $104;
 $105 = $33;
 $106 = $34;
 ;HEAP8[$29>>0]=HEAP8[$38>>0]|0;
 ;HEAP8[$30>>0]=HEAP8[$37>>0]|0;
 ;HEAP8[$31>>0]=HEAP8[$36>>0]|0;
 ;HEAP8[$32>>0]=HEAP8[$35>>0]|0;
 $27 = $105;
 $28 = $106;
 $107 = $27;
 $108 = $28;
 $26 = $108;
 $109 = $26;
 $24 = $107;
 $25 = $109;
 $110 = $24;
 $111 = $25;
 $23 = $111;
 $112 = $23;
 HEAP32[$110>>2] = $112;
 $113 = HEAP32[$40>>2]|0;
 HEAP32[$74>>2] = $113;
 ;HEAP8[$65>>0]=HEAP8[$74>>0]|0;HEAP8[$65+1>>0]=HEAP8[$74+1>>0]|0;HEAP8[$65+2>>0]=HEAP8[$74+2>>0]|0;HEAP8[$65+3>>0]=HEAP8[$74+3>>0]|0;
 ;HEAP8[$66>>0]=HEAP8[$73>>0]|0;HEAP8[$66+1>>0]=HEAP8[$73+1>>0]|0;HEAP8[$66+2>>0]=HEAP8[$73+2>>0]|0;HEAP8[$66+3>>0]=HEAP8[$73+3>>0]|0;
 ;HEAP8[$67>>0]=HEAP8[$72>>0]|0;
 $58 = $89;
 $114 = $58;
 $57 = $66;
 $115 = $57;
 ;HEAP32[$60>>2]=HEAP32[$115>>2]|0;
 ;HEAP8[$46>>0]=HEAP8[$61>>0]|0;
 ;HEAP8[$47>>0]=HEAP8[$60>>0]|0;HEAP8[$47+1>>0]=HEAP8[$60+1>>0]|0;HEAP8[$47+2>>0]=HEAP8[$60+2>>0]|0;HEAP8[$47+3>>0]=HEAP8[$60+3>>0]|0;
 ;HEAP8[$48>>0]=HEAP8[$59>>0]|0;
 $45 = $114;
 $116 = $45;
 $44 = $47;
 $117 = $44;
 $43 = $117;
 $118 = $43;
 $119 = HEAP32[$118>>2]|0;
 $42 = $119;
 $120 = $42;
 ;HEAP32[$116>>2]=HEAP32[$120>>2]|0;
 $49 = $65;
 $121 = $49;
 ;HEAP32[$63>>2]=HEAP32[$121>>2]|0;
 ;HEAP8[$54>>0]=HEAP8[$64>>0]|0;
 ;HEAP8[$55>>0]=HEAP8[$63>>0]|0;HEAP8[$55+1>>0]=HEAP8[$63+1>>0]|0;HEAP8[$55+2>>0]=HEAP8[$63+2>>0]|0;HEAP8[$55+3>>0]=HEAP8[$63+3>>0]|0;
 ;HEAP8[$56>>0]=HEAP8[$62>>0]|0;
 $53 = $114;
 $52 = $55;
 $122 = $52;
 $51 = $122;
 $123 = $51;
 $124 = HEAP32[$123>>2]|0;
 $50 = $124;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN27SettingsMainBackgroundLayer7OnEventERK5EventE4__17NS_9allocatorIS6_EEFbS5_EE7destroyEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN27SettingsMainBackgroundLayer7OnEventERK5EventE4__17NS_9allocatorIS6_EEFbS5_EE18destroy_deallocateEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $10 = sp + 36|0;
 $9 = $0;
 $11 = $9;
 $12 = ((($11)) + 4|0);
 $8 = $12;
 $13 = $8;
 $7 = $13;
 $14 = $7;
 $1 = $10;
 $2 = $14;
 $4 = $10;
 $5 = $11;
 $6 = 1;
 $15 = $5;
 $3 = $15;
 $16 = $3;
 __ZdlPv($16);
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN27SettingsMainBackgroundLayer7OnEventERK5EventE4__17NS_9allocatorIS6_EEFbS5_EEclES5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $5;
 $8 = ((($7)) + 4|0);
 $4 = $8;
 $9 = $4;
 $3 = $9;
 $10 = $3;
 $11 = $6;
 $2 = $11;
 $12 = $2;
 $13 = (__ZNSt3__228__invoke_void_return_wrapperIbE6__callIJRZN27SettingsMainBackgroundLayer7OnEventERK5EventE4__17S6_EEEbDpOT_($10,$12)|0);
 STACKTOP = sp;return ($13|0);
}
function __ZNKSt3__210__function6__funcIZN27SettingsMainBackgroundLayer7OnEventERK5EventE4__17NS_9allocatorIS6_EEFbS5_EE6targetERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $7;
 $10 = $8;
 $4 = $10;
 $5 = 2808;
 $11 = $4;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $5;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($13|0)==($16|0);
 if ($17) {
  $18 = ((($9)) + 4|0);
  $3 = $18;
  $19 = $3;
  $2 = $19;
  $20 = $2;
  $6 = $20;
  $21 = $6;
  STACKTOP = sp;return ($21|0);
 } else {
  $6 = 0;
  $21 = $6;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function __ZNKSt3__210__function6__funcIZN27SettingsMainBackgroundLayer7OnEventERK5EventE4__17NS_9allocatorIS6_EEFbS5_EE11target_typeEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (2808|0);
}
function __ZNSt3__228__invoke_void_return_wrapperIbE6__callIJRZN27SettingsMainBackgroundLayer7OnEventERK5EventE4__17S6_EEEbDpOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = $0;
 $9 = $1;
 $10 = $8;
 $7 = $10;
 $11 = $7;
 $12 = $9;
 $2 = $12;
 $13 = $2;
 $5 = $11;
 $6 = $13;
 $14 = $5;
 $4 = $14;
 $15 = $4;
 $16 = $6;
 $3 = $16;
 $17 = $3;
 $18 = (__ZZN27SettingsMainBackgroundLayer7OnEventERK5EventENK4__17clES2_($15,$17)|0);
 STACKTOP = sp;return ($18|0);
}
function __ZZN27SettingsMainBackgroundLayer7OnEventERK5EventENK4__17clES2_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $$byval_copy = sp + 144|0;
 $6 = sp + 64|0;
 $7 = sp;
 $2 = $0;
 $3 = $1;
 $8 = $2;
 $9 = HEAP32[$8>>2]|0;
 $10 = $3;
 $4 = $10;
 $11 = $4;
 $12 = ((($11)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (+($13|0));
 $15 = $4;
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (+($17|0));
 $19 = $14 / $18;
 $5 = $19;
 $20 = $5;
 $21 = -1.0 * $20;
 $22 = $5;
 $23 = 1.0 * $22;
 __ZN3glm5orthoIfEENS_3matILi4ELi4ET_LNS_9qualifierE0EEES2_S2_S2_S2_S2_S2_($6,$21,$23,-1.0,1.0,-1.0,1.0);
 $24 = ((($9)) + 8|0);
 dest=$24; src=$6; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $25 = ((($9)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($9)) + 8|0);
 dest=$7; src=$27; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$$byval_copy; src=$7; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 __ZNK8Renderer19SetProjectionMatrixEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE($26,$$byval_copy);
 STACKTOP = sp;return 0;
}
function __ZN20SettingsMainGUILayerD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 76|0);
 __ZN16GUIButtonClusterILm7EED2Ev($3);
 __ZN5LayerD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN20SettingsMainGUILayerD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZN20SettingsMainGUILayerD2Ev($2);
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZN20SettingsMainGUILayer7OnEventERK5Event($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 40|0;
 $4 = sp + 28|0;
 $5 = sp;
 $6 = sp + 24|0;
 $2 = $0;
 $3 = $1;
 $7 = $2;
 $8 = $3;
 __ZN15EventDispatcherC2ERK5Event($4,$8);
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 __ZNSt3__28functionIFbRK5EventEEC2IZN20SettingsMainGUILayer7OnEventES3_E4__39vEET_($5,$$byval_copy);
 __ZN15EventDispatcher8DispatchE9EventTypeNSt3__28functionIFbRK5EventEEE($4,7,$5);
 __ZNSt3__28functionIFbRK5EventEED2Ev($5);
 $9 = ((($7)) + 76|0);
 $10 = $3;
 __ZN16GUIButtonClusterILm7EE7OnEventERK5Event($9,$10);
 STACKTOP = sp;return;
}
function __ZN20SettingsMainGUILayer4InitEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZN20SettingsMainGUILayer4DestEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZN20SettingsMainGUILayer8OnUpdateERKf($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 76|0);
 $6 = $3;
 $7 = +HEAPF32[$6>>2];
 __ZN16GUIButtonClusterILm7EE8OnUpdateEf($5,$7);
 STACKTOP = sp;return;
}
function __ZN20SettingsMainGUILayer8OnRenderEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($2)) + 76|0);
 $6 = (__ZNK10GUIClusterI13GUIButtonDataLm7EE16GetGuiRenderableEv($5)|0);
 __ZNK11GUIRenderer6RenderERK13GUIRenderable($4,$6);
 STACKTOP = sp;return;
}
function __ZNK10GUIClusterI13GUIButtonDataLm7EE16GetGuiRenderableEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN16GUIButtonClusterILm7EE8OnUpdateEf($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $$alloca_mul = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $17 = sp;
 $5 = $0;
 $6 = $1;
 $18 = $5;
 $7 = 2;
 $19 = ((($18)) + 24|0);
 $4 = $19;
 $8 = 7;
 $20 = $8;
 $21 = $20<<2;
 $22 = $21<<1;
 $$alloca_mul = $22;
 $23 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $9 = $23;
 $24 = $8;
 $25 = $9;
 __ZN16GUIButtonClusterILm7EE15ClearButtonsVBOEmmPf($18,2,$24,$25);
 $10 = 0;
 $26 = ((($18)) + 24|0);
 $11 = $26;
 $27 = $11;
 $3 = $27;
 $28 = $3;
 $12 = $28;
 $29 = $11;
 $2 = $29;
 $30 = $2;
 $31 = ((($30)) + 280|0);
 $13 = $31;
 while(1) {
  $32 = $12;
  $33 = $13;
  $34 = ($32|0)!=($33|0);
  if (!($34)) {
   break;
  }
  $35 = $12;
  $14 = $35;
  $36 = $14;
  $37 = ((($36)) + 12|0);
  $15 = $37;
  $38 = $14;
  $39 = $6;
  __ZN12GUIProcesserI13GUIButtonDataE8OnUpdateEf($38,$39);
  $40 = $15;
  $41 = ((($40)) + 16|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42 & 1;
  $44 = ($43<<24>>24)!=(0);
  $45 = $44 ^ 1;
  $46 = $45&1;
  $47 = $46<<2;
  $48 = $15;
  $49 = ((($48)) + 16|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = ($50&255) >>> 1;
  $52 = $51 & 1;
  $53 = $52&255;
  $54 = $53<<1;
  $55 = (($47) + ($54))|0;
  $56 = $15;
  $57 = ((($56)) + 16|0);
  $58 = HEAP8[$57>>0]|0;
  $59 = ($58&255) >>> 2;
  $60 = $59 & 1;
  $61 = $60&255;
  $62 = $61;
  $63 = (($55) + ($62))|0;
  $64 = (144 + ($63<<2)|0);
  $65 = +HEAPF32[$64>>2];
  $16 = $65;
  $66 = $10;
  $67 = $16;
  __ZN3glm3vecILi2EfLNS_9qualifierE0EEC2IifEET_T0_($17,0,$67);
  $68 = $9;
  __ZN16GUIButtonClusterILm7EE23UpdateButtonsDynamicVBOEjOKN3glm3vecILi2EfLNS1_9qualifierE0EEEPf($18,$66,$17,$68);
  $69 = $10;
  $70 = (($69) + 1)|0;
  $10 = $70;
  $71 = $12;
  $72 = ((($71)) + 40|0);
  $12 = $72;
 }
 $73 = $8;
 $74 = $9;
 __ZN16GUIButtonClusterILm7EE15FlushButtonsVBOEmmPf($18,2,$73,$74);
 STACKTOP = sp;return;
}
function __ZN16GUIButtonClusterILm7EE15ClearButtonsVBOEmmPf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $7;
 $9 = $6;
 $10 = $5;
 $11 = Math_imul($9, $10)|0;
 $12 = $11<<2;
 _memset(($8|0),0,($12|0))|0;
 STACKTOP = sp;return;
}
function __ZN16GUIButtonClusterILm7EE23UpdateButtonsDynamicVBOEjOKN3glm3vecILi2EfLNS1_9qualifierE0EEEPf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = +HEAPF32[$8>>2];
 $10 = $7;
 $11 = $5;
 $12 = $11<<1;
 $13 = (($12) + 0)|0;
 $14 = (($10) + ($13<<2)|0);
 HEAPF32[$14>>2] = $9;
 $15 = $6;
 $16 = ((($15)) + 4|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $7;
 $19 = $5;
 $20 = $19<<1;
 $21 = (($20) + 1)|0;
 $22 = (($18) + ($21<<2)|0);
 HEAPF32[$22>>2] = $17;
 STACKTOP = sp;return;
}
function __ZN16GUIButtonClusterILm7EE15FlushButtonsVBOEmmPf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $4;
 $10 = ((($9)) + 4|0);
 $8 = $10;
 $11 = (__ZN11MeshManager11GetInstanceEv()|0);
 $12 = $8;
 $13 = HEAP32[$12>>2]|0;
 $14 = $8;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $7;
 $18 = $6;
 $19 = $5;
 $20 = Math_imul($18, $19)|0;
 __ZNK11MeshManager9UpdateVBOEjjPKfm($11,$13,$16,$17,$20);
 STACKTOP = sp;return;
}
function __ZNSt3__28functionIFbRK5EventEEC2IZN20SettingsMainGUILayer7OnEventES3_E4__39vEET_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $10 = sp + 96|0;
 $11 = sp + 88|0;
 $12 = sp + 80|0;
 $13 = sp + 72|0;
 $17 = sp + 235|0;
 $18 = sp + 234|0;
 $19 = sp + 233|0;
 $20 = sp + 232|0;
 $22 = sp + 172|0;
 $25 = sp + 231|0;
 $30 = sp + 64|0;
 $31 = sp + 56|0;
 $32 = sp + 48|0;
 $36 = sp + 40|0;
 $37 = sp + 32|0;
 $38 = sp + 24|0;
 $41 = sp + 230|0;
 $42 = sp + 124|0;
 $43 = sp + 229|0;
 $44 = sp + 228|0;
 $45 = sp + 227|0;
 $46 = sp + 226|0;
 $47 = sp + 16|0;
 $48 = sp + 8|0;
 $49 = sp;
 $53 = sp + 225|0;
 $54 = sp + 108|0;
 $55 = sp + 224|0;
 $57 = $0;
 $58 = $57;
 $59 = ((($58)) + 16|0);
 HEAP32[$59>>2] = 0;
 $56 = $1;
 $2 = $1;
 $60 = $2;
 $51 = $58;
 $52 = $60;
 $61 = $51;
 $50 = $61;
 $62 = $50;
 HEAP32[$62>>2] = (3748);
 HEAP32[$61>>2] = (4472);
 $63 = ((($61)) + 4|0);
 $64 = $52;
 $3 = $64;
 $65 = $3;
 $23 = $65;
 $66 = $23;
 $21 = $66;
 $67 = $21;
 $15 = $22;
 $16 = $67;
 $68 = $15;
 $69 = $16;
 $14 = $69;
 $70 = $14;
 ;HEAP8[$10>>0]=HEAP8[$20>>0]|0;
 ;HEAP8[$11>>0]=HEAP8[$19>>0]|0;
 ;HEAP8[$12>>0]=HEAP8[$18>>0]|0;
 ;HEAP8[$13>>0]=HEAP8[$17>>0]|0;
 $8 = $68;
 $9 = $70;
 $71 = $8;
 $72 = $9;
 $7 = $72;
 $73 = $7;
 $5 = $71;
 $6 = $73;
 $74 = $5;
 $75 = $6;
 $4 = $75;
 $76 = $4;
 HEAP32[$74>>2] = $76;
 $77 = HEAP32[$22>>2]|0;
 HEAP32[$54>>2] = $77;
 $24 = $25;
 ;HEAP8[$47>>0]=HEAP8[$55>>0]|0;
 ;HEAP8[$48>>0]=HEAP8[$54>>0]|0;HEAP8[$48+1>>0]=HEAP8[$54+1>>0]|0;HEAP8[$48+2>>0]=HEAP8[$54+2>>0]|0;HEAP8[$48+3>>0]=HEAP8[$54+3>>0]|0;
 ;HEAP8[$49>>0]=HEAP8[$53>>0]|0;
 $40 = $63;
 $78 = $40;
 $39 = $48;
 $79 = $39;
 ;HEAP32[$42>>2]=HEAP32[$79>>2]|0;
 ;HEAP8[$30>>0]=HEAP8[$43>>0]|0;
 ;HEAP8[$31>>0]=HEAP8[$42>>0]|0;HEAP8[$31+1>>0]=HEAP8[$42+1>>0]|0;HEAP8[$31+2>>0]=HEAP8[$42+2>>0]|0;HEAP8[$31+3>>0]=HEAP8[$42+3>>0]|0;
 ;HEAP8[$32>>0]=HEAP8[$41>>0]|0;
 $29 = $78;
 $80 = $29;
 $28 = $31;
 $81 = $28;
 $27 = $81;
 $82 = $27;
 $83 = HEAP32[$82>>2]|0;
 $26 = $83;
 $84 = $26;
 ;HEAP32[$80>>2]=HEAP32[$84>>2]|0;
 $33 = $47;
 ;HEAP8[$36>>0]=HEAP8[$46>>0]|0;
 ;HEAP8[$37>>0]=HEAP8[$45>>0]|0;
 ;HEAP8[$38>>0]=HEAP8[$44>>0]|0;
 $35 = $78;
 $85 = $35;
 $34 = $85;
 $86 = ((($58)) + 16|0);
 HEAP32[$86>>2] = $58;
 STACKTOP = sp;return;
}
function __ZN16GUIButtonClusterILm7EE7OnEventERK5Event($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $$byval_copy4 = sp + 188|0;
 $$byval_copy3 = sp + 184|0;
 $$byval_copy2 = sp + 180|0;
 $$byval_copy1 = sp + 193|0;
 $$byval_copy = sp + 176|0;
 $6 = sp + 156|0;
 $12 = sp + 96|0;
 $13 = sp + 132|0;
 $14 = sp + 72|0;
 $15 = sp + 192|0;
 $16 = sp + 48|0;
 $17 = sp + 128|0;
 $18 = sp + 24|0;
 $19 = sp + 124|0;
 $20 = sp;
 $21 = sp + 120|0;
 $4 = $0;
 $5 = $1;
 $22 = $4;
 $23 = $5;
 __ZN15EventDispatcherC2ERK5Event($6,$23);
 $7 = 0;
 $24 = ((($22)) + 24|0);
 $8 = $24;
 $25 = $8;
 $3 = $25;
 $26 = $3;
 $9 = $26;
 $27 = $8;
 $2 = $27;
 $28 = $2;
 $29 = ((($28)) + 280|0);
 $10 = $29;
 while(1) {
  $30 = $9;
  $31 = $10;
  $32 = ($30|0)!=($31|0);
  if (!($32)) {
   break;
  }
  $33 = $9;
  $11 = $33;
  $34 = $11;
  $35 = ((($34)) + 12|0);
  $36 = ((($35)) + 16|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37 & 1;
  $39 = ($38<<24>>24)!=(0);
  if ($39) {
   $40 = $11;
   __ZN12GUIProcesserI13GUIButtonDataE7OnEventER15EventDispatcher($40,$6);
   $41 = $11;
   HEAP32[$13>>2] = $41;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$13>>2]|0;
   __ZNSt3__28functionIFbRK5EventEEC2IZN16GUIButtonClusterILm7EE7OnEventES3_EUlS3_E_vEET_($12,$$byval_copy);
   __ZN15EventDispatcher8DispatchE9EventTypeNSt3__28functionIFbRK5EventEEE($6,6,$12);
   __ZNSt3__28functionIFbRK5EventEED2Ev($12);
   ;HEAP8[$$byval_copy1>>0]=HEAP8[$15>>0]|0;
   __ZNSt3__28functionIFbRK5EventEEC2IZN16GUIButtonClusterILm7EE7OnEventES3_EUlS3_E0_vEET_($14,$$byval_copy1);
   __ZN15EventDispatcher8DispatchE9EventTypeNSt3__28functionIFbRK5EventEEE($6,7,$14);
   __ZNSt3__28functionIFbRK5EventEED2Ev($14);
   $42 = $11;
   HEAP32[$17>>2] = $42;
   ;HEAP32[$$byval_copy2>>2]=HEAP32[$17>>2]|0;
   __ZNSt3__28functionIFbRK5EventEEC2IZN16GUIButtonClusterILm7EE7OnEventES3_EUlS3_E1_vEET_($16,$$byval_copy2);
   __ZN15EventDispatcher8DispatchE9EventTypeNSt3__28functionIFbRK5EventEEE($6,16,$16);
   __ZNSt3__28functionIFbRK5EventEED2Ev($16);
   $43 = $11;
   HEAP32[$19>>2] = $43;
   ;HEAP32[$$byval_copy3>>2]=HEAP32[$19>>2]|0;
   __ZNSt3__28functionIFbRK5EventEEC2IZN16GUIButtonClusterILm7EE7OnEventES3_EUlS3_E2_vEET_($18,$$byval_copy3);
   __ZN15EventDispatcher8DispatchE9EventTypeNSt3__28functionIFbRK5EventEEE($6,14,$18);
   __ZNSt3__28functionIFbRK5EventEED2Ev($18);
   $44 = $11;
   HEAP32[$21>>2] = $44;
   ;HEAP32[$$byval_copy4>>2]=HEAP32[$21>>2]|0;
   __ZNSt3__28functionIFbRK5EventEEC2IZN16GUIButtonClusterILm7EE7OnEventES3_EUlS3_E3_vEET_($20,$$byval_copy4);
   __ZN15EventDispatcher8DispatchE9EventTypeNSt3__28functionIFbRK5EventEEE($6,15,$20);
   __ZNSt3__28functionIFbRK5EventEED2Ev($20);
   $45 = $7;
   $46 = (($45) + 1)|0;
   $7 = $46;
  }
  $47 = $9;
  $48 = ((($47)) + 40|0);
  $9 = $48;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__28functionIFbRK5EventEEC2IZN16GUIButtonClusterILm7EE7OnEventES3_EUlS3_E_vEET_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $10 = sp + 96|0;
 $11 = sp + 88|0;
 $12 = sp + 80|0;
 $13 = sp + 72|0;
 $17 = sp + 235|0;
 $18 = sp + 234|0;
 $19 = sp + 233|0;
 $20 = sp + 232|0;
 $22 = sp + 172|0;
 $25 = sp + 231|0;
 $30 = sp + 64|0;
 $31 = sp + 56|0;
 $32 = sp + 48|0;
 $36 = sp + 40|0;
 $37 = sp + 32|0;
 $38 = sp + 24|0;
 $41 = sp + 230|0;
 $42 = sp + 124|0;
 $43 = sp + 229|0;
 $44 = sp + 228|0;
 $45 = sp + 227|0;
 $46 = sp + 226|0;
 $47 = sp + 16|0;
 $48 = sp + 8|0;
 $49 = sp;
 $53 = sp + 225|0;
 $54 = sp + 108|0;
 $55 = sp + 224|0;
 $57 = $0;
 $58 = $57;
 $59 = ((($58)) + 16|0);
 HEAP32[$59>>2] = 0;
 $56 = $1;
 $2 = $1;
 $60 = $2;
 $51 = $58;
 $52 = $60;
 $61 = $51;
 $50 = $61;
 $62 = $50;
 HEAP32[$62>>2] = (3748);
 HEAP32[$61>>2] = (4428);
 $63 = ((($61)) + 4|0);
 $64 = $52;
 $3 = $64;
 $65 = $3;
 $23 = $65;
 $66 = $23;
 $21 = $66;
 $67 = $21;
 $15 = $22;
 $16 = $67;
 $68 = $15;
 $69 = $16;
 $14 = $69;
 $70 = $14;
 ;HEAP8[$10>>0]=HEAP8[$20>>0]|0;
 ;HEAP8[$11>>0]=HEAP8[$19>>0]|0;
 ;HEAP8[$12>>0]=HEAP8[$18>>0]|0;
 ;HEAP8[$13>>0]=HEAP8[$17>>0]|0;
 $8 = $68;
 $9 = $70;
 $71 = $8;
 $72 = $9;
 $7 = $72;
 $73 = $7;
 $5 = $71;
 $6 = $73;
 $74 = $5;
 $75 = $6;
 $4 = $75;
 $76 = $4;
 HEAP32[$74>>2] = $76;
 $77 = HEAP32[$22>>2]|0;
 HEAP32[$54>>2] = $77;
 $24 = $25;
 ;HEAP8[$47>>0]=HEAP8[$55>>0]|0;
 ;HEAP8[$48>>0]=HEAP8[$54>>0]|0;HEAP8[$48+1>>0]=HEAP8[$54+1>>0]|0;HEAP8[$48+2>>0]=HEAP8[$54+2>>0]|0;HEAP8[$48+3>>0]=HEAP8[$54+3>>0]|0;
 ;HEAP8[$49>>0]=HEAP8[$53>>0]|0;
 $40 = $63;
 $78 = $40;
 $39 = $48;
 $79 = $39;
 ;HEAP32[$42>>2]=HEAP32[$79>>2]|0;
 ;HEAP8[$30>>0]=HEAP8[$43>>0]|0;
 ;HEAP8[$31>>0]=HEAP8[$42>>0]|0;HEAP8[$31+1>>0]=HEAP8[$42+1>>0]|0;HEAP8[$31+2>>0]=HEAP8[$42+2>>0]|0;HEAP8[$31+3>>0]=HEAP8[$42+3>>0]|0;
 ;HEAP8[$32>>0]=HEAP8[$41>>0]|0;
 $29 = $78;
 $80 = $29;
 $28 = $31;
 $81 = $28;
 $27 = $81;
 $82 = $27;
 $83 = HEAP32[$82>>2]|0;
 $26 = $83;
 $84 = $26;
 ;HEAP32[$80>>2]=HEAP32[$84>>2]|0;
 $33 = $47;
 ;HEAP8[$36>>0]=HEAP8[$46>>0]|0;
 ;HEAP8[$37>>0]=HEAP8[$45>>0]|0;
 ;HEAP8[$38>>0]=HEAP8[$44>>0]|0;
 $35 = $78;
 $85 = $35;
 $34 = $85;
 $86 = ((($58)) + 16|0);
 HEAP32[$86>>2] = $58;
 STACKTOP = sp;return;
}
function __ZNSt3__28functionIFbRK5EventEEC2IZN16GUIButtonClusterILm7EE7OnEventES3_EUlS3_E0_vEET_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $10 = sp + 96|0;
 $11 = sp + 88|0;
 $12 = sp + 80|0;
 $13 = sp + 72|0;
 $17 = sp + 235|0;
 $18 = sp + 234|0;
 $19 = sp + 233|0;
 $20 = sp + 232|0;
 $22 = sp + 172|0;
 $25 = sp + 231|0;
 $30 = sp + 64|0;
 $31 = sp + 56|0;
 $32 = sp + 48|0;
 $36 = sp + 40|0;
 $37 = sp + 32|0;
 $38 = sp + 24|0;
 $41 = sp + 230|0;
 $42 = sp + 124|0;
 $43 = sp + 229|0;
 $44 = sp + 228|0;
 $45 = sp + 227|0;
 $46 = sp + 226|0;
 $47 = sp + 16|0;
 $48 = sp + 8|0;
 $49 = sp;
 $53 = sp + 225|0;
 $54 = sp + 108|0;
 $55 = sp + 224|0;
 $57 = $0;
 $58 = $57;
 $59 = ((($58)) + 16|0);
 HEAP32[$59>>2] = 0;
 $56 = $1;
 $2 = $1;
 $60 = $2;
 $51 = $58;
 $52 = $60;
 $61 = $51;
 $50 = $61;
 $62 = $50;
 HEAP32[$62>>2] = (3748);
 HEAP32[$61>>2] = (4384);
 $63 = ((($61)) + 4|0);
 $64 = $52;
 $3 = $64;
 $65 = $3;
 $23 = $65;
 $66 = $23;
 $21 = $66;
 $67 = $21;
 $15 = $22;
 $16 = $67;
 $68 = $15;
 $69 = $16;
 $14 = $69;
 $70 = $14;
 ;HEAP8[$10>>0]=HEAP8[$20>>0]|0;
 ;HEAP8[$11>>0]=HEAP8[$19>>0]|0;
 ;HEAP8[$12>>0]=HEAP8[$18>>0]|0;
 ;HEAP8[$13>>0]=HEAP8[$17>>0]|0;
 $8 = $68;
 $9 = $70;
 $71 = $8;
 $72 = $9;
 $7 = $72;
 $73 = $7;
 $5 = $71;
 $6 = $73;
 $74 = $5;
 $75 = $6;
 $4 = $75;
 $76 = $4;
 HEAP32[$74>>2] = $76;
 $77 = HEAP32[$22>>2]|0;
 HEAP32[$54>>2] = $77;
 $24 = $25;
 ;HEAP8[$47>>0]=HEAP8[$55>>0]|0;
 ;HEAP8[$48>>0]=HEAP8[$54>>0]|0;HEAP8[$48+1>>0]=HEAP8[$54+1>>0]|0;HEAP8[$48+2>>0]=HEAP8[$54+2>>0]|0;HEAP8[$48+3>>0]=HEAP8[$54+3>>0]|0;
 ;HEAP8[$49>>0]=HEAP8[$53>>0]|0;
 $40 = $63;
 $78 = $40;
 $39 = $48;
 $79 = $39;
 ;HEAP32[$42>>2]=HEAP32[$79>>2]|0;
 ;HEAP8[$30>>0]=HEAP8[$43>>0]|0;
 ;HEAP8[$31>>0]=HEAP8[$42>>0]|0;HEAP8[$31+1>>0]=HEAP8[$42+1>>0]|0;HEAP8[$31+2>>0]=HEAP8[$42+2>>0]|0;HEAP8[$31+3>>0]=HEAP8[$42+3>>0]|0;
 ;HEAP8[$32>>0]=HEAP8[$41>>0]|0;
 $29 = $78;
 $28 = $31;
 $80 = $28;
 $27 = $80;
 $81 = $27;
 $82 = HEAP32[$81>>2]|0;
 $26 = $82;
 $33 = $47;
 ;HEAP8[$36>>0]=HEAP8[$46>>0]|0;
 ;HEAP8[$37>>0]=HEAP8[$45>>0]|0;
 ;HEAP8[$38>>0]=HEAP8[$44>>0]|0;
 $35 = $78;
 $83 = $35;
 $34 = $83;
 $84 = ((($58)) + 16|0);
 HEAP32[$84>>2] = $58;
 STACKTOP = sp;return;
}
function __ZNSt3__28functionIFbRK5EventEEC2IZN16GUIButtonClusterILm7EE7OnEventES3_EUlS3_E1_vEET_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $10 = sp + 96|0;
 $11 = sp + 88|0;
 $12 = sp + 80|0;
 $13 = sp + 72|0;
 $17 = sp + 235|0;
 $18 = sp + 234|0;
 $19 = sp + 233|0;
 $20 = sp + 232|0;
 $22 = sp + 172|0;
 $25 = sp + 231|0;
 $30 = sp + 64|0;
 $31 = sp + 56|0;
 $32 = sp + 48|0;
 $36 = sp + 40|0;
 $37 = sp + 32|0;
 $38 = sp + 24|0;
 $41 = sp + 230|0;
 $42 = sp + 124|0;
 $43 = sp + 229|0;
 $44 = sp + 228|0;
 $45 = sp + 227|0;
 $46 = sp + 226|0;
 $47 = sp + 16|0;
 $48 = sp + 8|0;
 $49 = sp;
 $53 = sp + 225|0;
 $54 = sp + 108|0;
 $55 = sp + 224|0;
 $57 = $0;
 $58 = $57;
 $59 = ((($58)) + 16|0);
 HEAP32[$59>>2] = 0;
 $56 = $1;
 $2 = $1;
 $60 = $2;
 $51 = $58;
 $52 = $60;
 $61 = $51;
 $50 = $61;
 $62 = $50;
 HEAP32[$62>>2] = (3748);
 HEAP32[$61>>2] = (4340);
 $63 = ((($61)) + 4|0);
 $64 = $52;
 $3 = $64;
 $65 = $3;
 $23 = $65;
 $66 = $23;
 $21 = $66;
 $67 = $21;
 $15 = $22;
 $16 = $67;
 $68 = $15;
 $69 = $16;
 $14 = $69;
 $70 = $14;
 ;HEAP8[$10>>0]=HEAP8[$20>>0]|0;
 ;HEAP8[$11>>0]=HEAP8[$19>>0]|0;
 ;HEAP8[$12>>0]=HEAP8[$18>>0]|0;
 ;HEAP8[$13>>0]=HEAP8[$17>>0]|0;
 $8 = $68;
 $9 = $70;
 $71 = $8;
 $72 = $9;
 $7 = $72;
 $73 = $7;
 $5 = $71;
 $6 = $73;
 $74 = $5;
 $75 = $6;
 $4 = $75;
 $76 = $4;
 HEAP32[$74>>2] = $76;
 $77 = HEAP32[$22>>2]|0;
 HEAP32[$54>>2] = $77;
 $24 = $25;
 ;HEAP8[$47>>0]=HEAP8[$55>>0]|0;
 ;HEAP8[$48>>0]=HEAP8[$54>>0]|0;HEAP8[$48+1>>0]=HEAP8[$54+1>>0]|0;HEAP8[$48+2>>0]=HEAP8[$54+2>>0]|0;HEAP8[$48+3>>0]=HEAP8[$54+3>>0]|0;
 ;HEAP8[$49>>0]=HEAP8[$53>>0]|0;
 $40 = $63;
 $78 = $40;
 $39 = $48;
 $79 = $39;
 ;HEAP32[$42>>2]=HEAP32[$79>>2]|0;
 ;HEAP8[$30>>0]=HEAP8[$43>>0]|0;
 ;HEAP8[$31>>0]=HEAP8[$42>>0]|0;HEAP8[$31+1>>0]=HEAP8[$42+1>>0]|0;HEAP8[$31+2>>0]=HEAP8[$42+2>>0]|0;HEAP8[$31+3>>0]=HEAP8[$42+3>>0]|0;
 ;HEAP8[$32>>0]=HEAP8[$41>>0]|0;
 $29 = $78;
 $80 = $29;
 $28 = $31;
 $81 = $28;
 $27 = $81;
 $82 = $27;
 $83 = HEAP32[$82>>2]|0;
 $26 = $83;
 $84 = $26;
 ;HEAP32[$80>>2]=HEAP32[$84>>2]|0;
 $33 = $47;
 ;HEAP8[$36>>0]=HEAP8[$46>>0]|0;
 ;HEAP8[$37>>0]=HEAP8[$45>>0]|0;
 ;HEAP8[$38>>0]=HEAP8[$44>>0]|0;
 $35 = $78;
 $85 = $35;
 $34 = $85;
 $86 = ((($58)) + 16|0);
 HEAP32[$86>>2] = $58;
 STACKTOP = sp;return;
}
function __ZNSt3__28functionIFbRK5EventEEC2IZN16GUIButtonClusterILm7EE7OnEventES3_EUlS3_E2_vEET_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $10 = sp + 96|0;
 $11 = sp + 88|0;
 $12 = sp + 80|0;
 $13 = sp + 72|0;
 $17 = sp + 235|0;
 $18 = sp + 234|0;
 $19 = sp + 233|0;
 $20 = sp + 232|0;
 $22 = sp + 172|0;
 $25 = sp + 231|0;
 $30 = sp + 64|0;
 $31 = sp + 56|0;
 $32 = sp + 48|0;
 $36 = sp + 40|0;
 $37 = sp + 32|0;
 $38 = sp + 24|0;
 $41 = sp + 230|0;
 $42 = sp + 124|0;
 $43 = sp + 229|0;
 $44 = sp + 228|0;
 $45 = sp + 227|0;
 $46 = sp + 226|0;
 $47 = sp + 16|0;
 $48 = sp + 8|0;
 $49 = sp;
 $53 = sp + 225|0;
 $54 = sp + 108|0;
 $55 = sp + 224|0;
 $57 = $0;
 $58 = $57;
 $59 = ((($58)) + 16|0);
 HEAP32[$59>>2] = 0;
 $56 = $1;
 $2 = $1;
 $60 = $2;
 $51 = $58;
 $52 = $60;
 $61 = $51;
 $50 = $61;
 $62 = $50;
 HEAP32[$62>>2] = (3748);
 HEAP32[$61>>2] = (4296);
 $63 = ((($61)) + 4|0);
 $64 = $52;
 $3 = $64;
 $65 = $3;
 $23 = $65;
 $66 = $23;
 $21 = $66;
 $67 = $21;
 $15 = $22;
 $16 = $67;
 $68 = $15;
 $69 = $16;
 $14 = $69;
 $70 = $14;
 ;HEAP8[$10>>0]=HEAP8[$20>>0]|0;
 ;HEAP8[$11>>0]=HEAP8[$19>>0]|0;
 ;HEAP8[$12>>0]=HEAP8[$18>>0]|0;
 ;HEAP8[$13>>0]=HEAP8[$17>>0]|0;
 $8 = $68;
 $9 = $70;
 $71 = $8;
 $72 = $9;
 $7 = $72;
 $73 = $7;
 $5 = $71;
 $6 = $73;
 $74 = $5;
 $75 = $6;
 $4 = $75;
 $76 = $4;
 HEAP32[$74>>2] = $76;
 $77 = HEAP32[$22>>2]|0;
 HEAP32[$54>>2] = $77;
 $24 = $25;
 ;HEAP8[$47>>0]=HEAP8[$55>>0]|0;
 ;HEAP8[$48>>0]=HEAP8[$54>>0]|0;HEAP8[$48+1>>0]=HEAP8[$54+1>>0]|0;HEAP8[$48+2>>0]=HEAP8[$54+2>>0]|0;HEAP8[$48+3>>0]=HEAP8[$54+3>>0]|0;
 ;HEAP8[$49>>0]=HEAP8[$53>>0]|0;
 $40 = $63;
 $78 = $40;
 $39 = $48;
 $79 = $39;
 ;HEAP32[$42>>2]=HEAP32[$79>>2]|0;
 ;HEAP8[$30>>0]=HEAP8[$43>>0]|0;
 ;HEAP8[$31>>0]=HEAP8[$42>>0]|0;HEAP8[$31+1>>0]=HEAP8[$42+1>>0]|0;HEAP8[$31+2>>0]=HEAP8[$42+2>>0]|0;HEAP8[$31+3>>0]=HEAP8[$42+3>>0]|0;
 ;HEAP8[$32>>0]=HEAP8[$41>>0]|0;
 $29 = $78;
 $80 = $29;
 $28 = $31;
 $81 = $28;
 $27 = $81;
 $82 = $27;
 $83 = HEAP32[$82>>2]|0;
 $26 = $83;
 $84 = $26;
 ;HEAP32[$80>>2]=HEAP32[$84>>2]|0;
 $33 = $47;
 ;HEAP8[$36>>0]=HEAP8[$46>>0]|0;
 ;HEAP8[$37>>0]=HEAP8[$45>>0]|0;
 ;HEAP8[$38>>0]=HEAP8[$44>>0]|0;
 $35 = $78;
 $85 = $35;
 $34 = $85;
 $86 = ((($58)) + 16|0);
 HEAP32[$86>>2] = $58;
 STACKTOP = sp;return;
}
function __ZNSt3__28functionIFbRK5EventEEC2IZN16GUIButtonClusterILm7EE7OnEventES3_EUlS3_E3_vEET_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $10 = sp + 96|0;
 $11 = sp + 88|0;
 $12 = sp + 80|0;
 $13 = sp + 72|0;
 $17 = sp + 235|0;
 $18 = sp + 234|0;
 $19 = sp + 233|0;
 $20 = sp + 232|0;
 $22 = sp + 172|0;
 $25 = sp + 231|0;
 $30 = sp + 64|0;
 $31 = sp + 56|0;
 $32 = sp + 48|0;
 $36 = sp + 40|0;
 $37 = sp + 32|0;
 $38 = sp + 24|0;
 $41 = sp + 230|0;
 $42 = sp + 124|0;
 $43 = sp + 229|0;
 $44 = sp + 228|0;
 $45 = sp + 227|0;
 $46 = sp + 226|0;
 $47 = sp + 16|0;
 $48 = sp + 8|0;
 $49 = sp;
 $53 = sp + 225|0;
 $54 = sp + 108|0;
 $55 = sp + 224|0;
 $57 = $0;
 $58 = $57;
 $59 = ((($58)) + 16|0);
 HEAP32[$59>>2] = 0;
 $56 = $1;
 $2 = $1;
 $60 = $2;
 $51 = $58;
 $52 = $60;
 $61 = $51;
 $50 = $61;
 $62 = $50;
 HEAP32[$62>>2] = (3748);
 HEAP32[$61>>2] = (4252);
 $63 = ((($61)) + 4|0);
 $64 = $52;
 $3 = $64;
 $65 = $3;
 $23 = $65;
 $66 = $23;
 $21 = $66;
 $67 = $21;
 $15 = $22;
 $16 = $67;
 $68 = $15;
 $69 = $16;
 $14 = $69;
 $70 = $14;
 ;HEAP8[$10>>0]=HEAP8[$20>>0]|0;
 ;HEAP8[$11>>0]=HEAP8[$19>>0]|0;
 ;HEAP8[$12>>0]=HEAP8[$18>>0]|0;
 ;HEAP8[$13>>0]=HEAP8[$17>>0]|0;
 $8 = $68;
 $9 = $70;
 $71 = $8;
 $72 = $9;
 $7 = $72;
 $73 = $7;
 $5 = $71;
 $6 = $73;
 $74 = $5;
 $75 = $6;
 $4 = $75;
 $76 = $4;
 HEAP32[$74>>2] = $76;
 $77 = HEAP32[$22>>2]|0;
 HEAP32[$54>>2] = $77;
 $24 = $25;
 ;HEAP8[$47>>0]=HEAP8[$55>>0]|0;
 ;HEAP8[$48>>0]=HEAP8[$54>>0]|0;HEAP8[$48+1>>0]=HEAP8[$54+1>>0]|0;HEAP8[$48+2>>0]=HEAP8[$54+2>>0]|0;HEAP8[$48+3>>0]=HEAP8[$54+3>>0]|0;
 ;HEAP8[$49>>0]=HEAP8[$53>>0]|0;
 $40 = $63;
 $78 = $40;
 $39 = $48;
 $79 = $39;
 ;HEAP32[$42>>2]=HEAP32[$79>>2]|0;
 ;HEAP8[$30>>0]=HEAP8[$43>>0]|0;
 ;HEAP8[$31>>0]=HEAP8[$42>>0]|0;HEAP8[$31+1>>0]=HEAP8[$42+1>>0]|0;HEAP8[$31+2>>0]=HEAP8[$42+2>>0]|0;HEAP8[$31+3>>0]=HEAP8[$42+3>>0]|0;
 ;HEAP8[$32>>0]=HEAP8[$41>>0]|0;
 $29 = $78;
 $80 = $29;
 $28 = $31;
 $81 = $28;
 $27 = $81;
 $82 = $27;
 $83 = HEAP32[$82>>2]|0;
 $26 = $83;
 $84 = $26;
 ;HEAP32[$80>>2]=HEAP32[$84>>2]|0;
 $33 = $47;
 ;HEAP8[$36>>0]=HEAP8[$46>>0]|0;
 ;HEAP8[$37>>0]=HEAP8[$45>>0]|0;
 ;HEAP8[$38>>0]=HEAP8[$44>>0]|0;
 $35 = $78;
 $85 = $35;
 $34 = $85;
 $86 = ((($58)) + 16|0);
 HEAP32[$86>>2] = $58;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $1 = $3;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EED2Ev($2);
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EE7__cloneEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(608|0);
 $7 = sp + 128|0;
 $8 = sp + 120|0;
 $9 = sp + 112|0;
 $10 = sp + 104|0;
 $13 = sp + 594|0;
 $14 = sp + 593|0;
 $15 = sp + 592|0;
 $16 = sp + 591|0;
 $18 = sp + 540|0;
 $27 = sp + 96|0;
 $28 = sp + 88|0;
 $29 = sp + 80|0;
 $30 = sp + 72|0;
 $34 = sp + 590|0;
 $35 = sp + 589|0;
 $36 = sp + 588|0;
 $37 = sp + 587|0;
 $39 = sp + 488|0;
 $45 = sp + 64|0;
 $46 = sp + 56|0;
 $47 = sp + 48|0;
 $53 = sp + 40|0;
 $54 = sp + 32|0;
 $55 = sp + 24|0;
 $58 = sp + 586|0;
 $59 = sp + 436|0;
 $60 = sp + 585|0;
 $61 = sp + 584|0;
 $62 = sp + 432|0;
 $63 = sp + 583|0;
 $64 = sp + 16|0;
 $65 = sp + 8|0;
 $66 = sp;
 $71 = sp + 582|0;
 $72 = sp + 412|0;
 $73 = sp + 408|0;
 $100 = sp + 300|0;
 $137 = sp + 581|0;
 $138 = sp + 144|0;
 $139 = sp + 136|0;
 $140 = sp + 580|0;
 $136 = $0;
 $141 = $136;
 $142 = ((($141)) + 4|0);
 $135 = $142;
 $143 = $135;
 $134 = $143;
 $144 = $134;
 $132 = $137;
 $133 = $144;
 $110 = $137;
 $111 = 1;
 $112 = 0;
 $145 = $110;
 $146 = $111;
 $109 = $145;
 $147 = ($146>>>0)>(536870911);
 if ($147) {
  $107 = 9129;
  $148 = (___cxa_allocate_exception(8)|0);
  $149 = $107;
  $105 = $148;
  $106 = $149;
  $150 = $105;
  $151 = $106;
  __ZNSt11logic_errorC2EPKc($150,$151);
  HEAP32[$150>>2] = (5584);
  ___cxa_throw(($148|0),(3656|0),(228|0));
  // unreachable;
 }
 $152 = $111;
 $153 = $152<<3;
 $108 = $153;
 $154 = $108;
 $155 = (__Znwm($154)|0);
 $102 = $139;
 $103 = $137;
 $104 = 1;
 $156 = $102;
 $157 = $103;
 HEAP32[$156>>2] = $157;
 $158 = ((($156)) + 4|0);
 $159 = $104;
 HEAP32[$158>>2] = $159;
 $99 = $138;
 HEAP32[$100>>2] = $155;
 $101 = $139;
 $160 = $99;
 $161 = $101;
 $98 = $161;
 $162 = $98;
 $95 = $160;
 $96 = $100;
 $97 = $162;
 $163 = $95;
 $164 = $96;
 $94 = $164;
 $165 = $94;
 $88 = $163;
 $89 = $165;
 $166 = $88;
 $167 = $89;
 $87 = $167;
 $168 = $87;
 $169 = HEAP32[$168>>2]|0;
 HEAP32[$166>>2] = $169;
 $170 = ((($163)) + 4|0);
 $171 = $97;
 $90 = $171;
 $172 = $90;
 $92 = $170;
 $93 = $172;
 $173 = $92;
 $174 = $93;
 $91 = $174;
 $175 = $91;
 ;HEAP32[$173>>2]=HEAP32[$175>>2]|0;HEAP32[$173+4>>2]=HEAP32[$175+4>>2]|0;
 $86 = $138;
 $176 = $86;
 $85 = $176;
 $177 = $85;
 $84 = $177;
 $178 = $84;
 $179 = HEAP32[$178>>2]|0;
 $180 = ((($141)) + 4|0);
 $83 = $180;
 $181 = $83;
 $82 = $181;
 $182 = $82;
 $80 = $140;
 $81 = $137;
 $68 = $179;
 $69 = $182;
 $70 = $140;
 $183 = $68;
 $67 = $183;
 $184 = $67;
 HEAP32[$184>>2] = (3748);
 HEAP32[$183>>2] = (4252);
 $185 = ((($183)) + 4|0);
 $186 = $69;
 $19 = $186;
 $187 = $19;
 $17 = $187;
 $188 = $17;
 $11 = $18;
 $12 = $188;
 $189 = $11;
 $190 = $12;
 ;HEAP8[$7>>0]=HEAP8[$16>>0]|0;
 ;HEAP8[$8>>0]=HEAP8[$15>>0]|0;
 ;HEAP8[$9>>0]=HEAP8[$14>>0]|0;
 ;HEAP8[$10>>0]=HEAP8[$13>>0]|0;
 $5 = $189;
 $6 = $190;
 $191 = $5;
 $192 = $6;
 $4 = $192;
 $193 = $4;
 $2 = $191;
 $3 = $193;
 $194 = $2;
 $195 = $3;
 $1 = $195;
 $196 = $1;
 HEAP32[$194>>2] = $196;
 $197 = HEAP32[$18>>2]|0;
 HEAP32[$72>>2] = $197;
 $198 = $70;
 $20 = $198;
 $199 = $20;
 $40 = $199;
 $200 = $40;
 $38 = $200;
 $201 = $38;
 $32 = $39;
 $33 = $201;
 $202 = $32;
 $203 = $33;
 $31 = $203;
 $204 = $31;
 ;HEAP8[$27>>0]=HEAP8[$37>>0]|0;
 ;HEAP8[$28>>0]=HEAP8[$36>>0]|0;
 ;HEAP8[$29>>0]=HEAP8[$35>>0]|0;
 ;HEAP8[$30>>0]=HEAP8[$34>>0]|0;
 $25 = $202;
 $26 = $204;
 $205 = $25;
 $206 = $26;
 $24 = $206;
 $207 = $24;
 $22 = $205;
 $23 = $207;
 $208 = $22;
 $209 = $23;
 $21 = $209;
 $210 = $21;
 HEAP32[$208>>2] = $210;
 $211 = HEAP32[$39>>2]|0;
 HEAP32[$73>>2] = $211;
 ;HEAP8[$64>>0]=HEAP8[$73>>0]|0;HEAP8[$64+1>>0]=HEAP8[$73+1>>0]|0;HEAP8[$64+2>>0]=HEAP8[$73+2>>0]|0;HEAP8[$64+3>>0]=HEAP8[$73+3>>0]|0;
 ;HEAP8[$65>>0]=HEAP8[$72>>0]|0;HEAP8[$65+1>>0]=HEAP8[$72+1>>0]|0;HEAP8[$65+2>>0]=HEAP8[$72+2>>0]|0;HEAP8[$65+3>>0]=HEAP8[$72+3>>0]|0;
 ;HEAP8[$66>>0]=HEAP8[$71>>0]|0;
 $57 = $185;
 $212 = $57;
 $56 = $65;
 $213 = $56;
 ;HEAP32[$59>>2]=HEAP32[$213>>2]|0;
 ;HEAP8[$45>>0]=HEAP8[$60>>0]|0;
 ;HEAP8[$46>>0]=HEAP8[$59>>0]|0;HEAP8[$46+1>>0]=HEAP8[$59+1>>0]|0;HEAP8[$46+2>>0]=HEAP8[$59+2>>0]|0;HEAP8[$46+3>>0]=HEAP8[$59+3>>0]|0;
 ;HEAP8[$47>>0]=HEAP8[$58>>0]|0;
 $44 = $212;
 $214 = $44;
 $43 = $46;
 $215 = $43;
 $42 = $215;
 $216 = $42;
 $217 = HEAP32[$216>>2]|0;
 $41 = $217;
 $218 = $41;
 ;HEAP32[$214>>2]=HEAP32[$218>>2]|0;
 $48 = $64;
 $219 = $48;
 ;HEAP32[$62>>2]=HEAP32[$219>>2]|0;
 ;HEAP8[$53>>0]=HEAP8[$63>>0]|0;
 ;HEAP8[$54>>0]=HEAP8[$62>>0]|0;HEAP8[$54+1>>0]=HEAP8[$62+1>>0]|0;HEAP8[$54+2>>0]=HEAP8[$62+2>>0]|0;HEAP8[$54+3>>0]=HEAP8[$62+3>>0]|0;
 ;HEAP8[$55>>0]=HEAP8[$61>>0]|0;
 $52 = $212;
 $51 = $54;
 $220 = $51;
 $50 = $220;
 $221 = $50;
 $222 = HEAP32[$221>>2]|0;
 $49 = $222;
 $78 = $138;
 $223 = $78;
 $77 = $223;
 $224 = $77;
 $76 = $224;
 $225 = $76;
 $226 = HEAP32[$225>>2]|0;
 $79 = $226;
 $75 = $223;
 $227 = $75;
 $74 = $227;
 $228 = $74;
 HEAP32[$228>>2] = 0;
 $229 = $79;
 $131 = $138;
 $230 = $131;
 $128 = $230;
 $129 = 0;
 $231 = $128;
 $127 = $231;
 $232 = $127;
 $126 = $232;
 $233 = $126;
 $234 = HEAP32[$233>>2]|0;
 $130 = $234;
 $235 = $129;
 $116 = $231;
 $236 = $116;
 $115 = $236;
 $237 = $115;
 HEAP32[$237>>2] = $235;
 $238 = $130;
 $239 = ($238|0)!=(0|0);
 if (!($239)) {
  STACKTOP = sp;return ($229|0);
 }
 $114 = $231;
 $240 = $114;
 $241 = ((($240)) + 4|0);
 $113 = $241;
 $242 = $113;
 $243 = $130;
 $124 = $242;
 $125 = $243;
 $244 = $124;
 $245 = HEAP32[$244>>2]|0;
 $246 = $125;
 $247 = ((($244)) + 4|0);
 $248 = HEAP32[$247>>2]|0;
 $121 = $245;
 $122 = $246;
 $123 = $248;
 $249 = $121;
 $250 = $122;
 $251 = $123;
 $118 = $249;
 $119 = $250;
 $120 = $251;
 $252 = $119;
 $117 = $252;
 $253 = $117;
 __ZdlPv($253);
 STACKTOP = sp;return ($229|0);
}
function __ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EE7__cloneEPNS0_6__baseISA_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $10 = sp + 128|0;
 $11 = sp + 120|0;
 $12 = sp + 112|0;
 $13 = sp + 104|0;
 $16 = sp + 332|0;
 $17 = sp + 331|0;
 $18 = sp + 330|0;
 $19 = sp + 329|0;
 $21 = sp + 272|0;
 $29 = sp + 96|0;
 $30 = sp + 88|0;
 $31 = sp + 80|0;
 $32 = sp + 72|0;
 $35 = sp + 328|0;
 $36 = sp + 327|0;
 $37 = sp + 326|0;
 $38 = sp + 325|0;
 $40 = sp + 228|0;
 $46 = sp + 64|0;
 $47 = sp + 56|0;
 $48 = sp + 48|0;
 $54 = sp + 40|0;
 $55 = sp + 32|0;
 $56 = sp + 24|0;
 $59 = sp + 324|0;
 $60 = sp + 176|0;
 $61 = sp + 323|0;
 $62 = sp + 322|0;
 $63 = sp + 172|0;
 $64 = sp + 321|0;
 $65 = sp + 16|0;
 $66 = sp + 8|0;
 $67 = sp;
 $72 = sp + 320|0;
 $73 = sp + 152|0;
 $74 = sp + 148|0;
 $77 = $0;
 $78 = $1;
 $79 = $77;
 $80 = $78;
 $81 = ((($79)) + 4|0);
 $76 = $81;
 $82 = $76;
 $75 = $82;
 $83 = $75;
 $84 = ((($79)) + 4|0);
 $3 = $84;
 $85 = $3;
 $2 = $85;
 $86 = $2;
 $69 = $80;
 $70 = $83;
 $71 = $86;
 $87 = $69;
 $68 = $87;
 $88 = $68;
 HEAP32[$88>>2] = (3748);
 HEAP32[$87>>2] = (4252);
 $89 = ((($87)) + 4|0);
 $90 = $70;
 $22 = $90;
 $91 = $22;
 $20 = $91;
 $92 = $20;
 $14 = $21;
 $15 = $92;
 $93 = $14;
 $94 = $15;
 ;HEAP8[$10>>0]=HEAP8[$19>>0]|0;
 ;HEAP8[$11>>0]=HEAP8[$18>>0]|0;
 ;HEAP8[$12>>0]=HEAP8[$17>>0]|0;
 ;HEAP8[$13>>0]=HEAP8[$16>>0]|0;
 $8 = $93;
 $9 = $94;
 $95 = $8;
 $96 = $9;
 $7 = $96;
 $97 = $7;
 $5 = $95;
 $6 = $97;
 $98 = $5;
 $99 = $6;
 $4 = $99;
 $100 = $4;
 HEAP32[$98>>2] = $100;
 $101 = HEAP32[$21>>2]|0;
 HEAP32[$73>>2] = $101;
 $102 = $71;
 $41 = $102;
 $103 = $41;
 $39 = $103;
 $104 = $39;
 $33 = $40;
 $34 = $104;
 $105 = $33;
 $106 = $34;
 ;HEAP8[$29>>0]=HEAP8[$38>>0]|0;
 ;HEAP8[$30>>0]=HEAP8[$37>>0]|0;
 ;HEAP8[$31>>0]=HEAP8[$36>>0]|0;
 ;HEAP8[$32>>0]=HEAP8[$35>>0]|0;
 $27 = $105;
 $28 = $106;
 $107 = $27;
 $108 = $28;
 $26 = $108;
 $109 = $26;
 $24 = $107;
 $25 = $109;
 $110 = $24;
 $111 = $25;
 $23 = $111;
 $112 = $23;
 HEAP32[$110>>2] = $112;
 $113 = HEAP32[$40>>2]|0;
 HEAP32[$74>>2] = $113;
 ;HEAP8[$65>>0]=HEAP8[$74>>0]|0;HEAP8[$65+1>>0]=HEAP8[$74+1>>0]|0;HEAP8[$65+2>>0]=HEAP8[$74+2>>0]|0;HEAP8[$65+3>>0]=HEAP8[$74+3>>0]|0;
 ;HEAP8[$66>>0]=HEAP8[$73>>0]|0;HEAP8[$66+1>>0]=HEAP8[$73+1>>0]|0;HEAP8[$66+2>>0]=HEAP8[$73+2>>0]|0;HEAP8[$66+3>>0]=HEAP8[$73+3>>0]|0;
 ;HEAP8[$67>>0]=HEAP8[$72>>0]|0;
 $58 = $89;
 $114 = $58;
 $57 = $66;
 $115 = $57;
 ;HEAP32[$60>>2]=HEAP32[$115>>2]|0;
 ;HEAP8[$46>>0]=HEAP8[$61>>0]|0;
 ;HEAP8[$47>>0]=HEAP8[$60>>0]|0;HEAP8[$47+1>>0]=HEAP8[$60+1>>0]|0;HEAP8[$47+2>>0]=HEAP8[$60+2>>0]|0;HEAP8[$47+3>>0]=HEAP8[$60+3>>0]|0;
 ;HEAP8[$48>>0]=HEAP8[$59>>0]|0;
 $45 = $114;
 $116 = $45;
 $44 = $47;
 $117 = $44;
 $43 = $117;
 $118 = $43;
 $119 = HEAP32[$118>>2]|0;
 $42 = $119;
 $120 = $42;
 ;HEAP32[$116>>2]=HEAP32[$120>>2]|0;
 $49 = $65;
 $121 = $49;
 ;HEAP32[$63>>2]=HEAP32[$121>>2]|0;
 ;HEAP8[$54>>0]=HEAP8[$64>>0]|0;
 ;HEAP8[$55>>0]=HEAP8[$63>>0]|0;HEAP8[$55+1>>0]=HEAP8[$63+1>>0]|0;HEAP8[$55+2>>0]=HEAP8[$63+2>>0]|0;HEAP8[$55+3>>0]=HEAP8[$63+3>>0]|0;
 ;HEAP8[$56>>0]=HEAP8[$62>>0]|0;
 $53 = $114;
 $52 = $55;
 $122 = $52;
 $51 = $122;
 $123 = $51;
 $124 = HEAP32[$123>>2]|0;
 $50 = $124;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EE7destroyEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EE18destroy_deallocateEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $10 = sp + 36|0;
 $9 = $0;
 $11 = $9;
 $12 = ((($11)) + 4|0);
 $8 = $12;
 $13 = $8;
 $7 = $13;
 $14 = $7;
 $1 = $10;
 $2 = $14;
 $4 = $10;
 $5 = $11;
 $6 = 1;
 $15 = $5;
 $3 = $15;
 $16 = $3;
 __ZdlPv($16);
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EEclES6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $5;
 $8 = ((($7)) + 4|0);
 $4 = $8;
 $9 = $4;
 $3 = $9;
 $10 = $3;
 $11 = $6;
 $2 = $11;
 $12 = $2;
 $13 = (__ZNSt3__228__invoke_void_return_wrapperIbE6__callIJRZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS7_E3_S7_EEEbDpOT_($10,$12)|0);
 STACKTOP = sp;return ($13|0);
}
function __ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EE6targetERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $7;
 $10 = $8;
 $4 = $10;
 $5 = 2848;
 $11 = $4;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $5;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($13|0)==($16|0);
 if ($17) {
  $18 = ((($9)) + 4|0);
  $3 = $18;
  $19 = $3;
  $2 = $19;
  $20 = $2;
  $6 = $20;
  $21 = $6;
  STACKTOP = sp;return ($21|0);
 } else {
  $6 = 0;
  $21 = $6;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function __ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EE11target_typeEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (2848|0);
}
function __ZNSt3__228__invoke_void_return_wrapperIbE6__callIJRZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS7_E3_S7_EEEbDpOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = $0;
 $9 = $1;
 $10 = $8;
 $7 = $10;
 $11 = $7;
 $12 = $9;
 $2 = $12;
 $13 = $2;
 $5 = $11;
 $6 = $13;
 $14 = $5;
 $4 = $14;
 $15 = $4;
 $16 = $6;
 $3 = $16;
 $17 = $3;
 $18 = (__ZZN16GUIButtonClusterILm7EE7OnEventERK5EventENKUlS3_E3_clES3_($15,$17)|0);
 $19 = ($18<<24>>24)!=(0);
 STACKTOP = sp;return ($19|0);
}
function __ZZN16GUIButtonClusterILm7EE7OnEventERK5EventENKUlS3_E3_clES3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = $4;
 $5 = $9;
 $10 = HEAP32[$8>>2]|0;
 $11 = ((($10)) + 12|0);
 $6 = $11;
 $12 = $6;
 $13 = ((($12)) + 16|0);
 $7 = $13;
 $14 = $7;
 $15 = HEAP8[$14>>0]|0;
 $16 = ($15&255) >>> 2;
 $17 = $16 & 1;
 $18 = ($17<<24>>24)!=(0);
 if ($18) {
  $19 = $7;
  $20 = HEAP8[$19>>0]|0;
  $21 = ($20&255) >>> 1;
  $22 = $21 & 1;
  $23 = ($22<<24>>24)!=(0);
  if ($23) {
   $28 = $7;
   $29 = HEAP8[$28>>0]|0;
   $30 = $29 & -5;
   HEAP8[$28>>0] = $30;
   $31 = $7;
   $32 = HEAP8[$31>>0]|0;
   $33 = ($32&255) >>> 1;
   $34 = $33 & 1;
   $35 = $7;
   $36 = HEAP8[$35>>0]|0;
   $37 = $34 & 1;
   $38 = ($37 << 4)&255;
   $39 = $36 & -17;
   $40 = $39 | $38;
   HEAP8[$35>>0] = $40;
   $41 = HEAP32[$8>>2]|0;
   $42 = ((($41)) + 8|0);
   $43 = HEAP32[$42>>2]|0;
   FUNCTION_TABLE_v[$43 & 511]();
   $44 = $7;
   $45 = HEAP8[$44>>0]|0;
   $46 = ($45&255) >>> 4;
   $47 = $46 & 1;
   $2 = $47;
   $48 = $2;
   STACKTOP = sp;return ($48|0);
  }
 }
 $24 = $7;
 $25 = HEAP8[$24>>0]|0;
 $26 = ($25&255) >>> 4;
 $27 = $26 & 1;
 $2 = $27;
 $48 = $2;
 STACKTOP = sp;return ($48|0);
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $1 = $3;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EED2Ev($2);
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EE7__cloneEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(608|0);
 $7 = sp + 128|0;
 $8 = sp + 120|0;
 $9 = sp + 112|0;
 $10 = sp + 104|0;
 $13 = sp + 594|0;
 $14 = sp + 593|0;
 $15 = sp + 592|0;
 $16 = sp + 591|0;
 $18 = sp + 540|0;
 $27 = sp + 96|0;
 $28 = sp + 88|0;
 $29 = sp + 80|0;
 $30 = sp + 72|0;
 $34 = sp + 590|0;
 $35 = sp + 589|0;
 $36 = sp + 588|0;
 $37 = sp + 587|0;
 $39 = sp + 488|0;
 $45 = sp + 64|0;
 $46 = sp + 56|0;
 $47 = sp + 48|0;
 $53 = sp + 40|0;
 $54 = sp + 32|0;
 $55 = sp + 24|0;
 $58 = sp + 586|0;
 $59 = sp + 436|0;
 $60 = sp + 585|0;
 $61 = sp + 584|0;
 $62 = sp + 432|0;
 $63 = sp + 583|0;
 $64 = sp + 16|0;
 $65 = sp + 8|0;
 $66 = sp;
 $71 = sp + 582|0;
 $72 = sp + 412|0;
 $73 = sp + 408|0;
 $100 = sp + 300|0;
 $137 = sp + 581|0;
 $138 = sp + 144|0;
 $139 = sp + 136|0;
 $140 = sp + 580|0;
 $136 = $0;
 $141 = $136;
 $142 = ((($141)) + 4|0);
 $135 = $142;
 $143 = $135;
 $134 = $143;
 $144 = $134;
 $132 = $137;
 $133 = $144;
 $110 = $137;
 $111 = 1;
 $112 = 0;
 $145 = $110;
 $146 = $111;
 $109 = $145;
 $147 = ($146>>>0)>(536870911);
 if ($147) {
  $107 = 9129;
  $148 = (___cxa_allocate_exception(8)|0);
  $149 = $107;
  $105 = $148;
  $106 = $149;
  $150 = $105;
  $151 = $106;
  __ZNSt11logic_errorC2EPKc($150,$151);
  HEAP32[$150>>2] = (5584);
  ___cxa_throw(($148|0),(3656|0),(228|0));
  // unreachable;
 }
 $152 = $111;
 $153 = $152<<3;
 $108 = $153;
 $154 = $108;
 $155 = (__Znwm($154)|0);
 $102 = $139;
 $103 = $137;
 $104 = 1;
 $156 = $102;
 $157 = $103;
 HEAP32[$156>>2] = $157;
 $158 = ((($156)) + 4|0);
 $159 = $104;
 HEAP32[$158>>2] = $159;
 $99 = $138;
 HEAP32[$100>>2] = $155;
 $101 = $139;
 $160 = $99;
 $161 = $101;
 $98 = $161;
 $162 = $98;
 $95 = $160;
 $96 = $100;
 $97 = $162;
 $163 = $95;
 $164 = $96;
 $94 = $164;
 $165 = $94;
 $88 = $163;
 $89 = $165;
 $166 = $88;
 $167 = $89;
 $87 = $167;
 $168 = $87;
 $169 = HEAP32[$168>>2]|0;
 HEAP32[$166>>2] = $169;
 $170 = ((($163)) + 4|0);
 $171 = $97;
 $90 = $171;
 $172 = $90;
 $92 = $170;
 $93 = $172;
 $173 = $92;
 $174 = $93;
 $91 = $174;
 $175 = $91;
 ;HEAP32[$173>>2]=HEAP32[$175>>2]|0;HEAP32[$173+4>>2]=HEAP32[$175+4>>2]|0;
 $86 = $138;
 $176 = $86;
 $85 = $176;
 $177 = $85;
 $84 = $177;
 $178 = $84;
 $179 = HEAP32[$178>>2]|0;
 $180 = ((($141)) + 4|0);
 $83 = $180;
 $181 = $83;
 $82 = $181;
 $182 = $82;
 $80 = $140;
 $81 = $137;
 $68 = $179;
 $69 = $182;
 $70 = $140;
 $183 = $68;
 $67 = $183;
 $184 = $67;
 HEAP32[$184>>2] = (3748);
 HEAP32[$183>>2] = (4296);
 $185 = ((($183)) + 4|0);
 $186 = $69;
 $19 = $186;
 $187 = $19;
 $17 = $187;
 $188 = $17;
 $11 = $18;
 $12 = $188;
 $189 = $11;
 $190 = $12;
 ;HEAP8[$7>>0]=HEAP8[$16>>0]|0;
 ;HEAP8[$8>>0]=HEAP8[$15>>0]|0;
 ;HEAP8[$9>>0]=HEAP8[$14>>0]|0;
 ;HEAP8[$10>>0]=HEAP8[$13>>0]|0;
 $5 = $189;
 $6 = $190;
 $191 = $5;
 $192 = $6;
 $4 = $192;
 $193 = $4;
 $2 = $191;
 $3 = $193;
 $194 = $2;
 $195 = $3;
 $1 = $195;
 $196 = $1;
 HEAP32[$194>>2] = $196;
 $197 = HEAP32[$18>>2]|0;
 HEAP32[$72>>2] = $197;
 $198 = $70;
 $20 = $198;
 $199 = $20;
 $40 = $199;
 $200 = $40;
 $38 = $200;
 $201 = $38;
 $32 = $39;
 $33 = $201;
 $202 = $32;
 $203 = $33;
 $31 = $203;
 $204 = $31;
 ;HEAP8[$27>>0]=HEAP8[$37>>0]|0;
 ;HEAP8[$28>>0]=HEAP8[$36>>0]|0;
 ;HEAP8[$29>>0]=HEAP8[$35>>0]|0;
 ;HEAP8[$30>>0]=HEAP8[$34>>0]|0;
 $25 = $202;
 $26 = $204;
 $205 = $25;
 $206 = $26;
 $24 = $206;
 $207 = $24;
 $22 = $205;
 $23 = $207;
 $208 = $22;
 $209 = $23;
 $21 = $209;
 $210 = $21;
 HEAP32[$208>>2] = $210;
 $211 = HEAP32[$39>>2]|0;
 HEAP32[$73>>2] = $211;
 ;HEAP8[$64>>0]=HEAP8[$73>>0]|0;HEAP8[$64+1>>0]=HEAP8[$73+1>>0]|0;HEAP8[$64+2>>0]=HEAP8[$73+2>>0]|0;HEAP8[$64+3>>0]=HEAP8[$73+3>>0]|0;
 ;HEAP8[$65>>0]=HEAP8[$72>>0]|0;HEAP8[$65+1>>0]=HEAP8[$72+1>>0]|0;HEAP8[$65+2>>0]=HEAP8[$72+2>>0]|0;HEAP8[$65+3>>0]=HEAP8[$72+3>>0]|0;
 ;HEAP8[$66>>0]=HEAP8[$71>>0]|0;
 $57 = $185;
 $212 = $57;
 $56 = $65;
 $213 = $56;
 ;HEAP32[$59>>2]=HEAP32[$213>>2]|0;
 ;HEAP8[$45>>0]=HEAP8[$60>>0]|0;
 ;HEAP8[$46>>0]=HEAP8[$59>>0]|0;HEAP8[$46+1>>0]=HEAP8[$59+1>>0]|0;HEAP8[$46+2>>0]=HEAP8[$59+2>>0]|0;HEAP8[$46+3>>0]=HEAP8[$59+3>>0]|0;
 ;HEAP8[$47>>0]=HEAP8[$58>>0]|0;
 $44 = $212;
 $214 = $44;
 $43 = $46;
 $215 = $43;
 $42 = $215;
 $216 = $42;
 $217 = HEAP32[$216>>2]|0;
 $41 = $217;
 $218 = $41;
 ;HEAP32[$214>>2]=HEAP32[$218>>2]|0;
 $48 = $64;
 $219 = $48;
 ;HEAP32[$62>>2]=HEAP32[$219>>2]|0;
 ;HEAP8[$53>>0]=HEAP8[$63>>0]|0;
 ;HEAP8[$54>>0]=HEAP8[$62>>0]|0;HEAP8[$54+1>>0]=HEAP8[$62+1>>0]|0;HEAP8[$54+2>>0]=HEAP8[$62+2>>0]|0;HEAP8[$54+3>>0]=HEAP8[$62+3>>0]|0;
 ;HEAP8[$55>>0]=HEAP8[$61>>0]|0;
 $52 = $212;
 $51 = $54;
 $220 = $51;
 $50 = $220;
 $221 = $50;
 $222 = HEAP32[$221>>2]|0;
 $49 = $222;
 $78 = $138;
 $223 = $78;
 $77 = $223;
 $224 = $77;
 $76 = $224;
 $225 = $76;
 $226 = HEAP32[$225>>2]|0;
 $79 = $226;
 $75 = $223;
 $227 = $75;
 $74 = $227;
 $228 = $74;
 HEAP32[$228>>2] = 0;
 $229 = $79;
 $131 = $138;
 $230 = $131;
 $128 = $230;
 $129 = 0;
 $231 = $128;
 $127 = $231;
 $232 = $127;
 $126 = $232;
 $233 = $126;
 $234 = HEAP32[$233>>2]|0;
 $130 = $234;
 $235 = $129;
 $116 = $231;
 $236 = $116;
 $115 = $236;
 $237 = $115;
 HEAP32[$237>>2] = $235;
 $238 = $130;
 $239 = ($238|0)!=(0|0);
 if (!($239)) {
  STACKTOP = sp;return ($229|0);
 }
 $114 = $231;
 $240 = $114;
 $241 = ((($240)) + 4|0);
 $113 = $241;
 $242 = $113;
 $243 = $130;
 $124 = $242;
 $125 = $243;
 $244 = $124;
 $245 = HEAP32[$244>>2]|0;
 $246 = $125;
 $247 = ((($244)) + 4|0);
 $248 = HEAP32[$247>>2]|0;
 $121 = $245;
 $122 = $246;
 $123 = $248;
 $249 = $121;
 $250 = $122;
 $251 = $123;
 $118 = $249;
 $119 = $250;
 $120 = $251;
 $252 = $119;
 $117 = $252;
 $253 = $117;
 __ZdlPv($253);
 STACKTOP = sp;return ($229|0);
}
function __ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EE7__cloneEPNS0_6__baseISA_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $10 = sp + 128|0;
 $11 = sp + 120|0;
 $12 = sp + 112|0;
 $13 = sp + 104|0;
 $16 = sp + 332|0;
 $17 = sp + 331|0;
 $18 = sp + 330|0;
 $19 = sp + 329|0;
 $21 = sp + 272|0;
 $29 = sp + 96|0;
 $30 = sp + 88|0;
 $31 = sp + 80|0;
 $32 = sp + 72|0;
 $35 = sp + 328|0;
 $36 = sp + 327|0;
 $37 = sp + 326|0;
 $38 = sp + 325|0;
 $40 = sp + 228|0;
 $46 = sp + 64|0;
 $47 = sp + 56|0;
 $48 = sp + 48|0;
 $54 = sp + 40|0;
 $55 = sp + 32|0;
 $56 = sp + 24|0;
 $59 = sp + 324|0;
 $60 = sp + 176|0;
 $61 = sp + 323|0;
 $62 = sp + 322|0;
 $63 = sp + 172|0;
 $64 = sp + 321|0;
 $65 = sp + 16|0;
 $66 = sp + 8|0;
 $67 = sp;
 $72 = sp + 320|0;
 $73 = sp + 152|0;
 $74 = sp + 148|0;
 $77 = $0;
 $78 = $1;
 $79 = $77;
 $80 = $78;
 $81 = ((($79)) + 4|0);
 $76 = $81;
 $82 = $76;
 $75 = $82;
 $83 = $75;
 $84 = ((($79)) + 4|0);
 $3 = $84;
 $85 = $3;
 $2 = $85;
 $86 = $2;
 $69 = $80;
 $70 = $83;
 $71 = $86;
 $87 = $69;
 $68 = $87;
 $88 = $68;
 HEAP32[$88>>2] = (3748);
 HEAP32[$87>>2] = (4296);
 $89 = ((($87)) + 4|0);
 $90 = $70;
 $22 = $90;
 $91 = $22;
 $20 = $91;
 $92 = $20;
 $14 = $21;
 $15 = $92;
 $93 = $14;
 $94 = $15;
 ;HEAP8[$10>>0]=HEAP8[$19>>0]|0;
 ;HEAP8[$11>>0]=HEAP8[$18>>0]|0;
 ;HEAP8[$12>>0]=HEAP8[$17>>0]|0;
 ;HEAP8[$13>>0]=HEAP8[$16>>0]|0;
 $8 = $93;
 $9 = $94;
 $95 = $8;
 $96 = $9;
 $7 = $96;
 $97 = $7;
 $5 = $95;
 $6 = $97;
 $98 = $5;
 $99 = $6;
 $4 = $99;
 $100 = $4;
 HEAP32[$98>>2] = $100;
 $101 = HEAP32[$21>>2]|0;
 HEAP32[$73>>2] = $101;
 $102 = $71;
 $41 = $102;
 $103 = $41;
 $39 = $103;
 $104 = $39;
 $33 = $40;
 $34 = $104;
 $105 = $33;
 $106 = $34;
 ;HEAP8[$29>>0]=HEAP8[$38>>0]|0;
 ;HEAP8[$30>>0]=HEAP8[$37>>0]|0;
 ;HEAP8[$31>>0]=HEAP8[$36>>0]|0;
 ;HEAP8[$32>>0]=HEAP8[$35>>0]|0;
 $27 = $105;
 $28 = $106;
 $107 = $27;
 $108 = $28;
 $26 = $108;
 $109 = $26;
 $24 = $107;
 $25 = $109;
 $110 = $24;
 $111 = $25;
 $23 = $111;
 $112 = $23;
 HEAP32[$110>>2] = $112;
 $113 = HEAP32[$40>>2]|0;
 HEAP32[$74>>2] = $113;
 ;HEAP8[$65>>0]=HEAP8[$74>>0]|0;HEAP8[$65+1>>0]=HEAP8[$74+1>>0]|0;HEAP8[$65+2>>0]=HEAP8[$74+2>>0]|0;HEAP8[$65+3>>0]=HEAP8[$74+3>>0]|0;
 ;HEAP8[$66>>0]=HEAP8[$73>>0]|0;HEAP8[$66+1>>0]=HEAP8[$73+1>>0]|0;HEAP8[$66+2>>0]=HEAP8[$73+2>>0]|0;HEAP8[$66+3>>0]=HEAP8[$73+3>>0]|0;
 ;HEAP8[$67>>0]=HEAP8[$72>>0]|0;
 $58 = $89;
 $114 = $58;
 $57 = $66;
 $115 = $57;
 ;HEAP32[$60>>2]=HEAP32[$115>>2]|0;
 ;HEAP8[$46>>0]=HEAP8[$61>>0]|0;
 ;HEAP8[$47>>0]=HEAP8[$60>>0]|0;HEAP8[$47+1>>0]=HEAP8[$60+1>>0]|0;HEAP8[$47+2>>0]=HEAP8[$60+2>>0]|0;HEAP8[$47+3>>0]=HEAP8[$60+3>>0]|0;
 ;HEAP8[$48>>0]=HEAP8[$59>>0]|0;
 $45 = $114;
 $116 = $45;
 $44 = $47;
 $117 = $44;
 $43 = $117;
 $118 = $43;
 $119 = HEAP32[$118>>2]|0;
 $42 = $119;
 $120 = $42;
 ;HEAP32[$116>>2]=HEAP32[$120>>2]|0;
 $49 = $65;
 $121 = $49;
 ;HEAP32[$63>>2]=HEAP32[$121>>2]|0;
 ;HEAP8[$54>>0]=HEAP8[$64>>0]|0;
 ;HEAP8[$55>>0]=HEAP8[$63>>0]|0;HEAP8[$55+1>>0]=HEAP8[$63+1>>0]|0;HEAP8[$55+2>>0]=HEAP8[$63+2>>0]|0;HEAP8[$55+3>>0]=HEAP8[$63+3>>0]|0;
 ;HEAP8[$56>>0]=HEAP8[$62>>0]|0;
 $53 = $114;
 $52 = $55;
 $122 = $52;
 $51 = $122;
 $123 = $51;
 $124 = HEAP32[$123>>2]|0;
 $50 = $124;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EE7destroyEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EE18destroy_deallocateEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $10 = sp + 36|0;
 $9 = $0;
 $11 = $9;
 $12 = ((($11)) + 4|0);
 $8 = $12;
 $13 = $8;
 $7 = $13;
 $14 = $7;
 $1 = $10;
 $2 = $14;
 $4 = $10;
 $5 = $11;
 $6 = 1;
 $15 = $5;
 $3 = $15;
 $16 = $3;
 __ZdlPv($16);
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EEclES6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $5;
 $8 = ((($7)) + 4|0);
 $4 = $8;
 $9 = $4;
 $3 = $9;
 $10 = $3;
 $11 = $6;
 $2 = $11;
 $12 = $2;
 $13 = (__ZNSt3__228__invoke_void_return_wrapperIbE6__callIJRZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS7_E2_S7_EEEbDpOT_($10,$12)|0);
 STACKTOP = sp;return ($13|0);
}
function __ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EE6targetERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $7;
 $10 = $8;
 $4 = $10;
 $5 = 2872;
 $11 = $4;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $5;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($13|0)==($16|0);
 if ($17) {
  $18 = ((($9)) + 4|0);
  $3 = $18;
  $19 = $3;
  $2 = $19;
  $20 = $2;
  $6 = $20;
  $21 = $6;
  STACKTOP = sp;return ($21|0);
 } else {
  $6 = 0;
  $21 = $6;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function __ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EE11target_typeEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (2872|0);
}
function __ZNSt3__228__invoke_void_return_wrapperIbE6__callIJRZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS7_E2_S7_EEEbDpOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = $0;
 $9 = $1;
 $10 = $8;
 $7 = $10;
 $11 = $7;
 $12 = $9;
 $2 = $12;
 $13 = $2;
 $5 = $11;
 $6 = $13;
 $14 = $5;
 $4 = $14;
 $15 = $4;
 $16 = $6;
 $3 = $16;
 $17 = $3;
 $18 = (__ZZN16GUIButtonClusterILm7EE7OnEventERK5EventENKUlS3_E2_clES3_($15,$17)|0);
 $19 = ($18<<24>>24)!=(0);
 STACKTOP = sp;return ($19|0);
}
function __ZZN16GUIButtonClusterILm7EE7OnEventERK5EventENKUlS3_E2_clES3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = $4;
 $5 = $9;
 $10 = HEAP32[$8>>2]|0;
 $11 = ((($10)) + 12|0);
 $6 = $11;
 $12 = $6;
 $13 = ((($12)) + 16|0);
 $7 = $13;
 $14 = $7;
 $15 = HEAP8[$14>>0]|0;
 $16 = $15 & -17;
 HEAP8[$14>>0] = $16;
 $17 = $7;
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18&255) >>> 1;
 $20 = $19 & 1;
 $21 = $7;
 $22 = HEAP8[$21>>0]|0;
 $23 = $20 & 1;
 $24 = ($23 << 2)&255;
 $25 = $22 & -5;
 $26 = $25 | $24;
 HEAP8[$21>>0] = $26;
 $27 = $7;
 $28 = HEAP8[$27>>0]|0;
 $29 = ($28&255) >>> 2;
 $30 = $29 & 1;
 $31 = ($30<<24>>24)!=(0);
 if ($31) {
  $37 = HEAP32[$8>>2]|0;
  $38 = ((($37)) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  FUNCTION_TABLE_v[$39 & 511]();
  $40 = $6;
  $41 = ((($40)) + 16|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = ($42&255) >>> 2;
  $44 = $43 & 1;
  $2 = $44;
  $45 = $2;
  STACKTOP = sp;return ($45|0);
 } else {
  $32 = $6;
  $33 = ((($32)) + 16|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = ($34&255) >>> 2;
  $36 = $35 & 1;
  $2 = $36;
  $45 = $2;
  STACKTOP = sp;return ($45|0);
 }
 return (0)|0;
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $1 = $3;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EED2Ev($2);
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EE7__cloneEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(608|0);
 $7 = sp + 128|0;
 $8 = sp + 120|0;
 $9 = sp + 112|0;
 $10 = sp + 104|0;
 $13 = sp + 594|0;
 $14 = sp + 593|0;
 $15 = sp + 592|0;
 $16 = sp + 591|0;
 $18 = sp + 540|0;
 $27 = sp + 96|0;
 $28 = sp + 88|0;
 $29 = sp + 80|0;
 $30 = sp + 72|0;
 $34 = sp + 590|0;
 $35 = sp + 589|0;
 $36 = sp + 588|0;
 $37 = sp + 587|0;
 $39 = sp + 488|0;
 $45 = sp + 64|0;
 $46 = sp + 56|0;
 $47 = sp + 48|0;
 $53 = sp + 40|0;
 $54 = sp + 32|0;
 $55 = sp + 24|0;
 $58 = sp + 586|0;
 $59 = sp + 436|0;
 $60 = sp + 585|0;
 $61 = sp + 584|0;
 $62 = sp + 432|0;
 $63 = sp + 583|0;
 $64 = sp + 16|0;
 $65 = sp + 8|0;
 $66 = sp;
 $71 = sp + 582|0;
 $72 = sp + 412|0;
 $73 = sp + 408|0;
 $100 = sp + 300|0;
 $137 = sp + 581|0;
 $138 = sp + 144|0;
 $139 = sp + 136|0;
 $140 = sp + 580|0;
 $136 = $0;
 $141 = $136;
 $142 = ((($141)) + 4|0);
 $135 = $142;
 $143 = $135;
 $134 = $143;
 $144 = $134;
 $132 = $137;
 $133 = $144;
 $110 = $137;
 $111 = 1;
 $112 = 0;
 $145 = $110;
 $146 = $111;
 $109 = $145;
 $147 = ($146>>>0)>(536870911);
 if ($147) {
  $107 = 9129;
  $148 = (___cxa_allocate_exception(8)|0);
  $149 = $107;
  $105 = $148;
  $106 = $149;
  $150 = $105;
  $151 = $106;
  __ZNSt11logic_errorC2EPKc($150,$151);
  HEAP32[$150>>2] = (5584);
  ___cxa_throw(($148|0),(3656|0),(228|0));
  // unreachable;
 }
 $152 = $111;
 $153 = $152<<3;
 $108 = $153;
 $154 = $108;
 $155 = (__Znwm($154)|0);
 $102 = $139;
 $103 = $137;
 $104 = 1;
 $156 = $102;
 $157 = $103;
 HEAP32[$156>>2] = $157;
 $158 = ((($156)) + 4|0);
 $159 = $104;
 HEAP32[$158>>2] = $159;
 $99 = $138;
 HEAP32[$100>>2] = $155;
 $101 = $139;
 $160 = $99;
 $161 = $101;
 $98 = $161;
 $162 = $98;
 $95 = $160;
 $96 = $100;
 $97 = $162;
 $163 = $95;
 $164 = $96;
 $94 = $164;
 $165 = $94;
 $88 = $163;
 $89 = $165;
 $166 = $88;
 $167 = $89;
 $87 = $167;
 $168 = $87;
 $169 = HEAP32[$168>>2]|0;
 HEAP32[$166>>2] = $169;
 $170 = ((($163)) + 4|0);
 $171 = $97;
 $90 = $171;
 $172 = $90;
 $92 = $170;
 $93 = $172;
 $173 = $92;
 $174 = $93;
 $91 = $174;
 $175 = $91;
 ;HEAP32[$173>>2]=HEAP32[$175>>2]|0;HEAP32[$173+4>>2]=HEAP32[$175+4>>2]|0;
 $86 = $138;
 $176 = $86;
 $85 = $176;
 $177 = $85;
 $84 = $177;
 $178 = $84;
 $179 = HEAP32[$178>>2]|0;
 $180 = ((($141)) + 4|0);
 $83 = $180;
 $181 = $83;
 $82 = $181;
 $182 = $82;
 $80 = $140;
 $81 = $137;
 $68 = $179;
 $69 = $182;
 $70 = $140;
 $183 = $68;
 $67 = $183;
 $184 = $67;
 HEAP32[$184>>2] = (3748);
 HEAP32[$183>>2] = (4340);
 $185 = ((($183)) + 4|0);
 $186 = $69;
 $19 = $186;
 $187 = $19;
 $17 = $187;
 $188 = $17;
 $11 = $18;
 $12 = $188;
 $189 = $11;
 $190 = $12;
 ;HEAP8[$7>>0]=HEAP8[$16>>0]|0;
 ;HEAP8[$8>>0]=HEAP8[$15>>0]|0;
 ;HEAP8[$9>>0]=HEAP8[$14>>0]|0;
 ;HEAP8[$10>>0]=HEAP8[$13>>0]|0;
 $5 = $189;
 $6 = $190;
 $191 = $5;
 $192 = $6;
 $4 = $192;
 $193 = $4;
 $2 = $191;
 $3 = $193;
 $194 = $2;
 $195 = $3;
 $1 = $195;
 $196 = $1;
 HEAP32[$194>>2] = $196;
 $197 = HEAP32[$18>>2]|0;
 HEAP32[$72>>2] = $197;
 $198 = $70;
 $20 = $198;
 $199 = $20;
 $40 = $199;
 $200 = $40;
 $38 = $200;
 $201 = $38;
 $32 = $39;
 $33 = $201;
 $202 = $32;
 $203 = $33;
 $31 = $203;
 $204 = $31;
 ;HEAP8[$27>>0]=HEAP8[$37>>0]|0;
 ;HEAP8[$28>>0]=HEAP8[$36>>0]|0;
 ;HEAP8[$29>>0]=HEAP8[$35>>0]|0;
 ;HEAP8[$30>>0]=HEAP8[$34>>0]|0;
 $25 = $202;
 $26 = $204;
 $205 = $25;
 $206 = $26;
 $24 = $206;
 $207 = $24;
 $22 = $205;
 $23 = $207;
 $208 = $22;
 $209 = $23;
 $21 = $209;
 $210 = $21;
 HEAP32[$208>>2] = $210;
 $211 = HEAP32[$39>>2]|0;
 HEAP32[$73>>2] = $211;
 ;HEAP8[$64>>0]=HEAP8[$73>>0]|0;HEAP8[$64+1>>0]=HEAP8[$73+1>>0]|0;HEAP8[$64+2>>0]=HEAP8[$73+2>>0]|0;HEAP8[$64+3>>0]=HEAP8[$73+3>>0]|0;
 ;HEAP8[$65>>0]=HEAP8[$72>>0]|0;HEAP8[$65+1>>0]=HEAP8[$72+1>>0]|0;HEAP8[$65+2>>0]=HEAP8[$72+2>>0]|0;HEAP8[$65+3>>0]=HEAP8[$72+3>>0]|0;
 ;HEAP8[$66>>0]=HEAP8[$71>>0]|0;
 $57 = $185;
 $212 = $57;
 $56 = $65;
 $213 = $56;
 ;HEAP32[$59>>2]=HEAP32[$213>>2]|0;
 ;HEAP8[$45>>0]=HEAP8[$60>>0]|0;
 ;HEAP8[$46>>0]=HEAP8[$59>>0]|0;HEAP8[$46+1>>0]=HEAP8[$59+1>>0]|0;HEAP8[$46+2>>0]=HEAP8[$59+2>>0]|0;HEAP8[$46+3>>0]=HEAP8[$59+3>>0]|0;
 ;HEAP8[$47>>0]=HEAP8[$58>>0]|0;
 $44 = $212;
 $214 = $44;
 $43 = $46;
 $215 = $43;
 $42 = $215;
 $216 = $42;
 $217 = HEAP32[$216>>2]|0;
 $41 = $217;
 $218 = $41;
 ;HEAP32[$214>>2]=HEAP32[$218>>2]|0;
 $48 = $64;
 $219 = $48;
 ;HEAP32[$62>>2]=HEAP32[$219>>2]|0;
 ;HEAP8[$53>>0]=HEAP8[$63>>0]|0;
 ;HEAP8[$54>>0]=HEAP8[$62>>0]|0;HEAP8[$54+1>>0]=HEAP8[$62+1>>0]|0;HEAP8[$54+2>>0]=HEAP8[$62+2>>0]|0;HEAP8[$54+3>>0]=HEAP8[$62+3>>0]|0;
 ;HEAP8[$55>>0]=HEAP8[$61>>0]|0;
 $52 = $212;
 $51 = $54;
 $220 = $51;
 $50 = $220;
 $221 = $50;
 $222 = HEAP32[$221>>2]|0;
 $49 = $222;
 $78 = $138;
 $223 = $78;
 $77 = $223;
 $224 = $77;
 $76 = $224;
 $225 = $76;
 $226 = HEAP32[$225>>2]|0;
 $79 = $226;
 $75 = $223;
 $227 = $75;
 $74 = $227;
 $228 = $74;
 HEAP32[$228>>2] = 0;
 $229 = $79;
 $131 = $138;
 $230 = $131;
 $128 = $230;
 $129 = 0;
 $231 = $128;
 $127 = $231;
 $232 = $127;
 $126 = $232;
 $233 = $126;
 $234 = HEAP32[$233>>2]|0;
 $130 = $234;
 $235 = $129;
 $116 = $231;
 $236 = $116;
 $115 = $236;
 $237 = $115;
 HEAP32[$237>>2] = $235;
 $238 = $130;
 $239 = ($238|0)!=(0|0);
 if (!($239)) {
  STACKTOP = sp;return ($229|0);
 }
 $114 = $231;
 $240 = $114;
 $241 = ((($240)) + 4|0);
 $113 = $241;
 $242 = $113;
 $243 = $130;
 $124 = $242;
 $125 = $243;
 $244 = $124;
 $245 = HEAP32[$244>>2]|0;
 $246 = $125;
 $247 = ((($244)) + 4|0);
 $248 = HEAP32[$247>>2]|0;
 $121 = $245;
 $122 = $246;
 $123 = $248;
 $249 = $121;
 $250 = $122;
 $251 = $123;
 $118 = $249;
 $119 = $250;
 $120 = $251;
 $252 = $119;
 $117 = $252;
 $253 = $117;
 __ZdlPv($253);
 STACKTOP = sp;return ($229|0);
}
function __ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EE7__cloneEPNS0_6__baseISA_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $10 = sp + 128|0;
 $11 = sp + 120|0;
 $12 = sp + 112|0;
 $13 = sp + 104|0;
 $16 = sp + 332|0;
 $17 = sp + 331|0;
 $18 = sp + 330|0;
 $19 = sp + 329|0;
 $21 = sp + 272|0;
 $29 = sp + 96|0;
 $30 = sp + 88|0;
 $31 = sp + 80|0;
 $32 = sp + 72|0;
 $35 = sp + 328|0;
 $36 = sp + 327|0;
 $37 = sp + 326|0;
 $38 = sp + 325|0;
 $40 = sp + 228|0;
 $46 = sp + 64|0;
 $47 = sp + 56|0;
 $48 = sp + 48|0;
 $54 = sp + 40|0;
 $55 = sp + 32|0;
 $56 = sp + 24|0;
 $59 = sp + 324|0;
 $60 = sp + 176|0;
 $61 = sp + 323|0;
 $62 = sp + 322|0;
 $63 = sp + 172|0;
 $64 = sp + 321|0;
 $65 = sp + 16|0;
 $66 = sp + 8|0;
 $67 = sp;
 $72 = sp + 320|0;
 $73 = sp + 152|0;
 $74 = sp + 148|0;
 $77 = $0;
 $78 = $1;
 $79 = $77;
 $80 = $78;
 $81 = ((($79)) + 4|0);
 $76 = $81;
 $82 = $76;
 $75 = $82;
 $83 = $75;
 $84 = ((($79)) + 4|0);
 $3 = $84;
 $85 = $3;
 $2 = $85;
 $86 = $2;
 $69 = $80;
 $70 = $83;
 $71 = $86;
 $87 = $69;
 $68 = $87;
 $88 = $68;
 HEAP32[$88>>2] = (3748);
 HEAP32[$87>>2] = (4340);
 $89 = ((($87)) + 4|0);
 $90 = $70;
 $22 = $90;
 $91 = $22;
 $20 = $91;
 $92 = $20;
 $14 = $21;
 $15 = $92;
 $93 = $14;
 $94 = $15;
 ;HEAP8[$10>>0]=HEAP8[$19>>0]|0;
 ;HEAP8[$11>>0]=HEAP8[$18>>0]|0;
 ;HEAP8[$12>>0]=HEAP8[$17>>0]|0;
 ;HEAP8[$13>>0]=HEAP8[$16>>0]|0;
 $8 = $93;
 $9 = $94;
 $95 = $8;
 $96 = $9;
 $7 = $96;
 $97 = $7;
 $5 = $95;
 $6 = $97;
 $98 = $5;
 $99 = $6;
 $4 = $99;
 $100 = $4;
 HEAP32[$98>>2] = $100;
 $101 = HEAP32[$21>>2]|0;
 HEAP32[$73>>2] = $101;
 $102 = $71;
 $41 = $102;
 $103 = $41;
 $39 = $103;
 $104 = $39;
 $33 = $40;
 $34 = $104;
 $105 = $33;
 $106 = $34;
 ;HEAP8[$29>>0]=HEAP8[$38>>0]|0;
 ;HEAP8[$30>>0]=HEAP8[$37>>0]|0;
 ;HEAP8[$31>>0]=HEAP8[$36>>0]|0;
 ;HEAP8[$32>>0]=HEAP8[$35>>0]|0;
 $27 = $105;
 $28 = $106;
 $107 = $27;
 $108 = $28;
 $26 = $108;
 $109 = $26;
 $24 = $107;
 $25 = $109;
 $110 = $24;
 $111 = $25;
 $23 = $111;
 $112 = $23;
 HEAP32[$110>>2] = $112;
 $113 = HEAP32[$40>>2]|0;
 HEAP32[$74>>2] = $113;
 ;HEAP8[$65>>0]=HEAP8[$74>>0]|0;HEAP8[$65+1>>0]=HEAP8[$74+1>>0]|0;HEAP8[$65+2>>0]=HEAP8[$74+2>>0]|0;HEAP8[$65+3>>0]=HEAP8[$74+3>>0]|0;
 ;HEAP8[$66>>0]=HEAP8[$73>>0]|0;HEAP8[$66+1>>0]=HEAP8[$73+1>>0]|0;HEAP8[$66+2>>0]=HEAP8[$73+2>>0]|0;HEAP8[$66+3>>0]=HEAP8[$73+3>>0]|0;
 ;HEAP8[$67>>0]=HEAP8[$72>>0]|0;
 $58 = $89;
 $114 = $58;
 $57 = $66;
 $115 = $57;
 ;HEAP32[$60>>2]=HEAP32[$115>>2]|0;
 ;HEAP8[$46>>0]=HEAP8[$61>>0]|0;
 ;HEAP8[$47>>0]=HEAP8[$60>>0]|0;HEAP8[$47+1>>0]=HEAP8[$60+1>>0]|0;HEAP8[$47+2>>0]=HEAP8[$60+2>>0]|0;HEAP8[$47+3>>0]=HEAP8[$60+3>>0]|0;
 ;HEAP8[$48>>0]=HEAP8[$59>>0]|0;
 $45 = $114;
 $116 = $45;
 $44 = $47;
 $117 = $44;
 $43 = $117;
 $118 = $43;
 $119 = HEAP32[$118>>2]|0;
 $42 = $119;
 $120 = $42;
 ;HEAP32[$116>>2]=HEAP32[$120>>2]|0;
 $49 = $65;
 $121 = $49;
 ;HEAP32[$63>>2]=HEAP32[$121>>2]|0;
 ;HEAP8[$54>>0]=HEAP8[$64>>0]|0;
 ;HEAP8[$55>>0]=HEAP8[$63>>0]|0;HEAP8[$55+1>>0]=HEAP8[$63+1>>0]|0;HEAP8[$55+2>>0]=HEAP8[$63+2>>0]|0;HEAP8[$55+3>>0]=HEAP8[$63+3>>0]|0;
 ;HEAP8[$56>>0]=HEAP8[$62>>0]|0;
 $53 = $114;
 $52 = $55;
 $122 = $52;
 $51 = $122;
 $123 = $51;
 $124 = HEAP32[$123>>2]|0;
 $50 = $124;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EE7destroyEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EE18destroy_deallocateEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $10 = sp + 36|0;
 $9 = $0;
 $11 = $9;
 $12 = ((($11)) + 4|0);
 $8 = $12;
 $13 = $8;
 $7 = $13;
 $14 = $7;
 $1 = $10;
 $2 = $14;
 $4 = $10;
 $5 = $11;
 $6 = 1;
 $15 = $5;
 $3 = $15;
 $16 = $3;
 __ZdlPv($16);
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EEclES6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $5;
 $8 = ((($7)) + 4|0);
 $4 = $8;
 $9 = $4;
 $3 = $9;
 $10 = $3;
 $11 = $6;
 $2 = $11;
 $12 = $2;
 $13 = (__ZNSt3__228__invoke_void_return_wrapperIbE6__callIJRZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS7_E1_S7_EEEbDpOT_($10,$12)|0);
 STACKTOP = sp;return ($13|0);
}
function __ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EE6targetERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $7;
 $10 = $8;
 $4 = $10;
 $5 = 2896;
 $11 = $4;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $5;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($13|0)==($16|0);
 if ($17) {
  $18 = ((($9)) + 4|0);
  $3 = $18;
  $19 = $3;
  $2 = $19;
  $20 = $2;
  $6 = $20;
  $21 = $6;
  STACKTOP = sp;return ($21|0);
 } else {
  $6 = 0;
  $21 = $6;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function __ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EE11target_typeEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (2896|0);
}
function __ZNSt3__228__invoke_void_return_wrapperIbE6__callIJRZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS7_E1_S7_EEEbDpOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = $0;
 $9 = $1;
 $10 = $8;
 $7 = $10;
 $11 = $7;
 $12 = $9;
 $2 = $12;
 $13 = $2;
 $5 = $11;
 $6 = $13;
 $14 = $5;
 $4 = $14;
 $15 = $4;
 $16 = $6;
 $3 = $16;
 $17 = $3;
 $18 = (__ZZN16GUIButtonClusterILm7EE7OnEventERK5EventENKUlS3_E1_clES3_($15,$17)|0);
 STACKTOP = sp;return ($18|0);
}
function __ZZN16GUIButtonClusterILm7EE7OnEventERK5EventENKUlS3_E1_clES3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0;
 var $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0;
 var $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0;
 var $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = $0;
 $3 = $1;
 $11 = $2;
 $12 = $3;
 $4 = $12;
 $13 = HEAP32[$11>>2]|0;
 $14 = ((($13)) + 12|0);
 $5 = $14;
 $15 = (__ZN6Engine11GetInstanceEv()|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16&65535;
 $18 = (+($17|0));
 $19 = $18 * 0.5;
 $20 = (~~(($19)));
 $6 = $20;
 $21 = (__ZN6Engine11GetInstanceEv()|0);
 $22 = ((($21)) + 2|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = $23&65535;
 $25 = (+($24|0));
 $26 = $25 * 0.5;
 $27 = (~~(($26)));
 $7 = $27;
 $28 = $4;
 $29 = ((($28)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $6;
 $32 = (($30) - ($31))|0;
 $8 = $32;
 $33 = $4;
 $34 = ((($33)) + 12|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (0 - ($35))|0;
 $37 = $7;
 $38 = (($36) + ($37))|0;
 $9 = $38;
 $39 = $8;
 $40 = (+($39|0));
 $41 = $5;
 $42 = +HEAPF32[$41>>2];
 $43 = $42;
 $44 = $5;
 $45 = ((($44)) + 8|0);
 $46 = +HEAPF32[$45>>2];
 $47 = $46;
 $48 = $47 * 0.5;
 $49 = $43 - $48;
 $50 = $40 > $49;
 if ($50) {
  $51 = $8;
  $52 = (+($51|0));
  $53 = $5;
  $54 = +HEAPF32[$53>>2];
  $55 = $54;
  $56 = $5;
  $57 = ((($56)) + 8|0);
  $58 = +HEAPF32[$57>>2];
  $59 = $58;
  $60 = $59 * 0.5;
  $61 = $55 + $60;
  $62 = $52 < $61;
  if ($62) {
   $63 = $9;
   $64 = (+($63|0));
   $65 = $5;
   $66 = ((($65)) + 4|0);
   $67 = +HEAPF32[$66>>2];
   $68 = $67;
   $69 = $5;
   $70 = ((($69)) + 12|0);
   $71 = +HEAPF32[$70>>2];
   $72 = $71;
   $73 = $72 * 0.5;
   $74 = $68 - $73;
   $75 = $64 > $74;
   if ($75) {
    $76 = $9;
    $77 = (+($76|0));
    $78 = $5;
    $79 = ((($78)) + 4|0);
    $80 = +HEAPF32[$79>>2];
    $81 = $80;
    $82 = $5;
    $83 = ((($82)) + 12|0);
    $84 = +HEAPF32[$83>>2];
    $85 = $84;
    $86 = $85 * 0.5;
    $87 = $81 + $86;
    $88 = $77 < $87;
    $90 = $88;
   } else {
    $90 = 0;
   }
  } else {
   $90 = 0;
  }
 } else {
  $90 = 0;
 }
 $89 = $90&1;
 $10 = $89;
 $91 = $10;
 $92 = $91&1;
 $93 = $92&1;
 $94 = $5;
 $95 = ((($94)) + 16|0);
 $96 = HEAP8[$95>>0]|0;
 $97 = $93 & 1;
 $98 = ($97 << 1)&255;
 $99 = $96 & -3;
 $100 = $99 | $98;
 HEAP8[$95>>0] = $100;
 $101 = $5;
 $102 = ((($101)) + 16|0);
 $103 = HEAP8[$102>>0]|0;
 $104 = ($103&255) >>> 2;
 $105 = $104 & 1;
 $106 = $105&255;
 $107 = $10;
 $108 = $107&1;
 $109 = $108&1;
 $110 = Math_imul($106, $109)|0;
 $111 = $110&255;
 $112 = $5;
 $113 = ((($112)) + 16|0);
 $114 = HEAP8[$113>>0]|0;
 $115 = $111 & 1;
 $116 = ($115 << 2)&255;
 $117 = $114 & -5;
 $118 = $117 | $116;
 HEAP8[$113>>0] = $118;
 $119 = $10;
 $120 = $119&1;
 if (!($120)) {
  STACKTOP = sp;return 0;
 }
 $121 = HEAP32[$11>>2]|0;
 $122 = HEAP32[$121>>2]|0;
 FUNCTION_TABLE_v[$122 & 511]();
 STACKTOP = sp;return 0;
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $1 = $3;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EED2Ev($2);
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EE7__cloneEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(608|0);
 $7 = sp + 128|0;
 $8 = sp + 120|0;
 $9 = sp + 112|0;
 $10 = sp + 104|0;
 $13 = sp + 594|0;
 $14 = sp + 593|0;
 $15 = sp + 592|0;
 $16 = sp + 591|0;
 $18 = sp + 540|0;
 $27 = sp + 96|0;
 $28 = sp + 88|0;
 $29 = sp + 80|0;
 $30 = sp + 72|0;
 $34 = sp + 590|0;
 $35 = sp + 589|0;
 $36 = sp + 588|0;
 $37 = sp + 587|0;
 $39 = sp + 488|0;
 $45 = sp + 64|0;
 $46 = sp + 56|0;
 $47 = sp + 48|0;
 $53 = sp + 40|0;
 $54 = sp + 32|0;
 $55 = sp + 24|0;
 $58 = sp + 586|0;
 $59 = sp + 436|0;
 $60 = sp + 585|0;
 $61 = sp + 584|0;
 $62 = sp + 432|0;
 $63 = sp + 583|0;
 $64 = sp + 16|0;
 $65 = sp + 8|0;
 $66 = sp;
 $71 = sp + 582|0;
 $72 = sp + 412|0;
 $73 = sp + 408|0;
 $100 = sp + 300|0;
 $137 = sp + 581|0;
 $138 = sp + 144|0;
 $139 = sp + 136|0;
 $140 = sp + 580|0;
 $136 = $0;
 $141 = $136;
 $142 = ((($141)) + 4|0);
 $135 = $142;
 $143 = $135;
 $134 = $143;
 $144 = $134;
 $132 = $137;
 $133 = $144;
 $110 = $137;
 $111 = 1;
 $112 = 0;
 $145 = $110;
 $146 = $111;
 $109 = $145;
 $147 = ($146>>>0)>(536870911);
 if ($147) {
  $107 = 9129;
  $148 = (___cxa_allocate_exception(8)|0);
  $149 = $107;
  $105 = $148;
  $106 = $149;
  $150 = $105;
  $151 = $106;
  __ZNSt11logic_errorC2EPKc($150,$151);
  HEAP32[$150>>2] = (5584);
  ___cxa_throw(($148|0),(3656|0),(228|0));
  // unreachable;
 }
 $152 = $111;
 $153 = $152<<3;
 $108 = $153;
 $154 = $108;
 $155 = (__Znwm($154)|0);
 $102 = $139;
 $103 = $137;
 $104 = 1;
 $156 = $102;
 $157 = $103;
 HEAP32[$156>>2] = $157;
 $158 = ((($156)) + 4|0);
 $159 = $104;
 HEAP32[$158>>2] = $159;
 $99 = $138;
 HEAP32[$100>>2] = $155;
 $101 = $139;
 $160 = $99;
 $161 = $101;
 $98 = $161;
 $162 = $98;
 $95 = $160;
 $96 = $100;
 $97 = $162;
 $163 = $95;
 $164 = $96;
 $94 = $164;
 $165 = $94;
 $88 = $163;
 $89 = $165;
 $166 = $88;
 $167 = $89;
 $87 = $167;
 $168 = $87;
 $169 = HEAP32[$168>>2]|0;
 HEAP32[$166>>2] = $169;
 $170 = ((($163)) + 4|0);
 $171 = $97;
 $90 = $171;
 $172 = $90;
 $92 = $170;
 $93 = $172;
 $173 = $92;
 $174 = $93;
 $91 = $174;
 $175 = $91;
 ;HEAP32[$173>>2]=HEAP32[$175>>2]|0;HEAP32[$173+4>>2]=HEAP32[$175+4>>2]|0;
 $86 = $138;
 $176 = $86;
 $85 = $176;
 $177 = $85;
 $84 = $177;
 $178 = $84;
 $179 = HEAP32[$178>>2]|0;
 $180 = ((($141)) + 4|0);
 $83 = $180;
 $181 = $83;
 $82 = $181;
 $182 = $82;
 $80 = $140;
 $81 = $137;
 $68 = $179;
 $69 = $182;
 $70 = $140;
 $183 = $68;
 $67 = $183;
 $184 = $67;
 HEAP32[$184>>2] = (3748);
 HEAP32[$183>>2] = (4384);
 $185 = ((($183)) + 4|0);
 $186 = $69;
 $19 = $186;
 $187 = $19;
 $17 = $187;
 $188 = $17;
 $11 = $18;
 $12 = $188;
 $189 = $11;
 $190 = $12;
 ;HEAP8[$7>>0]=HEAP8[$16>>0]|0;
 ;HEAP8[$8>>0]=HEAP8[$15>>0]|0;
 ;HEAP8[$9>>0]=HEAP8[$14>>0]|0;
 ;HEAP8[$10>>0]=HEAP8[$13>>0]|0;
 $5 = $189;
 $6 = $190;
 $191 = $5;
 $192 = $6;
 $4 = $192;
 $193 = $4;
 $2 = $191;
 $3 = $193;
 $194 = $2;
 $195 = $3;
 $1 = $195;
 $196 = $1;
 HEAP32[$194>>2] = $196;
 $197 = HEAP32[$18>>2]|0;
 HEAP32[$72>>2] = $197;
 $198 = $70;
 $20 = $198;
 $199 = $20;
 $40 = $199;
 $200 = $40;
 $38 = $200;
 $201 = $38;
 $32 = $39;
 $33 = $201;
 $202 = $32;
 $203 = $33;
 $31 = $203;
 $204 = $31;
 ;HEAP8[$27>>0]=HEAP8[$37>>0]|0;
 ;HEAP8[$28>>0]=HEAP8[$36>>0]|0;
 ;HEAP8[$29>>0]=HEAP8[$35>>0]|0;
 ;HEAP8[$30>>0]=HEAP8[$34>>0]|0;
 $25 = $202;
 $26 = $204;
 $205 = $25;
 $206 = $26;
 $24 = $206;
 $207 = $24;
 $22 = $205;
 $23 = $207;
 $208 = $22;
 $209 = $23;
 $21 = $209;
 $210 = $21;
 HEAP32[$208>>2] = $210;
 $211 = HEAP32[$39>>2]|0;
 HEAP32[$73>>2] = $211;
 ;HEAP8[$64>>0]=HEAP8[$73>>0]|0;HEAP8[$64+1>>0]=HEAP8[$73+1>>0]|0;HEAP8[$64+2>>0]=HEAP8[$73+2>>0]|0;HEAP8[$64+3>>0]=HEAP8[$73+3>>0]|0;
 ;HEAP8[$65>>0]=HEAP8[$72>>0]|0;HEAP8[$65+1>>0]=HEAP8[$72+1>>0]|0;HEAP8[$65+2>>0]=HEAP8[$72+2>>0]|0;HEAP8[$65+3>>0]=HEAP8[$72+3>>0]|0;
 ;HEAP8[$66>>0]=HEAP8[$71>>0]|0;
 $57 = $185;
 $212 = $57;
 $56 = $65;
 $213 = $56;
 ;HEAP32[$59>>2]=HEAP32[$213>>2]|0;
 ;HEAP8[$45>>0]=HEAP8[$60>>0]|0;
 ;HEAP8[$46>>0]=HEAP8[$59>>0]|0;HEAP8[$46+1>>0]=HEAP8[$59+1>>0]|0;HEAP8[$46+2>>0]=HEAP8[$59+2>>0]|0;HEAP8[$46+3>>0]=HEAP8[$59+3>>0]|0;
 ;HEAP8[$47>>0]=HEAP8[$58>>0]|0;
 $44 = $212;
 $43 = $46;
 $214 = $43;
 $42 = $214;
 $215 = $42;
 $216 = HEAP32[$215>>2]|0;
 $41 = $216;
 $48 = $64;
 $217 = $48;
 ;HEAP32[$62>>2]=HEAP32[$217>>2]|0;
 ;HEAP8[$53>>0]=HEAP8[$63>>0]|0;
 ;HEAP8[$54>>0]=HEAP8[$62>>0]|0;HEAP8[$54+1>>0]=HEAP8[$62+1>>0]|0;HEAP8[$54+2>>0]=HEAP8[$62+2>>0]|0;HEAP8[$54+3>>0]=HEAP8[$62+3>>0]|0;
 ;HEAP8[$55>>0]=HEAP8[$61>>0]|0;
 $52 = $212;
 $51 = $54;
 $218 = $51;
 $50 = $218;
 $219 = $50;
 $220 = HEAP32[$219>>2]|0;
 $49 = $220;
 $78 = $138;
 $221 = $78;
 $77 = $221;
 $222 = $77;
 $76 = $222;
 $223 = $76;
 $224 = HEAP32[$223>>2]|0;
 $79 = $224;
 $75 = $221;
 $225 = $75;
 $74 = $225;
 $226 = $74;
 HEAP32[$226>>2] = 0;
 $227 = $79;
 $131 = $138;
 $228 = $131;
 $128 = $228;
 $129 = 0;
 $229 = $128;
 $127 = $229;
 $230 = $127;
 $126 = $230;
 $231 = $126;
 $232 = HEAP32[$231>>2]|0;
 $130 = $232;
 $233 = $129;
 $116 = $229;
 $234 = $116;
 $115 = $234;
 $235 = $115;
 HEAP32[$235>>2] = $233;
 $236 = $130;
 $237 = ($236|0)!=(0|0);
 if (!($237)) {
  STACKTOP = sp;return ($227|0);
 }
 $114 = $229;
 $238 = $114;
 $239 = ((($238)) + 4|0);
 $113 = $239;
 $240 = $113;
 $241 = $130;
 $124 = $240;
 $125 = $241;
 $242 = $124;
 $243 = HEAP32[$242>>2]|0;
 $244 = $125;
 $245 = ((($242)) + 4|0);
 $246 = HEAP32[$245>>2]|0;
 $121 = $243;
 $122 = $244;
 $123 = $246;
 $247 = $121;
 $248 = $122;
 $249 = $123;
 $118 = $247;
 $119 = $248;
 $120 = $249;
 $250 = $119;
 $117 = $250;
 $251 = $117;
 __ZdlPv($251);
 STACKTOP = sp;return ($227|0);
}
function __ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EE7__cloneEPNS0_6__baseISA_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $10 = sp + 128|0;
 $11 = sp + 120|0;
 $12 = sp + 112|0;
 $13 = sp + 104|0;
 $16 = sp + 332|0;
 $17 = sp + 331|0;
 $18 = sp + 330|0;
 $19 = sp + 329|0;
 $21 = sp + 272|0;
 $29 = sp + 96|0;
 $30 = sp + 88|0;
 $31 = sp + 80|0;
 $32 = sp + 72|0;
 $35 = sp + 328|0;
 $36 = sp + 327|0;
 $37 = sp + 326|0;
 $38 = sp + 325|0;
 $40 = sp + 228|0;
 $46 = sp + 64|0;
 $47 = sp + 56|0;
 $48 = sp + 48|0;
 $54 = sp + 40|0;
 $55 = sp + 32|0;
 $56 = sp + 24|0;
 $59 = sp + 324|0;
 $60 = sp + 176|0;
 $61 = sp + 323|0;
 $62 = sp + 322|0;
 $63 = sp + 172|0;
 $64 = sp + 321|0;
 $65 = sp + 16|0;
 $66 = sp + 8|0;
 $67 = sp;
 $72 = sp + 320|0;
 $73 = sp + 152|0;
 $74 = sp + 148|0;
 $77 = $0;
 $78 = $1;
 $79 = $77;
 $80 = $78;
 $81 = ((($79)) + 4|0);
 $76 = $81;
 $82 = $76;
 $75 = $82;
 $83 = $75;
 $84 = ((($79)) + 4|0);
 $3 = $84;
 $85 = $3;
 $2 = $85;
 $86 = $2;
 $69 = $80;
 $70 = $83;
 $71 = $86;
 $87 = $69;
 $68 = $87;
 $88 = $68;
 HEAP32[$88>>2] = (3748);
 HEAP32[$87>>2] = (4384);
 $89 = ((($87)) + 4|0);
 $90 = $70;
 $22 = $90;
 $91 = $22;
 $20 = $91;
 $92 = $20;
 $14 = $21;
 $15 = $92;
 $93 = $14;
 $94 = $15;
 ;HEAP8[$10>>0]=HEAP8[$19>>0]|0;
 ;HEAP8[$11>>0]=HEAP8[$18>>0]|0;
 ;HEAP8[$12>>0]=HEAP8[$17>>0]|0;
 ;HEAP8[$13>>0]=HEAP8[$16>>0]|0;
 $8 = $93;
 $9 = $94;
 $95 = $8;
 $96 = $9;
 $7 = $96;
 $97 = $7;
 $5 = $95;
 $6 = $97;
 $98 = $5;
 $99 = $6;
 $4 = $99;
 $100 = $4;
 HEAP32[$98>>2] = $100;
 $101 = HEAP32[$21>>2]|0;
 HEAP32[$73>>2] = $101;
 $102 = $71;
 $41 = $102;
 $103 = $41;
 $39 = $103;
 $104 = $39;
 $33 = $40;
 $34 = $104;
 $105 = $33;
 $106 = $34;
 ;HEAP8[$29>>0]=HEAP8[$38>>0]|0;
 ;HEAP8[$30>>0]=HEAP8[$37>>0]|0;
 ;HEAP8[$31>>0]=HEAP8[$36>>0]|0;
 ;HEAP8[$32>>0]=HEAP8[$35>>0]|0;
 $27 = $105;
 $28 = $106;
 $107 = $27;
 $108 = $28;
 $26 = $108;
 $109 = $26;
 $24 = $107;
 $25 = $109;
 $110 = $24;
 $111 = $25;
 $23 = $111;
 $112 = $23;
 HEAP32[$110>>2] = $112;
 $113 = HEAP32[$40>>2]|0;
 HEAP32[$74>>2] = $113;
 ;HEAP8[$65>>0]=HEAP8[$74>>0]|0;HEAP8[$65+1>>0]=HEAP8[$74+1>>0]|0;HEAP8[$65+2>>0]=HEAP8[$74+2>>0]|0;HEAP8[$65+3>>0]=HEAP8[$74+3>>0]|0;
 ;HEAP8[$66>>0]=HEAP8[$73>>0]|0;HEAP8[$66+1>>0]=HEAP8[$73+1>>0]|0;HEAP8[$66+2>>0]=HEAP8[$73+2>>0]|0;HEAP8[$66+3>>0]=HEAP8[$73+3>>0]|0;
 ;HEAP8[$67>>0]=HEAP8[$72>>0]|0;
 $58 = $89;
 $114 = $58;
 $57 = $66;
 $115 = $57;
 ;HEAP32[$60>>2]=HEAP32[$115>>2]|0;
 ;HEAP8[$46>>0]=HEAP8[$61>>0]|0;
 ;HEAP8[$47>>0]=HEAP8[$60>>0]|0;HEAP8[$47+1>>0]=HEAP8[$60+1>>0]|0;HEAP8[$47+2>>0]=HEAP8[$60+2>>0]|0;HEAP8[$47+3>>0]=HEAP8[$60+3>>0]|0;
 ;HEAP8[$48>>0]=HEAP8[$59>>0]|0;
 $45 = $114;
 $44 = $47;
 $116 = $44;
 $43 = $116;
 $117 = $43;
 $118 = HEAP32[$117>>2]|0;
 $42 = $118;
 $49 = $65;
 $119 = $49;
 ;HEAP32[$63>>2]=HEAP32[$119>>2]|0;
 ;HEAP8[$54>>0]=HEAP8[$64>>0]|0;
 ;HEAP8[$55>>0]=HEAP8[$63>>0]|0;HEAP8[$55+1>>0]=HEAP8[$63+1>>0]|0;HEAP8[$55+2>>0]=HEAP8[$63+2>>0]|0;HEAP8[$55+3>>0]=HEAP8[$63+3>>0]|0;
 ;HEAP8[$56>>0]=HEAP8[$62>>0]|0;
 $53 = $114;
 $52 = $55;
 $120 = $52;
 $51 = $120;
 $121 = $51;
 $122 = HEAP32[$121>>2]|0;
 $50 = $122;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EE7destroyEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EE18destroy_deallocateEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $10 = sp + 36|0;
 $9 = $0;
 $11 = $9;
 $12 = ((($11)) + 4|0);
 $8 = $12;
 $13 = $8;
 $7 = $13;
 $14 = $7;
 $1 = $10;
 $2 = $14;
 $4 = $10;
 $5 = $11;
 $6 = 1;
 $15 = $5;
 $3 = $15;
 $16 = $3;
 __ZdlPv($16);
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EEclES6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $5;
 $8 = ((($7)) + 4|0);
 $4 = $8;
 $9 = $4;
 $3 = $9;
 $10 = $3;
 $11 = $6;
 $2 = $11;
 $12 = $2;
 $13 = (__ZNSt3__228__invoke_void_return_wrapperIbE6__callIJRZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS7_E0_S7_EEEbDpOT_($10,$12)|0);
 STACKTOP = sp;return ($13|0);
}
function __ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EE6targetERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $7;
 $10 = $8;
 $4 = $10;
 $5 = 2920;
 $11 = $4;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $5;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($13|0)==($16|0);
 if ($17) {
  $18 = ((($9)) + 4|0);
  $3 = $18;
  $19 = $3;
  $2 = $19;
  $20 = $2;
  $6 = $20;
  $21 = $6;
  STACKTOP = sp;return ($21|0);
 } else {
  $6 = 0;
  $21 = $6;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function __ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EE11target_typeEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (2920|0);
}
function __ZNSt3__228__invoke_void_return_wrapperIbE6__callIJRZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS7_E0_S7_EEEbDpOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = $0;
 $9 = $1;
 $10 = $8;
 $7 = $10;
 $11 = $7;
 $12 = $9;
 $2 = $12;
 $13 = $2;
 $5 = $11;
 $6 = $13;
 $14 = $5;
 $4 = $14;
 $15 = $4;
 $16 = $6;
 $3 = $16;
 $17 = $3;
 $18 = (__ZZN16GUIButtonClusterILm7EE7OnEventERK5EventENKUlS3_E0_clES3_($15,$17)|0);
 STACKTOP = sp;return ($18|0);
}
function __ZZN16GUIButtonClusterILm7EE7OnEventERK5EventENKUlS3_E0_clES3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 STACKTOP = sp;return 0;
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $1 = $3;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EED2Ev($2);
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EE7__cloneEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(608|0);
 $7 = sp + 128|0;
 $8 = sp + 120|0;
 $9 = sp + 112|0;
 $10 = sp + 104|0;
 $13 = sp + 594|0;
 $14 = sp + 593|0;
 $15 = sp + 592|0;
 $16 = sp + 591|0;
 $18 = sp + 540|0;
 $27 = sp + 96|0;
 $28 = sp + 88|0;
 $29 = sp + 80|0;
 $30 = sp + 72|0;
 $34 = sp + 590|0;
 $35 = sp + 589|0;
 $36 = sp + 588|0;
 $37 = sp + 587|0;
 $39 = sp + 488|0;
 $45 = sp + 64|0;
 $46 = sp + 56|0;
 $47 = sp + 48|0;
 $53 = sp + 40|0;
 $54 = sp + 32|0;
 $55 = sp + 24|0;
 $58 = sp + 586|0;
 $59 = sp + 436|0;
 $60 = sp + 585|0;
 $61 = sp + 584|0;
 $62 = sp + 432|0;
 $63 = sp + 583|0;
 $64 = sp + 16|0;
 $65 = sp + 8|0;
 $66 = sp;
 $71 = sp + 582|0;
 $72 = sp + 412|0;
 $73 = sp + 408|0;
 $100 = sp + 300|0;
 $137 = sp + 581|0;
 $138 = sp + 144|0;
 $139 = sp + 136|0;
 $140 = sp + 580|0;
 $136 = $0;
 $141 = $136;
 $142 = ((($141)) + 4|0);
 $135 = $142;
 $143 = $135;
 $134 = $143;
 $144 = $134;
 $132 = $137;
 $133 = $144;
 $110 = $137;
 $111 = 1;
 $112 = 0;
 $145 = $110;
 $146 = $111;
 $109 = $145;
 $147 = ($146>>>0)>(536870911);
 if ($147) {
  $107 = 9129;
  $148 = (___cxa_allocate_exception(8)|0);
  $149 = $107;
  $105 = $148;
  $106 = $149;
  $150 = $105;
  $151 = $106;
  __ZNSt11logic_errorC2EPKc($150,$151);
  HEAP32[$150>>2] = (5584);
  ___cxa_throw(($148|0),(3656|0),(228|0));
  // unreachable;
 }
 $152 = $111;
 $153 = $152<<3;
 $108 = $153;
 $154 = $108;
 $155 = (__Znwm($154)|0);
 $102 = $139;
 $103 = $137;
 $104 = 1;
 $156 = $102;
 $157 = $103;
 HEAP32[$156>>2] = $157;
 $158 = ((($156)) + 4|0);
 $159 = $104;
 HEAP32[$158>>2] = $159;
 $99 = $138;
 HEAP32[$100>>2] = $155;
 $101 = $139;
 $160 = $99;
 $161 = $101;
 $98 = $161;
 $162 = $98;
 $95 = $160;
 $96 = $100;
 $97 = $162;
 $163 = $95;
 $164 = $96;
 $94 = $164;
 $165 = $94;
 $88 = $163;
 $89 = $165;
 $166 = $88;
 $167 = $89;
 $87 = $167;
 $168 = $87;
 $169 = HEAP32[$168>>2]|0;
 HEAP32[$166>>2] = $169;
 $170 = ((($163)) + 4|0);
 $171 = $97;
 $90 = $171;
 $172 = $90;
 $92 = $170;
 $93 = $172;
 $173 = $92;
 $174 = $93;
 $91 = $174;
 $175 = $91;
 ;HEAP32[$173>>2]=HEAP32[$175>>2]|0;HEAP32[$173+4>>2]=HEAP32[$175+4>>2]|0;
 $86 = $138;
 $176 = $86;
 $85 = $176;
 $177 = $85;
 $84 = $177;
 $178 = $84;
 $179 = HEAP32[$178>>2]|0;
 $180 = ((($141)) + 4|0);
 $83 = $180;
 $181 = $83;
 $82 = $181;
 $182 = $82;
 $80 = $140;
 $81 = $137;
 $68 = $179;
 $69 = $182;
 $70 = $140;
 $183 = $68;
 $67 = $183;
 $184 = $67;
 HEAP32[$184>>2] = (3748);
 HEAP32[$183>>2] = (4428);
 $185 = ((($183)) + 4|0);
 $186 = $69;
 $19 = $186;
 $187 = $19;
 $17 = $187;
 $188 = $17;
 $11 = $18;
 $12 = $188;
 $189 = $11;
 $190 = $12;
 ;HEAP8[$7>>0]=HEAP8[$16>>0]|0;
 ;HEAP8[$8>>0]=HEAP8[$15>>0]|0;
 ;HEAP8[$9>>0]=HEAP8[$14>>0]|0;
 ;HEAP8[$10>>0]=HEAP8[$13>>0]|0;
 $5 = $189;
 $6 = $190;
 $191 = $5;
 $192 = $6;
 $4 = $192;
 $193 = $4;
 $2 = $191;
 $3 = $193;
 $194 = $2;
 $195 = $3;
 $1 = $195;
 $196 = $1;
 HEAP32[$194>>2] = $196;
 $197 = HEAP32[$18>>2]|0;
 HEAP32[$72>>2] = $197;
 $198 = $70;
 $20 = $198;
 $199 = $20;
 $40 = $199;
 $200 = $40;
 $38 = $200;
 $201 = $38;
 $32 = $39;
 $33 = $201;
 $202 = $32;
 $203 = $33;
 $31 = $203;
 $204 = $31;
 ;HEAP8[$27>>0]=HEAP8[$37>>0]|0;
 ;HEAP8[$28>>0]=HEAP8[$36>>0]|0;
 ;HEAP8[$29>>0]=HEAP8[$35>>0]|0;
 ;HEAP8[$30>>0]=HEAP8[$34>>0]|0;
 $25 = $202;
 $26 = $204;
 $205 = $25;
 $206 = $26;
 $24 = $206;
 $207 = $24;
 $22 = $205;
 $23 = $207;
 $208 = $22;
 $209 = $23;
 $21 = $209;
 $210 = $21;
 HEAP32[$208>>2] = $210;
 $211 = HEAP32[$39>>2]|0;
 HEAP32[$73>>2] = $211;
 ;HEAP8[$64>>0]=HEAP8[$73>>0]|0;HEAP8[$64+1>>0]=HEAP8[$73+1>>0]|0;HEAP8[$64+2>>0]=HEAP8[$73+2>>0]|0;HEAP8[$64+3>>0]=HEAP8[$73+3>>0]|0;
 ;HEAP8[$65>>0]=HEAP8[$72>>0]|0;HEAP8[$65+1>>0]=HEAP8[$72+1>>0]|0;HEAP8[$65+2>>0]=HEAP8[$72+2>>0]|0;HEAP8[$65+3>>0]=HEAP8[$72+3>>0]|0;
 ;HEAP8[$66>>0]=HEAP8[$71>>0]|0;
 $57 = $185;
 $212 = $57;
 $56 = $65;
 $213 = $56;
 ;HEAP32[$59>>2]=HEAP32[$213>>2]|0;
 ;HEAP8[$45>>0]=HEAP8[$60>>0]|0;
 ;HEAP8[$46>>0]=HEAP8[$59>>0]|0;HEAP8[$46+1>>0]=HEAP8[$59+1>>0]|0;HEAP8[$46+2>>0]=HEAP8[$59+2>>0]|0;HEAP8[$46+3>>0]=HEAP8[$59+3>>0]|0;
 ;HEAP8[$47>>0]=HEAP8[$58>>0]|0;
 $44 = $212;
 $214 = $44;
 $43 = $46;
 $215 = $43;
 $42 = $215;
 $216 = $42;
 $217 = HEAP32[$216>>2]|0;
 $41 = $217;
 $218 = $41;
 ;HEAP32[$214>>2]=HEAP32[$218>>2]|0;
 $48 = $64;
 $219 = $48;
 ;HEAP32[$62>>2]=HEAP32[$219>>2]|0;
 ;HEAP8[$53>>0]=HEAP8[$63>>0]|0;
 ;HEAP8[$54>>0]=HEAP8[$62>>0]|0;HEAP8[$54+1>>0]=HEAP8[$62+1>>0]|0;HEAP8[$54+2>>0]=HEAP8[$62+2>>0]|0;HEAP8[$54+3>>0]=HEAP8[$62+3>>0]|0;
 ;HEAP8[$55>>0]=HEAP8[$61>>0]|0;
 $52 = $212;
 $51 = $54;
 $220 = $51;
 $50 = $220;
 $221 = $50;
 $222 = HEAP32[$221>>2]|0;
 $49 = $222;
 $78 = $138;
 $223 = $78;
 $77 = $223;
 $224 = $77;
 $76 = $224;
 $225 = $76;
 $226 = HEAP32[$225>>2]|0;
 $79 = $226;
 $75 = $223;
 $227 = $75;
 $74 = $227;
 $228 = $74;
 HEAP32[$228>>2] = 0;
 $229 = $79;
 $131 = $138;
 $230 = $131;
 $128 = $230;
 $129 = 0;
 $231 = $128;
 $127 = $231;
 $232 = $127;
 $126 = $232;
 $233 = $126;
 $234 = HEAP32[$233>>2]|0;
 $130 = $234;
 $235 = $129;
 $116 = $231;
 $236 = $116;
 $115 = $236;
 $237 = $115;
 HEAP32[$237>>2] = $235;
 $238 = $130;
 $239 = ($238|0)!=(0|0);
 if (!($239)) {
  STACKTOP = sp;return ($229|0);
 }
 $114 = $231;
 $240 = $114;
 $241 = ((($240)) + 4|0);
 $113 = $241;
 $242 = $113;
 $243 = $130;
 $124 = $242;
 $125 = $243;
 $244 = $124;
 $245 = HEAP32[$244>>2]|0;
 $246 = $125;
 $247 = ((($244)) + 4|0);
 $248 = HEAP32[$247>>2]|0;
 $121 = $245;
 $122 = $246;
 $123 = $248;
 $249 = $121;
 $250 = $122;
 $251 = $123;
 $118 = $249;
 $119 = $250;
 $120 = $251;
 $252 = $119;
 $117 = $252;
 $253 = $117;
 __ZdlPv($253);
 STACKTOP = sp;return ($229|0);
}
function __ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EE7__cloneEPNS0_6__baseISA_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $10 = sp + 128|0;
 $11 = sp + 120|0;
 $12 = sp + 112|0;
 $13 = sp + 104|0;
 $16 = sp + 332|0;
 $17 = sp + 331|0;
 $18 = sp + 330|0;
 $19 = sp + 329|0;
 $21 = sp + 272|0;
 $29 = sp + 96|0;
 $30 = sp + 88|0;
 $31 = sp + 80|0;
 $32 = sp + 72|0;
 $35 = sp + 328|0;
 $36 = sp + 327|0;
 $37 = sp + 326|0;
 $38 = sp + 325|0;
 $40 = sp + 228|0;
 $46 = sp + 64|0;
 $47 = sp + 56|0;
 $48 = sp + 48|0;
 $54 = sp + 40|0;
 $55 = sp + 32|0;
 $56 = sp + 24|0;
 $59 = sp + 324|0;
 $60 = sp + 176|0;
 $61 = sp + 323|0;
 $62 = sp + 322|0;
 $63 = sp + 172|0;
 $64 = sp + 321|0;
 $65 = sp + 16|0;
 $66 = sp + 8|0;
 $67 = sp;
 $72 = sp + 320|0;
 $73 = sp + 152|0;
 $74 = sp + 148|0;
 $77 = $0;
 $78 = $1;
 $79 = $77;
 $80 = $78;
 $81 = ((($79)) + 4|0);
 $76 = $81;
 $82 = $76;
 $75 = $82;
 $83 = $75;
 $84 = ((($79)) + 4|0);
 $3 = $84;
 $85 = $3;
 $2 = $85;
 $86 = $2;
 $69 = $80;
 $70 = $83;
 $71 = $86;
 $87 = $69;
 $68 = $87;
 $88 = $68;
 HEAP32[$88>>2] = (3748);
 HEAP32[$87>>2] = (4428);
 $89 = ((($87)) + 4|0);
 $90 = $70;
 $22 = $90;
 $91 = $22;
 $20 = $91;
 $92 = $20;
 $14 = $21;
 $15 = $92;
 $93 = $14;
 $94 = $15;
 ;HEAP8[$10>>0]=HEAP8[$19>>0]|0;
 ;HEAP8[$11>>0]=HEAP8[$18>>0]|0;
 ;HEAP8[$12>>0]=HEAP8[$17>>0]|0;
 ;HEAP8[$13>>0]=HEAP8[$16>>0]|0;
 $8 = $93;
 $9 = $94;
 $95 = $8;
 $96 = $9;
 $7 = $96;
 $97 = $7;
 $5 = $95;
 $6 = $97;
 $98 = $5;
 $99 = $6;
 $4 = $99;
 $100 = $4;
 HEAP32[$98>>2] = $100;
 $101 = HEAP32[$21>>2]|0;
 HEAP32[$73>>2] = $101;
 $102 = $71;
 $41 = $102;
 $103 = $41;
 $39 = $103;
 $104 = $39;
 $33 = $40;
 $34 = $104;
 $105 = $33;
 $106 = $34;
 ;HEAP8[$29>>0]=HEAP8[$38>>0]|0;
 ;HEAP8[$30>>0]=HEAP8[$37>>0]|0;
 ;HEAP8[$31>>0]=HEAP8[$36>>0]|0;
 ;HEAP8[$32>>0]=HEAP8[$35>>0]|0;
 $27 = $105;
 $28 = $106;
 $107 = $27;
 $108 = $28;
 $26 = $108;
 $109 = $26;
 $24 = $107;
 $25 = $109;
 $110 = $24;
 $111 = $25;
 $23 = $111;
 $112 = $23;
 HEAP32[$110>>2] = $112;
 $113 = HEAP32[$40>>2]|0;
 HEAP32[$74>>2] = $113;
 ;HEAP8[$65>>0]=HEAP8[$74>>0]|0;HEAP8[$65+1>>0]=HEAP8[$74+1>>0]|0;HEAP8[$65+2>>0]=HEAP8[$74+2>>0]|0;HEAP8[$65+3>>0]=HEAP8[$74+3>>0]|0;
 ;HEAP8[$66>>0]=HEAP8[$73>>0]|0;HEAP8[$66+1>>0]=HEAP8[$73+1>>0]|0;HEAP8[$66+2>>0]=HEAP8[$73+2>>0]|0;HEAP8[$66+3>>0]=HEAP8[$73+3>>0]|0;
 ;HEAP8[$67>>0]=HEAP8[$72>>0]|0;
 $58 = $89;
 $114 = $58;
 $57 = $66;
 $115 = $57;
 ;HEAP32[$60>>2]=HEAP32[$115>>2]|0;
 ;HEAP8[$46>>0]=HEAP8[$61>>0]|0;
 ;HEAP8[$47>>0]=HEAP8[$60>>0]|0;HEAP8[$47+1>>0]=HEAP8[$60+1>>0]|0;HEAP8[$47+2>>0]=HEAP8[$60+2>>0]|0;HEAP8[$47+3>>0]=HEAP8[$60+3>>0]|0;
 ;HEAP8[$48>>0]=HEAP8[$59>>0]|0;
 $45 = $114;
 $116 = $45;
 $44 = $47;
 $117 = $44;
 $43 = $117;
 $118 = $43;
 $119 = HEAP32[$118>>2]|0;
 $42 = $119;
 $120 = $42;
 ;HEAP32[$116>>2]=HEAP32[$120>>2]|0;
 $49 = $65;
 $121 = $49;
 ;HEAP32[$63>>2]=HEAP32[$121>>2]|0;
 ;HEAP8[$54>>0]=HEAP8[$64>>0]|0;
 ;HEAP8[$55>>0]=HEAP8[$63>>0]|0;HEAP8[$55+1>>0]=HEAP8[$63+1>>0]|0;HEAP8[$55+2>>0]=HEAP8[$63+2>>0]|0;HEAP8[$55+3>>0]=HEAP8[$63+3>>0]|0;
 ;HEAP8[$56>>0]=HEAP8[$62>>0]|0;
 $53 = $114;
 $52 = $55;
 $122 = $52;
 $51 = $122;
 $123 = $51;
 $124 = HEAP32[$123>>2]|0;
 $50 = $124;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EE7destroyEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EE18destroy_deallocateEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $10 = sp + 36|0;
 $9 = $0;
 $11 = $9;
 $12 = ((($11)) + 4|0);
 $8 = $12;
 $13 = $8;
 $7 = $13;
 $14 = $7;
 $1 = $10;
 $2 = $14;
 $4 = $10;
 $5 = $11;
 $6 = 1;
 $15 = $5;
 $3 = $15;
 $16 = $3;
 __ZdlPv($16);
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EEclES6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $5;
 $8 = ((($7)) + 4|0);
 $4 = $8;
 $9 = $4;
 $3 = $9;
 $10 = $3;
 $11 = $6;
 $2 = $11;
 $12 = $2;
 $13 = (__ZNSt3__228__invoke_void_return_wrapperIbE6__callIJRZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS7_E_S7_EEEbDpOT_($10,$12)|0);
 STACKTOP = sp;return ($13|0);
}
function __ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EE6targetERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $7;
 $10 = $8;
 $4 = $10;
 $5 = 2944;
 $11 = $4;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $5;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($13|0)==($16|0);
 if ($17) {
  $18 = ((($9)) + 4|0);
  $3 = $18;
  $19 = $3;
  $2 = $19;
  $20 = $2;
  $6 = $20;
  $21 = $6;
  STACKTOP = sp;return ($21|0);
 } else {
  $6 = 0;
  $21 = $6;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function __ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EE11target_typeEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (2944|0);
}
function __ZNSt3__228__invoke_void_return_wrapperIbE6__callIJRZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS7_E_S7_EEEbDpOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = $0;
 $9 = $1;
 $10 = $8;
 $7 = $10;
 $11 = $7;
 $12 = $9;
 $2 = $12;
 $13 = $2;
 $5 = $11;
 $6 = $13;
 $14 = $5;
 $4 = $14;
 $15 = $4;
 $16 = $6;
 $3 = $16;
 $17 = $3;
 $18 = (__ZZN16GUIButtonClusterILm7EE7OnEventERK5EventENKUlS3_E_clES3_($15,$17)|0);
 STACKTOP = sp;return ($18|0);
}
function __ZZN16GUIButtonClusterILm7EE7OnEventERK5EventENKUlS3_E_clES3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 12|0);
 $4 = $8;
 $9 = $4;
 $10 = ((($9)) + 16|0);
 $5 = $10;
 $11 = $5;
 $12 = HEAP8[$11>>0]|0;
 $13 = $12 & -3;
 HEAP8[$11>>0] = $13;
 $14 = $5;
 $15 = HEAP8[$14>>0]|0;
 $16 = $15 & -5;
 HEAP8[$14>>0] = $16;
 $17 = $5;
 $18 = HEAP8[$17>>0]|0;
 $19 = $18 & -9;
 HEAP8[$17>>0] = $19;
 $20 = $5;
 $21 = HEAP8[$20>>0]|0;
 $22 = $21 & -17;
 HEAP8[$20>>0] = $22;
 STACKTOP = sp;return 0;
}
function __ZNSt3__210__function6__funcIZN20SettingsMainGUILayer7OnEventERK5EventE4__39NS_9allocatorIS6_EEFbS5_EED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $1 = $3;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN20SettingsMainGUILayer7OnEventERK5EventE4__39NS_9allocatorIS6_EEFbS5_EED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZNSt3__210__function6__funcIZN20SettingsMainGUILayer7OnEventERK5EventE4__39NS_9allocatorIS6_EEFbS5_EED2Ev($2);
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZNKSt3__210__function6__funcIZN20SettingsMainGUILayer7OnEventERK5EventE4__39NS_9allocatorIS6_EEFbS5_EE7__cloneEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(608|0);
 $7 = sp + 128|0;
 $8 = sp + 120|0;
 $9 = sp + 112|0;
 $10 = sp + 104|0;
 $13 = sp + 594|0;
 $14 = sp + 593|0;
 $15 = sp + 592|0;
 $16 = sp + 591|0;
 $18 = sp + 540|0;
 $27 = sp + 96|0;
 $28 = sp + 88|0;
 $29 = sp + 80|0;
 $30 = sp + 72|0;
 $34 = sp + 590|0;
 $35 = sp + 589|0;
 $36 = sp + 588|0;
 $37 = sp + 587|0;
 $39 = sp + 488|0;
 $45 = sp + 64|0;
 $46 = sp + 56|0;
 $47 = sp + 48|0;
 $53 = sp + 40|0;
 $54 = sp + 32|0;
 $55 = sp + 24|0;
 $58 = sp + 586|0;
 $59 = sp + 436|0;
 $60 = sp + 585|0;
 $61 = sp + 584|0;
 $62 = sp + 432|0;
 $63 = sp + 583|0;
 $64 = sp + 16|0;
 $65 = sp + 8|0;
 $66 = sp;
 $71 = sp + 582|0;
 $72 = sp + 412|0;
 $73 = sp + 408|0;
 $100 = sp + 300|0;
 $137 = sp + 581|0;
 $138 = sp + 144|0;
 $139 = sp + 136|0;
 $140 = sp + 580|0;
 $136 = $0;
 $141 = $136;
 $142 = ((($141)) + 4|0);
 $135 = $142;
 $143 = $135;
 $134 = $143;
 $144 = $134;
 $132 = $137;
 $133 = $144;
 $110 = $137;
 $111 = 1;
 $112 = 0;
 $145 = $110;
 $146 = $111;
 $109 = $145;
 $147 = ($146>>>0)>(536870911);
 if ($147) {
  $107 = 9129;
  $148 = (___cxa_allocate_exception(8)|0);
  $149 = $107;
  $105 = $148;
  $106 = $149;
  $150 = $105;
  $151 = $106;
  __ZNSt11logic_errorC2EPKc($150,$151);
  HEAP32[$150>>2] = (5584);
  ___cxa_throw(($148|0),(3656|0),(228|0));
  // unreachable;
 }
 $152 = $111;
 $153 = $152<<3;
 $108 = $153;
 $154 = $108;
 $155 = (__Znwm($154)|0);
 $102 = $139;
 $103 = $137;
 $104 = 1;
 $156 = $102;
 $157 = $103;
 HEAP32[$156>>2] = $157;
 $158 = ((($156)) + 4|0);
 $159 = $104;
 HEAP32[$158>>2] = $159;
 $99 = $138;
 HEAP32[$100>>2] = $155;
 $101 = $139;
 $160 = $99;
 $161 = $101;
 $98 = $161;
 $162 = $98;
 $95 = $160;
 $96 = $100;
 $97 = $162;
 $163 = $95;
 $164 = $96;
 $94 = $164;
 $165 = $94;
 $88 = $163;
 $89 = $165;
 $166 = $88;
 $167 = $89;
 $87 = $167;
 $168 = $87;
 $169 = HEAP32[$168>>2]|0;
 HEAP32[$166>>2] = $169;
 $170 = ((($163)) + 4|0);
 $171 = $97;
 $90 = $171;
 $172 = $90;
 $92 = $170;
 $93 = $172;
 $173 = $92;
 $174 = $93;
 $91 = $174;
 $175 = $91;
 ;HEAP32[$173>>2]=HEAP32[$175>>2]|0;HEAP32[$173+4>>2]=HEAP32[$175+4>>2]|0;
 $86 = $138;
 $176 = $86;
 $85 = $176;
 $177 = $85;
 $84 = $177;
 $178 = $84;
 $179 = HEAP32[$178>>2]|0;
 $180 = ((($141)) + 4|0);
 $83 = $180;
 $181 = $83;
 $82 = $181;
 $182 = $82;
 $80 = $140;
 $81 = $137;
 $68 = $179;
 $69 = $182;
 $70 = $140;
 $183 = $68;
 $67 = $183;
 $184 = $67;
 HEAP32[$184>>2] = (3748);
 HEAP32[$183>>2] = (4472);
 $185 = ((($183)) + 4|0);
 $186 = $69;
 $19 = $186;
 $187 = $19;
 $17 = $187;
 $188 = $17;
 $11 = $18;
 $12 = $188;
 $189 = $11;
 $190 = $12;
 ;HEAP8[$7>>0]=HEAP8[$16>>0]|0;
 ;HEAP8[$8>>0]=HEAP8[$15>>0]|0;
 ;HEAP8[$9>>0]=HEAP8[$14>>0]|0;
 ;HEAP8[$10>>0]=HEAP8[$13>>0]|0;
 $5 = $189;
 $6 = $190;
 $191 = $5;
 $192 = $6;
 $4 = $192;
 $193 = $4;
 $2 = $191;
 $3 = $193;
 $194 = $2;
 $195 = $3;
 $1 = $195;
 $196 = $1;
 HEAP32[$194>>2] = $196;
 $197 = HEAP32[$18>>2]|0;
 HEAP32[$72>>2] = $197;
 $198 = $70;
 $20 = $198;
 $199 = $20;
 $40 = $199;
 $200 = $40;
 $38 = $200;
 $201 = $38;
 $32 = $39;
 $33 = $201;
 $202 = $32;
 $203 = $33;
 $31 = $203;
 $204 = $31;
 ;HEAP8[$27>>0]=HEAP8[$37>>0]|0;
 ;HEAP8[$28>>0]=HEAP8[$36>>0]|0;
 ;HEAP8[$29>>0]=HEAP8[$35>>0]|0;
 ;HEAP8[$30>>0]=HEAP8[$34>>0]|0;
 $25 = $202;
 $26 = $204;
 $205 = $25;
 $206 = $26;
 $24 = $206;
 $207 = $24;
 $22 = $205;
 $23 = $207;
 $208 = $22;
 $209 = $23;
 $21 = $209;
 $210 = $21;
 HEAP32[$208>>2] = $210;
 $211 = HEAP32[$39>>2]|0;
 HEAP32[$73>>2] = $211;
 ;HEAP8[$64>>0]=HEAP8[$73>>0]|0;HEAP8[$64+1>>0]=HEAP8[$73+1>>0]|0;HEAP8[$64+2>>0]=HEAP8[$73+2>>0]|0;HEAP8[$64+3>>0]=HEAP8[$73+3>>0]|0;
 ;HEAP8[$65>>0]=HEAP8[$72>>0]|0;HEAP8[$65+1>>0]=HEAP8[$72+1>>0]|0;HEAP8[$65+2>>0]=HEAP8[$72+2>>0]|0;HEAP8[$65+3>>0]=HEAP8[$72+3>>0]|0;
 ;HEAP8[$66>>0]=HEAP8[$71>>0]|0;
 $57 = $185;
 $212 = $57;
 $56 = $65;
 $213 = $56;
 ;HEAP32[$59>>2]=HEAP32[$213>>2]|0;
 ;HEAP8[$45>>0]=HEAP8[$60>>0]|0;
 ;HEAP8[$46>>0]=HEAP8[$59>>0]|0;HEAP8[$46+1>>0]=HEAP8[$59+1>>0]|0;HEAP8[$46+2>>0]=HEAP8[$59+2>>0]|0;HEAP8[$46+3>>0]=HEAP8[$59+3>>0]|0;
 ;HEAP8[$47>>0]=HEAP8[$58>>0]|0;
 $44 = $212;
 $214 = $44;
 $43 = $46;
 $215 = $43;
 $42 = $215;
 $216 = $42;
 $217 = HEAP32[$216>>2]|0;
 $41 = $217;
 $218 = $41;
 ;HEAP32[$214>>2]=HEAP32[$218>>2]|0;
 $48 = $64;
 $219 = $48;
 ;HEAP32[$62>>2]=HEAP32[$219>>2]|0;
 ;HEAP8[$53>>0]=HEAP8[$63>>0]|0;
 ;HEAP8[$54>>0]=HEAP8[$62>>0]|0;HEAP8[$54+1>>0]=HEAP8[$62+1>>0]|0;HEAP8[$54+2>>0]=HEAP8[$62+2>>0]|0;HEAP8[$54+3>>0]=HEAP8[$62+3>>0]|0;
 ;HEAP8[$55>>0]=HEAP8[$61>>0]|0;
 $52 = $212;
 $51 = $54;
 $220 = $51;
 $50 = $220;
 $221 = $50;
 $222 = HEAP32[$221>>2]|0;
 $49 = $222;
 $78 = $138;
 $223 = $78;
 $77 = $223;
 $224 = $77;
 $76 = $224;
 $225 = $76;
 $226 = HEAP32[$225>>2]|0;
 $79 = $226;
 $75 = $223;
 $227 = $75;
 $74 = $227;
 $228 = $74;
 HEAP32[$228>>2] = 0;
 $229 = $79;
 $131 = $138;
 $230 = $131;
 $128 = $230;
 $129 = 0;
 $231 = $128;
 $127 = $231;
 $232 = $127;
 $126 = $232;
 $233 = $126;
 $234 = HEAP32[$233>>2]|0;
 $130 = $234;
 $235 = $129;
 $116 = $231;
 $236 = $116;
 $115 = $236;
 $237 = $115;
 HEAP32[$237>>2] = $235;
 $238 = $130;
 $239 = ($238|0)!=(0|0);
 if (!($239)) {
  STACKTOP = sp;return ($229|0);
 }
 $114 = $231;
 $240 = $114;
 $241 = ((($240)) + 4|0);
 $113 = $241;
 $242 = $113;
 $243 = $130;
 $124 = $242;
 $125 = $243;
 $244 = $124;
 $245 = HEAP32[$244>>2]|0;
 $246 = $125;
 $247 = ((($244)) + 4|0);
 $248 = HEAP32[$247>>2]|0;
 $121 = $245;
 $122 = $246;
 $123 = $248;
 $249 = $121;
 $250 = $122;
 $251 = $123;
 $118 = $249;
 $119 = $250;
 $120 = $251;
 $252 = $119;
 $117 = $252;
 $253 = $117;
 __ZdlPv($253);
 STACKTOP = sp;return ($229|0);
}
function __ZNKSt3__210__function6__funcIZN20SettingsMainGUILayer7OnEventERK5EventE4__39NS_9allocatorIS6_EEFbS5_EE7__cloneEPNS0_6__baseIS9_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $10 = sp + 128|0;
 $11 = sp + 120|0;
 $12 = sp + 112|0;
 $13 = sp + 104|0;
 $16 = sp + 332|0;
 $17 = sp + 331|0;
 $18 = sp + 330|0;
 $19 = sp + 329|0;
 $21 = sp + 272|0;
 $29 = sp + 96|0;
 $30 = sp + 88|0;
 $31 = sp + 80|0;
 $32 = sp + 72|0;
 $35 = sp + 328|0;
 $36 = sp + 327|0;
 $37 = sp + 326|0;
 $38 = sp + 325|0;
 $40 = sp + 228|0;
 $46 = sp + 64|0;
 $47 = sp + 56|0;
 $48 = sp + 48|0;
 $54 = sp + 40|0;
 $55 = sp + 32|0;
 $56 = sp + 24|0;
 $59 = sp + 324|0;
 $60 = sp + 176|0;
 $61 = sp + 323|0;
 $62 = sp + 322|0;
 $63 = sp + 172|0;
 $64 = sp + 321|0;
 $65 = sp + 16|0;
 $66 = sp + 8|0;
 $67 = sp;
 $72 = sp + 320|0;
 $73 = sp + 152|0;
 $74 = sp + 148|0;
 $77 = $0;
 $78 = $1;
 $79 = $77;
 $80 = $78;
 $81 = ((($79)) + 4|0);
 $76 = $81;
 $82 = $76;
 $75 = $82;
 $83 = $75;
 $84 = ((($79)) + 4|0);
 $3 = $84;
 $85 = $3;
 $2 = $85;
 $86 = $2;
 $69 = $80;
 $70 = $83;
 $71 = $86;
 $87 = $69;
 $68 = $87;
 $88 = $68;
 HEAP32[$88>>2] = (3748);
 HEAP32[$87>>2] = (4472);
 $89 = ((($87)) + 4|0);
 $90 = $70;
 $22 = $90;
 $91 = $22;
 $20 = $91;
 $92 = $20;
 $14 = $21;
 $15 = $92;
 $93 = $14;
 $94 = $15;
 ;HEAP8[$10>>0]=HEAP8[$19>>0]|0;
 ;HEAP8[$11>>0]=HEAP8[$18>>0]|0;
 ;HEAP8[$12>>0]=HEAP8[$17>>0]|0;
 ;HEAP8[$13>>0]=HEAP8[$16>>0]|0;
 $8 = $93;
 $9 = $94;
 $95 = $8;
 $96 = $9;
 $7 = $96;
 $97 = $7;
 $5 = $95;
 $6 = $97;
 $98 = $5;
 $99 = $6;
 $4 = $99;
 $100 = $4;
 HEAP32[$98>>2] = $100;
 $101 = HEAP32[$21>>2]|0;
 HEAP32[$73>>2] = $101;
 $102 = $71;
 $41 = $102;
 $103 = $41;
 $39 = $103;
 $104 = $39;
 $33 = $40;
 $34 = $104;
 $105 = $33;
 $106 = $34;
 ;HEAP8[$29>>0]=HEAP8[$38>>0]|0;
 ;HEAP8[$30>>0]=HEAP8[$37>>0]|0;
 ;HEAP8[$31>>0]=HEAP8[$36>>0]|0;
 ;HEAP8[$32>>0]=HEAP8[$35>>0]|0;
 $27 = $105;
 $28 = $106;
 $107 = $27;
 $108 = $28;
 $26 = $108;
 $109 = $26;
 $24 = $107;
 $25 = $109;
 $110 = $24;
 $111 = $25;
 $23 = $111;
 $112 = $23;
 HEAP32[$110>>2] = $112;
 $113 = HEAP32[$40>>2]|0;
 HEAP32[$74>>2] = $113;
 ;HEAP8[$65>>0]=HEAP8[$74>>0]|0;HEAP8[$65+1>>0]=HEAP8[$74+1>>0]|0;HEAP8[$65+2>>0]=HEAP8[$74+2>>0]|0;HEAP8[$65+3>>0]=HEAP8[$74+3>>0]|0;
 ;HEAP8[$66>>0]=HEAP8[$73>>0]|0;HEAP8[$66+1>>0]=HEAP8[$73+1>>0]|0;HEAP8[$66+2>>0]=HEAP8[$73+2>>0]|0;HEAP8[$66+3>>0]=HEAP8[$73+3>>0]|0;
 ;HEAP8[$67>>0]=HEAP8[$72>>0]|0;
 $58 = $89;
 $114 = $58;
 $57 = $66;
 $115 = $57;
 ;HEAP32[$60>>2]=HEAP32[$115>>2]|0;
 ;HEAP8[$46>>0]=HEAP8[$61>>0]|0;
 ;HEAP8[$47>>0]=HEAP8[$60>>0]|0;HEAP8[$47+1>>0]=HEAP8[$60+1>>0]|0;HEAP8[$47+2>>0]=HEAP8[$60+2>>0]|0;HEAP8[$47+3>>0]=HEAP8[$60+3>>0]|0;
 ;HEAP8[$48>>0]=HEAP8[$59>>0]|0;
 $45 = $114;
 $116 = $45;
 $44 = $47;
 $117 = $44;
 $43 = $117;
 $118 = $43;
 $119 = HEAP32[$118>>2]|0;
 $42 = $119;
 $120 = $42;
 ;HEAP32[$116>>2]=HEAP32[$120>>2]|0;
 $49 = $65;
 $121 = $49;
 ;HEAP32[$63>>2]=HEAP32[$121>>2]|0;
 ;HEAP8[$54>>0]=HEAP8[$64>>0]|0;
 ;HEAP8[$55>>0]=HEAP8[$63>>0]|0;HEAP8[$55+1>>0]=HEAP8[$63+1>>0]|0;HEAP8[$55+2>>0]=HEAP8[$63+2>>0]|0;HEAP8[$55+3>>0]=HEAP8[$63+3>>0]|0;
 ;HEAP8[$56>>0]=HEAP8[$62>>0]|0;
 $53 = $114;
 $52 = $55;
 $122 = $52;
 $51 = $122;
 $123 = $51;
 $124 = HEAP32[$123>>2]|0;
 $50 = $124;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN20SettingsMainGUILayer7OnEventERK5EventE4__39NS_9allocatorIS6_EEFbS5_EE7destroyEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN20SettingsMainGUILayer7OnEventERK5EventE4__39NS_9allocatorIS6_EEFbS5_EE18destroy_deallocateEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $10 = sp + 36|0;
 $9 = $0;
 $11 = $9;
 $12 = ((($11)) + 4|0);
 $8 = $12;
 $13 = $8;
 $7 = $13;
 $14 = $7;
 $1 = $10;
 $2 = $14;
 $4 = $10;
 $5 = $11;
 $6 = 1;
 $15 = $5;
 $3 = $15;
 $16 = $3;
 __ZdlPv($16);
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN20SettingsMainGUILayer7OnEventERK5EventE4__39NS_9allocatorIS6_EEFbS5_EEclES5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $5;
 $8 = ((($7)) + 4|0);
 $4 = $8;
 $9 = $4;
 $3 = $9;
 $10 = $3;
 $11 = $6;
 $2 = $11;
 $12 = $2;
 $13 = (__ZNSt3__228__invoke_void_return_wrapperIbE6__callIJRZN20SettingsMainGUILayer7OnEventERK5EventE4__39S6_EEEbDpOT_($10,$12)|0);
 STACKTOP = sp;return ($13|0);
}
function __ZNKSt3__210__function6__funcIZN20SettingsMainGUILayer7OnEventERK5EventE4__39NS_9allocatorIS6_EEFbS5_EE6targetERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $7;
 $10 = $8;
 $4 = $10;
 $5 = 2968;
 $11 = $4;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $5;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($13|0)==($16|0);
 if ($17) {
  $18 = ((($9)) + 4|0);
  $3 = $18;
  $19 = $3;
  $2 = $19;
  $20 = $2;
  $6 = $20;
  $21 = $6;
  STACKTOP = sp;return ($21|0);
 } else {
  $6 = 0;
  $21 = $6;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function __ZNKSt3__210__function6__funcIZN20SettingsMainGUILayer7OnEventERK5EventE4__39NS_9allocatorIS6_EEFbS5_EE11target_typeEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (2968|0);
}
function __ZNSt3__228__invoke_void_return_wrapperIbE6__callIJRZN20SettingsMainGUILayer7OnEventERK5EventE4__39S6_EEEbDpOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = $0;
 $9 = $1;
 $10 = $8;
 $7 = $10;
 $11 = $7;
 $12 = $9;
 $2 = $12;
 $13 = $2;
 $5 = $11;
 $6 = $13;
 $14 = $5;
 $4 = $14;
 $15 = $4;
 $16 = $6;
 $3 = $16;
 $17 = $3;
 $18 = (__ZZN20SettingsMainGUILayer7OnEventERK5EventENK4__39clES2_($15,$17)|0);
 STACKTOP = sp;return ($18|0);
}
function __ZZN20SettingsMainGUILayer7OnEventERK5EventENK4__39clES2_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $$byval_copy = sp + 144|0;
 $5 = sp + 64|0;
 $6 = sp;
 $2 = $0;
 $3 = $1;
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $9 = $3;
 $4 = $9;
 $10 = $4;
 $11 = ((($10)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (+($12|0));
 $14 = - $13;
 $15 = $14 * 0.5;
 $16 = $4;
 $17 = ((($16)) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (+($18|0));
 $20 = $19 * 0.5;
 $21 = $4;
 $22 = ((($21)) + 20|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (+($23|0));
 $25 = - $24;
 $26 = $25 * 0.5;
 $27 = $4;
 $28 = ((($27)) + 20|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (+($29|0));
 $31 = $30 * 0.5;
 __ZN3glm5orthoIfEENS_3matILi4ELi4ET_LNS_9qualifierE0EEES2_S2_S2_S2_S2_S2_($5,$15,$20,$26,$31,-1.0,1.0);
 $32 = ((($8)) + 8|0);
 dest=$32; src=$5; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $33 = ((($8)) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($8)) + 8|0);
 dest=$6; src=$35; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$$byval_copy; src=$6; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 __ZNK8Renderer19SetProjectionMatrixEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE($34,$$byval_copy);
 STACKTOP = sp;return 0;
}
function __ZN16GUIButtonClusterILm7EED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZN10GUIClusterI13GUIButtonDataLm7EED2Ev($2);
 STACKTOP = sp;return;
}
function __ZN10GUIClusterI13GUIButtonDataLm7EED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZN15GUIMasterObjectD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN12LayerManagerD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 564|0);
 __ZN20SettingsMainGUILayerD2Ev($3);
 $4 = ((($2)) + 432|0);
 __ZN27SettingsMainBackgroundLayerD2Ev($4);
 $5 = ((($2)) + 132|0);
 __ZN16MainMenuGUILayerD2Ev($5);
 __ZN23MainMenuBackgroundLayerD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN23MainMenuBackgroundLayerC2Ev($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0;
 var $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $$byval_copy = sp + 272|0;
 $16 = sp + 204|0;
 $18 = sp + 8|0;
 $34 = sp + 136|0;
 $36 = sp;
 $38 = sp + 64|0;
 $39 = sp + 48|0;
 $40 = sp + 40|0;
 $41 = sp + 24|0;
 $42 = sp + 16|0;
 $37 = $0;
 $43 = $37;
 $44 = (__ZN15RendererManager11GetInstanceEv()|0);
 $45 = ((($44)) + 3224|0);
 $46 = (__ZN6Engine11GetInstanceEv()|0);
 $47 = HEAP16[$46>>1]|0;
 $48 = (+($47&65535));
 $49 = -1.0 * $48;
 $50 = (__ZN6Engine11GetInstanceEv()|0);
 $51 = ((($50)) + 2|0);
 $52 = HEAP16[$51>>1]|0;
 $53 = (+($52&65535));
 $54 = $49 / $53;
 $55 = (__ZN6Engine11GetInstanceEv()|0);
 $56 = HEAP16[$55>>1]|0;
 $57 = (+($56&65535));
 $58 = 1.0 * $57;
 $59 = (__ZN6Engine11GetInstanceEv()|0);
 $60 = ((($59)) + 2|0);
 $61 = HEAP16[$60>>1]|0;
 $62 = (+($61&65535));
 $63 = $58 / $62;
 __ZN3glm5orthoIfEENS_3matILi4ELi4ET_LNS_9qualifierE0EEES2_S2_S2_S2_S2_S2_($38,$54,$63,-1.0,1.0,-1.0,1.0);
 dest=$$byval_copy; src=$38; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 __ZN5LayerC2ERK8RendererN3glm3matILi4ELi4EfLNS3_9qualifierE0EEEbb($43,$45,$$byval_copy,1,1);
 HEAP32[$43>>2] = (3712);
 $64 = ((($43)) + 76|0);
 __ZN3glm3vecILi3EfLNS_9qualifierE0EEC2IiiiEET_T0_T1_($64,0,0,0);
 $65 = ((($64)) + 12|0);
 __ZN3glm3vecILi3EfLNS_9qualifierE0EEC2IiiiEET_T0_T1_($65,0,0,0);
 $66 = ((($64)) + 24|0);
 __ZN3glm3vecILi3EfLNS_9qualifierE0EEC2IiiiEET_T0_T1_($66,1,1,1);
 $67 = ((($64)) + 36|0);
 $68 = (__ZN11MeshManager11GetInstanceEv()|0);
 HEAP32[$40>>2] = 4508;
 $69 = ((($40)) + 4|0);
 HEAP32[$69>>2] = 20;
 ;HEAP8[$36>>0]=HEAP8[$40>>0]|0;HEAP8[$36+1>>0]=HEAP8[$40+1>>0]|0;HEAP8[$36+2>>0]=HEAP8[$40+2>>0]|0;HEAP8[$36+3>>0]=HEAP8[$40+3>>0]|0;HEAP8[$36+4>>0]=HEAP8[$40+4>>0]|0;HEAP8[$36+5>>0]=HEAP8[$40+5>>0]|0;HEAP8[$36+6>>0]=HEAP8[$40+6>>0]|0;HEAP8[$36+7>>0]=HEAP8[$40+7>>0]|0;
 $35 = $39;
 $70 = $35;
 $33 = $70;
 $71 = $33;
 $32 = $71;
 HEAP32[$71>>2] = 0;
 $72 = ((($71)) + 4|0);
 HEAP32[$72>>2] = 0;
 $73 = ((($71)) + 8|0);
 HEAP32[$34>>2] = 0;
 $30 = $73;
 $31 = $34;
 $74 = $30;
 $75 = $31;
 $29 = $75;
 $76 = $29;
 $25 = $74;
 $26 = $76;
 $77 = $25;
 $78 = $26;
 $24 = $78;
 HEAP32[$77>>2] = 0;
 $28 = $74;
 $79 = $28;
 $27 = $79;
 $23 = $36;
 $80 = $23;
 $81 = ((($80)) + 4|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = ($82>>>0)>(0);
 if ($83) {
  $22 = $36;
  $84 = $22;
  $85 = ((($84)) + 4|0);
  $86 = HEAP32[$85>>2]|0;
  __ZNSt3__26vectorIfNS_9allocatorIfEEE8allocateEm($70,$86);
  $19 = $36;
  $87 = $19;
  $88 = HEAP32[$87>>2]|0;
  $20 = $36;
  $89 = $20;
  $90 = HEAP32[$89>>2]|0;
  $91 = ((($89)) + 4|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = (($90) + ($92<<2)|0);
  $21 = $36;
  $94 = $21;
  $95 = ((($94)) + 4|0);
  $96 = HEAP32[$95>>2]|0;
  __ZNSt3__26vectorIfNS_9allocatorIfEEE18__construct_at_endIPKfEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_m($70,$88,$93,$96);
 }
 HEAP32[$42>>2] = 8051;
 $97 = ((($42)) + 4|0);
 HEAP32[$97>>2] = 2;
 ;HEAP8[$18>>0]=HEAP8[$42>>0]|0;HEAP8[$18+1>>0]=HEAP8[$42+1>>0]|0;HEAP8[$18+2>>0]=HEAP8[$42+2>>0]|0;HEAP8[$18+3>>0]=HEAP8[$42+3>>0]|0;HEAP8[$18+4>>0]=HEAP8[$42+4>>0]|0;HEAP8[$18+5>>0]=HEAP8[$42+5>>0]|0;HEAP8[$18+6>>0]=HEAP8[$42+6>>0]|0;HEAP8[$18+7>>0]=HEAP8[$42+7>>0]|0;
 $17 = $41;
 $98 = $17;
 $15 = $98;
 $99 = $15;
 $14 = $99;
 HEAP32[$99>>2] = 0;
 $100 = ((($99)) + 4|0);
 HEAP32[$100>>2] = 0;
 $101 = ((($99)) + 8|0);
 HEAP32[$16>>2] = 0;
 $12 = $101;
 $13 = $16;
 $102 = $12;
 $103 = $13;
 $11 = $103;
 $104 = $11;
 $7 = $102;
 $8 = $104;
 $105 = $7;
 $106 = $8;
 $6 = $106;
 HEAP32[$105>>2] = 0;
 $10 = $102;
 $107 = $10;
 $9 = $107;
 $5 = $18;
 $108 = $5;
 $109 = ((($108)) + 4|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = ($110>>>0)>(0);
 if (!($111)) {
  __ZNK11MeshManager10CreateMeshEONSt3__26vectorIfNS0_9allocatorIfEEEEONS1_I9AttributeNS2_IS6_EEEE($67,$68,$39,$41);
  $125 = ((($64)) + 52|0);
  $126 = (__ZN14TextureManager11GetInstanceEv()|0);
  $127 = ((($126)) + 16|0);
  HEAP32[$125>>2] = $127;
  __ZNSt3__26vectorI9AttributeNS_9allocatorIS1_EEED2Ev($41);
  __ZNSt3__26vectorIfNS_9allocatorIfEEED2Ev($39);
  STACKTOP = sp;return;
 }
 $4 = $18;
 $112 = $4;
 $113 = ((($112)) + 4|0);
 $114 = HEAP32[$113>>2]|0;
 __ZNSt3__26vectorI9AttributeNS_9allocatorIS1_EEE8allocateEm($98,$114);
 $1 = $18;
 $115 = $1;
 $116 = HEAP32[$115>>2]|0;
 $2 = $18;
 $117 = $2;
 $118 = HEAP32[$117>>2]|0;
 $119 = ((($117)) + 4|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = (($118) + (($120*5)|0)|0);
 $3 = $18;
 $122 = $3;
 $123 = ((($122)) + 4|0);
 $124 = HEAP32[$123>>2]|0;
 __ZNSt3__26vectorI9AttributeNS_9allocatorIS1_EEE18__construct_at_endIPKS1_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_m($98,$116,$121,$124);
 __ZNK11MeshManager10CreateMeshEONSt3__26vectorIfNS0_9allocatorIfEEEEONS1_I9AttributeNS2_IS6_EEEE($67,$68,$39,$41);
 $125 = ((($64)) + 52|0);
 $126 = (__ZN14TextureManager11GetInstanceEv()|0);
 $127 = ((($126)) + 16|0);
 HEAP32[$125>>2] = $127;
 __ZNSt3__26vectorI9AttributeNS_9allocatorIS1_EEED2Ev($41);
 __ZNSt3__26vectorIfNS_9allocatorIfEEED2Ev($39);
 STACKTOP = sp;return;
}
function __ZN15RendererManager11GetInstanceEv() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $32 = sp + 76|0;
 $51 = sp;
 $50 = 13856;
 $52 = $50;
 $49 = $52;
 $53 = $49;
 $48 = $53;
 $54 = $48;
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)!=(0|0);
 if (!($56)) {
  $57 = (__Znwm(4836)|0);
  _memset(($57|0),0,4836)|0;
  __ZN15RendererManagerC2Ev($57);
  $31 = $51;
  HEAP32[$32>>2] = $57;
  $58 = $31;
  $29 = $58;
  $30 = $32;
  $59 = $29;
  $60 = $30;
  $28 = $60;
  $61 = $28;
  $26 = $59;
  $27 = $61;
  $62 = $26;
  $63 = $27;
  $25 = $63;
  $64 = $25;
  $65 = HEAP32[$64>>2]|0;
  HEAP32[$62>>2] = $65;
  $23 = 13856;
  $24 = $51;
  $66 = $23;
  $67 = $24;
  $21 = $67;
  $68 = $21;
  $20 = $68;
  $69 = $20;
  $19 = $69;
  $70 = $19;
  $71 = HEAP32[$70>>2]|0;
  $22 = $71;
  $18 = $68;
  $72 = $18;
  $17 = $72;
  $73 = $17;
  HEAP32[$73>>2] = 0;
  $74 = $22;
  $8 = $66;
  $9 = $74;
  $75 = $8;
  $7 = $75;
  $76 = $7;
  $6 = $76;
  $77 = $6;
  $78 = HEAP32[$77>>2]|0;
  $10 = $78;
  $79 = $9;
  $3 = $75;
  $80 = $3;
  $2 = $80;
  $81 = $2;
  HEAP32[$81>>2] = $79;
  $82 = $10;
  $83 = ($82|0)!=(0|0);
  if ($83) {
   $1 = $75;
   $84 = $1;
   $0 = $84;
   $85 = $0;
   $86 = $10;
   $4 = $85;
   $5 = $86;
   $87 = $5;
   $88 = ($87|0)==(0|0);
   if (!($88)) {
    __ZN15RendererManagerD2Ev($87);
    __ZdlPv($87);
   }
  }
  $89 = $24;
  $13 = $89;
  $90 = $13;
  $12 = $90;
  $91 = $12;
  $11 = $91;
  $92 = $11;
  $14 = $92;
  $16 = $66;
  $93 = $16;
  $15 = $93;
  $44 = $51;
  $94 = $44;
  $41 = $94;
  $42 = 0;
  $95 = $41;
  $40 = $95;
  $96 = $40;
  $39 = $96;
  $97 = $39;
  $98 = HEAP32[$97>>2]|0;
  $43 = $98;
  $99 = $42;
  $36 = $95;
  $100 = $36;
  $35 = $100;
  $101 = $35;
  HEAP32[$101>>2] = $99;
  $102 = $43;
  $103 = ($102|0)!=(0|0);
  if ($103) {
   $34 = $95;
   $104 = $34;
   $33 = $104;
   $105 = $33;
   $106 = $43;
   $37 = $105;
   $38 = $106;
   $107 = $38;
   $108 = ($107|0)==(0|0);
   if (!($108)) {
    __ZN15RendererManagerD2Ev($107);
    __ZdlPv($107);
   }
  }
 }
 $47 = 13856;
 $109 = $47;
 $46 = $109;
 $110 = $46;
 $45 = $110;
 $111 = $45;
 $112 = HEAP32[$111>>2]|0;
 STACKTOP = sp;return ($112|0);
}
function __ZN5LayerC2ERK8RendererN3glm3matILi4ELi4EfLNS3_9qualifierE0EEEbb($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $$byval_copy = sp + 72|0;
 $9 = sp;
 $5 = $0;
 $6 = $1;
 $10 = $3&1;
 $7 = $10;
 $11 = $4&1;
 $8 = $11;
 $12 = $5;
 __ZN13EventListenerC2Ev($12);
 HEAP32[$12>>2] = (4596);
 $13 = ((($12)) + 4|0);
 $14 = $6;
 HEAP32[$13>>2] = $14;
 $15 = ((($12)) + 8|0);
 dest=$15; src=$2; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $16 = ((($12)) + 72|0);
 $17 = $7;
 $18 = $17&1;
 $19 = $18&1;
 HEAP8[$16>>0] = $19;
 $20 = ((($12)) + 73|0);
 $21 = $8;
 $22 = $21&1;
 $23 = $22&1;
 HEAP8[$20>>0] = $23;
 $24 = ((($12)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($12)) + 8|0);
 dest=$9; src=$26; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$$byval_copy; src=$9; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 __ZNK8Renderer19SetProjectionMatrixEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE($25,$$byval_copy);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIfNS_9allocatorIfEEE8allocateEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $43 = $0;
 $44 = $1;
 $45 = $43;
 $46 = $44;
 $47 = (__ZNKSt3__26vectorIfNS_9allocatorIfEEE8max_sizeEv($45)|0);
 $48 = ($46>>>0)>($47>>>0);
 if ($48) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($45);
  // unreachable;
 }
 $42 = $45;
 $49 = $42;
 $50 = ((($49)) + 8|0);
 $41 = $50;
 $51 = $41;
 $40 = $51;
 $52 = $40;
 $53 = $44;
 $10 = $52;
 $11 = $53;
 $54 = $10;
 $55 = $11;
 $7 = $54;
 $8 = $55;
 $9 = 0;
 $56 = $7;
 $57 = $8;
 $6 = $56;
 $58 = ($57>>>0)>(1073741823);
 if ($58) {
  $4 = 9129;
  $59 = (___cxa_allocate_exception(8)|0);
  $60 = $4;
  $2 = $59;
  $3 = $60;
  $61 = $2;
  $62 = $3;
  __ZNSt11logic_errorC2EPKc($61,$62);
  HEAP32[$61>>2] = (5584);
  ___cxa_throw(($59|0),(3656|0),(228|0));
  // unreachable;
 } else {
  $63 = $8;
  $64 = $63<<2;
  $5 = $64;
  $65 = $5;
  $66 = (__Znwm($65)|0);
  $67 = ((($45)) + 4|0);
  HEAP32[$67>>2] = $66;
  HEAP32[$45>>2] = $66;
  $68 = HEAP32[$45>>2]|0;
  $69 = $44;
  $70 = (($68) + ($69<<2)|0);
  $14 = $45;
  $71 = $14;
  $72 = ((($71)) + 8|0);
  $13 = $72;
  $73 = $13;
  $12 = $73;
  $74 = $12;
  HEAP32[$74>>2] = $70;
  $38 = $45;
  $39 = 0;
  $75 = $38;
  $37 = $75;
  $76 = $37;
  $77 = HEAP32[$76>>2]|0;
  $36 = $77;
  $78 = $36;
  $16 = $75;
  $79 = $16;
  $80 = HEAP32[$79>>2]|0;
  $15 = $80;
  $81 = $15;
  $21 = $75;
  $82 = $21;
  $20 = $82;
  $83 = $20;
  $19 = $83;
  $84 = $19;
  $85 = ((($84)) + 8|0);
  $18 = $85;
  $86 = $18;
  $17 = $86;
  $87 = $17;
  $88 = HEAP32[$87>>2]|0;
  $89 = HEAP32[$83>>2]|0;
  $90 = $88;
  $91 = $89;
  $92 = (($90) - ($91))|0;
  $93 = (($92|0) / 4)&-1;
  $94 = (($81) + ($93<<2)|0);
  $23 = $75;
  $95 = $23;
  $96 = HEAP32[$95>>2]|0;
  $22 = $96;
  $97 = $22;
  $28 = $75;
  $98 = $28;
  $27 = $98;
  $99 = $27;
  $26 = $99;
  $100 = $26;
  $101 = ((($100)) + 8|0);
  $25 = $101;
  $102 = $25;
  $24 = $102;
  $103 = $24;
  $104 = HEAP32[$103>>2]|0;
  $105 = HEAP32[$99>>2]|0;
  $106 = $104;
  $107 = $105;
  $108 = (($106) - ($107))|0;
  $109 = (($108|0) / 4)&-1;
  $110 = (($97) + ($109<<2)|0);
  $30 = $75;
  $111 = $30;
  $112 = HEAP32[$111>>2]|0;
  $29 = $112;
  $113 = $29;
  $114 = $39;
  $115 = (($113) + ($114<<2)|0);
  $31 = $75;
  $32 = $78;
  $33 = $94;
  $34 = $110;
  $35 = $115;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__26vectorIfNS_9allocatorIfEEE18__construct_at_endIPKfEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_m($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $15 = sp;
 $20 = sp + 121|0;
 $35 = sp + 120|0;
 $30 = $0;
 $31 = $1;
 $32 = $2;
 $33 = $3;
 $36 = $30;
 $29 = $36;
 $37 = $29;
 $38 = ((($37)) + 8|0);
 $28 = $38;
 $39 = $28;
 $27 = $39;
 $40 = $27;
 $34 = $40;
 $41 = $33;
 $4 = $35;
 $5 = $36;
 $6 = $41;
 $42 = $34;
 $43 = $31;
 $44 = $32;
 $45 = ((($36)) + 4|0);
 $22 = $42;
 $23 = $43;
 $24 = $44;
 $25 = $45;
 while(1) {
  $46 = $23;
  $47 = $24;
  $48 = ($46|0)!=($47|0);
  if (!($48)) {
   break;
  }
  $49 = $22;
  $50 = $25;
  $51 = HEAP32[$50>>2]|0;
  $21 = $51;
  $52 = $21;
  $53 = $23;
  $17 = $49;
  $18 = $52;
  $19 = $53;
  $54 = $17;
  $55 = $18;
  $56 = $19;
  $16 = $56;
  $57 = $16;
  ;HEAP8[$15>>0]=HEAP8[$20>>0]|0;
  $12 = $54;
  $13 = $55;
  $14 = $57;
  $58 = $12;
  $59 = $13;
  $60 = $14;
  $11 = $60;
  $61 = $11;
  $8 = $58;
  $9 = $59;
  $10 = $61;
  $62 = $9;
  $63 = $10;
  $7 = $63;
  $64 = $7;
  $65 = +HEAPF32[$64>>2];
  HEAPF32[$62>>2] = $65;
  $66 = $23;
  $67 = ((($66)) + 4|0);
  $23 = $67;
  $68 = $25;
  $69 = HEAP32[$68>>2]|0;
  $70 = ((($69)) + 4|0);
  HEAP32[$68>>2] = $70;
 }
 $26 = $35;
 STACKTOP = sp;return;
}
function __ZNSt3__213__vector_baseIfNS_9allocatorIfEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $19 = sp;
 $22 = sp + 120|0;
 $31 = $0;
 $32 = $31;
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)!=(0|0);
 if (!($34)) {
  STACKTOP = sp;return;
 }
 $30 = $32;
 $35 = $30;
 $36 = HEAP32[$35>>2]|0;
 $27 = $35;
 $28 = $36;
 $37 = $27;
 $38 = ((($37)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $29 = $39;
 while(1) {
  $40 = $28;
  $41 = $29;
  $42 = ($40|0)!=($41|0);
  if (!($42)) {
   break;
  }
  $26 = $37;
  $43 = $26;
  $44 = ((($43)) + 8|0);
  $25 = $44;
  $45 = $25;
  $24 = $45;
  $46 = $24;
  $47 = $29;
  $48 = ((($47)) + -4|0);
  $29 = $48;
  $23 = $48;
  $49 = $23;
  $20 = $46;
  $21 = $49;
  $50 = $20;
  $51 = $21;
  ;HEAP8[$19>>0]=HEAP8[$22>>0]|0;
  $17 = $50;
  $18 = $51;
  $52 = $17;
  $53 = $18;
  $15 = $52;
  $16 = $53;
 }
 $54 = $28;
 $55 = ((($37)) + 4|0);
 HEAP32[$55>>2] = $54;
 $7 = $32;
 $56 = $7;
 $57 = ((($56)) + 8|0);
 $6 = $57;
 $58 = $6;
 $5 = $58;
 $59 = $5;
 $60 = HEAP32[$32>>2]|0;
 $4 = $32;
 $61 = $4;
 $3 = $61;
 $62 = $3;
 $63 = ((($62)) + 8|0);
 $2 = $63;
 $64 = $2;
 $1 = $64;
 $65 = $1;
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$61>>2]|0;
 $68 = $66;
 $69 = $67;
 $70 = (($68) - ($69))|0;
 $71 = (($70|0) / 4)&-1;
 $12 = $59;
 $13 = $60;
 $14 = $71;
 $72 = $12;
 $73 = $13;
 $74 = $14;
 $9 = $72;
 $10 = $73;
 $11 = $74;
 $75 = $10;
 $8 = $75;
 $76 = $8;
 __ZdlPv($76);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorI9AttributeNS_9allocatorIS1_EEE8allocateEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $43 = $0;
 $44 = $1;
 $45 = $43;
 $46 = $44;
 $47 = (__ZNKSt3__26vectorI9AttributeNS_9allocatorIS1_EEE8max_sizeEv($45)|0);
 $48 = ($46>>>0)>($47>>>0);
 if ($48) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($45);
  // unreachable;
 }
 $42 = $45;
 $49 = $42;
 $50 = ((($49)) + 8|0);
 $41 = $50;
 $51 = $41;
 $40 = $51;
 $52 = $40;
 $53 = $44;
 $10 = $52;
 $11 = $53;
 $54 = $10;
 $55 = $11;
 $7 = $54;
 $8 = $55;
 $9 = 0;
 $56 = $7;
 $57 = $8;
 $6 = $56;
 $58 = ($57>>>0)>(858993459);
 if ($58) {
  $4 = 9129;
  $59 = (___cxa_allocate_exception(8)|0);
  $60 = $4;
  $2 = $59;
  $3 = $60;
  $61 = $2;
  $62 = $3;
  __ZNSt11logic_errorC2EPKc($61,$62);
  HEAP32[$61>>2] = (5584);
  ___cxa_throw(($59|0),(3656|0),(228|0));
  // unreachable;
 } else {
  $63 = $8;
  $64 = ($63*5)|0;
  $5 = $64;
  $65 = $5;
  $66 = (__Znwm($65)|0);
  $67 = ((($45)) + 4|0);
  HEAP32[$67>>2] = $66;
  HEAP32[$45>>2] = $66;
  $68 = HEAP32[$45>>2]|0;
  $69 = $44;
  $70 = (($68) + (($69*5)|0)|0);
  $14 = $45;
  $71 = $14;
  $72 = ((($71)) + 8|0);
  $13 = $72;
  $73 = $13;
  $12 = $73;
  $74 = $12;
  HEAP32[$74>>2] = $70;
  $38 = $45;
  $39 = 0;
  $75 = $38;
  $37 = $75;
  $76 = $37;
  $77 = HEAP32[$76>>2]|0;
  $36 = $77;
  $78 = $36;
  $16 = $75;
  $79 = $16;
  $80 = HEAP32[$79>>2]|0;
  $15 = $80;
  $81 = $15;
  $21 = $75;
  $82 = $21;
  $20 = $82;
  $83 = $20;
  $19 = $83;
  $84 = $19;
  $85 = ((($84)) + 8|0);
  $18 = $85;
  $86 = $18;
  $17 = $86;
  $87 = $17;
  $88 = HEAP32[$87>>2]|0;
  $89 = HEAP32[$83>>2]|0;
  $90 = $88;
  $91 = $89;
  $92 = (($90) - ($91))|0;
  $93 = (($92|0) / 5)&-1;
  $94 = (($81) + (($93*5)|0)|0);
  $23 = $75;
  $95 = $23;
  $96 = HEAP32[$95>>2]|0;
  $22 = $96;
  $97 = $22;
  $28 = $75;
  $98 = $28;
  $27 = $98;
  $99 = $27;
  $26 = $99;
  $100 = $26;
  $101 = ((($100)) + 8|0);
  $25 = $101;
  $102 = $25;
  $24 = $102;
  $103 = $24;
  $104 = HEAP32[$103>>2]|0;
  $105 = HEAP32[$99>>2]|0;
  $106 = $104;
  $107 = $105;
  $108 = (($106) - ($107))|0;
  $109 = (($108|0) / 5)&-1;
  $110 = (($97) + (($109*5)|0)|0);
  $30 = $75;
  $111 = $30;
  $112 = HEAP32[$111>>2]|0;
  $29 = $112;
  $113 = $29;
  $114 = $39;
  $115 = (($113) + (($114*5)|0)|0);
  $31 = $75;
  $32 = $78;
  $33 = $94;
  $34 = $110;
  $35 = $115;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__26vectorI9AttributeNS_9allocatorIS1_EEE18__construct_at_endIPKS1_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_m($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $15 = sp;
 $20 = sp + 121|0;
 $35 = sp + 120|0;
 $30 = $0;
 $31 = $1;
 $32 = $2;
 $33 = $3;
 $36 = $30;
 $29 = $36;
 $37 = $29;
 $38 = ((($37)) + 8|0);
 $28 = $38;
 $39 = $28;
 $27 = $39;
 $40 = $27;
 $34 = $40;
 $41 = $33;
 $4 = $35;
 $5 = $36;
 $6 = $41;
 $42 = $34;
 $43 = $31;
 $44 = $32;
 $45 = ((($36)) + 4|0);
 $22 = $42;
 $23 = $43;
 $24 = $44;
 $25 = $45;
 while(1) {
  $46 = $23;
  $47 = $24;
  $48 = ($46|0)!=($47|0);
  if (!($48)) {
   break;
  }
  $49 = $22;
  $50 = $25;
  $51 = HEAP32[$50>>2]|0;
  $21 = $51;
  $52 = $21;
  $53 = $23;
  $17 = $49;
  $18 = $52;
  $19 = $53;
  $54 = $17;
  $55 = $18;
  $56 = $19;
  $16 = $56;
  $57 = $16;
  ;HEAP8[$15>>0]=HEAP8[$20>>0]|0;
  $12 = $54;
  $13 = $55;
  $14 = $57;
  $58 = $12;
  $59 = $13;
  $60 = $14;
  $11 = $60;
  $61 = $11;
  $8 = $58;
  $9 = $59;
  $10 = $61;
  $62 = $9;
  $63 = $10;
  $7 = $63;
  $64 = $7;
  ;HEAP8[$62>>0]=HEAP8[$64>>0]|0;HEAP8[$62+1>>0]=HEAP8[$64+1>>0]|0;HEAP8[$62+2>>0]=HEAP8[$64+2>>0]|0;HEAP8[$62+3>>0]=HEAP8[$64+3>>0]|0;HEAP8[$62+4>>0]=HEAP8[$64+4>>0]|0;
  $65 = $23;
  $66 = ((($65)) + 5|0);
  $23 = $66;
  $67 = $25;
  $68 = HEAP32[$67>>2]|0;
  $69 = ((($68)) + 5|0);
  HEAP32[$67>>2] = $69;
 }
 $26 = $35;
 STACKTOP = sp;return;
}
function __ZNSt3__213__vector_baseI9AttributeNS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $19 = sp;
 $22 = sp + 120|0;
 $31 = $0;
 $32 = $31;
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)!=(0|0);
 if (!($34)) {
  STACKTOP = sp;return;
 }
 $30 = $32;
 $35 = $30;
 $36 = HEAP32[$35>>2]|0;
 $27 = $35;
 $28 = $36;
 $37 = $27;
 $38 = ((($37)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $29 = $39;
 while(1) {
  $40 = $28;
  $41 = $29;
  $42 = ($40|0)!=($41|0);
  if (!($42)) {
   break;
  }
  $26 = $37;
  $43 = $26;
  $44 = ((($43)) + 8|0);
  $25 = $44;
  $45 = $25;
  $24 = $45;
  $46 = $24;
  $47 = $29;
  $48 = ((($47)) + -5|0);
  $29 = $48;
  $23 = $48;
  $49 = $23;
  $20 = $46;
  $21 = $49;
  $50 = $20;
  $51 = $21;
  ;HEAP8[$19>>0]=HEAP8[$22>>0]|0;
  $17 = $50;
  $18 = $51;
  $52 = $17;
  $53 = $18;
  $15 = $52;
  $16 = $53;
 }
 $54 = $28;
 $55 = ((($37)) + 4|0);
 HEAP32[$55>>2] = $54;
 $7 = $32;
 $56 = $7;
 $57 = ((($56)) + 8|0);
 $6 = $57;
 $58 = $6;
 $5 = $58;
 $59 = $5;
 $60 = HEAP32[$32>>2]|0;
 $4 = $32;
 $61 = $4;
 $3 = $61;
 $62 = $3;
 $63 = ((($62)) + 8|0);
 $2 = $63;
 $64 = $2;
 $1 = $64;
 $65 = $1;
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$61>>2]|0;
 $68 = $66;
 $69 = $67;
 $70 = (($68) - ($69))|0;
 $71 = (($70|0) / 5)&-1;
 $12 = $59;
 $13 = $60;
 $14 = $71;
 $72 = $12;
 $73 = $13;
 $74 = $14;
 $9 = $72;
 $10 = $73;
 $11 = $74;
 $75 = $10;
 $8 = $75;
 $76 = $8;
 __ZdlPv($76);
 STACKTOP = sp;return;
}
function __ZN14TextureManager11GetInstanceEv() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $32 = sp + 76|0;
 $51 = sp;
 $50 = 13872;
 $52 = $50;
 $49 = $52;
 $53 = $49;
 $48 = $53;
 $54 = $48;
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)!=(0|0);
 if (!($56)) {
  $57 = (__Znwm(64)|0);
  __ZN14TextureManagerC2Ev($57);
  $31 = $51;
  HEAP32[$32>>2] = $57;
  $58 = $31;
  $29 = $58;
  $30 = $32;
  $59 = $29;
  $60 = $30;
  $28 = $60;
  $61 = $28;
  $26 = $59;
  $27 = $61;
  $62 = $26;
  $63 = $27;
  $25 = $63;
  $64 = $25;
  $65 = HEAP32[$64>>2]|0;
  HEAP32[$62>>2] = $65;
  $23 = 13872;
  $24 = $51;
  $66 = $23;
  $67 = $24;
  $21 = $67;
  $68 = $21;
  $20 = $68;
  $69 = $20;
  $19 = $69;
  $70 = $19;
  $71 = HEAP32[$70>>2]|0;
  $22 = $71;
  $18 = $68;
  $72 = $18;
  $17 = $72;
  $73 = $17;
  HEAP32[$73>>2] = 0;
  $74 = $22;
  $8 = $66;
  $9 = $74;
  $75 = $8;
  $7 = $75;
  $76 = $7;
  $6 = $76;
  $77 = $6;
  $78 = HEAP32[$77>>2]|0;
  $10 = $78;
  $79 = $9;
  $3 = $75;
  $80 = $3;
  $2 = $80;
  $81 = $2;
  HEAP32[$81>>2] = $79;
  $82 = $10;
  $83 = ($82|0)!=(0|0);
  if ($83) {
   $1 = $75;
   $84 = $1;
   $0 = $84;
   $85 = $0;
   $86 = $10;
   $4 = $85;
   $5 = $86;
   $87 = $5;
   $88 = ($87|0)==(0|0);
   if (!($88)) {
    __ZN14TextureManagerD2Ev($87);
    __ZdlPv($87);
   }
  }
  $89 = $24;
  $13 = $89;
  $90 = $13;
  $12 = $90;
  $91 = $12;
  $11 = $91;
  $92 = $11;
  $14 = $92;
  $16 = $66;
  $93 = $16;
  $15 = $93;
  $44 = $51;
  $94 = $44;
  $41 = $94;
  $42 = 0;
  $95 = $41;
  $40 = $95;
  $96 = $40;
  $39 = $96;
  $97 = $39;
  $98 = HEAP32[$97>>2]|0;
  $43 = $98;
  $99 = $42;
  $36 = $95;
  $100 = $36;
  $35 = $100;
  $101 = $35;
  HEAP32[$101>>2] = $99;
  $102 = $43;
  $103 = ($102|0)!=(0|0);
  if ($103) {
   $34 = $95;
   $104 = $34;
   $33 = $104;
   $105 = $33;
   $106 = $43;
   $37 = $105;
   $38 = $106;
   $107 = $38;
   $108 = ($107|0)==(0|0);
   if (!($108)) {
    __ZN14TextureManagerD2Ev($107);
    __ZdlPv($107);
   }
  }
 }
 $47 = 13872;
 $109 = $47;
 $46 = $109;
 $110 = $46;
 $45 = $110;
 $111 = $45;
 $112 = HEAP32[$111>>2]|0;
 STACKTOP = sp;return ($112|0);
}
function __ZNSt3__26vectorI9AttributeNS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZNSt3__213__vector_baseI9AttributeNS_9allocatorIS1_EEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIfNS_9allocatorIfEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZNSt3__213__vector_baseIfNS_9allocatorIfEEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZN14TextureManagerD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 48|0);
 __ZN7TextureD2Ev($3);
 $4 = ((($2)) + 32|0);
 __ZN7TextureD2Ev($4);
 $5 = ((($2)) + 16|0);
 __ZN7TextureD2Ev($5);
 __ZN7TextureD2Ev($2);
 STACKTOP = sp;return;
}
function __ZNKSt3__26vectorI9AttributeNS_9allocatorIS1_EEE8max_sizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $6 = sp + 8|0;
 $9 = sp + 77|0;
 $12 = sp;
 $14 = sp + 76|0;
 $19 = sp + 16|0;
 $20 = sp + 12|0;
 $18 = $0;
 $21 = $18;
 $17 = $21;
 $22 = $17;
 $23 = ((($22)) + 8|0);
 $16 = $23;
 $24 = $16;
 $15 = $24;
 $25 = $15;
 $13 = $25;
 $26 = $13;
 ;HEAP8[$12>>0]=HEAP8[$14>>0]|0;
 $11 = $26;
 $27 = $11;
 $10 = $27;
 HEAP32[$19>>2] = 858993459;
 HEAP32[$20>>2] = 2147483647;
 $7 = $19;
 $8 = $20;
 $28 = $7;
 $29 = $8;
 ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
 $4 = $28;
 $5 = $29;
 $30 = $5;
 $31 = $4;
 $1 = $6;
 $2 = $30;
 $3 = $31;
 $32 = $2;
 $33 = HEAP32[$32>>2]|0;
 $34 = $3;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $5;
 $38 = $4;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNKSt3__26vectorIfNS_9allocatorIfEEE8max_sizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $6 = sp + 8|0;
 $9 = sp + 77|0;
 $12 = sp;
 $14 = sp + 76|0;
 $19 = sp + 16|0;
 $20 = sp + 12|0;
 $18 = $0;
 $21 = $18;
 $17 = $21;
 $22 = $17;
 $23 = ((($22)) + 8|0);
 $16 = $23;
 $24 = $16;
 $15 = $24;
 $25 = $15;
 $13 = $25;
 $26 = $13;
 ;HEAP8[$12>>0]=HEAP8[$14>>0]|0;
 $11 = $26;
 $27 = $11;
 $10 = $27;
 HEAP32[$19>>2] = 1073741823;
 HEAP32[$20>>2] = 2147483647;
 $7 = $19;
 $8 = $20;
 $28 = $7;
 $29 = $8;
 ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
 $4 = $28;
 $5 = $29;
 $30 = $5;
 $31 = $4;
 $1 = $6;
 $2 = $30;
 $3 = $31;
 $32 = $2;
 $33 = HEAP32[$32>>2]|0;
 $34 = $3;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $5;
 $38 = $4;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZN13EventListenerC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = (4632);
 STACKTOP = sp;return;
}
function __ZN5LayerD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 _llvm_trap();
 // unreachable;
}
function __ZN13EventListenerD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 _llvm_trap();
 // unreachable;
}
function __ZN15RendererManagerC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZN15DefaultRendererC2Ev($2);
 $3 = ((($2)) + 1612|0);
 __ZN11GUIRendererC2Ev($3);
 $4 = ((($2)) + 3224|0);
 __ZN14ScreenRendererC2Ev($4);
 STACKTOP = sp;return;
}
function __ZN15RendererManagerD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 3224|0);
 __ZN14ScreenRendererD2Ev($3);
 $4 = ((($2)) + 1612|0);
 __ZN11GUIRendererD2Ev($4);
 __ZN15DefaultRendererD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN14ScreenRendererD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZN8RendererD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN11GUIRendererD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZN8RendererD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN15DefaultRendererD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZN8RendererD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN8RendererD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 64|0);
 __ZN6ShaderD2Ev($3);
 STACKTOP = sp;return;
}
function __ZN6ShaderD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 12|0);
 __ZNSt3__25arrayINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELm128EED2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__25arrayINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELm128EED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 1536|0);
 $5 = $3;
 while(1) {
  $4 = ((($5)) + -12|0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
  $6 = ($4|0)==($2|0);
  if ($6) {
   break;
  } else {
   $5 = $4;
  }
 }
 STACKTOP = sp;return;
}
function __ZN16MainMenuGUILayerC2Ev($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0;
 var $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 688|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(688|0);
 $$byval_copy1 = sp + 600|0;
 $$byval_copy = sp + 536|0;
 $2 = sp + 464|0;
 $3 = sp + 224|0;
 $4 = sp + 208|0;
 $5 = sp + 192|0;
 $6 = sp + 683|0;
 $7 = sp + 682|0;
 $8 = sp + 681|0;
 $9 = sp + 680|0;
 $10 = sp + 176|0;
 $11 = sp + 160|0;
 $12 = sp + 679|0;
 $13 = sp + 678|0;
 $14 = sp + 677|0;
 $15 = sp + 676|0;
 $16 = sp + 144|0;
 $17 = sp + 128|0;
 $18 = sp + 675|0;
 $19 = sp + 674|0;
 $20 = sp + 673|0;
 $21 = sp + 672|0;
 $22 = sp + 112|0;
 $23 = sp + 96|0;
 $24 = sp + 671|0;
 $25 = sp + 670|0;
 $26 = sp + 669|0;
 $27 = sp + 668|0;
 $28 = sp + 80|0;
 $29 = sp + 64|0;
 $30 = sp + 667|0;
 $31 = sp + 666|0;
 $32 = sp + 665|0;
 $33 = sp + 664|0;
 $34 = sp;
 $1 = $0;
 $35 = $1;
 $36 = (__ZN15RendererManager11GetInstanceEv()|0);
 $37 = ((($36)) + 1612|0);
 $38 = (__ZN6Engine11GetInstanceEv()|0);
 $39 = HEAP16[$38>>1]|0;
 $40 = (+($39&65535));
 $41 = - $40;
 $42 = $41 * 0.5;
 $43 = (__ZN6Engine11GetInstanceEv()|0);
 $44 = HEAP16[$43>>1]|0;
 $45 = (+($44&65535));
 $46 = $45 * 0.5;
 $47 = (__ZN6Engine11GetInstanceEv()|0);
 $48 = ((($47)) + 2|0);
 $49 = HEAP16[$48>>1]|0;
 $50 = (+($49&65535));
 $51 = - $50;
 $52 = $51 * 0.5;
 $53 = (__ZN6Engine11GetInstanceEv()|0);
 $54 = ((($53)) + 2|0);
 $55 = HEAP16[$54>>1]|0;
 $56 = (+($55&65535));
 $57 = $56 * 0.5;
 __ZN3glm5orthoIfEENS_3matILi4ELi4ET_LNS_9qualifierE0EEES2_S2_S2_S2_S2_S2_($2,$42,$46,$52,$57,-1.0,1.0);
 dest=$$byval_copy; src=$2; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 __ZN5LayerC2ERK8RendererN3glm3matILi4ELi4EfLNS3_9qualifierE0EEEbb($35,$37,$$byval_copy,1,1);
 HEAP32[$35>>2] = (3836);
 $58 = ((($35)) + 76|0);
 $59 = (__ZN10GUIManager11GetInstanceEv()|0);
 $60 = (__ZN14TextureManager11GetInstanceEv()|0);
 $61 = ((($60)) + 48|0);
 HEAPF32[$4>>2] = 0.0;
 $62 = ((($4)) + 4|0);
 HEAPF32[$62>>2] = 44.0;
 $63 = ((($4)) + 8|0);
 HEAPF32[$63>>2] = 300.0;
 $64 = ((($4)) + 12|0);
 HEAPF32[$64>>2] = 30.0;
 __ZN3glm3vecILi4EfLNS_9qualifierE0EEC2IiiiiEET_T0_T1_T2_($5,0,0,16,1);
 __ZN5FlagsC2Eh($6,1);
 $65 = (__ZZN16MainMenuGUILayerC1EvENK3__1cvPFvvEEv($7)|0);
 $66 = (__ZZN16MainMenuGUILayerC1EvENK3__2cvPFvvEEv($8)|0);
 $67 = (__ZZN16MainMenuGUILayerC1EvENK3__3cvPFvvEEv($9)|0);
 __ZN15GUIButtonParamsC2EO3BoxON3glm3vecILi4EfLNS2_9qualifierE0EEEOK5FlagsPFvvESB_SB_($3,$4,$5,$6,$65,$66,$67);
 $68 = ((($3)) + 48|0);
 HEAPF32[$10>>2] = 0.0;
 $69 = ((($10)) + 4|0);
 HEAPF32[$69>>2] = 6.0;
 $70 = ((($10)) + 8|0);
 HEAPF32[$70>>2] = 300.0;
 $71 = ((($10)) + 12|0);
 HEAPF32[$71>>2] = 30.0;
 __ZN3glm3vecILi4EfLNS_9qualifierE0EEC2IiiiiEET_T0_T1_T2_($11,0,0,16,1);
 __ZN5FlagsC2Eh($12,0);
 $72 = (__ZZN16MainMenuGUILayerC1EvENK3__4cvPFvvEEv($13)|0);
 $73 = (__ZZN16MainMenuGUILayerC1EvENK3__5cvPFvvEEv($14)|0);
 $74 = (__ZZN16MainMenuGUILayerC1EvENK3__6cvPFvvEEv($15)|0);
 __ZN15GUIButtonParamsC2EO3BoxON3glm3vecILi4EfLNS2_9qualifierE0EEEOK5FlagsPFvvESB_SB_($68,$10,$11,$12,$72,$73,$74);
 $75 = ((($68)) + 48|0);
 HEAPF32[$16>>2] = 0.0;
 $76 = ((($16)) + 4|0);
 HEAPF32[$76>>2] = -32.0;
 $77 = ((($16)) + 8|0);
 HEAPF32[$77>>2] = 300.0;
 $78 = ((($16)) + 12|0);
 HEAPF32[$78>>2] = 30.0;
 __ZN3glm3vecILi4EfLNS_9qualifierE0EEC2IiiiiEET_T0_T1_T2_($17,0,0,16,1);
 __ZN5FlagsC2Eh($18,0);
 $79 = (__ZZN16MainMenuGUILayerC1EvENK3__7cvPFvvEEv($19)|0);
 $80 = (__ZZN16MainMenuGUILayerC1EvENK3__8cvPFvvEEv($20)|0);
 $81 = (__ZZN16MainMenuGUILayerC1EvENK3__9cvPFvvEEv($21)|0);
 __ZN15GUIButtonParamsC2EO3BoxON3glm3vecILi4EfLNS2_9qualifierE0EEEOK5FlagsPFvvESB_SB_($75,$16,$17,$18,$79,$80,$81);
 $82 = ((($75)) + 48|0);
 HEAPF32[$22>>2] = -171.0;
 $83 = ((($22)) + 4|0);
 HEAPF32[$83>>2] = -70.0;
 $84 = ((($22)) + 8|0);
 HEAPF32[$84>>2] = 30.0;
 $85 = ((($22)) + 12|0);
 HEAPF32[$85>>2] = 30.0;
 __ZN3glm3vecILi4EfLNS_9qualifierE0EEC2IiiiiEET_T0_T1_T2_($23,8,3,1,1);
 __ZN5FlagsC2Eh($24,0);
 $86 = (__ZZN16MainMenuGUILayerC1EvENK4__10cvPFvvEEv($25)|0);
 $87 = (__ZZN16MainMenuGUILayerC1EvENK4__11cvPFvvEEv($26)|0);
 $88 = (__ZZN16MainMenuGUILayerC1EvENK4__12cvPFvvEEv($27)|0);
 __ZN15GUIButtonParamsC2EO3BoxON3glm3vecILi4EfLNS2_9qualifierE0EEEOK5FlagsPFvvESB_SB_($82,$22,$23,$24,$86,$87,$88);
 $89 = ((($82)) + 48|0);
 HEAPF32[$28>>2] = 0.0;
 $90 = ((($28)) + 4|0);
 HEAPF32[$90>>2] = -70.0;
 $91 = ((($28)) + 8|0);
 HEAPF32[$91>>2] = 300.0;
 $92 = ((($28)) + 12|0);
 HEAPF32[$92>>2] = 30.0;
 __ZN3glm3vecILi4EfLNS_9qualifierE0EEC2IiiiiEET_T0_T1_T2_($29,0,0,16,1);
 __ZN5FlagsC2Eh($30,1);
 $93 = (__ZZN16MainMenuGUILayerC1EvENK4__13cvPFvvEEv($31)|0);
 $94 = (__ZZN16MainMenuGUILayerC1EvENK4__14cvPFvvEEv($32)|0);
 $95 = (__ZZN16MainMenuGUILayerC1EvENK4__15cvPFvvEEv($33)|0);
 __ZN15GUIButtonParamsC2EO3BoxON3glm3vecILi4EfLNS2_9qualifierE0EEEOK5FlagsPFvvESB_SB_($89,$28,$29,$30,$93,$94,$95);
 __ZNK10GUIManager22CreateGUIButtonClusterILm5EEE16GUIButtonClusterIXT_EERK7TextureONSt3__25arrayI15GUIButtonParamsXT_EEE($58,$59,$61,$3);
 $96 = ((($35)) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = ((($35)) + 8|0);
 dest=$34; src=$98; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$$byval_copy1; src=$34; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 __ZNK8Renderer19SetProjectionMatrixEN3glm3matILi4ELi4EfLNS0_9qualifierE0EEE($97,$$byval_copy1);
 STACKTOP = sp;return;
}
function __ZN10GUIManager11GetInstanceEv() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $32 = sp + 76|0;
 $51 = sp;
 $50 = 13840;
 $52 = $50;
 $49 = $52;
 $53 = $49;
 $48 = $53;
 $54 = $48;
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)!=(0|0);
 if (!($56)) {
  $57 = (__Znwm(1)|0);
  __ZN10GUIManagerC2Ev($57);
  $31 = $51;
  HEAP32[$32>>2] = $57;
  $58 = $31;
  $29 = $58;
  $30 = $32;
  $59 = $29;
  $60 = $30;
  $28 = $60;
  $61 = $28;
  $26 = $59;
  $27 = $61;
  $62 = $26;
  $63 = $27;
  $25 = $63;
  $64 = $25;
  $65 = HEAP32[$64>>2]|0;
  HEAP32[$62>>2] = $65;
  $23 = 13840;
  $24 = $51;
  $66 = $23;
  $67 = $24;
  $21 = $67;
  $68 = $21;
  $20 = $68;
  $69 = $20;
  $19 = $69;
  $70 = $19;
  $71 = HEAP32[$70>>2]|0;
  $22 = $71;
  $18 = $68;
  $72 = $18;
  $17 = $72;
  $73 = $17;
  HEAP32[$73>>2] = 0;
  $74 = $22;
  $8 = $66;
  $9 = $74;
  $75 = $8;
  $7 = $75;
  $76 = $7;
  $6 = $76;
  $77 = $6;
  $78 = HEAP32[$77>>2]|0;
  $10 = $78;
  $79 = $9;
  $3 = $75;
  $80 = $3;
  $2 = $80;
  $81 = $2;
  HEAP32[$81>>2] = $79;
  $82 = $10;
  $83 = ($82|0)!=(0|0);
  if ($83) {
   $1 = $75;
   $84 = $1;
   $0 = $84;
   $85 = $0;
   $86 = $10;
   $4 = $85;
   $5 = $86;
   $87 = $5;
   $88 = ($87|0)==(0|0);
   if (!($88)) {
    __ZdlPv($87);
   }
  }
  $89 = $24;
  $13 = $89;
  $90 = $13;
  $12 = $90;
  $91 = $12;
  $11 = $91;
  $92 = $11;
  $14 = $92;
  $16 = $66;
  $93 = $16;
  $15 = $93;
  $44 = $51;
  $94 = $44;
  $41 = $94;
  $42 = 0;
  $95 = $41;
  $40 = $95;
  $96 = $40;
  $39 = $96;
  $97 = $39;
  $98 = HEAP32[$97>>2]|0;
  $43 = $98;
  $99 = $42;
  $36 = $95;
  $100 = $36;
  $35 = $100;
  $101 = $35;
  HEAP32[$101>>2] = $99;
  $102 = $43;
  $103 = ($102|0)!=(0|0);
  if ($103) {
   $34 = $95;
   $104 = $34;
   $33 = $104;
   $105 = $33;
   $106 = $43;
   $37 = $105;
   $38 = $106;
   $107 = $38;
   $108 = ($107|0)==(0|0);
   if (!($108)) {
    __ZdlPv($107);
   }
  }
 }
 $47 = 13840;
 $109 = $47;
 $46 = $109;
 $110 = $46;
 $45 = $110;
 $111 = $45;
 $112 = HEAP32[$111>>2]|0;
 STACKTOP = sp;return ($112|0);
}
function __ZN3glm3vecILi4EfLNS_9qualifierE0EEC2IiiiiEET_T0_T1_T2_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 $11 = $6;
 $12 = (+($11|0));
 HEAPF32[$10>>2] = $12;
 $13 = ((($10)) + 4|0);
 $14 = $7;
 $15 = (+($14|0));
 HEAPF32[$13>>2] = $15;
 $16 = ((($10)) + 8|0);
 $17 = $8;
 $18 = (+($17|0));
 HEAPF32[$16>>2] = $18;
 $19 = ((($10)) + 12|0);
 $20 = $9;
 $21 = (+($20|0));
 HEAPF32[$19>>2] = $21;
 STACKTOP = sp;return;
}
function __ZN5FlagsC2Eh($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = $5&255;
 $7 = $6 & 1;
 $8 = $7&255;
 $9 = HEAP8[$4>>0]|0;
 $10 = $8 & 1;
 $11 = $9 & -2;
 $12 = $11 | $10;
 HEAP8[$4>>0] = $12;
 $13 = $3;
 $14 = $13&255;
 $15 = $14 & 2;
 $16 = $15&255;
 $17 = HEAP8[$4>>0]|0;
 $18 = $16 & 1;
 $19 = ($18 << 1)&255;
 $20 = $17 & -3;
 $21 = $20 | $19;
 HEAP8[$4>>0] = $21;
 $22 = $3;
 $23 = $22&255;
 $24 = $23 & 4;
 $25 = $24&255;
 $26 = HEAP8[$4>>0]|0;
 $27 = $25 & 1;
 $28 = ($27 << 2)&255;
 $29 = $26 & -5;
 $30 = $29 | $28;
 HEAP8[$4>>0] = $30;
 $31 = $3;
 $32 = $31&255;
 $33 = $32 & 8;
 $34 = $33&255;
 $35 = HEAP8[$4>>0]|0;
 $36 = $34 & 1;
 $37 = ($36 << 3)&255;
 $38 = $35 & -9;
 $39 = $38 | $37;
 HEAP8[$4>>0] = $39;
 $40 = $3;
 $41 = $40&255;
 $42 = $41 & 16;
 $43 = $42&255;
 $44 = HEAP8[$4>>0]|0;
 $45 = $43 & 1;
 $46 = ($45 << 4)&255;
 $47 = $44 & -17;
 $48 = $47 | $46;
 HEAP8[$4>>0] = $48;
 $49 = $3;
 $50 = $49&255;
 $51 = $50 & 32;
 $52 = $51&255;
 $53 = HEAP8[$4>>0]|0;
 $54 = $52 & 1;
 $55 = ($54 << 5)&255;
 $56 = $53 & -33;
 $57 = $56 | $55;
 HEAP8[$4>>0] = $57;
 $58 = $3;
 $59 = $58&255;
 $60 = $59 & 64;
 $61 = $60&255;
 $62 = HEAP8[$4>>0]|0;
 $63 = $61 & 1;
 $64 = ($63 << 6)&255;
 $65 = $62 & -65;
 $66 = $65 | $64;
 HEAP8[$4>>0] = $66;
 $67 = $3;
 $68 = $67&255;
 $69 = $68 & 128;
 $70 = $69&255;
 $71 = HEAP8[$4>>0]|0;
 $72 = $70 & 1;
 $73 = ($72 << 7)&255;
 $74 = $71 & 127;
 $75 = $74 | $73;
 HEAP8[$4>>0] = $75;
 STACKTOP = sp;return;
}
function __ZZN16MainMenuGUILayerC1EvENK3__1cvPFvvEEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (232|0);
}
function __ZZN16MainMenuGUILayerC1EvENK3__2cvPFvvEEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (233|0);
}
function __ZZN16MainMenuGUILayerC1EvENK3__3cvPFvvEEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (234|0);
}
function __ZN15GUIButtonParamsC2EO3BoxON3glm3vecILi4EfLNS2_9qualifierE0EEEOK5FlagsPFvvESB_SB_($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = $7;
 $15 = $8;
 ;HEAP32[$14>>2]=HEAP32[$15>>2]|0;HEAP32[$14+4>>2]=HEAP32[$15+4>>2]|0;HEAP32[$14+8>>2]=HEAP32[$15+8>>2]|0;HEAP32[$14+12>>2]=HEAP32[$15+12>>2]|0;
 $16 = ((($14)) + 16|0);
 $17 = $9;
 ;HEAP32[$16>>2]=HEAP32[$17>>2]|0;HEAP32[$16+4>>2]=HEAP32[$17+4>>2]|0;HEAP32[$16+8>>2]=HEAP32[$17+8>>2]|0;HEAP32[$16+12>>2]=HEAP32[$17+12>>2]|0;
 $18 = ((($14)) + 32|0);
 $19 = $10;
 ;HEAP8[$18>>0]=HEAP8[$19>>0]|0;
 $20 = ((($14)) + 36|0);
 $21 = $11;
 HEAP32[$20>>2] = $21;
 $22 = ((($14)) + 40|0);
 $23 = $12;
 HEAP32[$22>>2] = $23;
 $24 = ((($14)) + 44|0);
 $25 = $13;
 HEAP32[$24>>2] = $25;
 STACKTOP = sp;return;
}
function __ZZN16MainMenuGUILayerC1EvENK3__4cvPFvvEEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (235|0);
}
function __ZZN16MainMenuGUILayerC1EvENK3__5cvPFvvEEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (236|0);
}
function __ZZN16MainMenuGUILayerC1EvENK3__6cvPFvvEEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (237|0);
}
function __ZZN16MainMenuGUILayerC1EvENK3__7cvPFvvEEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (238|0);
}
function __ZZN16MainMenuGUILayerC1EvENK3__8cvPFvvEEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (239|0);
}
function __ZZN16MainMenuGUILayerC1EvENK3__9cvPFvvEEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (240|0);
}
function __ZZN16MainMenuGUILayerC1EvENK4__10cvPFvvEEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (241|0);
}
function __ZZN16MainMenuGUILayerC1EvENK4__11cvPFvvEEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (242|0);
}
function __ZZN16MainMenuGUILayerC1EvENK4__12cvPFvvEEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (243|0);
}
function __ZZN16MainMenuGUILayerC1EvENK4__13cvPFvvEEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (244|0);
}
function __ZZN16MainMenuGUILayerC1EvENK4__14cvPFvvEEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (245|0);
}
function __ZZN16MainMenuGUILayerC1EvENK4__15cvPFvvEEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (246|0);
}
function __ZNK10GUIManager22CreateGUIButtonClusterILm5EEE16GUIButtonClusterIXT_EERK7TextureONSt3__25arrayI15GUIButtonParamsXT_EEE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $15 = sp + 200|0;
 $16 = sp;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $17 = $12;
 $18 = $13;
 $19 = $14;
 $10 = $19;
 $11 = 0;
 $20 = $10;
 $21 = $11;
 $22 = (($20) + (($21*48)|0)|0);
 __ZNK10GUIManager20ProcessGUIRenderableERK7TexturePK15GUIButtonParamsm($15,$17,$18,$22,5);
 __ZNSt3__25arrayI12GUIProcesserI13GUIButtonDataELm5EEC2Ev($16);
 $8 = $16;
 $9 = 0;
 $23 = $8;
 $24 = $9;
 $25 = (($23) + (($24*40)|0)|0);
 $26 = $14;
 $4 = $26;
 $5 = 0;
 $27 = $4;
 $28 = $5;
 $29 = (($27) + (($28*48)|0)|0);
 __ZNK10GUIManager19ProcessGUIProcesserEP12GUIProcesserI13GUIButtonDataEPK15GUIButtonParamsm($17,$25,$29,5);
 $6 = $15;
 $30 = $6;
 $7 = $16;
 $31 = $7;
 __ZN16GUIButtonClusterILm5EEC2EO13GUIRenderableONSt3__25arrayI12GUIProcesserI13GUIButtonDataELm5EEE($0,$30,$31);
 STACKTOP = sp;return;
}
function __ZNSt3__25arrayI12GUIProcesserI13GUIButtonDataELm5EEC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 200|0);
 $4 = $2;
 while(1) {
  __ZN12GUIProcesserI13GUIButtonDataEC2Ev($4);
  $5 = ((($4)) + 40|0);
  $6 = ($5|0)==($3|0);
  if ($6) {
   break;
  } else {
   $4 = $5;
  }
 }
 STACKTOP = sp;return;
}
function __ZN16GUIButtonClusterILm5EEC2EO13GUIRenderableONSt3__25arrayI12GUIProcesserI13GUIButtonDataELm5EEE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $5;
 $9 = $6;
 $4 = $9;
 $10 = $4;
 $11 = $7;
 $3 = $11;
 $12 = $3;
 __ZN10GUIClusterI13GUIButtonDataLm5EEC2EO13GUIRenderableONSt3__25arrayI12GUIProcesserIS0_ELm5EEE($8,$10,$12);
 HEAP32[$8>>2] = (4652);
 STACKTOP = sp;return;
}
function __ZN10GUIClusterI13GUIButtonDataLm5EEC2EO13GUIRenderableONSt3__25arrayI12GUIProcesserIS0_ELm5EEE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $5;
 __ZN15GUIMasterObjectC2Ev($8);
 HEAP32[$8>>2] = (4676);
 $9 = ((($8)) + 4|0);
 $10 = $6;
 $4 = $10;
 $11 = $4;
 ;HEAP32[$9>>2]=HEAP32[$11>>2]|0;HEAP32[$9+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[$11+8>>2]|0;HEAP32[$9+12>>2]=HEAP32[$11+12>>2]|0;HEAP32[$9+16>>2]=HEAP32[$11+16>>2]|0;
 $12 = ((($8)) + 24|0);
 $13 = $7;
 $3 = $13;
 $14 = $3;
 _memcpy(($12|0),($14|0),200)|0;
 STACKTOP = sp;return;
}
function __ZN16GUIButtonClusterILm5EED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZN16GUIButtonClusterILm5EED2Ev($2);
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZN15GUIMasterObjectC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = (4700);
 STACKTOP = sp;return;
}
function __ZN10GUIClusterI13GUIButtonDataLm5EED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 _llvm_trap();
 // unreachable;
}
function __ZN15GUIMasterObjectD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZN15GUIMasterObjectD2Ev($2);
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZN12GUIProcesserI13GUIButtonDataEC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($2)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($2)) + 12|0);
 HEAPF32[$5>>2] = 0.0;
 $6 = ((($5)) + 4|0);
 HEAPF32[$6>>2] = 0.0;
 $7 = ((($5)) + 8|0);
 HEAPF32[$7>>2] = 0.0;
 $8 = ((($5)) + 12|0);
 HEAPF32[$8>>2] = 0.0;
 $9 = ((($5)) + 16|0);
 __ZN5FlagsC2Eh($9,0);
 $10 = ((($5)) + 20|0);
 HEAPF32[$10>>2] = 0.0;
 $11 = ((($5)) + 24|0);
 HEAPF32[$11>>2] = 0.0;
 STACKTOP = sp;return;
}
function __ZZN16MainMenuGUILayerC1EvEN4__158__invokeEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZZN16MainMenuGUILayerC1EvENK4__15clEv(0);
 return;
}
function __ZZN16MainMenuGUILayerC1EvENK4__15clEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = sp + 8|0;
 $1 = $0;
 (_printf(8138,$vararg_buffer)|0);
 __ZN14GameLayerEventC2Ev($2);
 $4 = (__ZN12StateManager11GetInstanceEv()|0);
 __ZN12StateManager7OnEventERK5Event($4,$2);
 $5 = (__ZN12LayerManager11GetInstanceEv()|0);
 $3 = $5;
 $6 = $3;
 __ZN5Layer10SetEnabledEb($6,0);
 $7 = $3;
 $8 = ((($7)) + 132|0);
 __ZN5Layer10SetEnabledEb($8,0);
 $9 = $3;
 $10 = ((($9)) + 432|0);
 __ZN5Layer10SetEnabledEb($10,1);
 $11 = $3;
 $12 = ((($11)) + 432|0);
 __ZN5Layer11SetAttachedEb($12,1);
 $13 = $3;
 $14 = ((($13)) + 564|0);
 __ZN5Layer10SetEnabledEb($14,1);
 $15 = $3;
 $16 = ((($15)) + 564|0);
 __ZN5Layer11SetAttachedEb($16,1);
 STACKTOP = sp;return;
}
function __ZN14GameLayerEventC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZN5EventC2E9EventType($2,6);
 STACKTOP = sp;return;
}
function __ZN12StateManager11GetInstanceEv() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $32 = sp + 76|0;
 $51 = sp;
 $50 = 13864;
 $52 = $50;
 $49 = $52;
 $53 = $49;
 $48 = $53;
 $54 = $48;
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)!=(0|0);
 if (!($56)) {
  $57 = (__Znwm(28)|0);
  __ZN12StateManagerC2Ev($57);
  $31 = $51;
  HEAP32[$32>>2] = $57;
  $58 = $31;
  $29 = $58;
  $30 = $32;
  $59 = $29;
  $60 = $30;
  $28 = $60;
  $61 = $28;
  $26 = $59;
  $27 = $61;
  $62 = $26;
  $63 = $27;
  $25 = $63;
  $64 = $25;
  $65 = HEAP32[$64>>2]|0;
  HEAP32[$62>>2] = $65;
  $23 = 13864;
  $24 = $51;
  $66 = $23;
  $67 = $24;
  $21 = $67;
  $68 = $21;
  $20 = $68;
  $69 = $20;
  $19 = $69;
  $70 = $19;
  $71 = HEAP32[$70>>2]|0;
  $22 = $71;
  $18 = $68;
  $72 = $18;
  $17 = $72;
  $73 = $17;
  HEAP32[$73>>2] = 0;
  $74 = $22;
  $8 = $66;
  $9 = $74;
  $75 = $8;
  $7 = $75;
  $76 = $7;
  $6 = $76;
  $77 = $6;
  $78 = HEAP32[$77>>2]|0;
  $10 = $78;
  $79 = $9;
  $3 = $75;
  $80 = $3;
  $2 = $80;
  $81 = $2;
  HEAP32[$81>>2] = $79;
  $82 = $10;
  $83 = ($82|0)!=(0|0);
  if ($83) {
   $1 = $75;
   $84 = $1;
   $0 = $84;
   $85 = $0;
   $86 = $10;
   $4 = $85;
   $5 = $86;
   $87 = $5;
   $88 = ($87|0)==(0|0);
   if (!($88)) {
    __ZN12StateManagerD2Ev($87);
    __ZdlPv($87);
   }
  }
  $89 = $24;
  $13 = $89;
  $90 = $13;
  $12 = $90;
  $91 = $12;
  $11 = $91;
  $92 = $11;
  $14 = $92;
  $16 = $66;
  $93 = $16;
  $15 = $93;
  $44 = $51;
  $94 = $44;
  $41 = $94;
  $42 = 0;
  $95 = $41;
  $40 = $95;
  $96 = $40;
  $39 = $96;
  $97 = $39;
  $98 = HEAP32[$97>>2]|0;
  $43 = $98;
  $99 = $42;
  $36 = $95;
  $100 = $36;
  $35 = $100;
  $101 = $35;
  HEAP32[$101>>2] = $99;
  $102 = $43;
  $103 = ($102|0)!=(0|0);
  if ($103) {
   $34 = $95;
   $104 = $34;
   $33 = $104;
   $105 = $33;
   $106 = $43;
   $37 = $105;
   $38 = $106;
   $107 = $38;
   $108 = ($107|0)==(0|0);
   if (!($108)) {
    __ZN12StateManagerD2Ev($107);
    __ZdlPv($107);
   }
  }
 }
 $47 = 13864;
 $109 = $47;
 $46 = $109;
 $110 = $46;
 $45 = $110;
 $111 = $45;
 $112 = HEAP32[$111>>2]|0;
 STACKTOP = sp;return ($112|0);
}
function __ZN12StateManager7OnEventERK5Event($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $4;
 $7 = ((($6)) + 24|0);
 $8 = ((($6)) + 20|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $2 = $7;
 $3 = $10;
 $11 = $2;
 $12 = $3;
 $13 = (($11) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $5;
 FUNCTION_TABLE_vii[$17 & 511]($14,$18);
 STACKTOP = sp;return;
}
function __ZN12LayerManager11GetInstanceEv() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $32 = sp + 76|0;
 $51 = sp;
 $50 = 13844;
 $52 = $50;
 $49 = $52;
 $53 = $49;
 $48 = $53;
 $54 = $48;
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)!=(0|0);
 if (!($56)) {
  $57 = (__Znwm(944)|0);
  __ZN12LayerManagerC2Ev($57);
  $31 = $51;
  HEAP32[$32>>2] = $57;
  $58 = $31;
  $29 = $58;
  $30 = $32;
  $59 = $29;
  $60 = $30;
  $28 = $60;
  $61 = $28;
  $26 = $59;
  $27 = $61;
  $62 = $26;
  $63 = $27;
  $25 = $63;
  $64 = $25;
  $65 = HEAP32[$64>>2]|0;
  HEAP32[$62>>2] = $65;
  $23 = 13844;
  $24 = $51;
  $66 = $23;
  $67 = $24;
  $21 = $67;
  $68 = $21;
  $20 = $68;
  $69 = $20;
  $19 = $69;
  $70 = $19;
  $71 = HEAP32[$70>>2]|0;
  $22 = $71;
  $18 = $68;
  $72 = $18;
  $17 = $72;
  $73 = $17;
  HEAP32[$73>>2] = 0;
  $74 = $22;
  $8 = $66;
  $9 = $74;
  $75 = $8;
  $7 = $75;
  $76 = $7;
  $6 = $76;
  $77 = $6;
  $78 = HEAP32[$77>>2]|0;
  $10 = $78;
  $79 = $9;
  $3 = $75;
  $80 = $3;
  $2 = $80;
  $81 = $2;
  HEAP32[$81>>2] = $79;
  $82 = $10;
  $83 = ($82|0)!=(0|0);
  if ($83) {
   $1 = $75;
   $84 = $1;
   $0 = $84;
   $85 = $0;
   $86 = $10;
   $4 = $85;
   $5 = $86;
   $87 = $5;
   $88 = ($87|0)==(0|0);
   if (!($88)) {
    __ZN12LayerManagerD2Ev($87);
    __ZdlPv($87);
   }
  }
  $89 = $24;
  $13 = $89;
  $90 = $13;
  $12 = $90;
  $91 = $12;
  $11 = $91;
  $92 = $11;
  $14 = $92;
  $16 = $66;
  $93 = $16;
  $15 = $93;
  $44 = $51;
  $94 = $44;
  $41 = $94;
  $42 = 0;
  $95 = $41;
  $40 = $95;
  $96 = $40;
  $39 = $96;
  $97 = $39;
  $98 = HEAP32[$97>>2]|0;
  $43 = $98;
  $99 = $42;
  $36 = $95;
  $100 = $36;
  $35 = $100;
  $101 = $35;
  HEAP32[$101>>2] = $99;
  $102 = $43;
  $103 = ($102|0)!=(0|0);
  if ($103) {
   $34 = $95;
   $104 = $34;
   $33 = $104;
   $105 = $33;
   $106 = $43;
   $37 = $105;
   $38 = $106;
   $107 = $38;
   $108 = ($107|0)==(0|0);
   if (!($108)) {
    __ZN12LayerManagerD2Ev($107);
    __ZdlPv($107);
   }
  }
 }
 $47 = 13844;
 $109 = $47;
 $46 = $109;
 $110 = $46;
 $45 = $110;
 $111 = $45;
 $112 = HEAP32[$111>>2]|0;
 STACKTOP = sp;return ($112|0);
}
function __ZN5Layer10SetEnabledEb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $1&1;
 $3 = $4;
 $5 = $2;
 $6 = $3;
 $7 = $6&1;
 $8 = ((($5)) + 73|0);
 $9 = $7&1;
 HEAP8[$8>>0] = $9;
 STACKTOP = sp;return;
}
function __ZN5Layer11SetAttachedEb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $1&1;
 $3 = $4;
 $5 = $2;
 $6 = $3;
 $7 = $6&1;
 $8 = ((($5)) + 72|0);
 $9 = $7&1;
 HEAP8[$8>>0] = $9;
 STACKTOP = sp;return;
}
function __ZN12LayerManagerC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZN23MainMenuBackgroundLayerC2Ev($2);
 $3 = ((($2)) + 132|0);
 __ZN16MainMenuGUILayerC2Ev($3);
 $4 = ((($2)) + 432|0);
 __ZN27SettingsMainBackgroundLayerC2Ev($4);
 $5 = ((($2)) + 564|0);
 __ZN20SettingsMainGUILayerC2Ev($5);
 STACKTOP = sp;return;
}
function __ZN20SettingsMainGUILayerC2Ev($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0;
 var $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 736|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(736|0);
 $$byval_copy = sp + 632|0;
 $2 = sp + 560|0;
 $3 = sp + 224|0;
 $4 = sp + 208|0;
 $5 = sp + 192|0;
 $6 = sp + 723|0;
 $7 = sp + 722|0;
 $8 = sp + 721|0;
 $9 = sp + 720|0;
 $10 = sp + 176|0;
 $11 = sp + 160|0;
 $12 = sp + 719|0;
 $13 = sp + 718|0;
 $14 = sp + 717|0;
 $15 = sp + 716|0;
 $16 = sp + 144|0;
 $17 = sp + 128|0;
 $18 = sp + 715|0;
 $19 = sp + 714|0;
 $20 = sp + 713|0;
 $21 = sp + 712|0;
 $22 = sp + 112|0;
 $23 = sp + 96|0;
 $24 = sp + 711|0;
 $25 = sp + 710|0;
 $26 = sp + 709|0;
 $27 = sp + 708|0;
 $28 = sp + 80|0;
 $29 = sp + 64|0;
 $30 = sp + 707|0;
 $31 = sp + 706|0;
 $32 = sp + 705|0;
 $33 = sp + 704|0;
 $34 = sp + 48|0;
 $35 = sp + 32|0;
 $36 = sp + 703|0;
 $37 = sp + 702|0;
 $38 = sp + 701|0;
 $39 = sp + 700|0;
 $40 = sp + 16|0;
 $41 = sp;
 $42 = sp + 699|0;
 $43 = sp + 698|0;
 $44 = sp + 697|0;
 $45 = sp + 696|0;
 $1 = $0;
 $46 = $1;
 $47 = (__ZN15RendererManager11GetInstanceEv()|0);
 $48 = ((($47)) + 1612|0);
 $49 = (__ZN6Engine11GetInstanceEv()|0);
 $50 = HEAP16[$49>>1]|0;
 $51 = (+($50&65535));
 $52 = - $51;
 $53 = $52 * 0.5;
 $54 = (__ZN6Engine11GetInstanceEv()|0);
 $55 = HEAP16[$54>>1]|0;
 $56 = (+($55&65535));
 $57 = $56 * 0.5;
 $58 = (__ZN6Engine11GetInstanceEv()|0);
 $59 = ((($58)) + 2|0);
 $60 = HEAP16[$59>>1]|0;
 $61 = (+($60&65535));
 $62 = - $61;
 $63 = $62 * 0.5;
 $64 = (__ZN6Engine11GetInstanceEv()|0);
 $65 = ((($64)) + 2|0);
 $66 = HEAP16[$65>>1]|0;
 $67 = (+($66&65535));
 $68 = $67 * 0.5;
 __ZN3glm5orthoIfEENS_3matILi4ELi4ET_LNS_9qualifierE0EEES2_S2_S2_S2_S2_S2_($2,$53,$57,$63,$68,-1.0,1.0);
 dest=$$byval_copy; src=$2; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 __ZN5LayerC2ERK8RendererN3glm3matILi4ELi4EfLNS3_9qualifierE0EEEbb($46,$48,$$byval_copy,0,0);
 HEAP32[$46>>2] = (4216);
 $69 = ((($46)) + 76|0);
 $70 = (__ZN10GUIManager11GetInstanceEv()|0);
 $71 = (__ZN14TextureManager11GetInstanceEv()|0);
 $72 = ((($71)) + 48|0);
 HEAPF32[$4>>2] = -78.0;
 $73 = ((($4)) + 4|0);
 HEAPF32[$73>>2] = 44.0;
 $74 = ((($4)) + 8|0);
 HEAPF32[$74>>2] = 144.0;
 $75 = ((($4)) + 12|0);
 HEAPF32[$75>>2] = 30.0;
 __ZN3glm3vecILi4EfLNS_9qualifierE0EEC2IiiiiEET_T0_T1_T2_($5,0,3,8,1);
 __ZN5FlagsC2Eh($6,1);
 $76 = (__ZZN20SettingsMainGUILayerC1EvENK4__18cvPFvvEEv($7)|0);
 $77 = (__ZZN20SettingsMainGUILayerC1EvENK4__19cvPFvvEEv($8)|0);
 $78 = (__ZZN20SettingsMainGUILayerC1EvENK4__20cvPFvvEEv($9)|0);
 __ZN15GUIButtonParamsC2EO3BoxON3glm3vecILi4EfLNS2_9qualifierE0EEEOK5FlagsPFvvESB_SB_($3,$4,$5,$6,$76,$77,$78);
 $79 = ((($3)) + 48|0);
 HEAPF32[$10>>2] = 78.0;
 $80 = ((($10)) + 4|0);
 HEAPF32[$80>>2] = 44.0;
 $81 = ((($10)) + 8|0);
 HEAPF32[$81>>2] = 144.0;
 $82 = ((($10)) + 12|0);
 HEAPF32[$82>>2] = 30.0;
 __ZN3glm3vecILi4EfLNS_9qualifierE0EEC2IiiiiEET_T0_T1_T2_($11,0,3,8,1);
 __ZN5FlagsC2Eh($12,1);
 $83 = (__ZZN20SettingsMainGUILayerC1EvENK4__21cvPFvvEEv($13)|0);
 $84 = (__ZZN20SettingsMainGUILayerC1EvENK4__22cvPFvvEEv($14)|0);
 $85 = (__ZZN20SettingsMainGUILayerC1EvENK4__23cvPFvvEEv($15)|0);
 __ZN15GUIButtonParamsC2EO3BoxON3glm3vecILi4EfLNS2_9qualifierE0EEEOK5FlagsPFvvESB_SB_($79,$10,$11,$12,$83,$84,$85);
 $86 = ((($79)) + 48|0);
 HEAPF32[$16>>2] = -78.0;
 $87 = ((($16)) + 4|0);
 HEAPF32[$87>>2] = 6.0;
 $88 = ((($16)) + 8|0);
 HEAPF32[$88>>2] = 144.0;
 $89 = ((($16)) + 12|0);
 HEAPF32[$89>>2] = 30.0;
 __ZN3glm3vecILi4EfLNS_9qualifierE0EEC2IiiiiEET_T0_T1_T2_($17,0,3,8,1);
 __ZN5FlagsC2Eh($18,1);
 $90 = (__ZZN20SettingsMainGUILayerC1EvENK4__24cvPFvvEEv($19)|0);
 $91 = (__ZZN20SettingsMainGUILayerC1EvENK4__25cvPFvvEEv($20)|0);
 $92 = (__ZZN20SettingsMainGUILayerC1EvENK4__26cvPFvvEEv($21)|0);
 __ZN15GUIButtonParamsC2EO3BoxON3glm3vecILi4EfLNS2_9qualifierE0EEEOK5FlagsPFvvESB_SB_($86,$16,$17,$18,$90,$91,$92);
 $93 = ((($86)) + 48|0);
 HEAPF32[$22>>2] = 78.0;
 $94 = ((($22)) + 4|0);
 HEAPF32[$94>>2] = 6.0;
 $95 = ((($22)) + 8|0);
 HEAPF32[$95>>2] = 144.0;
 $96 = ((($22)) + 12|0);
 HEAPF32[$96>>2] = 30.0;
 __ZN3glm3vecILi4EfLNS_9qualifierE0EEC2IiiiiEET_T0_T1_T2_($23,0,3,8,1);
 __ZN5FlagsC2Eh($24,1);
 $97 = (__ZZN20SettingsMainGUILayerC1EvENK4__27cvPFvvEEv($25)|0);
 $98 = (__ZZN20SettingsMainGUILayerC1EvENK4__28cvPFvvEEv($26)|0);
 $99 = (__ZZN20SettingsMainGUILayerC1EvENK4__29cvPFvvEEv($27)|0);
 __ZN15GUIButtonParamsC2EO3BoxON3glm3vecILi4EfLNS2_9qualifierE0EEEOK5FlagsPFvvESB_SB_($93,$22,$23,$24,$97,$98,$99);
 $100 = ((($93)) + 48|0);
 HEAPF32[$28>>2] = -78.0;
 $101 = ((($28)) + 4|0);
 HEAPF32[$101>>2] = -32.0;
 $102 = ((($28)) + 8|0);
 HEAPF32[$102>>2] = 144.0;
 $103 = ((($28)) + 12|0);
 HEAPF32[$103>>2] = 30.0;
 __ZN3glm3vecILi4EfLNS_9qualifierE0EEC2IiiiiEET_T0_T1_T2_($29,0,3,8,1);
 __ZN5FlagsC2Eh($30,1);
 $104 = (__ZZN20SettingsMainGUILayerC1EvENK4__30cvPFvvEEv($31)|0);
 $105 = (__ZZN20SettingsMainGUILayerC1EvENK4__31cvPFvvEEv($32)|0);
 $106 = (__ZZN20SettingsMainGUILayerC1EvENK4__32cvPFvvEEv($33)|0);
 __ZN15GUIButtonParamsC2EO3BoxON3glm3vecILi4EfLNS2_9qualifierE0EEEOK5FlagsPFvvESB_SB_($100,$28,$29,$30,$104,$105,$106);
 $107 = ((($100)) + 48|0);
 HEAPF32[$34>>2] = 78.0;
 $108 = ((($34)) + 4|0);
 HEAPF32[$108>>2] = -32.0;
 $109 = ((($34)) + 8|0);
 HEAPF32[$109>>2] = 144.0;
 $110 = ((($34)) + 12|0);
 HEAPF32[$110>>2] = 30.0;
 __ZN3glm3vecILi4EfLNS_9qualifierE0EEC2IiiiiEET_T0_T1_T2_($35,0,3,8,1);
 __ZN5FlagsC2Eh($36,1);
 $111 = (__ZZN20SettingsMainGUILayerC1EvENK4__33cvPFvvEEv($37)|0);
 $112 = (__ZZN20SettingsMainGUILayerC1EvENK4__34cvPFvvEEv($38)|0);
 $113 = (__ZZN20SettingsMainGUILayerC1EvENK4__35cvPFvvEEv($39)|0);
 __ZN15GUIButtonParamsC2EO3BoxON3glm3vecILi4EfLNS2_9qualifierE0EEEOK5FlagsPFvvESB_SB_($107,$34,$35,$36,$111,$112,$113);
 $114 = ((($107)) + 48|0);
 HEAPF32[$40>>2] = 0.0;
 $115 = ((($40)) + 4|0);
 HEAPF32[$115>>2] = -70.0;
 $116 = ((($40)) + 8|0);
 HEAPF32[$116>>2] = 300.0;
 $117 = ((($40)) + 12|0);
 HEAPF32[$117>>2] = 30.0;
 __ZN3glm3vecILi4EfLNS_9qualifierE0EEC2IiiiiEET_T0_T1_T2_($41,0,0,16,1);
 __ZN5FlagsC2Eh($42,1);
 $118 = (__ZZN20SettingsMainGUILayerC1EvENK4__36cvPFvvEEv($43)|0);
 $119 = (__ZZN20SettingsMainGUILayerC1EvENK4__37cvPFvvEEv($44)|0);
 $120 = (__ZZN20SettingsMainGUILayerC1EvENK4__38cvPFvvEEv($45)|0);
 __ZN15GUIButtonParamsC2EO3BoxON3glm3vecILi4EfLNS2_9qualifierE0EEEOK5FlagsPFvvESB_SB_($114,$40,$41,$42,$118,$119,$120);
 __ZNK10GUIManager22CreateGUIButtonClusterILm7EEE16GUIButtonClusterIXT_EERK7TextureONSt3__25arrayI15GUIButtonParamsXT_EEE($69,$70,$72,$3);
 STACKTOP = sp;return;
}
function __ZZN20SettingsMainGUILayerC1EvENK4__18cvPFvvEEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (247|0);
}
function __ZZN20SettingsMainGUILayerC1EvENK4__19cvPFvvEEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (248|0);
}
function __ZZN20SettingsMainGUILayerC1EvENK4__20cvPFvvEEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (249|0);
}
function __ZZN20SettingsMainGUILayerC1EvENK4__21cvPFvvEEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (250|0);
}
function __ZZN20SettingsMainGUILayerC1EvENK4__22cvPFvvEEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (251|0);
}
function __ZZN20SettingsMainGUILayerC1EvENK4__23cvPFvvEEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (252|0);
}
function __ZZN20SettingsMainGUILayerC1EvENK4__24cvPFvvEEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (253|0);
}
function __ZZN20SettingsMainGUILayerC1EvENK4__25cvPFvvEEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (254|0);
}
function __ZZN20SettingsMainGUILayerC1EvENK4__26cvPFvvEEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (255|0);
}
function __ZZN20SettingsMainGUILayerC1EvENK4__27cvPFvvEEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (256|0);
}
function __ZZN20SettingsMainGUILayerC1EvENK4__28cvPFvvEEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (257|0);
}
function __ZZN20SettingsMainGUILayerC1EvENK4__29cvPFvvEEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (258|0);
}
function __ZZN20SettingsMainGUILayerC1EvENK4__30cvPFvvEEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (259|0);
}
function __ZZN20SettingsMainGUILayerC1EvENK4__31cvPFvvEEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (260|0);
}
function __ZZN20SettingsMainGUILayerC1EvENK4__32cvPFvvEEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (261|0);
}
function __ZZN20SettingsMainGUILayerC1EvENK4__33cvPFvvEEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (262|0);
}
function __ZZN20SettingsMainGUILayerC1EvENK4__34cvPFvvEEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (263|0);
}
function __ZZN20SettingsMainGUILayerC1EvENK4__35cvPFvvEEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (264|0);
}
function __ZZN20SettingsMainGUILayerC1EvENK4__36cvPFvvEEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (265|0);
}
function __ZZN20SettingsMainGUILayerC1EvENK4__37cvPFvvEEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (266|0);
}
function __ZZN20SettingsMainGUILayerC1EvENK4__38cvPFvvEEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (267|0);
}
function __ZNK10GUIManager22CreateGUIButtonClusterILm7EEE16GUIButtonClusterIXT_EERK7TextureONSt3__25arrayI15GUIButtonParamsXT_EEE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $15 = sp + 280|0;
 $16 = sp;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $17 = $12;
 $18 = $13;
 $19 = $14;
 $10 = $19;
 $11 = 0;
 $20 = $10;
 $21 = $11;
 $22 = (($20) + (($21*48)|0)|0);
 __ZNK10GUIManager20ProcessGUIRenderableERK7TexturePK15GUIButtonParamsm($15,$17,$18,$22,7);
 __ZNSt3__25arrayI12GUIProcesserI13GUIButtonDataELm7EEC2Ev($16);
 $8 = $16;
 $9 = 0;
 $23 = $8;
 $24 = $9;
 $25 = (($23) + (($24*40)|0)|0);
 $26 = $14;
 $4 = $26;
 $5 = 0;
 $27 = $4;
 $28 = $5;
 $29 = (($27) + (($28*48)|0)|0);
 __ZNK10GUIManager19ProcessGUIProcesserEP12GUIProcesserI13GUIButtonDataEPK15GUIButtonParamsm($17,$25,$29,7);
 $6 = $15;
 $30 = $6;
 $7 = $16;
 $31 = $7;
 __ZN16GUIButtonClusterILm7EEC2EO13GUIRenderableONSt3__25arrayI12GUIProcesserI13GUIButtonDataELm7EEE($0,$30,$31);
 STACKTOP = sp;return;
}
function __ZNSt3__25arrayI12GUIProcesserI13GUIButtonDataELm7EEC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 280|0);
 $4 = $2;
 while(1) {
  __ZN12GUIProcesserI13GUIButtonDataEC2Ev($4);
  $5 = ((($4)) + 40|0);
  $6 = ($5|0)==($3|0);
  if ($6) {
   break;
  } else {
   $4 = $5;
  }
 }
 STACKTOP = sp;return;
}
function __ZN16GUIButtonClusterILm7EEC2EO13GUIRenderableONSt3__25arrayI12GUIProcesserI13GUIButtonDataELm7EEE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $5;
 $9 = $6;
 $4 = $9;
 $10 = $4;
 $11 = $7;
 $3 = $11;
 $12 = $3;
 __ZN10GUIClusterI13GUIButtonDataLm7EEC2EO13GUIRenderableONSt3__25arrayI12GUIProcesserIS0_ELm7EEE($8,$10,$12);
 HEAP32[$8>>2] = (4716);
 STACKTOP = sp;return;
}
function __ZN10GUIClusterI13GUIButtonDataLm7EEC2EO13GUIRenderableONSt3__25arrayI12GUIProcesserIS0_ELm7EEE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $5;
 __ZN15GUIMasterObjectC2Ev($8);
 HEAP32[$8>>2] = (4740);
 $9 = ((($8)) + 4|0);
 $10 = $6;
 $4 = $10;
 $11 = $4;
 ;HEAP32[$9>>2]=HEAP32[$11>>2]|0;HEAP32[$9+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[$11+8>>2]|0;HEAP32[$9+12>>2]=HEAP32[$11+12>>2]|0;HEAP32[$9+16>>2]=HEAP32[$11+16>>2]|0;
 $12 = ((($8)) + 24|0);
 $13 = $7;
 $3 = $13;
 $14 = $3;
 _memcpy(($12|0),($14|0),280)|0;
 STACKTOP = sp;return;
}
function __ZN16GUIButtonClusterILm7EED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZN16GUIButtonClusterILm7EED2Ev($2);
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZN10GUIClusterI13GUIButtonDataLm7EED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 _llvm_trap();
 // unreachable;
}
function __ZZN20SettingsMainGUILayerC1EvEN4__388__invokeEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZZN20SettingsMainGUILayerC1EvENK4__38clEv(0);
 return;
}
function __ZZN20SettingsMainGUILayerC1EvENK4__38clEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = sp + 8|0;
 $1 = $0;
 (_printf(8220,$vararg_buffer)|0);
 __ZN14GameLayerEventC2Ev($2);
 $4 = (__ZN12StateManager11GetInstanceEv()|0);
 __ZN12StateManager7OnEventERK5Event($4,$2);
 $5 = (__ZN12LayerManager11GetInstanceEv()|0);
 $3 = $5;
 $6 = $3;
 $7 = ((($6)) + 432|0);
 __ZN5Layer10SetEnabledEb($7,0);
 $8 = $3;
 $9 = ((($8)) + 432|0);
 __ZN5Layer11SetAttachedEb($9,0);
 $10 = $3;
 $11 = ((($10)) + 564|0);
 __ZN5Layer10SetEnabledEb($11,0);
 $12 = $3;
 $13 = ((($12)) + 564|0);
 __ZN5Layer11SetAttachedEb($13,0);
 $14 = $3;
 __ZN5Layer10SetEnabledEb($14,1);
 $15 = $3;
 $16 = ((($15)) + 132|0);
 __ZN5Layer10SetEnabledEb($16,1);
 STACKTOP = sp;return;
}
function __ZZN20SettingsMainGUILayerC1EvEN4__378__invokeEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZZN20SettingsMainGUILayerC1EvENK4__37clEv(0);
 return;
}
function __ZZN20SettingsMainGUILayerC1EvENK4__37clEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZZN20SettingsMainGUILayerC1EvEN4__368__invokeEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZZN20SettingsMainGUILayerC1EvENK4__36clEv(0);
 return;
}
function __ZZN20SettingsMainGUILayerC1EvENK4__36clEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZZN20SettingsMainGUILayerC1EvEN4__358__invokeEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZZN20SettingsMainGUILayerC1EvENK4__35clEv(0);
 return;
}
function __ZZN20SettingsMainGUILayerC1EvENK4__35clEv($0) {
 $0 = $0|0;
 var $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = $0;
 (_printf(8241,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function __ZZN20SettingsMainGUILayerC1EvEN4__348__invokeEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZZN20SettingsMainGUILayerC1EvENK4__34clEv(0);
 return;
}
function __ZZN20SettingsMainGUILayerC1EvENK4__34clEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZZN20SettingsMainGUILayerC1EvEN4__338__invokeEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZZN20SettingsMainGUILayerC1EvENK4__33clEv(0);
 return;
}
function __ZZN20SettingsMainGUILayerC1EvENK4__33clEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZZN20SettingsMainGUILayerC1EvEN4__328__invokeEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZZN20SettingsMainGUILayerC1EvENK4__32clEv(0);
 return;
}
function __ZZN20SettingsMainGUILayerC1EvENK4__32clEv($0) {
 $0 = $0|0;
 var $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = $0;
 (_printf(8260,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function __ZZN20SettingsMainGUILayerC1EvEN4__318__invokeEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZZN20SettingsMainGUILayerC1EvENK4__31clEv(0);
 return;
}
function __ZZN20SettingsMainGUILayerC1EvENK4__31clEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZZN20SettingsMainGUILayerC1EvEN4__308__invokeEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZZN20SettingsMainGUILayerC1EvENK4__30clEv(0);
 return;
}
function __ZZN20SettingsMainGUILayerC1EvENK4__30clEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZZN20SettingsMainGUILayerC1EvEN4__298__invokeEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZZN20SettingsMainGUILayerC1EvENK4__29clEv(0);
 return;
}
function __ZZN20SettingsMainGUILayerC1EvENK4__29clEv($0) {
 $0 = $0|0;
 var $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = $0;
 (_printf(8279,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function __ZZN20SettingsMainGUILayerC1EvEN4__288__invokeEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZZN20SettingsMainGUILayerC1EvENK4__28clEv(0);
 return;
}
function __ZZN20SettingsMainGUILayerC1EvENK4__28clEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZZN20SettingsMainGUILayerC1EvEN4__278__invokeEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZZN20SettingsMainGUILayerC1EvENK4__27clEv(0);
 return;
}
function __ZZN20SettingsMainGUILayerC1EvENK4__27clEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZZN20SettingsMainGUILayerC1EvEN4__268__invokeEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZZN20SettingsMainGUILayerC1EvENK4__26clEv(0);
 return;
}
function __ZZN20SettingsMainGUILayerC1EvENK4__26clEv($0) {
 $0 = $0|0;
 var $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = $0;
 (_printf(8290,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function __ZZN20SettingsMainGUILayerC1EvEN4__258__invokeEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZZN20SettingsMainGUILayerC1EvENK4__25clEv(0);
 return;
}
function __ZZN20SettingsMainGUILayerC1EvENK4__25clEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZZN20SettingsMainGUILayerC1EvEN4__248__invokeEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZZN20SettingsMainGUILayerC1EvENK4__24clEv(0);
 return;
}
function __ZZN20SettingsMainGUILayerC1EvENK4__24clEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZZN20SettingsMainGUILayerC1EvEN4__238__invokeEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZZN20SettingsMainGUILayerC1EvENK4__23clEv(0);
 return;
}
function __ZZN20SettingsMainGUILayerC1EvENK4__23clEv($0) {
 $0 = $0|0;
 var $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = $0;
 (_printf(8306,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function __ZZN20SettingsMainGUILayerC1EvEN4__228__invokeEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZZN20SettingsMainGUILayerC1EvENK4__22clEv(0);
 return;
}
function __ZZN20SettingsMainGUILayerC1EvENK4__22clEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZZN20SettingsMainGUILayerC1EvEN4__218__invokeEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZZN20SettingsMainGUILayerC1EvENK4__21clEv(0);
 return;
}
function __ZZN20SettingsMainGUILayerC1EvENK4__21clEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZZN20SettingsMainGUILayerC1EvEN4__208__invokeEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZZN20SettingsMainGUILayerC1EvENK4__20clEv(0);
 return;
}
function __ZZN20SettingsMainGUILayerC1EvENK4__20clEv($0) {
 $0 = $0|0;
 var $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = $0;
 (_printf(8318,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function __ZZN20SettingsMainGUILayerC1EvEN4__198__invokeEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZZN20SettingsMainGUILayerC1EvENK4__19clEv(0);
 return;
}
function __ZZN20SettingsMainGUILayerC1EvENK4__19clEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZZN20SettingsMainGUILayerC1EvEN4__188__invokeEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZZN20SettingsMainGUILayerC1EvENK4__18clEv(0);
 return;
}
function __ZZN20SettingsMainGUILayerC1EvENK4__18clEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZN27SettingsMainBackgroundLayerC2Ev($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0;
 var $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $$byval_copy = sp + 272|0;
 $16 = sp + 204|0;
 $18 = sp + 8|0;
 $34 = sp + 136|0;
 $36 = sp;
 $38 = sp + 64|0;
 $39 = sp + 48|0;
 $40 = sp + 40|0;
 $41 = sp + 24|0;
 $42 = sp + 16|0;
 $37 = $0;
 $43 = $37;
 $44 = (__ZN15RendererManager11GetInstanceEv()|0);
 $45 = ((($44)) + 3224|0);
 $46 = (__ZN6Engine11GetInstanceEv()|0);
 $47 = HEAP16[$46>>1]|0;
 $48 = (+($47&65535));
 $49 = -1.0 * $48;
 $50 = (__ZN6Engine11GetInstanceEv()|0);
 $51 = ((($50)) + 2|0);
 $52 = HEAP16[$51>>1]|0;
 $53 = (+($52&65535));
 $54 = $49 / $53;
 $55 = (__ZN6Engine11GetInstanceEv()|0);
 $56 = HEAP16[$55>>1]|0;
 $57 = (+($56&65535));
 $58 = 1.0 * $57;
 $59 = (__ZN6Engine11GetInstanceEv()|0);
 $60 = ((($59)) + 2|0);
 $61 = HEAP16[$60>>1]|0;
 $62 = (+($61&65535));
 $63 = $58 / $62;
 __ZN3glm5orthoIfEENS_3matILi4ELi4ET_LNS_9qualifierE0EEES2_S2_S2_S2_S2_S2_($38,$54,$63,-1.0,1.0,-1.0,1.0);
 dest=$$byval_copy; src=$38; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 __ZN5LayerC2ERK8RendererN3glm3matILi4ELi4EfLNS3_9qualifierE0EEEbb($43,$45,$$byval_copy,0,0);
 HEAP32[$43>>2] = (4136);
 $64 = ((($43)) + 76|0);
 __ZN3glm3vecILi3EfLNS_9qualifierE0EEC2IiiiEET_T0_T1_($64,0,0,0);
 $65 = ((($64)) + 12|0);
 __ZN3glm3vecILi3EfLNS_9qualifierE0EEC2IiiiEET_T0_T1_($65,0,0,0);
 $66 = ((($64)) + 24|0);
 __ZN3glm3vecILi3EfLNS_9qualifierE0EEC2IiiiEET_T0_T1_($66,1,1,1);
 $67 = ((($64)) + 36|0);
 $68 = (__ZN11MeshManager11GetInstanceEv()|0);
 HEAP32[$40>>2] = 4756;
 $69 = ((($40)) + 4|0);
 HEAP32[$69>>2] = 20;
 ;HEAP8[$36>>0]=HEAP8[$40>>0]|0;HEAP8[$36+1>>0]=HEAP8[$40+1>>0]|0;HEAP8[$36+2>>0]=HEAP8[$40+2>>0]|0;HEAP8[$36+3>>0]=HEAP8[$40+3>>0]|0;HEAP8[$36+4>>0]=HEAP8[$40+4>>0]|0;HEAP8[$36+5>>0]=HEAP8[$40+5>>0]|0;HEAP8[$36+6>>0]=HEAP8[$40+6>>0]|0;HEAP8[$36+7>>0]=HEAP8[$40+7>>0]|0;
 $35 = $39;
 $70 = $35;
 $33 = $70;
 $71 = $33;
 $32 = $71;
 HEAP32[$71>>2] = 0;
 $72 = ((($71)) + 4|0);
 HEAP32[$72>>2] = 0;
 $73 = ((($71)) + 8|0);
 HEAP32[$34>>2] = 0;
 $30 = $73;
 $31 = $34;
 $74 = $30;
 $75 = $31;
 $29 = $75;
 $76 = $29;
 $25 = $74;
 $26 = $76;
 $77 = $25;
 $78 = $26;
 $24 = $78;
 HEAP32[$77>>2] = 0;
 $28 = $74;
 $79 = $28;
 $27 = $79;
 $23 = $36;
 $80 = $23;
 $81 = ((($80)) + 4|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = ($82>>>0)>(0);
 if ($83) {
  $22 = $36;
  $84 = $22;
  $85 = ((($84)) + 4|0);
  $86 = HEAP32[$85>>2]|0;
  __ZNSt3__26vectorIfNS_9allocatorIfEEE8allocateEm($70,$86);
  $19 = $36;
  $87 = $19;
  $88 = HEAP32[$87>>2]|0;
  $20 = $36;
  $89 = $20;
  $90 = HEAP32[$89>>2]|0;
  $91 = ((($89)) + 4|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = (($90) + ($92<<2)|0);
  $21 = $36;
  $94 = $21;
  $95 = ((($94)) + 4|0);
  $96 = HEAP32[$95>>2]|0;
  __ZNSt3__26vectorIfNS_9allocatorIfEEE18__construct_at_endIPKfEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_m($70,$88,$93,$96);
 }
 HEAP32[$42>>2] = 8326;
 $97 = ((($42)) + 4|0);
 HEAP32[$97>>2] = 2;
 ;HEAP8[$18>>0]=HEAP8[$42>>0]|0;HEAP8[$18+1>>0]=HEAP8[$42+1>>0]|0;HEAP8[$18+2>>0]=HEAP8[$42+2>>0]|0;HEAP8[$18+3>>0]=HEAP8[$42+3>>0]|0;HEAP8[$18+4>>0]=HEAP8[$42+4>>0]|0;HEAP8[$18+5>>0]=HEAP8[$42+5>>0]|0;HEAP8[$18+6>>0]=HEAP8[$42+6>>0]|0;HEAP8[$18+7>>0]=HEAP8[$42+7>>0]|0;
 $17 = $41;
 $98 = $17;
 $15 = $98;
 $99 = $15;
 $14 = $99;
 HEAP32[$99>>2] = 0;
 $100 = ((($99)) + 4|0);
 HEAP32[$100>>2] = 0;
 $101 = ((($99)) + 8|0);
 HEAP32[$16>>2] = 0;
 $12 = $101;
 $13 = $16;
 $102 = $12;
 $103 = $13;
 $11 = $103;
 $104 = $11;
 $7 = $102;
 $8 = $104;
 $105 = $7;
 $106 = $8;
 $6 = $106;
 HEAP32[$105>>2] = 0;
 $10 = $102;
 $107 = $10;
 $9 = $107;
 $5 = $18;
 $108 = $5;
 $109 = ((($108)) + 4|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = ($110>>>0)>(0);
 if (!($111)) {
  __ZNK11MeshManager10CreateMeshEONSt3__26vectorIfNS0_9allocatorIfEEEEONS1_I9AttributeNS2_IS6_EEEE($67,$68,$39,$41);
  $125 = ((($64)) + 52|0);
  $126 = (__ZN14TextureManager11GetInstanceEv()|0);
  $127 = ((($126)) + 32|0);
  HEAP32[$125>>2] = $127;
  __ZNSt3__26vectorI9AttributeNS_9allocatorIS1_EEED2Ev($41);
  __ZNSt3__26vectorIfNS_9allocatorIfEEED2Ev($39);
  STACKTOP = sp;return;
 }
 $4 = $18;
 $112 = $4;
 $113 = ((($112)) + 4|0);
 $114 = HEAP32[$113>>2]|0;
 __ZNSt3__26vectorI9AttributeNS_9allocatorIS1_EEE8allocateEm($98,$114);
 $1 = $18;
 $115 = $1;
 $116 = HEAP32[$115>>2]|0;
 $2 = $18;
 $117 = $2;
 $118 = HEAP32[$117>>2]|0;
 $119 = ((($117)) + 4|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = (($118) + (($120*5)|0)|0);
 $3 = $18;
 $122 = $3;
 $123 = ((($122)) + 4|0);
 $124 = HEAP32[$123>>2]|0;
 __ZNSt3__26vectorI9AttributeNS_9allocatorIS1_EEE18__construct_at_endIPKS1_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_m($98,$116,$121,$124);
 __ZNK11MeshManager10CreateMeshEONSt3__26vectorIfNS0_9allocatorIfEEEEONS1_I9AttributeNS2_IS6_EEEE($67,$68,$39,$41);
 $125 = ((($64)) + 52|0);
 $126 = (__ZN14TextureManager11GetInstanceEv()|0);
 $127 = ((($126)) + 32|0);
 HEAP32[$125>>2] = $127;
 __ZNSt3__26vectorI9AttributeNS_9allocatorIS1_EEED2Ev($41);
 __ZNSt3__26vectorIfNS_9allocatorIfEEED2Ev($39);
 STACKTOP = sp;return;
}
function __ZN12StateManagerD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZN9MenuStateD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN9MenuStateD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZN5StateD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN5StateD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZN5EventC2E9EventType($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 HEAP32[$4>>2] = $5;
 $6 = ((($4)) + 4|0);
 HEAP8[$6>>0] = 0;
 STACKTOP = sp;return;
}
function __ZZN16MainMenuGUILayerC1EvEN4__148__invokeEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZZN16MainMenuGUILayerC1EvENK4__14clEv(0);
 return;
}
function __ZZN16MainMenuGUILayerC1EvENK4__14clEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZZN16MainMenuGUILayerC1EvEN4__138__invokeEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZZN16MainMenuGUILayerC1EvENK4__13clEv(0);
 return;
}
function __ZZN16MainMenuGUILayerC1EvENK4__13clEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZZN16MainMenuGUILayerC1EvEN4__128__invokeEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZZN16MainMenuGUILayerC1EvENK4__12clEv(0);
 return;
}
function __ZZN16MainMenuGUILayerC1EvENK4__12clEv($0) {
 $0 = $0|0;
 var $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = $0;
 (_printf(8336,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function __ZZN16MainMenuGUILayerC1EvEN4__118__invokeEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZZN16MainMenuGUILayerC1EvENK4__11clEv(0);
 return;
}
function __ZZN16MainMenuGUILayerC1EvENK4__11clEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZZN16MainMenuGUILayerC1EvEN4__108__invokeEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZZN16MainMenuGUILayerC1EvENK4__10clEv(0);
 return;
}
function __ZZN16MainMenuGUILayerC1EvENK4__10clEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZZN16MainMenuGUILayerC1EvEN3__98__invokeEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZZN16MainMenuGUILayerC1EvENK3__9clEv(0);
 return;
}
function __ZZN16MainMenuGUILayerC1EvENK3__9clEv($0) {
 $0 = $0|0;
 var $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = $0;
 (_printf(8348,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function __ZZN16MainMenuGUILayerC1EvEN3__88__invokeEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZZN16MainMenuGUILayerC1EvENK3__8clEv(0);
 return;
}
function __ZZN16MainMenuGUILayerC1EvENK3__8clEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZZN16MainMenuGUILayerC1EvEN3__78__invokeEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZZN16MainMenuGUILayerC1EvENK3__7clEv(0);
 return;
}
function __ZZN16MainMenuGUILayerC1EvENK3__7clEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZZN16MainMenuGUILayerC1EvEN3__68__invokeEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZZN16MainMenuGUILayerC1EvENK3__6clEv(0);
 return;
}
function __ZZN16MainMenuGUILayerC1EvENK3__6clEv($0) {
 $0 = $0|0;
 var $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = $0;
 (_printf(8360,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function __ZZN16MainMenuGUILayerC1EvEN3__58__invokeEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZZN16MainMenuGUILayerC1EvENK3__5clEv(0);
 return;
}
function __ZZN16MainMenuGUILayerC1EvENK3__5clEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZZN16MainMenuGUILayerC1EvEN3__48__invokeEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZZN16MainMenuGUILayerC1EvENK3__4clEv(0);
 return;
}
function __ZZN16MainMenuGUILayerC1EvENK3__4clEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZZN16MainMenuGUILayerC1EvEN3__38__invokeEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZZN16MainMenuGUILayerC1EvENK3__3clEv(0);
 return;
}
function __ZZN16MainMenuGUILayerC1EvENK3__3clEv($0) {
 $0 = $0|0;
 var $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = $0;
 (_printf(8372,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function __ZZN16MainMenuGUILayerC1EvEN3__28__invokeEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZZN16MainMenuGUILayerC1EvENK3__2clEv(0);
 return;
}
function __ZZN16MainMenuGUILayerC1EvENK3__2clEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZZN16MainMenuGUILayerC1EvEN3__18__invokeEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZZN16MainMenuGUILayerC1EvENK3__1clEv(0);
 return;
}
function __ZZN16MainMenuGUILayerC1EvENK3__1clEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZN10GUIManagerC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZN11MeshManagerC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $16 = sp + 136|0;
 $18 = sp + 8|0;
 $34 = sp + 68|0;
 $36 = sp;
 $38 = sp + 48|0;
 $39 = sp + 40|0;
 $40 = sp + 24|0;
 $41 = sp + 16|0;
 $37 = $0;
 $42 = $37;
 HEAP32[$39>>2] = 4836;
 $43 = ((($39)) + 4|0);
 HEAP32[$43>>2] = 30;
 ;HEAP8[$36>>0]=HEAP8[$39>>0]|0;HEAP8[$36+1>>0]=HEAP8[$39+1>>0]|0;HEAP8[$36+2>>0]=HEAP8[$39+2>>0]|0;HEAP8[$36+3>>0]=HEAP8[$39+3>>0]|0;HEAP8[$36+4>>0]=HEAP8[$39+4>>0]|0;HEAP8[$36+5>>0]=HEAP8[$39+5>>0]|0;HEAP8[$36+6>>0]=HEAP8[$39+6>>0]|0;HEAP8[$36+7>>0]=HEAP8[$39+7>>0]|0;
 $35 = $38;
 $44 = $35;
 $33 = $44;
 $45 = $33;
 $32 = $45;
 HEAP32[$45>>2] = 0;
 $46 = ((($45)) + 4|0);
 HEAP32[$46>>2] = 0;
 $47 = ((($45)) + 8|0);
 HEAP32[$34>>2] = 0;
 $30 = $47;
 $31 = $34;
 $48 = $30;
 $49 = $31;
 $29 = $49;
 $50 = $29;
 $25 = $48;
 $26 = $50;
 $51 = $25;
 $52 = $26;
 $24 = $52;
 HEAP32[$51>>2] = 0;
 $28 = $48;
 $53 = $28;
 $27 = $53;
 $23 = $36;
 $54 = $23;
 $55 = ((($54)) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ($56>>>0)>(0);
 if ($57) {
  $22 = $36;
  $58 = $22;
  $59 = ((($58)) + 4|0);
  $60 = HEAP32[$59>>2]|0;
  __ZNSt3__26vectorIfNS_9allocatorIfEEE8allocateEm($44,$60);
  $19 = $36;
  $61 = $19;
  $62 = HEAP32[$61>>2]|0;
  $20 = $36;
  $63 = $20;
  $64 = HEAP32[$63>>2]|0;
  $65 = ((($63)) + 4|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (($64) + ($66<<2)|0);
  $21 = $36;
  $68 = $21;
  $69 = ((($68)) + 4|0);
  $70 = HEAP32[$69>>2]|0;
  __ZNSt3__26vectorIfNS_9allocatorIfEEE18__construct_at_endIPKfEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_m($44,$62,$67,$70);
 }
 HEAP32[$41>>2] = 8384;
 $71 = ((($41)) + 4|0);
 HEAP32[$71>>2] = 2;
 ;HEAP8[$18>>0]=HEAP8[$41>>0]|0;HEAP8[$18+1>>0]=HEAP8[$41+1>>0]|0;HEAP8[$18+2>>0]=HEAP8[$41+2>>0]|0;HEAP8[$18+3>>0]=HEAP8[$41+3>>0]|0;HEAP8[$18+4>>0]=HEAP8[$41+4>>0]|0;HEAP8[$18+5>>0]=HEAP8[$41+5>>0]|0;HEAP8[$18+6>>0]=HEAP8[$41+6>>0]|0;HEAP8[$18+7>>0]=HEAP8[$41+7>>0]|0;
 $17 = $40;
 $72 = $17;
 $15 = $72;
 $73 = $15;
 $14 = $73;
 HEAP32[$73>>2] = 0;
 $74 = ((($73)) + 4|0);
 HEAP32[$74>>2] = 0;
 $75 = ((($73)) + 8|0);
 HEAP32[$16>>2] = 0;
 $12 = $75;
 $13 = $16;
 $76 = $12;
 $77 = $13;
 $11 = $77;
 $78 = $11;
 $7 = $76;
 $8 = $78;
 $79 = $7;
 $80 = $8;
 $6 = $80;
 HEAP32[$79>>2] = 0;
 $10 = $76;
 $81 = $10;
 $9 = $81;
 $5 = $18;
 $82 = $5;
 $83 = ((($82)) + 4|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = ($84>>>0)>(0);
 if (!($85)) {
  __ZNK11MeshManager10CreateMeshEONSt3__26vectorIfNS0_9allocatorIfEEEEONS1_I9AttributeNS2_IS6_EEEE($42,$42,$38,$40);
  __ZNSt3__26vectorI9AttributeNS_9allocatorIS1_EEED2Ev($40);
  __ZNSt3__26vectorIfNS_9allocatorIfEEED2Ev($38);
  $99 = ((($42)) + 16|0);
  _memset(($99|0),0,1024)|0;
  STACKTOP = sp;return;
 }
 $4 = $18;
 $86 = $4;
 $87 = ((($86)) + 4|0);
 $88 = HEAP32[$87>>2]|0;
 __ZNSt3__26vectorI9AttributeNS_9allocatorIS1_EEE8allocateEm($72,$88);
 $1 = $18;
 $89 = $1;
 $90 = HEAP32[$89>>2]|0;
 $2 = $18;
 $91 = $2;
 $92 = HEAP32[$91>>2]|0;
 $93 = ((($91)) + 4|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = (($92) + (($94*5)|0)|0);
 $3 = $18;
 $96 = $3;
 $97 = ((($96)) + 4|0);
 $98 = HEAP32[$97>>2]|0;
 __ZNSt3__26vectorI9AttributeNS_9allocatorIS1_EEE18__construct_at_endIPKS1_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_m($72,$90,$95,$98);
 __ZNK11MeshManager10CreateMeshEONSt3__26vectorIfNS0_9allocatorIfEEEEONS1_I9AttributeNS2_IS6_EEEE($42,$42,$38,$40);
 __ZNSt3__26vectorI9AttributeNS_9allocatorIS1_EEED2Ev($40);
 __ZNSt3__26vectorIfNS_9allocatorIfEEED2Ev($38);
 $99 = ((($42)) + 16|0);
 _memset(($99|0),0,1024)|0;
 STACKTOP = sp;return;
}
function __ZNK11MeshManager10CreateMeshEONSt3__26vectorIfNS0_9allocatorIfEEEEONS1_I9AttributeNS2_IS6_EEEE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $6 = sp + 132|0;
 $9 = sp + 120|0;
 $13 = sp + 104|0;
 $16 = sp + 92|0;
 $35 = sp + 16|0;
 $37 = sp + 8|0;
 $38 = sp + 4|0;
 $31 = $1;
 $32 = $2;
 $33 = $3;
 $40 = $31;
 $41 = (__ZNK11MeshManager9CreateVAOEv($40)|0);
 $34 = $41;
 _glGenBuffers(1,($35|0));
 $42 = HEAP32[$35>>2]|0;
 _glBindBuffer(34962,($42|0));
 $43 = $32;
 $30 = $43;
 $44 = $30;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 4)&-1;
 $52 = $51<<2;
 $53 = $32;
 $26 = $53;
 $27 = 0;
 $54 = $26;
 $55 = HEAP32[$54>>2]|0;
 $56 = $27;
 $57 = (($55) + ($56<<2)|0);
 _glBufferData(34962,($52|0),($57|0),35044);
 $58 = $33;
 $36 = $58;
 $59 = $36;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $7 = $60;
 $8 = $61;
 $62 = $8;
 $4 = $6;
 $5 = $62;
 $63 = $4;
 $64 = $5;
 HEAP32[$63>>2] = $64;
 $65 = HEAP32[$6>>2]|0;
 HEAP32[$9>>2] = $65;
 $66 = HEAP32[$9>>2]|0;
 HEAP32[$37>>2] = $66;
 $67 = $36;
 $17 = $67;
 $68 = $17;
 $69 = ((($68)) + 4|0);
 $70 = HEAP32[$69>>2]|0;
 $14 = $68;
 $15 = $70;
 $71 = $15;
 $11 = $13;
 $12 = $71;
 $72 = $11;
 $73 = $12;
 HEAP32[$72>>2] = $73;
 $74 = HEAP32[$13>>2]|0;
 HEAP32[$16>>2] = $74;
 $75 = HEAP32[$16>>2]|0;
 HEAP32[$38>>2] = $75;
 while(1) {
  $22 = $37;
  $23 = $38;
  $76 = $22;
  $77 = $23;
  $20 = $76;
  $21 = $77;
  $78 = $20;
  $19 = $78;
  $79 = $19;
  $80 = HEAP32[$79>>2]|0;
  $81 = $21;
  $18 = $81;
  $82 = $18;
  $83 = HEAP32[$82>>2]|0;
  $84 = ($80|0)==($83|0);
  $85 = $84 ^ 1;
  if (!($85)) {
   break;
  }
  $24 = $37;
  $86 = $24;
  $87 = HEAP32[$86>>2]|0;
  $39 = $87;
  $88 = $39;
  $89 = HEAP8[$88>>0]|0;
  $90 = $89&255;
  _glEnableVertexAttribArray(($90|0));
  $91 = $39;
  $92 = HEAP8[$91>>0]|0;
  $93 = $92&255;
  $94 = $39;
  $95 = ((($94)) + 1|0);
  $96 = HEAP8[$95>>0]|0;
  $97 = $96 << 24 >> 24;
  $98 = $39;
  $99 = ((($98)) + 2|0);
  $100 = HEAP8[$99>>0]|0;
  $101 = $100&255;
  $102 = $101<<2;
  $103 = $39;
  $104 = ((($103)) + 3|0);
  $105 = HEAP8[$104>>0]|0;
  $106 = $105&255;
  $107 = $106<<2;
  $108 = $107;
  _glVertexAttribPointer(($93|0),($97|0),5126,0,($102|0),($108|0));
  $25 = $37;
  $109 = $25;
  $110 = HEAP32[$109>>2]|0;
  $111 = ((($110)) + 5|0);
  HEAP32[$109>>2] = $111;
 }
 _glBindBuffer(34962,0);
 __ZNK11MeshManager9UnbindVAOEv($40);
 $112 = $34;
 HEAP32[$0>>2] = $112;
 $113 = ((($0)) + 4|0);
 HEAP32[$113>>2] = 0;
 $114 = ((($0)) + 8|0);
 $115 = $32;
 $28 = $115;
 $116 = $28;
 $117 = ((($116)) + 4|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = HEAP32[$116>>2]|0;
 $120 = $118;
 $121 = $119;
 $122 = (($120) - ($121))|0;
 $123 = (($122|0) / 4)&-1;
 $124 = $123&255;
 $125 = $124&255;
 HEAP32[$114>>2] = $125;
 $126 = ((($0)) + 12|0);
 $127 = $33;
 $29 = $127;
 $128 = $29;
 $129 = ((($128)) + 4|0);
 $130 = HEAP32[$129>>2]|0;
 $131 = HEAP32[$128>>2]|0;
 $132 = $130;
 $133 = $131;
 $134 = (($132) - ($133))|0;
 $135 = (($134|0) / 5)&-1;
 $136 = $135&255;
 HEAP8[$126>>0] = $136;
 $137 = ((($0)) + 14|0);
 HEAP16[$137>>1] = 1;
 STACKTOP = sp;return;
}
function __ZNK11MeshManager9CreateVAOEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $3 = $0;
 $5 = $3;
 _glGenVertexArrays(1,($4|0));
 $6 = HEAP32[$4>>2]|0;
 $7 = ((($5)) + 16|0);
 $8 = HEAP32[3463]|0;
 $9 = (($8) + 1)|0;
 HEAP32[3463] = $9;
 $1 = $7;
 $2 = $8;
 $10 = $1;
 $11 = $2;
 $12 = (($10) + ($11<<2)|0);
 HEAP32[$12>>2] = $6;
 $13 = HEAP32[$4>>2]|0;
 _glBindVertexArray(($13|0));
 $14 = HEAP32[$4>>2]|0;
 STACKTOP = sp;return ($14|0);
}
function __ZNK11MeshManager9UnbindVAOEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 _glBindVertexArray(0);
 STACKTOP = sp;return;
}
function __ZNK4Mesh4BindEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 _glBindVertexArray(($3|0));
 STACKTOP = sp;return;
}
function __ZNK4Mesh6UnbindEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 _glBindVertexArray(0);
 STACKTOP = sp;return;
}
function __ZNK11MeshManager19CreateInstancedMeshEPKfmS1_mS1_mPK9Attributem($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $20 = sp + 44|0;
 $23 = sp + 32|0;
 $27 = sp + 16|0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $18 = $9;
 $35 = $10;
 $36 = (__ZNK11MeshManager9CreateVAOEv($35)|0);
 $19 = $36;
 _glGenBuffers(1,($20|0));
 $37 = HEAP32[$20>>2]|0;
 _glBindBuffer(34962,($37|0));
 $38 = $12;
 $39 = $38<<2;
 $40 = $11;
 _glBufferData(34962,($39|0),($40|0),35044);
 $21 = 0;
 while(1) {
  $41 = $21;
  $42 = $18;
  $43 = ($41>>>0)<($42>>>0);
  if (!($43)) {
   break;
  }
  $44 = $17;
  $45 = $21;
  $46 = (($44) + (($45*5)|0)|0);
  $22 = $46;
  $47 = $22;
  $48 = ((($47)) + 4|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49&255;
  $51 = $50 & 1;
  $52 = ($51|0)!=(0);
  if (!($52)) {
   $53 = $22;
   $54 = HEAP8[$53>>0]|0;
   $55 = $54&255;
   _glEnableVertexAttribArray(($55|0));
   $56 = $22;
   $57 = HEAP8[$56>>0]|0;
   $58 = $57&255;
   $59 = $22;
   $60 = ((($59)) + 1|0);
   $61 = HEAP8[$60>>0]|0;
   $62 = $61 << 24 >> 24;
   $63 = $22;
   $64 = ((($63)) + 2|0);
   $65 = HEAP8[$64>>0]|0;
   $66 = $65&255;
   $67 = $66<<2;
   $68 = $22;
   $69 = ((($68)) + 3|0);
   $70 = HEAP8[$69>>0]|0;
   $71 = $70&255;
   $72 = $71<<2;
   $73 = $72;
   _glVertexAttribPointer(($58|0),($62|0),5126,0,($67|0),($73|0));
  }
  $74 = $21;
  $75 = (($74) + 1)|0;
  $21 = $75;
 }
 _glBindBuffer(34962,0);
 _glGenBuffers(1,($23|0));
 $76 = HEAP32[$23>>2]|0;
 _glBindBuffer(34962,($76|0));
 $77 = $14;
 $78 = $77<<2;
 $79 = $13;
 _glBufferData(34962,($78|0),($79|0),35044);
 $24 = 0;
 while(1) {
  $80 = $24;
  $81 = $18;
  $82 = ($80>>>0)<($81>>>0);
  if (!($82)) {
   break;
  }
  $83 = $17;
  $84 = $24;
  $85 = (($83) + (($84*5)|0)|0);
  $25 = $85;
  $86 = $25;
  $87 = ((($86)) + 4|0);
  $88 = HEAP8[$87>>0]|0;
  $89 = $88&255;
  $90 = $89 & 1;
  $91 = ($90|0)!=(0);
  if ($91) {
   $92 = $25;
   $93 = HEAP8[$92>>0]|0;
   $94 = $93&255;
   _glEnableVertexAttribArray(($94|0));
   $95 = $25;
   $96 = HEAP8[$95>>0]|0;
   $97 = $96&255;
   $98 = $25;
   $99 = ((($98)) + 1|0);
   $100 = HEAP8[$99>>0]|0;
   $101 = $100 << 24 >> 24;
   $102 = $25;
   $103 = ((($102)) + 2|0);
   $104 = HEAP8[$103>>0]|0;
   $105 = $104&255;
   $106 = $105<<2;
   $107 = $25;
   $108 = ((($107)) + 3|0);
   $109 = HEAP8[$108>>0]|0;
   $110 = $109&255;
   $111 = $110<<2;
   $112 = $111;
   _glVertexAttribPointer(($97|0),($101|0),5126,0,($106|0),($112|0));
   $113 = $25;
   $114 = HEAP8[$113>>0]|0;
   $115 = $114&255;
   _glVertexAttribDivisor(($115|0),1);
  }
  $116 = $24;
  $117 = (($116) + 1)|0;
  $24 = $117;
 }
 _glBindBuffer(34962,0);
 _glGenBuffers(1,($27|0));
 $118 = HEAP32[$27>>2]|0;
 $26 = $118;
 $119 = HEAP32[$27>>2]|0;
 _glBindBuffer(34962,($119|0));
 $120 = $16;
 $121 = $120<<2;
 $122 = $15;
 _glBufferData(34962,($121|0),($122|0),35040);
 $28 = 0;
 while(1) {
  $123 = $28;
  $124 = $18;
  $125 = ($123>>>0)<($124>>>0);
  if (!($125)) {
   break;
  }
  $126 = $17;
  $127 = $28;
  $128 = (($126) + (($127*5)|0)|0);
  $29 = $128;
  $129 = $29;
  $130 = ((($129)) + 4|0);
  $131 = HEAP8[$130>>0]|0;
  $132 = $131&255;
  $133 = $132 & 1;
  $134 = ($133|0)!=(0);
  if ($134) {
   $135 = $29;
   $136 = ((($135)) + 4|0);
   $137 = HEAP8[$136>>0]|0;
   $138 = $137&255;
   $139 = $138 & 2;
   $140 = ($139|0)!=(0);
   if ($140) {
    $141 = $29;
    $142 = HEAP8[$141>>0]|0;
    $143 = $142&255;
    _glEnableVertexAttribArray(($143|0));
    $144 = $29;
    $145 = HEAP8[$144>>0]|0;
    $146 = $145&255;
    $147 = $29;
    $148 = ((($147)) + 1|0);
    $149 = HEAP8[$148>>0]|0;
    $150 = $149 << 24 >> 24;
    $151 = $29;
    $152 = ((($151)) + 2|0);
    $153 = HEAP8[$152>>0]|0;
    $154 = $153&255;
    $155 = $154<<2;
    $156 = $29;
    $157 = ((($156)) + 3|0);
    $158 = HEAP8[$157>>0]|0;
    $159 = $158&255;
    $160 = $159<<2;
    $161 = $160;
    _glVertexAttribPointer(($146|0),($150|0),5126,0,($155|0),($161|0));
    $162 = $29;
    $163 = HEAP8[$162>>0]|0;
    $164 = $163&255;
    _glVertexAttribDivisor(($164|0),1);
   }
  }
  $165 = $28;
  $166 = (($165) + 1)|0;
  $28 = $166;
 }
 _glBindBuffer(34962,0);
 __ZNK11MeshManager9UnbindVAOEv($35);
 $167 = $17;
 $168 = ((($167)) + 2|0);
 $169 = HEAP8[$168>>0]|0;
 $170 = $169&255;
 $30 = $170;
 $171 = $17;
 $172 = $18;
 $173 = (($172) - 1)|0;
 $174 = (($171) + (($173*5)|0)|0);
 $175 = ((($174)) + 2|0);
 $176 = HEAP8[$175>>0]|0;
 $177 = $176&255;
 $31 = $177;
 $178 = $12;
 $179 = $30;
 $180 = (($178>>>0) / ($179>>>0))&-1;
 $181 = $180&255;
 $32 = $181;
 $182 = $16;
 $183 = $31;
 $184 = (($182>>>0) / ($183>>>0))&-1;
 $185 = $184&255;
 $33 = $185;
 $186 = $18;
 $187 = $186&255;
 $34 = $187;
 $188 = $19;
 HEAP32[$0>>2] = $188;
 $189 = ((($0)) + 4|0);
 $190 = $26;
 HEAP32[$189>>2] = $190;
 $191 = ((($0)) + 8|0);
 $192 = $32;
 $193 = $192&255;
 HEAP32[$191>>2] = $193;
 $194 = ((($0)) + 12|0);
 $195 = $34;
 HEAP8[$194>>0] = $195;
 $196 = ((($0)) + 14|0);
 $197 = $33;
 $198 = $197&255;
 HEAP16[$196>>1] = $198;
 STACKTOP = sp;return;
}
function __ZNK11MeshManager9UpdateVBOEjjPKfm($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $6;
 _glBindVertexArray(($10|0));
 $11 = $7;
 _glBindBuffer(34962,($11|0));
 $12 = $9;
 $13 = $12<<2;
 _glBufferData(34962,($13|0),(0|0),35040);
 $14 = $9;
 $15 = $14<<2;
 $16 = $8;
 _glBufferSubData(34962,0,($15|0),($16|0));
 _glBindBuffer(34962,0);
 _glBindVertexArray(0);
 STACKTOP = sp;return;
}
function __ZN15DefaultRendererC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1568|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1568|0);
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp;
 $1 = $0;
 $5 = $1;
 $6 = (__ZN13ShaderManager11GetInstanceEv()|0);
 HEAP32[$3>>2] = 8394;
 $7 = ((($3)) + 4|0);
 HEAP32[$7>>2] = 8406;
 HEAP32[$4>>2] = 8427;
 $8 = ((($4)) + 4|0);
 HEAP32[$8>>2] = 8447;
 __ZNK13ShaderManager12CreateShaderILm2ELm2EEEK6ShaderPKcONSt3__25arrayIS4_XT_EEEONS6_IS4_XT0_EEE($2,$6,11855,$3,$4);
 __ZN8RendererC2E6Shader($5,$2);
 __ZN6ShaderD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN13ShaderManager11GetInstanceEv() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $32 = sp + 76|0;
 $51 = sp;
 $50 = 13860;
 $52 = $50;
 $49 = $52;
 $53 = $49;
 $48 = $53;
 $54 = $48;
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)!=(0|0);
 if (!($56)) {
  $57 = (__Znwm(1024)|0);
  __ZN13ShaderManagerC2Ev($57);
  $31 = $51;
  HEAP32[$32>>2] = $57;
  $58 = $31;
  $29 = $58;
  $30 = $32;
  $59 = $29;
  $60 = $30;
  $28 = $60;
  $61 = $28;
  $26 = $59;
  $27 = $61;
  $62 = $26;
  $63 = $27;
  $25 = $63;
  $64 = $25;
  $65 = HEAP32[$64>>2]|0;
  HEAP32[$62>>2] = $65;
  $23 = 13860;
  $24 = $51;
  $66 = $23;
  $67 = $24;
  $21 = $67;
  $68 = $21;
  $20 = $68;
  $69 = $20;
  $19 = $69;
  $70 = $19;
  $71 = HEAP32[$70>>2]|0;
  $22 = $71;
  $18 = $68;
  $72 = $18;
  $17 = $72;
  $73 = $17;
  HEAP32[$73>>2] = 0;
  $74 = $22;
  $8 = $66;
  $9 = $74;
  $75 = $8;
  $7 = $75;
  $76 = $7;
  $6 = $76;
  $77 = $6;
  $78 = HEAP32[$77>>2]|0;
  $10 = $78;
  $79 = $9;
  $3 = $75;
  $80 = $3;
  $2 = $80;
  $81 = $2;
  HEAP32[$81>>2] = $79;
  $82 = $10;
  $83 = ($82|0)!=(0|0);
  if ($83) {
   $1 = $75;
   $84 = $1;
   $0 = $84;
   $85 = $0;
   $86 = $10;
   $4 = $85;
   $5 = $86;
   $87 = $5;
   $88 = ($87|0)==(0|0);
   if (!($88)) {
    __ZN13ShaderManagerD2Ev($87);
    __ZdlPv($87);
   }
  }
  $89 = $24;
  $13 = $89;
  $90 = $13;
  $12 = $90;
  $91 = $12;
  $11 = $91;
  $92 = $11;
  $14 = $92;
  $16 = $66;
  $93 = $16;
  $15 = $93;
  $44 = $51;
  $94 = $44;
  $41 = $94;
  $42 = 0;
  $95 = $41;
  $40 = $95;
  $96 = $40;
  $39 = $96;
  $97 = $39;
  $98 = HEAP32[$97>>2]|0;
  $43 = $98;
  $99 = $42;
  $36 = $95;
  $100 = $36;
  $35 = $100;
  $101 = $35;
  HEAP32[$101>>2] = $99;
  $102 = $43;
  $103 = ($102|0)!=(0|0);
  if ($103) {
   $34 = $95;
   $104 = $34;
   $33 = $104;
   $105 = $33;
   $106 = $43;
   $37 = $105;
   $38 = $106;
   $107 = $38;
   $108 = ($107|0)==(0|0);
   if (!($108)) {
    __ZN13ShaderManagerD2Ev($107);
    __ZdlPv($107);
   }
  }
 }
 $47 = 13860;
 $109 = $47;
 $46 = $109;
 $110 = $46;
 $45 = $110;
 $111 = $45;
 $112 = HEAP32[$111>>2]|0;
 STACKTOP = sp;return ($112|0);
}
function __ZNK13ShaderManager12CreateShaderILm2ELm2EEEK6ShaderPKcONSt3__25arrayIS4_XT_EEEONS6_IS4_XT0_EEE($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $9;
 $14 = $10;
 $15 = $11;
 $7 = $15;
 $8 = 0;
 $16 = $7;
 $17 = $8;
 $18 = (($16) + ($17<<2)|0);
 $19 = $12;
 $5 = $19;
 $6 = 0;
 $20 = $5;
 $21 = $6;
 $22 = (($20) + ($21<<2)|0);
 __ZNK13ShaderManager14GenerateShaderEPKcPS1_mS2_m($0,$13,$14,$18,2,$22,2);
 STACKTOP = sp;return;
}
function __ZN8RendererC2E6Shader($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 dest=$3; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = ((($3)) + 64|0);
 __ZN6ShaderC2ERKS_($4,$1);
 STACKTOP = sp;return;
}
function __ZN6ShaderC2ERKS_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
 $6 = ((($4)) + 12|0);
 $7 = $3;
 $8 = ((($7)) + 12|0);
 __ZNSt3__25arrayINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELm128EEC2ERKS7_($6,$8);
 STACKTOP = sp;return;
}
function __ZNSt3__25arrayINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELm128EEC2ERKS7_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $7 = 0;
 while(1) {
  $6 = (($4) + (($7*12)|0)|0);
  $8 = (($5) + (($7*12)|0)|0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($6,$8);
  $9 = (($7) + 1)|0;
  $10 = ($9|0)==(128);
  if ($10) {
   break;
  } else {
   $7 = $9;
  }
 }
 STACKTOP = sp;return;
}
function __ZN13ShaderManagerC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _memset(($2|0),0,1024)|0;
 STACKTOP = sp;return;
}
function __ZN13ShaderManagerD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $8 = $3;
 $4 = $8;
 $9 = $4;
 $2 = $9;
 $10 = $2;
 $5 = $10;
 $11 = $4;
 $1 = $11;
 $12 = $1;
 $13 = ((($12)) + 1024|0);
 $6 = $13;
 while(1) {
  $14 = $5;
  $15 = $6;
  $16 = ($14|0)!=($15|0);
  if (!($16)) {
   break;
  }
  $17 = $5;
  $18 = HEAP32[$17>>2]|0;
  $7 = $18;
  $19 = $7;
  _glDeleteShader(($19|0));
  $20 = $5;
  $21 = ((($20)) + 4|0);
  $5 = $21;
 }
 STACKTOP = sp;return;
}
function __ZN14ScreenRendererC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1584|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1584|0);
 $2 = sp + 24|0;
 $3 = sp + 16|0;
 $4 = sp;
 $1 = $0;
 $5 = $1;
 $6 = (__ZN13ShaderManager11GetInstanceEv()|0);
 HEAP32[$3>>2] = 8394;
 $7 = ((($3)) + 4|0);
 HEAP32[$7>>2] = 8406;
 HEAP32[$4>>2] = 8427;
 $8 = ((($4)) + 4|0);
 HEAP32[$8>>2] = 8447;
 $9 = ((($8)) + 4|0);
 HEAP32[$9>>2] = 8466;
 __ZNK13ShaderManager12CreateShaderILm2ELm3EEEK6ShaderPKcONSt3__25arrayIS4_XT_EEEONS6_IS4_XT0_EEE($2,$6,8475,$3,$4);
 __ZN8RendererC2E6Shader($5,$2);
 __ZN6ShaderD2Ev($2);
 STACKTOP = sp;return;
}
function __ZNK13ShaderManager12CreateShaderILm2ELm3EEEK6ShaderPKcONSt3__25arrayIS4_XT_EEEONS6_IS4_XT0_EEE($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $9;
 $14 = $10;
 $15 = $11;
 $7 = $15;
 $8 = 0;
 $16 = $7;
 $17 = $8;
 $18 = (($16) + ($17<<2)|0);
 $19 = $12;
 $5 = $19;
 $6 = 0;
 $20 = $5;
 $21 = $6;
 $22 = (($20) + ($21<<2)|0);
 __ZNK13ShaderManager14GenerateShaderEPKcPS1_mS2_m($0,$13,$14,$18,2,$22,3);
 STACKTOP = sp;return;
}
function __ZNK14ScreenRenderer6RenderERK15BasicRenderable($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0;
 var label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $4 = sp + 96|0;
 $5 = sp + 32|0;
 $7 = sp + 8|0;
 $2 = $0;
 $3 = $1;
 $9 = $2;
 dest=$4; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAPF32[$4>>2] = 1.0;
 $10 = ((($4)) + 16|0);
 $11 = ((($10)) + 4|0);
 HEAPF32[$11>>2] = 1.0;
 $12 = ((($4)) + 32|0);
 $13 = ((($12)) + 8|0);
 HEAPF32[$13>>2] = 1.0;
 $14 = ((($4)) + 48|0);
 $15 = ((($14)) + 12|0);
 HEAPF32[$15>>2] = 1.0;
 $16 = $3;
 $17 = ((($16)) + 24|0);
 __ZN3glm5scaleIfLNS_9qualifierE0EEENS_3matILi4ELi4ET_XT0_EEERKS4_RKNS_3vecILi3ES3_XT0_EEE($5,$4,$17);
 dest=$4; src=$5; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $18 = ((($9)) + 64|0);
 __ZNK6Shader4BindEv($18);
 $6 = 0;
 while(1) {
  $19 = $6;
  $20 = $3;
  $21 = ((($20)) + 36|0);
  $22 = ((($21)) + 12|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = ($19|0)<($24|0);
  if (!($25)) {
   break;
  }
  $26 = $6;
  _glEnableVertexAttribArray(($26|0));
  $27 = $6;
  $28 = (($27) + 1)|0;
  $6 = $28;
 }
 $29 = ((($9)) + 64|0);
 __ZNK6Shader11LoadUniformEPKcRKN3glm3matILi4ELi4EfLNS2_9qualifierE0EEE($29,8427,$9);
 $30 = ((($9)) + 64|0);
 __ZNK6Shader11LoadUniformEPKcRKN3glm3matILi4ELi4EfLNS2_9qualifierE0EEE($30,8447,$4);
 $31 = ((($9)) + 64|0);
 $32 = (__ZN6Engine11GetInstanceEv()|0);
 $33 = HEAP16[$32>>1]|0;
 $34 = (+($33&65535));
 $35 = (__ZN6Engine11GetInstanceEv()|0);
 $36 = ((($35)) + 2|0);
 $37 = HEAP16[$36>>1]|0;
 $38 = (+($37&65535));
 $39 = $34 / $38;
 __ZN3glm3vecILi4EfLNS_9qualifierE0EEC2IfiiiEET_T0_T1_T2_($7,$39,1,1,1);
 __ZNK6Shader11LoadUniformEPKcRKN3glm3vecILi4EfLNS2_9qualifierE0EEE($31,8466,$7);
 $40 = $3;
 $41 = ((($40)) + 52|0);
 $42 = HEAP32[$41>>2]|0;
 __ZNK7Texture4BindEa($42,0);
 $43 = $3;
 $44 = ((($43)) + 36|0);
 __ZNK4Mesh4BindEv($44);
 _glDrawArrays(5,0,4);
 $45 = $3;
 $46 = ((($45)) + 36|0);
 __ZNK4Mesh6UnbindEv($46);
 $47 = $3;
 $48 = ((($47)) + 52|0);
 $49 = HEAP32[$48>>2]|0;
 __ZNK7Texture6UnbindEv($49);
 $8 = 0;
 while(1) {
  $50 = $8;
  $51 = $3;
  $52 = ((($51)) + 36|0);
  $53 = ((($52)) + 12|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54&255;
  $56 = ($50|0)<($55|0);
  if (!($56)) {
   break;
  }
  $57 = $8;
  _glDisableVertexAttribArray(($57|0));
  $58 = $8;
  $59 = (($58) + 1)|0;
  $8 = $59;
 }
 $60 = ((($9)) + 64|0);
 __ZNK6Shader6UnbindEv($60);
 STACKTOP = sp;return;
}
function __ZNK6Shader4BindEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 _glUseProgram(($3|0));
 STACKTOP = sp;return;
}
function __ZNK6Shader11LoadUniformEPKcRKN3glm3matILi4ELi4EfLNS2_9qualifierE0EEE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = $4;
 $9 = (__ZNK6Shader18GetUniformLocationEPKc($7,$8)|0);
 $6 = $9;
 $10 = $6;
 $11 = $5;
 $12 = (__ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($11,0)|0);
 $13 = (__ZNK3glm3vecILi4EfLNS_9qualifierE0EEixEi($12,0)|0);
 _glUniformMatrix4fv(($10|0),1,0,($13|0));
 STACKTOP = sp;return;
}
function __ZN3glm3vecILi4EfLNS_9qualifierE0EEC2IfiiiEET_T0_T1_T2_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 $11 = $6;
 HEAPF32[$10>>2] = $11;
 $12 = ((($10)) + 4|0);
 $13 = $7;
 $14 = (+($13|0));
 HEAPF32[$12>>2] = $14;
 $15 = ((($10)) + 8|0);
 $16 = $8;
 $17 = (+($16|0));
 HEAPF32[$15>>2] = $17;
 $18 = ((($10)) + 12|0);
 $19 = $9;
 $20 = (+($19|0));
 HEAPF32[$18>>2] = $20;
 STACKTOP = sp;return;
}
function __ZNK6Shader11LoadUniformEPKcRKN3glm3vecILi4EfLNS2_9qualifierE0EEE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = $4;
 $9 = (__ZNK6Shader18GetUniformLocationEPKc($7,$8)|0);
 $6 = $9;
 $10 = $6;
 $11 = $5;
 $12 = +HEAPF32[$11>>2];
 $13 = $5;
 $14 = ((($13)) + 4|0);
 $15 = +HEAPF32[$14>>2];
 $16 = $5;
 $17 = ((($16)) + 8|0);
 $18 = +HEAPF32[$17>>2];
 $19 = $5;
 $20 = ((($19)) + 12|0);
 $21 = +HEAPF32[$20>>2];
 _glUniform4f(($10|0),(+$12),(+$15),(+$18),(+$21));
 STACKTOP = sp;return;
}
function __ZNK6Shader6UnbindEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 _glUseProgram(0);
 STACKTOP = sp;return;
}
function __ZNK3glm3vecILi4EfLNS_9qualifierE0EEixEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = $4;
 $7 = ($6|0)>=(0);
 if (!($7)) {
  ___assert_fail((8478|0),(8507|0),499,(8540|0));
  // unreachable;
 }
 $8 = $4;
 $9 = (__ZN3glm3vecILi4EfLNS_9qualifierE0EE6lengthEv()|0);
 $10 = ($8|0)<($9|0);
 if (!($10)) {
  ___assert_fail((8478|0),(8507|0),499,(8540|0));
  // unreachable;
 }
 $11 = $4;
 switch ($11|0) {
 case 3:  {
  $14 = ((($5)) + 12|0);
  $2 = $14;
  break;
 }
 case 1:  {
  $12 = ((($5)) + 4|0);
  $2 = $12;
  break;
 }
 case 2:  {
  $13 = ((($5)) + 8|0);
  $2 = $13;
  break;
 }
 default: {
  $2 = $5;
 }
 }
 $15 = $2;
 STACKTOP = sp;return ($15|0);
}
function __ZN11GUIRendererC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1600|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1600|0);
 $2 = sp + 40|0;
 $3 = sp + 8|0;
 $4 = sp;
 $1 = $0;
 $5 = $1;
 $6 = (__ZN13ShaderManager11GetInstanceEv()|0);
 HEAP32[$3>>2] = 8394;
 $7 = ((($3)) + 4|0);
 HEAP32[$7>>2] = 8406;
 $8 = ((($7)) + 4|0);
 HEAP32[$8>>2] = 8551;
 $9 = ((($8)) + 4|0);
 HEAP32[$9>>2] = 8575;
 $10 = ((($9)) + 4|0);
 HEAP32[$10>>2] = 8599;
 $11 = ((($10)) + 4|0);
 HEAP32[$11>>2] = 8623;
 $12 = ((($11)) + 4|0);
 HEAP32[$12>>2] = 8647;
 $13 = ((($12)) + 4|0);
 HEAP32[$13>>2] = 8680;
 HEAP32[$4>>2] = 8427;
 $14 = ((($4)) + 4|0);
 HEAP32[$14>>2] = 8696;
 __ZNK13ShaderManager12CreateShaderILm8ELm2EEEK6ShaderPKcONSt3__25arrayIS4_XT_EEEONS6_IS4_XT0_EEE($2,$6,8716,$3,$4);
 __ZN8RendererC2E6Shader($5,$2);
 __ZN6ShaderD2Ev($2);
 STACKTOP = sp;return;
}
function __ZNK13ShaderManager12CreateShaderILm8ELm2EEEK6ShaderPKcONSt3__25arrayIS4_XT_EEEONS6_IS4_XT0_EEE($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $9;
 $14 = $10;
 $15 = $11;
 $7 = $15;
 $8 = 0;
 $16 = $7;
 $17 = $8;
 $18 = (($16) + ($17<<2)|0);
 $19 = $12;
 $5 = $19;
 $6 = 0;
 $20 = $5;
 $21 = $6;
 $22 = (($20) + ($21<<2)|0);
 __ZNK13ShaderManager14GenerateShaderEPKcPS1_mS2_m($0,$13,$14,$18,8,$22,2);
 STACKTOP = sp;return;
}
function __ZNK11GUIRenderer6RenderERK13GUIRenderable($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = sp + 8|0;
 $2 = $0;
 $3 = $1;
 $9 = $2;
 $10 = $3;
 $4 = $10;
 $11 = $3;
 $12 = ((($11)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $5 = $13;
 $14 = ((($9)) + 64|0);
 __ZNK6Shader4BindEv($14);
 $6 = 0;
 while(1) {
  $15 = $6;
  $16 = $4;
  $17 = ((($16)) + 12|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = ($15|0)<($19|0);
  if (!($20)) {
   break;
  }
  $21 = $6;
  _glEnableVertexAttribArray(($21|0));
  $22 = $6;
  $23 = (($22) + 1)|0;
  $6 = $23;
 }
 $24 = ((($9)) + 64|0);
 __ZNK6Shader11LoadUniformEPKcRKN3glm3matILi4ELi4EfLNS2_9qualifierE0EEE($24,8427,$9);
 $25 = ((($9)) + 64|0);
 __ZN3glm3vecILi2EfLNS_9qualifierE0EEC2IiiEET_T0_($7,0,1);
 __ZNK6Shader11LoadUniformEPKcRKN3glm3vecILi2EfLNS2_9qualifierE0EEE($25,8720,$7);
 $26 = ((($9)) + 64|0);
 $27 = $5;
 $28 = ((($27)) + 13|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = (+($29<<24>>24));
 __ZNK6Shader11LoadUniformEPKcf($26,8696,$30);
 $31 = $5;
 __ZNK7Texture4BindEa($31,0);
 $32 = $4;
 __ZNK4Mesh4BindEv($32);
 $33 = $4;
 $34 = ((($33)) + 8|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $4;
 $37 = ((($36)) + 14|0);
 $38 = HEAP16[$37>>1]|0;
 $39 = $38&65535;
 _glDrawArraysInstanced(5,0,($35|0),($39|0));
 $40 = $4;
 __ZNK4Mesh6UnbindEv($40);
 $41 = $5;
 __ZNK7Texture6UnbindEv($41);
 $8 = 0;
 while(1) {
  $42 = $8;
  $43 = $4;
  $44 = ((($43)) + 12|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = $45&255;
  $47 = ($42|0)<($46|0);
  if (!($47)) {
   break;
  }
  $48 = $8;
  _glDisableVertexAttribArray(($48|0));
  $49 = $8;
  $50 = (($49) + 1)|0;
  $8 = $50;
 }
 $51 = ((($9)) + 64|0);
 __ZNK6Shader6UnbindEv($51);
 STACKTOP = sp;return;
}
function __ZN3glm3vecILi2EfLNS_9qualifierE0EEC2IiiEET_T0_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = (+($7|0));
 HEAPF32[$6>>2] = $8;
 $9 = ((($6)) + 4|0);
 $10 = $5;
 $11 = (+($10|0));
 HEAPF32[$9>>2] = $11;
 STACKTOP = sp;return;
}
function __ZNK6Shader11LoadUniformEPKcRKN3glm3vecILi2EfLNS2_9qualifierE0EEE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = $4;
 $9 = (__ZNK6Shader18GetUniformLocationEPKc($7,$8)|0);
 $6 = $9;
 $10 = $6;
 $11 = $5;
 $12 = +HEAPF32[$11>>2];
 $13 = $5;
 $14 = ((($13)) + 4|0);
 $15 = +HEAPF32[$14>>2];
 _glUniform2f(($10|0),(+$12),(+$15));
 STACKTOP = sp;return;
}
function __ZNK6Shader11LoadUniformEPKcf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $10 = 0, $11 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = $4;
 $9 = (__ZNK6Shader18GetUniformLocationEPKc($7,$8)|0);
 $6 = $9;
 $10 = $6;
 $11 = $5;
 _glUniform1f(($10|0),(+$11));
 STACKTOP = sp;return;
}
function __ZNK6Shader18GetUniformLocationEPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 12|0);
 $6 = $3;
 $7 = (__ZL7IndexOfRKNSt3__25arrayINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELm128EEEPKc($5,$6)|0);
 STACKTOP = sp;return ($7|0);
}
function __ZL7IndexOfRKNSt3__25arrayINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELm128EEEPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = 0;
 while(1) {
  $10 = $8;
  $11 = $6;
  $4 = $11;
  $12 = ($10>>>0)<(128);
  if (!($12)) {
   label = 6;
   break;
  }
  $13 = $6;
  $14 = $8;
  $2 = $13;
  $3 = $14;
  $15 = $2;
  $16 = $3;
  $17 = (($15) + (($16*12)|0)|0);
  $9 = $17;
  $18 = $9;
  $19 = $7;
  $20 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($18,$19)|0);
  $21 = ($20|0)==(0);
  $22 = $8;
  if ($21) {
   label = 4;
   break;
  }
  $23 = (($22) + 1)|0;
  $8 = $23;
 }
 if ((label|0) == 4) {
  $5 = $22;
  $24 = $5;
  STACKTOP = sp;return ($24|0);
 }
 else if ((label|0) == 6) {
  $5 = -1;
  $24 = $5;
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function __ZNK13ShaderManager14GenerateShaderEPKcPS1_mS2_m($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4320|0);
 $vararg_buffer1 = sp + 680|0;
 $vararg_buffer = sp + 672|0;
 $21 = sp + 664|0;
 $24 = sp + 4304|0;
 $51 = sp + 4303|0;
 $52 = sp + 4302|0;
 $55 = sp + 656|0;
 $58 = sp + 4301|0;
 $81 = sp + 648|0;
 $84 = sp + 4300|0;
 $111 = sp + 4299|0;
 $112 = sp + 4298|0;
 $115 = sp + 640|0;
 $118 = sp + 4297|0;
 $135 = sp + 4296|0;
 $138 = sp + 512|0;
 $141 = sp + 3812|0;
 $142 = sp;
 $144 = sp + 2272|0;
 $145 = sp + 736|0;
 $149 = sp + 708|0;
 $153 = sp + 684|0;
 $129 = $1;
 $130 = $2;
 $131 = $3;
 $132 = $4;
 $133 = $5;
 $134 = $6;
 $154 = $129;
 __ZZNK13ShaderManager14GenerateShaderEPKcPS1_mS2_mENK3__0clEv($135);
 $155 = $130;
 $156 = (__ZN11StringUtils13string_formatIJPKcS2_S2_S2_EEES2_PctS2_DpT_($138,128,8733,8745,$155,8764,8767)|0);
 $157 = (__ZN9FileUtils22LoadTextFileFromAssetsEPKc($156)|0);
 $139 = $157;
 $158 = $130;
 $159 = (__ZN11StringUtils13string_formatIJPKcS2_S2_S2_EEES2_PctS2_DpT_($138,128,8733,8745,$158,8772,8767)|0);
 $160 = (__ZN9FileUtils22LoadTextFileFromAssetsEPKc($159)|0);
 $140 = $160;
 $161 = $139;
 $162 = (__ZL13create_shaderjPKc(35633,$161)|0);
 $136 = $162;
 $163 = $140;
 $164 = (__ZL13create_shaderjPKc(35632,$163)|0);
 $137 = $164;
 $165 = $139;
 $166 = ($165|0)==(0|0);
 if (!($166)) {
  __ZdaPv($165);
 }
 $167 = $140;
 $168 = ($167|0)==(0|0);
 if (!($168)) {
  __ZdaPv($167);
 }
 $169 = (_glCreateProgram()|0);
 $143 = $169;
 $170 = $143;
 $171 = HEAP8[14484]|0;
 $172 = (($171) + 1)<<24>>24;
 HEAP8[14484] = $172;
 $173 = $171&255;
 $127 = $154;
 $128 = $173;
 $174 = $127;
 $175 = $128;
 $176 = (($174) + ($175<<2)|0);
 HEAP32[$176>>2] = $170;
 $177 = $143;
 $178 = $136;
 _glAttachShader(($177|0),($178|0));
 $179 = $143;
 $180 = $137;
 _glAttachShader(($179|0),($180|0));
 $181 = $143;
 _glLinkProgram(($181|0));
 $182 = $143;
 _glGetProgramiv(($182|0),35714,($141|0));
 $183 = HEAP32[$141>>2]|0;
 $184 = ($183|0)!=(0);
 if (!($184)) {
  $185 = $143;
  _glGetProgramInfoLog(($185|0),512,(0|0),($142|0));
  (_printf(8775,$vararg_buffer)|0);
 }
 $186 = $143;
 _glValidateProgram(($186|0));
 $187 = $143;
 _glGetProgramiv(($187|0),35715,($141|0));
 $188 = HEAP32[$141>>2]|0;
 $189 = ($188|0)!=(0);
 if (!($189)) {
  $190 = $143;
  _glGetProgramInfoLog(($190|0),512,(0|0),($142|0));
  (_printf(8802,$vararg_buffer1)|0);
 }
 __ZNSt3__25arrayINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELm128EEC2Ev($144);
 __ZNSt3__25arrayINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELm128EEC2Ev($145);
 $146 = 0;
 while(1) {
  $191 = $146;
  $192 = $132;
  $193 = ($191>>>0)<($192>>>0);
  if (!($193)) {
   break;
  }
  $194 = $131;
  $195 = $146;
  $196 = (($194) + ($195<<2)|0);
  $197 = HEAP32[$196>>2]|0;
  $147 = $197;
  $198 = $143;
  $199 = $147;
  $200 = (_glGetAttribLocation(($198|0),($199|0))|0);
  $148 = $200;
  $201 = $147;
  $125 = $149;
  $126 = $201;
  $202 = $125;
  $124 = $202;
  $203 = $124;
  $123 = $203;
  $204 = $123;
  ;HEAP32[$204>>2]=0|0;HEAP32[$204+4>>2]=0|0;HEAP32[$204+8>>2]=0|0;
  $122 = $203;
  $205 = $122;
  $121 = $205;
  $206 = $126;
  $207 = $126;
  $208 = (__ZNSt3__211char_traitsIcE6lengthEPKc($207)|0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($202,$206,$208);
  $209 = $148;
  $119 = $144;
  $120 = $209;
  $210 = $119;
  $211 = $120;
  $212 = (($210) + (($211*12)|0)|0);
  $116 = $212;
  $117 = $149;
  $213 = $116;
  $214 = $117;
  ;HEAP8[$115>>0]=HEAP8[$118>>0]|0;
  $113 = $213;
  $114 = $214;
  $215 = $113;
  $110 = $215;
  $216 = $110;
  $109 = $216;
  $108 = $216;
  $217 = $108;
  $107 = $217;
  $218 = $107;
  $106 = $218;
  $219 = $106;
  $220 = ((($219)) + 11|0);
  $221 = HEAP8[$220>>0]|0;
  $222 = $221&255;
  $223 = $222 & 128;
  $224 = ($223|0)!=(0);
  if ($224) {
   $101 = $216;
   $225 = $101;
   $100 = $225;
   $226 = $100;
   $99 = $226;
   $227 = $99;
   $228 = HEAP32[$227>>2]|0;
   HEAP8[$111>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($228,$111);
   $92 = $216;
   $93 = 0;
   $229 = $92;
   $230 = $93;
   $91 = $229;
   $231 = $91;
   $90 = $231;
   $232 = $90;
   $233 = ((($232)) + 4|0);
   HEAP32[$233>>2] = $230;
  } else {
   $98 = $216;
   $234 = $98;
   $97 = $234;
   $235 = $97;
   $96 = $235;
   $236 = $96;
   $95 = $236;
   $237 = $95;
   $94 = $237;
   $238 = $94;
   HEAP8[$112>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($238,$112);
   $104 = $216;
   $105 = 0;
   $239 = $104;
   $240 = $105;
   $241 = $240&255;
   $103 = $239;
   $242 = $103;
   $102 = $242;
   $243 = $102;
   $244 = ((($243)) + 11|0);
   HEAP8[$244>>0] = $241;
  }
  $89 = $215;
  $245 = $89;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($245,0);
  $246 = $114;
  $88 = $246;
  $247 = $88;
  $87 = $247;
  $248 = $87;
  $86 = $215;
  $249 = $86;
  $85 = $249;
  $250 = $85;
  ;HEAP32[$250>>2]=HEAP32[$248>>2]|0;HEAP32[$250+4>>2]=HEAP32[$248+4>>2]|0;HEAP32[$250+8>>2]=HEAP32[$248+8>>2]|0;
  $251 = $114;
  $82 = $215;
  $83 = $251;
  $252 = $82;
  $253 = $83;
  ;HEAP8[$81>>0]=HEAP8[$84>>0]|0;
  $79 = $252;
  $80 = $253;
  $254 = $79;
  $255 = $80;
  $78 = $255;
  $256 = $78;
  $77 = $256;
  $257 = $77;
  $76 = $257;
  $258 = $76;
  $72 = $258;
  $75 = $254;
  $259 = $75;
  $74 = $259;
  $260 = $74;
  $73 = $260;
  $261 = $114;
  $69 = $261;
  $262 = $69;
  $68 = $262;
  $263 = $68;
  $67 = $263;
  $264 = $67;
  $70 = $264;
  $71 = 0;
  while(1) {
   $265 = $71;
   $266 = ($265>>>0)<(3);
   if (!($266)) {
    break;
   }
   $267 = $70;
   $268 = $71;
   $269 = (($267) + ($268<<2)|0);
   HEAP32[$269>>2] = 0;
   $270 = $71;
   $271 = (($270) + 1)|0;
   $71 = $271;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($149);
  $272 = $146;
  $273 = (($272) + 1)|0;
  $146 = $273;
 }
 $150 = 0;
 while(1) {
  $274 = $150;
  $275 = $134;
  $276 = ($274>>>0)<($275>>>0);
  if (!($276)) {
   break;
  }
  $277 = $133;
  $278 = $150;
  $279 = (($277) + ($278<<2)|0);
  $280 = HEAP32[$279>>2]|0;
  $151 = $280;
  $281 = $143;
  $282 = $151;
  $283 = (_glGetUniformLocation(($281|0),($282|0))|0);
  $152 = $283;
  $284 = $151;
  $65 = $153;
  $66 = $284;
  $285 = $65;
  $64 = $285;
  $286 = $64;
  $63 = $286;
  $287 = $63;
  ;HEAP32[$287>>2]=0|0;HEAP32[$287+4>>2]=0|0;HEAP32[$287+8>>2]=0|0;
  $62 = $286;
  $288 = $62;
  $61 = $288;
  $289 = $66;
  $290 = $66;
  $291 = (__ZNSt3__211char_traitsIcE6lengthEPKc($290)|0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($285,$289,$291);
  $292 = $152;
  $59 = $145;
  $60 = $292;
  $293 = $59;
  $294 = $60;
  $295 = (($293) + (($294*12)|0)|0);
  $56 = $295;
  $57 = $153;
  $296 = $56;
  $297 = $57;
  ;HEAP8[$55>>0]=HEAP8[$58>>0]|0;
  $53 = $296;
  $54 = $297;
  $298 = $53;
  $50 = $298;
  $299 = $50;
  $49 = $299;
  $48 = $299;
  $300 = $48;
  $47 = $300;
  $301 = $47;
  $46 = $301;
  $302 = $46;
  $303 = ((($302)) + 11|0);
  $304 = HEAP8[$303>>0]|0;
  $305 = $304&255;
  $306 = $305 & 128;
  $307 = ($306|0)!=(0);
  if ($307) {
   $41 = $299;
   $308 = $41;
   $40 = $308;
   $309 = $40;
   $39 = $309;
   $310 = $39;
   $311 = HEAP32[$310>>2]|0;
   HEAP8[$51>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($311,$51);
   $32 = $299;
   $33 = 0;
   $312 = $32;
   $313 = $33;
   $31 = $312;
   $314 = $31;
   $30 = $314;
   $315 = $30;
   $316 = ((($315)) + 4|0);
   HEAP32[$316>>2] = $313;
  } else {
   $38 = $299;
   $317 = $38;
   $37 = $317;
   $318 = $37;
   $36 = $318;
   $319 = $36;
   $35 = $319;
   $320 = $35;
   $34 = $320;
   $321 = $34;
   HEAP8[$52>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($321,$52);
   $44 = $299;
   $45 = 0;
   $322 = $44;
   $323 = $45;
   $324 = $323&255;
   $43 = $322;
   $325 = $43;
   $42 = $325;
   $326 = $42;
   $327 = ((($326)) + 11|0);
   HEAP8[$327>>0] = $324;
  }
  $29 = $298;
  $328 = $29;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($328,0);
  $329 = $54;
  $28 = $329;
  $330 = $28;
  $27 = $330;
  $331 = $27;
  $26 = $298;
  $332 = $26;
  $25 = $332;
  $333 = $25;
  ;HEAP32[$333>>2]=HEAP32[$331>>2]|0;HEAP32[$333+4>>2]=HEAP32[$331+4>>2]|0;HEAP32[$333+8>>2]=HEAP32[$331+8>>2]|0;
  $334 = $54;
  $22 = $298;
  $23 = $334;
  $335 = $22;
  $336 = $23;
  ;HEAP8[$21>>0]=HEAP8[$24>>0]|0;
  $19 = $335;
  $20 = $336;
  $337 = $19;
  $338 = $20;
  $18 = $338;
  $339 = $18;
  $17 = $339;
  $340 = $17;
  $16 = $340;
  $341 = $16;
  $12 = $341;
  $15 = $337;
  $342 = $15;
  $14 = $342;
  $343 = $14;
  $13 = $343;
  $344 = $54;
  $9 = $344;
  $345 = $9;
  $8 = $345;
  $346 = $8;
  $7 = $346;
  $347 = $7;
  $10 = $347;
  $11 = 0;
  while(1) {
   $348 = $11;
   $349 = ($348>>>0)<(3);
   if (!($349)) {
    break;
   }
   $350 = $10;
   $351 = $11;
   $352 = (($350) + ($351<<2)|0);
   HEAP32[$352>>2] = 0;
   $353 = $11;
   $354 = (($353) + 1)|0;
   $11 = $354;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($153);
  $355 = $150;
  $356 = (($355) + 1)|0;
  $150 = $356;
 }
 $357 = $143;
 $358 = $136;
 _glDetachShader(($357|0),($358|0));
 $359 = $143;
 $360 = $137;
 _glDetachShader(($359|0),($360|0));
 $361 = $136;
 _glDeleteShader(($361|0));
 $362 = $137;
 _glDeleteShader(($362|0));
 _glUseProgram(0);
 $363 = $143;
 HEAP32[$0>>2] = $363;
 $364 = ((($0)) + 4|0);
 $365 = $136;
 HEAP32[$364>>2] = $365;
 $366 = ((($0)) + 8|0);
 $367 = $137;
 HEAP32[$366>>2] = $367;
 $368 = ((($0)) + 12|0);
 __ZNSt3__25arrayINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELm128EEC2ERKS7_($368,$145);
 __ZNSt3__25arrayINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELm128EED2Ev($145);
 __ZNSt3__25arrayINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELm128EED2Ev($144);
 STACKTOP = sp;return;
}
function __ZZNK13ShaderManager14GenerateShaderEPKcPS1_mS2_mENK3__0clEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZN11StringUtils13string_formatIJPKcS2_S2_S2_EEES2_PctS2_DpT_($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $15 = $7;
 $16 = $8;
 $17 = $16&65535;
 $18 = $9;
 $19 = $10;
 $20 = $11;
 $21 = $12;
 $22 = $13;
 HEAP32[$vararg_buffer>>2] = $19;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $20;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $21;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $22;
 $23 = (_snprintf($15,$17,$18,$vararg_buffer)|0);
 $14 = $23;
 $24 = $7;
 STACKTOP = sp;return ($24|0);
}
function __ZL13create_shaderjPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$alloca_mul = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = sp + 28|0;
 $6 = sp + 20|0;
 $7 = sp + 16|0;
 $3 = $0;
 HEAP32[$4>>2] = $1;
 $9 = $3;
 $10 = (_glCreateShader(($9|0))|0);
 $5 = $10;
 $11 = $5;
 _glShaderSource(($11|0),1,($4|0),(0|0));
 $12 = $5;
 _glCompileShader(($12|0));
 $13 = $5;
 _glGetShaderiv(($13|0),35713,($6|0));
 $14 = HEAP32[$6>>2]|0;
 $15 = ($14|0)!=(0);
 if ($15) {
  $27 = $5;
  $2 = $27;
  $28 = $2;
  STACKTOP = sp;return ($28|0);
 } else {
  HEAP32[$7>>2] = 0;
  $16 = $5;
  _glGetShaderiv(($16|0),35716,($7|0));
  $17 = HEAP32[$7>>2]|0;
  $$alloca_mul = $17;
  $18 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
  $8 = $18;
  $19 = $5;
  $20 = HEAP32[$7>>2]|0;
  $21 = $8;
  _glGetShaderInfoLog(($19|0),($20|0),(0|0),($21|0));
  $22 = $3;
  $23 = ($22|0)==(35633);
  $24 = $23 ? 8832 : 8839;
  $25 = HEAP32[$4>>2]|0;
  HEAP32[$vararg_buffer>>2] = $24;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $25;
  (_printf(8848,$vararg_buffer)|0);
  $26 = $8;
  HEAP32[$vararg_buffer2>>2] = $26;
  (_printf(8879,$vararg_buffer2)|0);
  $2 = 0;
  $28 = $2;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function __ZNSt3__25arrayINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELm128EEC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $11 = $0;
 $12 = $11;
 $13 = ((($12)) + 1536|0);
 $14 = $12;
 while(1) {
  $10 = $14;
  $15 = $10;
  $9 = $15;
  $16 = $9;
  $8 = $16;
  $17 = $8;
  ;HEAP32[$17>>2]=0|0;HEAP32[$17+4>>2]=0|0;HEAP32[$17+8>>2]=0|0;
  $7 = $16;
  $18 = $7;
  $6 = $18;
  $3 = $15;
  $19 = $3;
  $2 = $19;
  $20 = $2;
  $1 = $20;
  $21 = $1;
  $4 = $21;
  $5 = 0;
  while(1) {
   $22 = $5;
   $23 = ($22>>>0)<(3);
   if (!($23)) {
    break;
   }
   $24 = $4;
   $25 = $5;
   $26 = (($24) + ($25<<2)|0);
   HEAP32[$26>>2] = 0;
   $27 = $5;
   $28 = (($27) + 1)|0;
   $5 = $28;
  }
  $29 = ((($14)) + 12|0);
  $30 = ($29|0)==($13|0);
  if ($30) {
   break;
  } else {
   $14 = $29;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__211char_traitsIcE6lengthEPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_strlen($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZNSt3__211char_traitsIcE6assignERcRKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = HEAP8[$4>>0]|0;
 $6 = $2;
 HEAP8[$6>>0] = $5;
 STACKTOP = sp;return;
}
function __ZN9MenuStateD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZN9MenuStateD2Ev($2);
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZN9MenuState4InitEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZN9MenuState4DestEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZN9MenuState7OnEventERK5Event($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $10 = $4;
 $11 = ((($10)) + 4|0);
 $6 = $11;
 $12 = $6;
 $3 = $12;
 $13 = $3;
 $7 = $13;
 $14 = $6;
 $2 = $14;
 $15 = $2;
 $16 = ((($15)) + 16|0);
 $8 = $16;
 while(1) {
  $17 = $7;
  $18 = $8;
  $19 = ($17|0)!=($18|0);
  if (!($19)) {
   break;
  }
  $20 = $7;
  $9 = $20;
  $21 = $9;
  $22 = HEAP32[$21>>2]|0;
  $23 = (__ZNK5Layer9IsEnabledEv($22)|0);
  if ($23) {
   $24 = $9;
   $25 = HEAP32[$24>>2]|0;
   $26 = HEAP32[$25>>2]|0;
   $27 = ((($26)) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $5;
   FUNCTION_TABLE_vii[$28 & 511]($25,$29);
  }
  $30 = $7;
  $31 = ((($30)) + 4|0);
  $7 = $31;
 }
 STACKTOP = sp;return;
}
function __ZN9MenuState8OnUpdateEf($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 16|0;
 $4 = $0;
 HEAPF32[$5>>2] = $1;
 $10 = $4;
 $11 = ((($10)) + 4|0);
 $6 = $11;
 $12 = $6;
 $3 = $12;
 $13 = $3;
 $7 = $13;
 $14 = $6;
 $2 = $14;
 $15 = $2;
 $16 = ((($15)) + 16|0);
 $8 = $16;
 while(1) {
  $17 = $7;
  $18 = $8;
  $19 = ($17|0)!=($18|0);
  if (!($19)) {
   break;
  }
  $20 = $7;
  $9 = $20;
  $21 = $9;
  $22 = HEAP32[$21>>2]|0;
  $23 = (__ZNK5Layer9IsEnabledEv($22)|0);
  if ($23) {
   $24 = $9;
   $25 = HEAP32[$24>>2]|0;
   $26 = HEAP32[$25>>2]|0;
   $27 = ((($26)) + 20|0);
   $28 = HEAP32[$27>>2]|0;
   FUNCTION_TABLE_vii[$28 & 511]($25,$5);
  }
  $29 = $7;
  $30 = ((($29)) + 4|0);
  $7 = $30;
 }
 STACKTOP = sp;return;
}
function __ZN9MenuState8OnRenderEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $8 = $3;
 $9 = ((($8)) + 4|0);
 $4 = $9;
 $10 = $4;
 $2 = $10;
 $11 = $2;
 $5 = $11;
 $12 = $4;
 $1 = $12;
 $13 = $1;
 $14 = ((($13)) + 16|0);
 $6 = $14;
 while(1) {
  $15 = $5;
  $16 = $6;
  $17 = ($15|0)!=($16|0);
  if (!($17)) {
   break;
  }
  $18 = $5;
  $7 = $18;
  $19 = $7;
  $20 = HEAP32[$19>>2]|0;
  $21 = (__ZNK5Layer9IsEnabledEv($20)|0);
  if ($21) {
   $22 = $7;
   $23 = HEAP32[$22>>2]|0;
   $24 = HEAP32[$23>>2]|0;
   $25 = ((($24)) + 24|0);
   $26 = HEAP32[$25>>2]|0;
   FUNCTION_TABLE_vi[$26 & 511]($23);
  }
  $27 = $5;
  $28 = ((($27)) + 4|0);
  $5 = $28;
 }
 STACKTOP = sp;return;
}
function __ZNK5Layer9IsEnabledEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 73|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&1;
 STACKTOP = sp;return ($5|0);
}
function __ZN9MenuStateC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 ;HEAP32[$2>>2]=0|0;
 __ZN5StateC2Ev($2);
 HEAP32[$2>>2] = (4964);
 $3 = ((($2)) + 4|0);
 $4 = (__ZN12LayerManager11GetInstanceEv()|0);
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 4|0);
 $6 = (__ZN12LayerManager11GetInstanceEv()|0);
 $7 = ((($6)) + 132|0);
 HEAP32[$5>>2] = $7;
 $8 = ((($5)) + 4|0);
 $9 = (__ZN12LayerManager11GetInstanceEv()|0);
 $10 = ((($9)) + 432|0);
 HEAP32[$8>>2] = $10;
 $11 = ((($8)) + 4|0);
 $12 = (__ZN12LayerManager11GetInstanceEv()|0);
 $13 = ((($12)) + 564|0);
 HEAP32[$11>>2] = $13;
 STACKTOP = sp;return;
}
function __ZN5StateC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = (5000);
 STACKTOP = sp;return;
}
function __ZN5StateD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 _llvm_trap();
 // unreachable;
}
function __ZN12StateManagerC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZN9MenuStateC2Ev($2);
 $3 = ((($2)) + 20|0);
 HEAP8[$3>>0] = 0;
 $4 = ((($2)) + 24|0);
 HEAP32[$4>>2] = $2;
 __ZN12StateManager8SetStateEh($2,0);
 STACKTOP = sp;return;
}
function __ZN12StateManager8SetStateEh($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $6;
 $9 = ((($8)) + 24|0);
 $10 = ((($8)) + 20|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $4 = $9;
 $5 = $12;
 $13 = $4;
 $14 = $5;
 $15 = (($13) + ($14<<2)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 FUNCTION_TABLE_vi[$19 & 511]($16);
 $20 = $7;
 $21 = ((($8)) + 20|0);
 HEAP8[$21>>0] = $20;
 $22 = ((($8)) + 24|0);
 $23 = ((($8)) + 20|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $2 = $22;
 $3 = $25;
 $26 = $2;
 $27 = $3;
 $28 = (($26) + ($27<<2)|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($30)) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 FUNCTION_TABLE_vi[$32 & 511]($29);
 STACKTOP = sp;return;
}
function __ZN9FileUtils22LoadTextFileFromAssetsEPKc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $1 = $0;
 $5 = $1;
 $6 = (_fopen($5,8915)|0);
 $2 = $6;
 $7 = $2;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  $9 = $1;
  HEAP32[$vararg_buffer>>2] = $9;
  (_printf(8918,$vararg_buffer)|0);
 }
 $10 = $2;
 (_fseek($10,0,2)|0);
 $11 = $2;
 $12 = (_ftell($11)|0);
 $3 = $12;
 $13 = $3;
 $14 = (($13) + 1)|0;
 $15 = (__Znam($14)|0);
 $4 = $15;
 $16 = $4;
 $17 = $3;
 $18 = (($17) + 1)|0;
 _memset(($16|0),0,($18|0))|0;
 $19 = $2;
 (_fseek($19,0,0)|0);
 $20 = $4;
 $21 = $3;
 $22 = $2;
 (_fread($20,1,$21,$22)|0);
 $23 = $2;
 (_fclose($23)|0);
 $24 = $4;
 STACKTOP = sp;return ($24|0);
}
function __ZN9FileUtils8CopyFileEPKcS1_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val5 = 0, $$expand_i1_val7 = 0, $$pre_trunc = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 29|0;
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = (_fopen($8,9621)|0);
 $5 = $9;
 $10 = $5;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  $12 = $3;
  HEAP32[$vararg_buffer>>2] = $12;
  (_printf(8944,$vararg_buffer)|0);
  $13 = $5;
  (_fclose($13)|0);
  $$expand_i1_val = 0;
  HEAP8[$2>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$2>>0]|0;
  $31 = $$pre_trunc&1;
  STACKTOP = sp;return ($31|0);
 }
 $14 = $4;
 $15 = (_fopen($14,8975)|0);
 $6 = $15;
 $16 = $6;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  $18 = $4;
  HEAP32[$vararg_buffer1>>2] = $18;
  (_printf(8978,$vararg_buffer1)|0);
  $19 = $5;
  (_fclose($19)|0);
  $20 = $6;
  (_fclose($20)|0);
  $$expand_i1_val5 = 0;
  HEAP8[$2>>0] = $$expand_i1_val5;
  $$pre_trunc = HEAP8[$2>>0]|0;
  $31 = $$pre_trunc&1;
  STACKTOP = sp;return ($31|0);
 }
 while(1) {
  $21 = $5;
  $22 = (_fgetc($21)|0);
  $23 = $22&255;
  $7 = $23;
  $24 = $23 << 24 >> 24;
  $25 = ($24|0)!=(-1);
  if (!($25)) {
   break;
  }
  $26 = $7;
  $27 = $26 << 24 >> 24;
  $28 = $6;
  (_fputc($27,$28)|0);
 }
 $29 = $5;
 (_fclose($29)|0);
 $30 = $6;
 (_fclose($30)|0);
 $$expand_i1_val7 = 1;
 HEAP8[$2>>0] = $$expand_i1_val7;
 $$pre_trunc = HEAP8[$2>>0]|0;
 $31 = $$pre_trunc&1;
 STACKTOP = sp;return ($31|0);
}
function ___em_js__say_hello() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (9011|0);
}
function __Z13dispatch_mainPv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $2 = $3;
 $4 = $2;
 __ZNKSt3__28functionIFvvEEclEv($4);
 STACKTOP = sp;return;
}
function __ZNKSt3__28functionIFvvEEclEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = (___cxa_allocate_exception(4)|0);
  ;HEAP32[$6>>2]=0|0;
  __ZNSt3__217bad_function_callC2Ev($6);
  ___cxa_throw(($6|0),(3560|0),(209|0));
  // unreachable;
 } else {
  $7 = ((($2)) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 24|0);
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_vi[$11 & 511]($8);
  STACKTOP = sp;return;
 }
}
function _main() {
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $$byval_copy = sp + 136|0;
 $vararg_buffer = sp + 24|0;
 $1 = sp + 88|0;
 $2 = sp + 68|0;
 $5 = sp + 56|0;
 $8 = sp;
 $9 = sp + 32|0;
 $0 = 0;
 __ZN20ConfigurationManagerC2Ev($1);
 (__ZN6Engine11GetInstanceEv()|0);
 __ZN6WindowC2EttbPKc($2,480,360,0,9079);
 (__ZN6Window4InitEv($2)|0);
 $10 = (_glewInit()|0);
 $3 = $10;
 $11 = $3;
 $12 = (0)!=($11|0);
 if ($12) {
  $13 = $3;
  $14 = (_glewGetErrorString(($13|0))|0);
  HEAP32[$vararg_buffer>>2] = $14;
  (_printf(9097,$vararg_buffer)|0);
  __ZN6Window4DestEv($2);
  $0 = 1;
  $4 = 1;
  __ZN6WindowD2Ev($2);
  __ZN20ConfigurationManagerD2Ev($1);
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 } else {
  (__ZN14TextureManager11GetInstanceEv()|0);
  (__ZN13ShaderManager11GetInstanceEv()|0);
  (__ZN11MeshManager11GetInstanceEv()|0);
  (__ZN15RendererManager11GetInstanceEv()|0);
  (__ZN12LayerManager11GetInstanceEv()|0);
  (__ZN12StateManager11GetInstanceEv()|0);
  $15 = (+_glfwGetTime());
  $16 = $15;
  HEAPF32[$5>>2] = $16;
  _glClearColor(0.20000000298023224,0.30000001192092896,0.80000001192092896,1.0);
  _glEnable(2929);
  _glEnable(2884);
  _glCullFace(1029);
  $17 = (__ZN6Engine11GetInstanceEv()|0);
  $18 = ((($17)) + 12|0);
  $6 = $18;
  $19 = $6;
  HEAP8[$19>>0] = 1;
  $20 = (__ZN12StateManager11GetInstanceEv()|0);
  $7 = $20;
  HEAP32[$9>>2] = $2;
  $21 = ((($9)) + 4|0);
  $22 = $6;
  HEAP32[$21>>2] = $22;
  $23 = ((($9)) + 8|0);
  HEAP32[$23>>2] = $5;
  $24 = ((($9)) + 12|0);
  $25 = $7;
  HEAP32[$24>>2] = $25;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$9>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$9+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$9+12>>2]|0;
  __ZNSt3__28functionIFvvEEC2IZ4mainE3__0vEET_($8,$$byval_copy);
  _emscripten_set_main_loop_arg((268|0),($8|0),0,1);
  (_emscripten_set_main_loop_timing(1,1)|0);
  __ZN6Window4DestEv($2);
  $0 = 0;
  $4 = 1;
  __ZNSt3__28functionIFvvEED2Ev($8);
  __ZN6WindowD2Ev($2);
  __ZN20ConfigurationManagerD2Ev($1);
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function __ZN20ConfigurationManagerC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZN20ConfigurationManager18LoadConfigurationsI15SettingsConfigsEET_PKc($2,$2,9307);
 $3 = ((($2)) + 24|0);
 ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;HEAP32[$3+12>>2]=0|0;HEAP32[$3+16>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNSt3__28functionIFvvEEC2IZ4mainE3__0vEET_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(592|0);
 $9 = sp + 128|0;
 $10 = sp + 120|0;
 $11 = sp + 112|0;
 $12 = sp + 104|0;
 $16 = sp + 590|0;
 $17 = sp + 589|0;
 $18 = sp + 588|0;
 $19 = sp + 587|0;
 $21 = sp + 528|0;
 $30 = sp + 96|0;
 $31 = sp + 88|0;
 $32 = sp + 80|0;
 $33 = sp + 72|0;
 $37 = sp + 586|0;
 $38 = sp + 585|0;
 $39 = sp + 584|0;
 $40 = sp + 583|0;
 $42 = sp + 476|0;
 $48 = sp + 64|0;
 $49 = sp + 56|0;
 $50 = sp + 48|0;
 $56 = sp + 40|0;
 $57 = sp + 32|0;
 $58 = sp + 24|0;
 $61 = sp + 582|0;
 $62 = sp + 424|0;
 $63 = sp + 581|0;
 $64 = sp + 580|0;
 $65 = sp + 420|0;
 $66 = sp + 579|0;
 $67 = sp + 16|0;
 $68 = sp + 8|0;
 $69 = sp;
 $74 = sp + 578|0;
 $75 = sp + 400|0;
 $76 = sp + 396|0;
 $102 = sp + 292|0;
 $137 = sp + 577|0;
 $138 = sp + 144|0;
 $139 = sp + 136|0;
 $140 = sp + 576|0;
 $136 = $0;
 $141 = $136;
 $142 = ((($141)) + 16|0);
 HEAP32[$142>>2] = 0;
 $135 = $1;
 $134 = $137;
 $112 = $137;
 $113 = 1;
 $114 = 0;
 $143 = $112;
 $144 = $113;
 $111 = $143;
 $145 = ($144>>>0)>(214748364);
 if ($145) {
  $109 = 9129;
  $146 = (___cxa_allocate_exception(8)|0);
  $147 = $109;
  $107 = $146;
  $108 = $147;
  $148 = $107;
  $149 = $108;
  __ZNSt11logic_errorC2EPKc($148,$149);
  HEAP32[$148>>2] = (5584);
  ___cxa_throw(($146|0),(3656|0),(228|0));
  // unreachable;
 }
 $150 = $113;
 $151 = ($150*20)|0;
 $110 = $151;
 $152 = $110;
 $153 = (__Znwm($152)|0);
 $104 = $139;
 $105 = $137;
 $106 = 1;
 $154 = $104;
 $155 = $105;
 HEAP32[$154>>2] = $155;
 $156 = ((($154)) + 4|0);
 $157 = $106;
 HEAP32[$156>>2] = $157;
 $101 = $138;
 HEAP32[$102>>2] = $153;
 $103 = $139;
 $158 = $101;
 $159 = $103;
 $100 = $159;
 $160 = $100;
 $97 = $158;
 $98 = $102;
 $99 = $160;
 $161 = $97;
 $162 = $98;
 $96 = $162;
 $163 = $96;
 $90 = $161;
 $91 = $163;
 $164 = $90;
 $165 = $91;
 $89 = $165;
 $166 = $89;
 $167 = HEAP32[$166>>2]|0;
 HEAP32[$164>>2] = $167;
 $168 = ((($161)) + 4|0);
 $169 = $99;
 $92 = $169;
 $170 = $92;
 $94 = $168;
 $95 = $170;
 $171 = $94;
 $172 = $95;
 $93 = $172;
 $173 = $93;
 ;HEAP32[$171>>2]=HEAP32[$173>>2]|0;HEAP32[$171+4>>2]=HEAP32[$173+4>>2]|0;
 $88 = $138;
 $174 = $88;
 $87 = $174;
 $175 = $87;
 $86 = $175;
 $176 = $86;
 $177 = HEAP32[$176>>2]|0;
 $85 = $1;
 $178 = $85;
 $83 = $140;
 $84 = $137;
 $71 = $177;
 $72 = $178;
 $73 = $140;
 $179 = $71;
 $70 = $179;
 $180 = $70;
 HEAP32[$180>>2] = (5036);
 HEAP32[$179>>2] = (5080);
 $181 = ((($179)) + 4|0);
 $182 = $72;
 $2 = $182;
 $183 = $2;
 $22 = $183;
 $184 = $22;
 $20 = $184;
 $185 = $20;
 $14 = $21;
 $15 = $185;
 $186 = $14;
 $187 = $15;
 $13 = $187;
 $188 = $13;
 ;HEAP8[$9>>0]=HEAP8[$19>>0]|0;
 ;HEAP8[$10>>0]=HEAP8[$18>>0]|0;
 ;HEAP8[$11>>0]=HEAP8[$17>>0]|0;
 ;HEAP8[$12>>0]=HEAP8[$16>>0]|0;
 $7 = $186;
 $8 = $188;
 $189 = $7;
 $190 = $8;
 $6 = $190;
 $191 = $6;
 $4 = $189;
 $5 = $191;
 $192 = $4;
 $193 = $5;
 $3 = $193;
 $194 = $3;
 HEAP32[$192>>2] = $194;
 $195 = HEAP32[$21>>2]|0;
 HEAP32[$75>>2] = $195;
 $196 = $73;
 $23 = $196;
 $197 = $23;
 $43 = $197;
 $198 = $43;
 $41 = $198;
 $199 = $41;
 $35 = $42;
 $36 = $199;
 $200 = $35;
 $201 = $36;
 $34 = $201;
 $202 = $34;
 ;HEAP8[$30>>0]=HEAP8[$40>>0]|0;
 ;HEAP8[$31>>0]=HEAP8[$39>>0]|0;
 ;HEAP8[$32>>0]=HEAP8[$38>>0]|0;
 ;HEAP8[$33>>0]=HEAP8[$37>>0]|0;
 $28 = $200;
 $29 = $202;
 $203 = $28;
 $204 = $29;
 $27 = $204;
 $205 = $27;
 $25 = $203;
 $26 = $205;
 $206 = $25;
 $207 = $26;
 $24 = $207;
 $208 = $24;
 HEAP32[$206>>2] = $208;
 $209 = HEAP32[$42>>2]|0;
 HEAP32[$76>>2] = $209;
 ;HEAP8[$67>>0]=HEAP8[$76>>0]|0;HEAP8[$67+1>>0]=HEAP8[$76+1>>0]|0;HEAP8[$67+2>>0]=HEAP8[$76+2>>0]|0;HEAP8[$67+3>>0]=HEAP8[$76+3>>0]|0;
 ;HEAP8[$68>>0]=HEAP8[$75>>0]|0;HEAP8[$68+1>>0]=HEAP8[$75+1>>0]|0;HEAP8[$68+2>>0]=HEAP8[$75+2>>0]|0;HEAP8[$68+3>>0]=HEAP8[$75+3>>0]|0;
 ;HEAP8[$69>>0]=HEAP8[$74>>0]|0;
 $60 = $181;
 $210 = $60;
 $59 = $68;
 $211 = $59;
 ;HEAP32[$62>>2]=HEAP32[$211>>2]|0;
 ;HEAP8[$48>>0]=HEAP8[$63>>0]|0;
 ;HEAP8[$49>>0]=HEAP8[$62>>0]|0;HEAP8[$49+1>>0]=HEAP8[$62+1>>0]|0;HEAP8[$49+2>>0]=HEAP8[$62+2>>0]|0;HEAP8[$49+3>>0]=HEAP8[$62+3>>0]|0;
 ;HEAP8[$50>>0]=HEAP8[$61>>0]|0;
 $47 = $210;
 $212 = $47;
 $46 = $49;
 $213 = $46;
 $45 = $213;
 $214 = $45;
 $215 = HEAP32[$214>>2]|0;
 $44 = $215;
 $216 = $44;
 ;HEAP32[$212>>2]=HEAP32[$216>>2]|0;HEAP32[$212+4>>2]=HEAP32[$216+4>>2]|0;HEAP32[$212+8>>2]=HEAP32[$216+8>>2]|0;HEAP32[$212+12>>2]=HEAP32[$216+12>>2]|0;
 $51 = $67;
 $217 = $51;
 ;HEAP32[$65>>2]=HEAP32[$217>>2]|0;
 ;HEAP8[$56>>0]=HEAP8[$66>>0]|0;
 ;HEAP8[$57>>0]=HEAP8[$65>>0]|0;HEAP8[$57+1>>0]=HEAP8[$65+1>>0]|0;HEAP8[$57+2>>0]=HEAP8[$65+2>>0]|0;HEAP8[$57+3>>0]=HEAP8[$65+3>>0]|0;
 ;HEAP8[$58>>0]=HEAP8[$64>>0]|0;
 $55 = $210;
 $54 = $57;
 $218 = $54;
 $53 = $218;
 $219 = $53;
 $220 = HEAP32[$219>>2]|0;
 $52 = $220;
 $81 = $138;
 $221 = $81;
 $80 = $221;
 $222 = $80;
 $79 = $222;
 $223 = $79;
 $224 = HEAP32[$223>>2]|0;
 $82 = $224;
 $78 = $221;
 $225 = $78;
 $77 = $225;
 $226 = $77;
 HEAP32[$226>>2] = 0;
 $227 = $82;
 $228 = ((($141)) + 16|0);
 HEAP32[$228>>2] = $227;
 $133 = $138;
 $229 = $133;
 $130 = $229;
 $131 = 0;
 $230 = $130;
 $129 = $230;
 $231 = $129;
 $128 = $231;
 $232 = $128;
 $233 = HEAP32[$232>>2]|0;
 $132 = $233;
 $234 = $131;
 $118 = $230;
 $235 = $118;
 $117 = $235;
 $236 = $117;
 HEAP32[$236>>2] = $234;
 $237 = $132;
 $238 = ($237|0)!=(0|0);
 if (!($238)) {
  STACKTOP = sp;return;
 }
 $116 = $230;
 $239 = $116;
 $240 = ((($239)) + 4|0);
 $115 = $240;
 $241 = $115;
 $242 = $132;
 $126 = $241;
 $127 = $242;
 $243 = $126;
 $244 = HEAP32[$243>>2]|0;
 $245 = $127;
 $246 = ((($243)) + 4|0);
 $247 = HEAP32[$246>>2]|0;
 $123 = $244;
 $124 = $245;
 $125 = $247;
 $248 = $123;
 $249 = $124;
 $250 = $125;
 $120 = $248;
 $121 = $249;
 $122 = $250;
 $251 = $121;
 $119 = $251;
 $252 = $119;
 __ZdlPv($252);
 STACKTOP = sp;return;
}
function __ZNSt3__28functionIFvvEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($2|0);
 $6 = ((($2)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 if ($5) {
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  FUNCTION_TABLE_vi[$10 & 511]($7);
  STACKTOP = sp;return;
 }
 $11 = ($7|0)!=(0|0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = ((($2)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 FUNCTION_TABLE_vi[$16 & 511]($13);
 STACKTOP = sp;return;
}
function __ZN20ConfigurationManagerD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $8 = $3;
 $9 = ((($8)) + 24|0);
 $4 = $9;
 $10 = $4;
 $2 = $10;
 $11 = $2;
 $5 = $11;
 $12 = $4;
 $1 = $12;
 $13 = $1;
 $14 = ((($13)) + 20|0);
 $6 = $14;
 while(1) {
  $15 = $5;
  $16 = $6;
  $17 = ($15|0)!=($16|0);
  if (!($17)) {
   break;
  }
  $18 = $5;
  $19 = HEAP32[$18>>2]|0;
  $7 = $19;
  $20 = $7;
  $21 = ($20|0)==(0|0);
  if (!($21)) {
   __ZdaPv($20);
  }
  $22 = $5;
  $23 = ((($22)) + 4|0);
  $5 = $23;
 }
 __ZN15SettingsConfigsD2Ev($8);
 STACKTOP = sp;return;
}
function __ZN15SettingsConfigsD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZN6ConfigD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN6ConfigD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZ4mainE3__0NS_9allocatorIS2_EEFvvEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $1 = $3;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZ4mainE3__0NS_9allocatorIS2_EEFvvEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZNSt3__210__function6__funcIZ4mainE3__0NS_9allocatorIS2_EEFvvEED2Ev($2);
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZNKSt3__210__function6__funcIZ4mainE3__0NS_9allocatorIS2_EEFvvEE7__cloneEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(608|0);
 $7 = sp + 128|0;
 $8 = sp + 120|0;
 $9 = sp + 112|0;
 $10 = sp + 104|0;
 $13 = sp + 594|0;
 $14 = sp + 593|0;
 $15 = sp + 592|0;
 $16 = sp + 591|0;
 $18 = sp + 540|0;
 $27 = sp + 96|0;
 $28 = sp + 88|0;
 $29 = sp + 80|0;
 $30 = sp + 72|0;
 $34 = sp + 590|0;
 $35 = sp + 589|0;
 $36 = sp + 588|0;
 $37 = sp + 587|0;
 $39 = sp + 488|0;
 $45 = sp + 64|0;
 $46 = sp + 56|0;
 $47 = sp + 48|0;
 $53 = sp + 40|0;
 $54 = sp + 32|0;
 $55 = sp + 24|0;
 $58 = sp + 586|0;
 $59 = sp + 436|0;
 $60 = sp + 585|0;
 $61 = sp + 584|0;
 $62 = sp + 432|0;
 $63 = sp + 583|0;
 $64 = sp + 16|0;
 $65 = sp + 8|0;
 $66 = sp;
 $71 = sp + 582|0;
 $72 = sp + 412|0;
 $73 = sp + 408|0;
 $100 = sp + 300|0;
 $137 = sp + 581|0;
 $138 = sp + 144|0;
 $139 = sp + 136|0;
 $140 = sp + 580|0;
 $136 = $0;
 $141 = $136;
 $142 = ((($141)) + 4|0);
 $135 = $142;
 $143 = $135;
 $134 = $143;
 $144 = $134;
 $132 = $137;
 $133 = $144;
 $110 = $137;
 $111 = 1;
 $112 = 0;
 $145 = $110;
 $146 = $111;
 $109 = $145;
 $147 = ($146>>>0)>(214748364);
 if ($147) {
  $107 = 9129;
  $148 = (___cxa_allocate_exception(8)|0);
  $149 = $107;
  $105 = $148;
  $106 = $149;
  $150 = $105;
  $151 = $106;
  __ZNSt11logic_errorC2EPKc($150,$151);
  HEAP32[$150>>2] = (5584);
  ___cxa_throw(($148|0),(3656|0),(228|0));
  // unreachable;
 }
 $152 = $111;
 $153 = ($152*20)|0;
 $108 = $153;
 $154 = $108;
 $155 = (__Znwm($154)|0);
 $102 = $139;
 $103 = $137;
 $104 = 1;
 $156 = $102;
 $157 = $103;
 HEAP32[$156>>2] = $157;
 $158 = ((($156)) + 4|0);
 $159 = $104;
 HEAP32[$158>>2] = $159;
 $99 = $138;
 HEAP32[$100>>2] = $155;
 $101 = $139;
 $160 = $99;
 $161 = $101;
 $98 = $161;
 $162 = $98;
 $95 = $160;
 $96 = $100;
 $97 = $162;
 $163 = $95;
 $164 = $96;
 $94 = $164;
 $165 = $94;
 $88 = $163;
 $89 = $165;
 $166 = $88;
 $167 = $89;
 $87 = $167;
 $168 = $87;
 $169 = HEAP32[$168>>2]|0;
 HEAP32[$166>>2] = $169;
 $170 = ((($163)) + 4|0);
 $171 = $97;
 $90 = $171;
 $172 = $90;
 $92 = $170;
 $93 = $172;
 $173 = $92;
 $174 = $93;
 $91 = $174;
 $175 = $91;
 ;HEAP32[$173>>2]=HEAP32[$175>>2]|0;HEAP32[$173+4>>2]=HEAP32[$175+4>>2]|0;
 $86 = $138;
 $176 = $86;
 $85 = $176;
 $177 = $85;
 $84 = $177;
 $178 = $84;
 $179 = HEAP32[$178>>2]|0;
 $180 = ((($141)) + 4|0);
 $83 = $180;
 $181 = $83;
 $82 = $181;
 $182 = $82;
 $80 = $140;
 $81 = $137;
 $68 = $179;
 $69 = $182;
 $70 = $140;
 $183 = $68;
 $67 = $183;
 $184 = $67;
 HEAP32[$184>>2] = (5036);
 HEAP32[$183>>2] = (5080);
 $185 = ((($183)) + 4|0);
 $186 = $69;
 $19 = $186;
 $187 = $19;
 $17 = $187;
 $188 = $17;
 $11 = $18;
 $12 = $188;
 $189 = $11;
 $190 = $12;
 ;HEAP8[$7>>0]=HEAP8[$16>>0]|0;
 ;HEAP8[$8>>0]=HEAP8[$15>>0]|0;
 ;HEAP8[$9>>0]=HEAP8[$14>>0]|0;
 ;HEAP8[$10>>0]=HEAP8[$13>>0]|0;
 $5 = $189;
 $6 = $190;
 $191 = $5;
 $192 = $6;
 $4 = $192;
 $193 = $4;
 $2 = $191;
 $3 = $193;
 $194 = $2;
 $195 = $3;
 $1 = $195;
 $196 = $1;
 HEAP32[$194>>2] = $196;
 $197 = HEAP32[$18>>2]|0;
 HEAP32[$72>>2] = $197;
 $198 = $70;
 $20 = $198;
 $199 = $20;
 $40 = $199;
 $200 = $40;
 $38 = $200;
 $201 = $38;
 $32 = $39;
 $33 = $201;
 $202 = $32;
 $203 = $33;
 $31 = $203;
 $204 = $31;
 ;HEAP8[$27>>0]=HEAP8[$37>>0]|0;
 ;HEAP8[$28>>0]=HEAP8[$36>>0]|0;
 ;HEAP8[$29>>0]=HEAP8[$35>>0]|0;
 ;HEAP8[$30>>0]=HEAP8[$34>>0]|0;
 $25 = $202;
 $26 = $204;
 $205 = $25;
 $206 = $26;
 $24 = $206;
 $207 = $24;
 $22 = $205;
 $23 = $207;
 $208 = $22;
 $209 = $23;
 $21 = $209;
 $210 = $21;
 HEAP32[$208>>2] = $210;
 $211 = HEAP32[$39>>2]|0;
 HEAP32[$73>>2] = $211;
 ;HEAP8[$64>>0]=HEAP8[$73>>0]|0;HEAP8[$64+1>>0]=HEAP8[$73+1>>0]|0;HEAP8[$64+2>>0]=HEAP8[$73+2>>0]|0;HEAP8[$64+3>>0]=HEAP8[$73+3>>0]|0;
 ;HEAP8[$65>>0]=HEAP8[$72>>0]|0;HEAP8[$65+1>>0]=HEAP8[$72+1>>0]|0;HEAP8[$65+2>>0]=HEAP8[$72+2>>0]|0;HEAP8[$65+3>>0]=HEAP8[$72+3>>0]|0;
 ;HEAP8[$66>>0]=HEAP8[$71>>0]|0;
 $57 = $185;
 $212 = $57;
 $56 = $65;
 $213 = $56;
 ;HEAP32[$59>>2]=HEAP32[$213>>2]|0;
 ;HEAP8[$45>>0]=HEAP8[$60>>0]|0;
 ;HEAP8[$46>>0]=HEAP8[$59>>0]|0;HEAP8[$46+1>>0]=HEAP8[$59+1>>0]|0;HEAP8[$46+2>>0]=HEAP8[$59+2>>0]|0;HEAP8[$46+3>>0]=HEAP8[$59+3>>0]|0;
 ;HEAP8[$47>>0]=HEAP8[$58>>0]|0;
 $44 = $212;
 $214 = $44;
 $43 = $46;
 $215 = $43;
 $42 = $215;
 $216 = $42;
 $217 = HEAP32[$216>>2]|0;
 $41 = $217;
 $218 = $41;
 ;HEAP32[$214>>2]=HEAP32[$218>>2]|0;HEAP32[$214+4>>2]=HEAP32[$218+4>>2]|0;HEAP32[$214+8>>2]=HEAP32[$218+8>>2]|0;HEAP32[$214+12>>2]=HEAP32[$218+12>>2]|0;
 $48 = $64;
 $219 = $48;
 ;HEAP32[$62>>2]=HEAP32[$219>>2]|0;
 ;HEAP8[$53>>0]=HEAP8[$63>>0]|0;
 ;HEAP8[$54>>0]=HEAP8[$62>>0]|0;HEAP8[$54+1>>0]=HEAP8[$62+1>>0]|0;HEAP8[$54+2>>0]=HEAP8[$62+2>>0]|0;HEAP8[$54+3>>0]=HEAP8[$62+3>>0]|0;
 ;HEAP8[$55>>0]=HEAP8[$61>>0]|0;
 $52 = $212;
 $51 = $54;
 $220 = $51;
 $50 = $220;
 $221 = $50;
 $222 = HEAP32[$221>>2]|0;
 $49 = $222;
 $78 = $138;
 $223 = $78;
 $77 = $223;
 $224 = $77;
 $76 = $224;
 $225 = $76;
 $226 = HEAP32[$225>>2]|0;
 $79 = $226;
 $75 = $223;
 $227 = $75;
 $74 = $227;
 $228 = $74;
 HEAP32[$228>>2] = 0;
 $229 = $79;
 $131 = $138;
 $230 = $131;
 $128 = $230;
 $129 = 0;
 $231 = $128;
 $127 = $231;
 $232 = $127;
 $126 = $232;
 $233 = $126;
 $234 = HEAP32[$233>>2]|0;
 $130 = $234;
 $235 = $129;
 $116 = $231;
 $236 = $116;
 $115 = $236;
 $237 = $115;
 HEAP32[$237>>2] = $235;
 $238 = $130;
 $239 = ($238|0)!=(0|0);
 if (!($239)) {
  STACKTOP = sp;return ($229|0);
 }
 $114 = $231;
 $240 = $114;
 $241 = ((($240)) + 4|0);
 $113 = $241;
 $242 = $113;
 $243 = $130;
 $124 = $242;
 $125 = $243;
 $244 = $124;
 $245 = HEAP32[$244>>2]|0;
 $246 = $125;
 $247 = ((($244)) + 4|0);
 $248 = HEAP32[$247>>2]|0;
 $121 = $245;
 $122 = $246;
 $123 = $248;
 $249 = $121;
 $250 = $122;
 $251 = $123;
 $118 = $249;
 $119 = $250;
 $120 = $251;
 $252 = $119;
 $117 = $252;
 $253 = $117;
 __ZdlPv($253);
 STACKTOP = sp;return ($229|0);
}
function __ZNKSt3__210__function6__funcIZ4mainE3__0NS_9allocatorIS2_EEFvvEE7__cloneEPNS0_6__baseIS5_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $10 = sp + 128|0;
 $11 = sp + 120|0;
 $12 = sp + 112|0;
 $13 = sp + 104|0;
 $16 = sp + 332|0;
 $17 = sp + 331|0;
 $18 = sp + 330|0;
 $19 = sp + 329|0;
 $21 = sp + 272|0;
 $29 = sp + 96|0;
 $30 = sp + 88|0;
 $31 = sp + 80|0;
 $32 = sp + 72|0;
 $35 = sp + 328|0;
 $36 = sp + 327|0;
 $37 = sp + 326|0;
 $38 = sp + 325|0;
 $40 = sp + 228|0;
 $46 = sp + 64|0;
 $47 = sp + 56|0;
 $48 = sp + 48|0;
 $54 = sp + 40|0;
 $55 = sp + 32|0;
 $56 = sp + 24|0;
 $59 = sp + 324|0;
 $60 = sp + 176|0;
 $61 = sp + 323|0;
 $62 = sp + 322|0;
 $63 = sp + 172|0;
 $64 = sp + 321|0;
 $65 = sp + 16|0;
 $66 = sp + 8|0;
 $67 = sp;
 $72 = sp + 320|0;
 $73 = sp + 152|0;
 $74 = sp + 148|0;
 $77 = $0;
 $78 = $1;
 $79 = $77;
 $80 = $78;
 $81 = ((($79)) + 4|0);
 $76 = $81;
 $82 = $76;
 $75 = $82;
 $83 = $75;
 $84 = ((($79)) + 4|0);
 $3 = $84;
 $85 = $3;
 $2 = $85;
 $86 = $2;
 $69 = $80;
 $70 = $83;
 $71 = $86;
 $87 = $69;
 $68 = $87;
 $88 = $68;
 HEAP32[$88>>2] = (5036);
 HEAP32[$87>>2] = (5080);
 $89 = ((($87)) + 4|0);
 $90 = $70;
 $22 = $90;
 $91 = $22;
 $20 = $91;
 $92 = $20;
 $14 = $21;
 $15 = $92;
 $93 = $14;
 $94 = $15;
 ;HEAP8[$10>>0]=HEAP8[$19>>0]|0;
 ;HEAP8[$11>>0]=HEAP8[$18>>0]|0;
 ;HEAP8[$12>>0]=HEAP8[$17>>0]|0;
 ;HEAP8[$13>>0]=HEAP8[$16>>0]|0;
 $8 = $93;
 $9 = $94;
 $95 = $8;
 $96 = $9;
 $7 = $96;
 $97 = $7;
 $5 = $95;
 $6 = $97;
 $98 = $5;
 $99 = $6;
 $4 = $99;
 $100 = $4;
 HEAP32[$98>>2] = $100;
 $101 = HEAP32[$21>>2]|0;
 HEAP32[$73>>2] = $101;
 $102 = $71;
 $41 = $102;
 $103 = $41;
 $39 = $103;
 $104 = $39;
 $33 = $40;
 $34 = $104;
 $105 = $33;
 $106 = $34;
 ;HEAP8[$29>>0]=HEAP8[$38>>0]|0;
 ;HEAP8[$30>>0]=HEAP8[$37>>0]|0;
 ;HEAP8[$31>>0]=HEAP8[$36>>0]|0;
 ;HEAP8[$32>>0]=HEAP8[$35>>0]|0;
 $27 = $105;
 $28 = $106;
 $107 = $27;
 $108 = $28;
 $26 = $108;
 $109 = $26;
 $24 = $107;
 $25 = $109;
 $110 = $24;
 $111 = $25;
 $23 = $111;
 $112 = $23;
 HEAP32[$110>>2] = $112;
 $113 = HEAP32[$40>>2]|0;
 HEAP32[$74>>2] = $113;
 ;HEAP8[$65>>0]=HEAP8[$74>>0]|0;HEAP8[$65+1>>0]=HEAP8[$74+1>>0]|0;HEAP8[$65+2>>0]=HEAP8[$74+2>>0]|0;HEAP8[$65+3>>0]=HEAP8[$74+3>>0]|0;
 ;HEAP8[$66>>0]=HEAP8[$73>>0]|0;HEAP8[$66+1>>0]=HEAP8[$73+1>>0]|0;HEAP8[$66+2>>0]=HEAP8[$73+2>>0]|0;HEAP8[$66+3>>0]=HEAP8[$73+3>>0]|0;
 ;HEAP8[$67>>0]=HEAP8[$72>>0]|0;
 $58 = $89;
 $114 = $58;
 $57 = $66;
 $115 = $57;
 ;HEAP32[$60>>2]=HEAP32[$115>>2]|0;
 ;HEAP8[$46>>0]=HEAP8[$61>>0]|0;
 ;HEAP8[$47>>0]=HEAP8[$60>>0]|0;HEAP8[$47+1>>0]=HEAP8[$60+1>>0]|0;HEAP8[$47+2>>0]=HEAP8[$60+2>>0]|0;HEAP8[$47+3>>0]=HEAP8[$60+3>>0]|0;
 ;HEAP8[$48>>0]=HEAP8[$59>>0]|0;
 $45 = $114;
 $116 = $45;
 $44 = $47;
 $117 = $44;
 $43 = $117;
 $118 = $43;
 $119 = HEAP32[$118>>2]|0;
 $42 = $119;
 $120 = $42;
 ;HEAP32[$116>>2]=HEAP32[$120>>2]|0;HEAP32[$116+4>>2]=HEAP32[$120+4>>2]|0;HEAP32[$116+8>>2]=HEAP32[$120+8>>2]|0;HEAP32[$116+12>>2]=HEAP32[$120+12>>2]|0;
 $49 = $65;
 $121 = $49;
 ;HEAP32[$63>>2]=HEAP32[$121>>2]|0;
 ;HEAP8[$54>>0]=HEAP8[$64>>0]|0;
 ;HEAP8[$55>>0]=HEAP8[$63>>0]|0;HEAP8[$55+1>>0]=HEAP8[$63+1>>0]|0;HEAP8[$55+2>>0]=HEAP8[$63+2>>0]|0;HEAP8[$55+3>>0]=HEAP8[$63+3>>0]|0;
 ;HEAP8[$56>>0]=HEAP8[$62>>0]|0;
 $53 = $114;
 $52 = $55;
 $122 = $52;
 $51 = $122;
 $123 = $51;
 $124 = HEAP32[$123>>2]|0;
 $50 = $124;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZ4mainE3__0NS_9allocatorIS2_EEFvvEE7destroyEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZ4mainE3__0NS_9allocatorIS2_EEFvvEE18destroy_deallocateEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $10 = sp + 36|0;
 $9 = $0;
 $11 = $9;
 $12 = ((($11)) + 4|0);
 $8 = $12;
 $13 = $8;
 $7 = $13;
 $14 = $7;
 $1 = $10;
 $2 = $14;
 $4 = $10;
 $5 = $11;
 $6 = 1;
 $15 = $5;
 $3 = $15;
 $16 = $3;
 __ZdlPv($16);
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZ4mainE3__0NS_9allocatorIS2_EEFvvEEclEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $3;
 $5 = ((($4)) + 4|0);
 $2 = $5;
 $6 = $2;
 $1 = $6;
 $7 = $1;
 __ZNSt3__228__invoke_void_return_wrapperIvE6__callIJRZ4mainE3__0EEEvDpOT_($7);
 STACKTOP = sp;return;
}
function __ZNKSt3__210__function6__funcIZ4mainE3__0NS_9allocatorIS2_EEFvvEE6targetERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $7;
 $10 = $8;
 $4 = $10;
 $5 = 3088;
 $11 = $4;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $5;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($13|0)==($16|0);
 if ($17) {
  $18 = ((($9)) + 4|0);
  $3 = $18;
  $19 = $3;
  $2 = $19;
  $20 = $2;
  $6 = $20;
  $21 = $6;
  STACKTOP = sp;return ($21|0);
 } else {
  $6 = 0;
  $21 = $6;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function __ZNKSt3__210__function6__funcIZ4mainE3__0NS_9allocatorIS2_EEFvvEE11target_typeEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (3088|0);
}
function __ZNSt3__228__invoke_void_return_wrapperIvE6__callIJRZ4mainE3__0EEEvDpOT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $4;
 $3 = $5;
 $6 = $3;
 $2 = $6;
 $7 = $2;
 $1 = $7;
 $8 = $1;
 __ZZ4mainENK3__0clEv($8);
 STACKTOP = sp;return;
}
function __ZZ4mainENK3__0clEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $1 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($3)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 __ZN6Window9IsRunningERb($4,$6);
 _glClear(16640);
 $7 = (+_glfwGetTime());
 $8 = ((($3)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = +HEAPF32[$9>>2];
 $11 = $10;
 $12 = $7 - $11;
 $13 = $12;
 HEAPF32[$2>>2] = $13;
 $14 = (+_glfwGetTime());
 $15 = $14;
 $16 = ((($3)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 HEAPF32[$17>>2] = $15;
 $18 = ((($3)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 __ZN12StateManager8OnUpdateERKf($19,$2);
 $20 = ((($3)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 __ZN12StateManager8OnRenderEv($21);
 $22 = HEAP32[$3>>2]|0;
 __ZNK6Window11SwapBuffersEv($22);
 $23 = HEAP32[$3>>2]|0;
 __ZNK6Window10PollEventsEv($23);
 STACKTOP = sp;return;
}
function __ZN6Window9IsRunningERb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = (_glfwWindowShouldClose(($5|0))|0);
 $7 = ($6|0)!=(0);
 $8 = $7 ^ 1;
 $9 = $3;
 $10 = $8&1;
 HEAP8[$9>>0] = $10;
 STACKTOP = sp;return;
}
function __ZN12StateManager8OnUpdateERKf($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $4;
 $7 = ((($6)) + 24|0);
 $8 = ((($6)) + 20|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $2 = $7;
 $3 = $10;
 $11 = $2;
 $12 = $3;
 $13 = (($11) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $5;
 $19 = +HEAPF32[$18>>2];
 FUNCTION_TABLE_vid[$17 & 255]($14,$19);
 STACKTOP = sp;return;
}
function __ZN12StateManager8OnRenderEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $3;
 $5 = ((($4)) + 24|0);
 $6 = ((($4)) + 20|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $1 = $5;
 $2 = $8;
 $9 = $1;
 $10 = $2;
 $11 = (($9) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 24|0);
 $15 = HEAP32[$14>>2]|0;
 FUNCTION_TABLE_vi[$15 & 511]($12);
 STACKTOP = sp;return;
}
function __ZNK6Window11SwapBuffersEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 _glfwSwapBuffers(($3|0));
 STACKTOP = sp;return;
}
function __ZNK6Window10PollEventsEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 _glfwPollEvents();
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__baseIFvvEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__baseIFvvEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 _llvm_trap();
 // unreachable;
}
function __ZN20ConfigurationManager18LoadConfigurationsI15SettingsConfigsEET_PKc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(592|0);
 $vararg_buffer5 = sp + 528|0;
 $vararg_buffer1 = sp + 520|0;
 $vararg_buffer = sp + 512|0;
 $7 = sp + 384|0;
 $9 = sp + 256|0;
 $12 = sp + 128|0;
 $13 = sp;
 $14 = sp + 540|0;
 $15 = sp + 536|0;
 $5 = $1;
 $6 = $2;
 $17 = $5;
 $18 = $6;
 (__ZN11StringUtils13string_formatIJPKcS2_EEES2_PctS2_DpT_($7,128,9321,9327,$18)|0);
 HEAP32[$vararg_buffer>>2] = $7;
 (_printf(9342,$vararg_buffer)|0);
 $19 = (_fopen($7,9379)|0);
 $8 = $19;
 $20 = $8;
 $21 = ($20|0)!=(0|0);
 if ($21) {
  $10 = 128;
  $11 = 128;
  HEAP32[$15>>2] = $13;
  while(1) {
   $26 = $8;
   HEAP32[$vararg_buffer5>>2] = $12;
   $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
   HEAP32[$vararg_ptr8>>2] = $13;
   $27 = (_fscanf($26,9509,$vararg_buffer5)|0);
   $28 = ($27|0)==(2);
   if (!($28)) {
    break;
   }
   $29 = (__ZN15SettingsConfigs18StringToKey_uint16EPKc($12)|0);
   $16 = $29;
   $30 = (__ZZN20ConfigurationManager18LoadConfigurationsI15SettingsConfigsEET_PKcENKUlvE_clEv($15)|0);
   $31 = $16;
   $32 = $31&65535;
   $3 = $14;
   $4 = $32;
   $33 = $3;
   $34 = $4;
   $35 = (($33) + ($34<<2)|0);
   HEAP32[$35>>2] = $30;
  }
  (_puts(9515)|0);
  __ZN15SettingsConfigsC2ERKNSt3__25arrayIPKcLm5EEE($0,$14);
  STACKTOP = sp;return;
 } else {
  $22 = $6;
  HEAP32[$vararg_buffer1>>2] = $7;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $22;
  (_printf(9381,$vararg_buffer1)|0);
  $23 = $6;
  (__ZN11StringUtils13string_formatIJPKcS2_S2_EEES2_PctS2_DpT_($9,128,9434,9327,9443,$23)|0);
  $24 = (__ZN9FileUtils8CopyFileEPKcS1_($9,$7)|0);
  if ($24) {
   $25 = $6;
   __ZN20ConfigurationManager18LoadConfigurationsI15SettingsConfigsEET_PKc($0,$17,$25);
   STACKTOP = sp;return;
  } else {
   (_puts(9452)|0);
   __ZN15SettingsConfigsC2Ev($0);
   STACKTOP = sp;return;
  }
 }
}
function __ZN11StringUtils13string_formatIJPKcS2_EEES2_PctS2_DpT_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = $5;
 $12 = $6;
 $13 = $12&65535;
 $14 = $7;
 $15 = $8;
 $16 = $9;
 HEAP32[$vararg_buffer>>2] = $15;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $16;
 $17 = (_snprintf($11,$13,$14,$vararg_buffer)|0);
 $10 = $17;
 $18 = $5;
 STACKTOP = sp;return ($18|0);
}
function __ZN11StringUtils13string_formatIJPKcS2_S2_EEES2_PctS2_DpT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $13 = $6;
 $14 = $7;
 $15 = $14&65535;
 $16 = $8;
 $17 = $9;
 $18 = $10;
 $19 = $11;
 HEAP32[$vararg_buffer>>2] = $17;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $18;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $19;
 $20 = (_snprintf($13,$15,$16,$vararg_buffer)|0);
 $12 = $20;
 $21 = $6;
 STACKTOP = sp;return ($21|0);
}
function __ZN15SettingsConfigsC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZN6ConfigC2Ev($2);
 HEAP32[$2>>2] = (5124);
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = 9608;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 9612;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = 9872;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = 9616;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = 9618;
 STACKTOP = sp;return;
}
function __ZN15SettingsConfigs18StringToKey_uint16EPKc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = 0;
 $4 = 176;
 $10 = $4;
 $5 = $10;
 $11 = $4;
 $12 = ((($11)) + 20|0);
 $6 = $12;
 while(1) {
  $13 = $5;
  $14 = $6;
  $15 = ($13|0)!=($14|0);
  if (!($15)) {
   label = 6;
   break;
  }
  $16 = $5;
  $17 = HEAP32[$16>>2]|0;
  $7 = $17;
  $18 = $2;
  $19 = (__ZN11StringUtils9QuickHashEPKc($18)|0);
  $8 = $19;
  $20 = $7;
  $21 = (__ZN11StringUtils9QuickHashEPKc($20)|0);
  $9 = $21;
  $22 = $8;
  $23 = $9;
  $24 = ($22|0)==($23|0);
  $25 = $3;
  if ($24) {
   label = 4;
   break;
  }
  $26 = (($25) + 1)<<16>>16;
  $3 = $26;
  $27 = $5;
  $28 = ((($27)) + 4|0);
  $5 = $28;
 }
 if ((label|0) == 4) {
  $1 = $25;
  $29 = $1;
  STACKTOP = sp;return ($29|0);
 }
 else if ((label|0) == 6) {
  $1 = 5;
  $29 = $1;
  STACKTOP = sp;return ($29|0);
 }
 return (0)|0;
}
function __ZZN20ConfigurationManager18LoadConfigurationsI15SettingsConfigsEET_PKcENKUlvE_clEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = (_strlen($5)|0);
 $2 = $6;
 $7 = $2;
 $8 = (($7) + 1)|0;
 $9 = (__Znam($8)|0);
 $3 = $9;
 $10 = $3;
 $11 = HEAP32[$4>>2]|0;
 $12 = $2;
 _memcpy(($10|0),($11|0),($12|0))|0;
 $13 = $3;
 $14 = $2;
 $15 = (($13) + ($14)|0);
 HEAP8[$15>>0] = 0;
 $16 = $3;
 STACKTOP = sp;return ($16|0);
}
function __ZN15SettingsConfigsC2ERKNSt3__25arrayIPKcLm5EEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 __ZN6ConfigC2Ev($5);
 HEAP32[$5>>2] = (5124);
 $6 = ((($5)) + 4|0);
 $7 = $4;
 $2 = $7;
 $8 = $2;
 ;HEAP32[$6>>2]=HEAP32[$8>>2]|0;HEAP32[$6+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$6+12>>2]=HEAP32[$8+12>>2]|0;HEAP32[$6+16>>2]=HEAP32[$8+16>>2]|0;
 STACKTOP = sp;return;
}
function __ZN6ConfigC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = (5144);
 STACKTOP = sp;return;
}
function __ZN15SettingsConfigsD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZN15SettingsConfigsD2Ev($2);
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZNK15SettingsConfigs13GetFieldValueEt($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $4;
 $7 = ((($6)) + 4|0);
 $8 = $5;
 $9 = $8&65535;
 $2 = $7;
 $3 = $9;
 $10 = $2;
 $11 = $3;
 $12 = (($10) + ($11<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 STACKTOP = sp;return ($13|0);
}
function __ZN6ConfigD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 _llvm_trap();
 // unreachable;
}
function __ZN11StringUtils9QuickHashEPKc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 5381;
 $3 = 0;
 while(1) {
  $4 = $1;
  $5 = ((($4)) + 1|0);
  $1 = $5;
  $6 = HEAP8[$4>>0]|0;
  $7 = $6 << 24 >> 24;
  $3 = $7;
  $8 = ($7|0)!=(0);
  $9 = $2;
  if (!($8)) {
   break;
  }
  $10 = $9 << 5;
  $11 = $2;
  $12 = (($10) + ($11))|0;
  $13 = $3;
  $14 = (($12) + ($13))|0;
  $2 = $14;
 }
 STACKTOP = sp;return ($9|0);
}
function _stbi_image_free($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _free($2);
 STACKTOP = sp;return;
}
function _stbi_load($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $13 = $6;
 $14 = (__ZL11stbi__fopenPKcS0_($13,9621)|0);
 $11 = $14;
 $15 = $11;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $21 = $11;
  $22 = $7;
  $23 = $8;
  $24 = $9;
  $25 = $10;
  $26 = (_stbi_load_from_file($21,$22,$23,$24,$25)|0);
  $12 = $26;
  $27 = $11;
  (_fclose($27)|0);
  $28 = $12;
  $5 = $28;
  $29 = $5;
  STACKTOP = sp;return ($29|0);
 } else {
  $17 = (__ZL9stbi__errPKc(9624)|0);
  $18 = ($17|0)!=(0);
  $19 = $18 ? 0 : 0;
  $20 = $19;
  $5 = $20;
  $29 = $5;
  STACKTOP = sp;return ($29|0);
 }
 return (0)|0;
}
function __ZL11stbi__fopenPKcS0_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $3;
 $7 = (_fopen($5,$6)|0);
 $4 = $7;
 $8 = $4;
 STACKTOP = sp;return ($8|0);
}
function __ZL9stbi__errPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[3469] = $2;
 STACKTOP = sp;return 0;
}
function _stbi_load_from_file($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $11 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $12 = $5;
 __ZL16stbi__start_fileP13stbi__contextP8_IO_FILE($11,$12);
 $13 = $6;
 $14 = $7;
 $15 = $8;
 $16 = $9;
 $17 = (__ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i($11,$13,$14,$15,$16)|0);
 $10 = $17;
 $18 = $10;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  $29 = $10;
  STACKTOP = sp;return ($29|0);
 }
 $20 = $5;
 $21 = ((($11)) + 172|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($11)) + 168|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $22;
 $26 = $24;
 $27 = (($25) - ($26))|0;
 $28 = (0 - ($27))|0;
 (_fseek($20,$28,1)|0);
 $29 = $10;
 STACKTOP = sp;return ($29|0);
}
function __ZL16stbi__start_fileP13stbi__contextP8_IO_FILE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 __ZL21stbi__start_callbacksP13stbi__contextP17stbi_io_callbacksPv($4,5156,$5);
 STACKTOP = sp;return;
}
function __ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $11 = sp + 8|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $14 = $6;
 $15 = $7;
 $16 = $8;
 $17 = $9;
 $18 = $10;
 $19 = (__ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi($14,$15,$16,$17,$18,$11,8)|0);
 $12 = $19;
 $20 = $12;
 $21 = ($20|0)==(0|0);
 if ($21) {
  $5 = 0;
  $53 = $5;
  STACKTOP = sp;return ($53|0);
 }
 $22 = HEAP32[$11>>2]|0;
 $23 = ($22|0)!=(8);
 if ($23) {
  $24 = HEAP32[$11>>2]|0;
  $25 = ($24|0)==(16);
  if (!($25)) {
   ___assert_fail((9636|0),(9662|0),1163,(9691|0));
   // unreachable;
  }
  $26 = $12;
  $27 = $7;
  $28 = HEAP32[$27>>2]|0;
  $29 = $8;
  $30 = HEAP32[$29>>2]|0;
  $31 = $10;
  $32 = ($31|0)==(0);
  if ($32) {
   $33 = $9;
   $34 = HEAP32[$33>>2]|0;
   $36 = $34;
  } else {
   $35 = $10;
   $36 = $35;
  }
  $37 = (__ZL21stbi__convert_16_to_8Ptiii($26,$28,$30,$36)|0);
  $12 = $37;
  HEAP32[$11>>2] = 8;
 }
 $38 = (0)!=(0);
 if ($38) {
  $39 = $10;
  $40 = ($39|0)!=(0);
  if ($40) {
   $41 = $10;
   $44 = $41;
  } else {
   $42 = $9;
   $43 = HEAP32[$42>>2]|0;
   $44 = $43;
  }
  $13 = $44;
  $45 = $12;
  $46 = $7;
  $47 = HEAP32[$46>>2]|0;
  $48 = $8;
  $49 = HEAP32[$48>>2]|0;
  $50 = $13;
  $51 = $50;
  __ZL19stbi__vertical_flipPviii($45,$47,$49,$51);
 }
 $52 = $12;
 $5 = $52;
 $53 = $5;
 STACKTOP = sp;return ($53|0);
}
function __ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $16 = $13;
 ;HEAP32[$16>>2]=0|0;HEAP32[$16+4>>2]=0|0;HEAP32[$16+8>>2]=0|0;
 $17 = $13;
 HEAP32[$17>>2] = 8;
 $18 = $13;
 $19 = ((($18)) + 8|0);
 HEAP32[$19>>2] = 0;
 $20 = $13;
 $21 = ((($20)) + 4|0);
 HEAP32[$21>>2] = 0;
 $22 = $8;
 $23 = (__ZL15stbi__jpeg_testP13stbi__context($22)|0);
 $24 = ($23|0)!=(0);
 $25 = $8;
 if ($24) {
  $26 = $9;
  $27 = $10;
  $28 = $11;
  $29 = $12;
  $30 = $13;
  $31 = (__ZL15stbi__jpeg_loadP13stbi__contextPiS1_S1_iP17stbi__result_info($25,$26,$27,$28,$29,$30)|0);
  $7 = $31;
  $121 = $7;
  STACKTOP = sp;return ($121|0);
 }
 $32 = (__ZL14stbi__png_testP13stbi__context($25)|0);
 $33 = ($32|0)!=(0);
 $34 = $8;
 if ($33) {
  $35 = $9;
  $36 = $10;
  $37 = $11;
  $38 = $12;
  $39 = $13;
  $40 = (__ZL14stbi__png_loadP13stbi__contextPiS1_S1_iP17stbi__result_info($34,$35,$36,$37,$38,$39)|0);
  $7 = $40;
  $121 = $7;
  STACKTOP = sp;return ($121|0);
 }
 $41 = (__ZL14stbi__bmp_testP13stbi__context($34)|0);
 $42 = ($41|0)!=(0);
 $43 = $8;
 if ($42) {
  $44 = $9;
  $45 = $10;
  $46 = $11;
  $47 = $12;
  $48 = $13;
  $49 = (__ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info($43,$44,$45,$46,$47,$48)|0);
  $7 = $49;
  $121 = $7;
  STACKTOP = sp;return ($121|0);
 }
 $50 = (__ZL14stbi__gif_testP13stbi__context($43)|0);
 $51 = ($50|0)!=(0);
 $52 = $8;
 if ($51) {
  $53 = $9;
  $54 = $10;
  $55 = $11;
  $56 = $12;
  $57 = $13;
  $58 = (__ZL14stbi__gif_loadP13stbi__contextPiS1_S1_iP17stbi__result_info($52,$53,$54,$55,$56,$57)|0);
  $7 = $58;
  $121 = $7;
  STACKTOP = sp;return ($121|0);
 }
 $59 = (__ZL14stbi__psd_testP13stbi__context($52)|0);
 $60 = ($59|0)!=(0);
 $61 = $8;
 if ($60) {
  $62 = $9;
  $63 = $10;
  $64 = $11;
  $65 = $12;
  $66 = $13;
  $67 = $14;
  $68 = (__ZL14stbi__psd_loadP13stbi__contextPiS1_S1_iP17stbi__result_infoi($61,$62,$63,$64,$65,$66,$67)|0);
  $7 = $68;
  $121 = $7;
  STACKTOP = sp;return ($121|0);
 }
 $69 = (__ZL14stbi__pic_testP13stbi__context($61)|0);
 $70 = ($69|0)!=(0);
 $71 = $8;
 if ($70) {
  $72 = $9;
  $73 = $10;
  $74 = $11;
  $75 = $12;
  $76 = $13;
  $77 = (__ZL14stbi__pic_loadP13stbi__contextPiS1_S1_iP17stbi__result_info($71,$72,$73,$74,$75,$76)|0);
  $7 = $77;
  $121 = $7;
  STACKTOP = sp;return ($121|0);
 }
 $78 = (__ZL14stbi__pnm_testP13stbi__context($71)|0);
 $79 = ($78|0)!=(0);
 $80 = $8;
 if ($79) {
  $81 = $9;
  $82 = $10;
  $83 = $11;
  $84 = $12;
  $85 = $13;
  $86 = (__ZL14stbi__pnm_loadP13stbi__contextPiS1_S1_iP17stbi__result_info($80,$81,$82,$83,$84,$85)|0);
  $7 = $86;
  $121 = $7;
  STACKTOP = sp;return ($121|0);
 }
 $87 = (__ZL14stbi__hdr_testP13stbi__context($80)|0);
 $88 = ($87|0)!=(0);
 $89 = $8;
 if ($88) {
  $90 = $9;
  $91 = $10;
  $92 = $11;
  $93 = $12;
  $94 = $13;
  $95 = (__ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info($89,$90,$91,$92,$93,$94)|0);
  $15 = $95;
  $96 = $15;
  $97 = $9;
  $98 = HEAP32[$97>>2]|0;
  $99 = $10;
  $100 = HEAP32[$99>>2]|0;
  $101 = $12;
  $102 = ($101|0)!=(0);
  if ($102) {
   $103 = $12;
   $106 = $103;
  } else {
   $104 = $11;
   $105 = HEAP32[$104>>2]|0;
   $106 = $105;
  }
  $107 = (__ZL16stbi__hdr_to_ldrPfiii($96,$98,$100,$106)|0);
  $7 = $107;
  $121 = $7;
  STACKTOP = sp;return ($121|0);
 } else {
  $108 = (__ZL14stbi__tga_testP13stbi__context($89)|0);
  $109 = ($108|0)!=(0);
  if ($109) {
   $110 = $8;
   $111 = $9;
   $112 = $10;
   $113 = $11;
   $114 = $12;
   $115 = $13;
   $116 = (__ZL14stbi__tga_loadP13stbi__contextPiS1_S1_iP17stbi__result_info($110,$111,$112,$113,$114,$115)|0);
   $7 = $116;
   $121 = $7;
   STACKTOP = sp;return ($121|0);
  } else {
   $117 = (__ZL9stbi__errPKc(9732)|0);
   $118 = ($117|0)!=(0);
   $119 = $118 ? 0 : 0;
   $120 = $119;
   $7 = $120;
   $121 = $7;
   STACKTOP = sp;return ($121|0);
  }
 }
 return (0)|0;
}
function __ZL21stbi__convert_16_to_8Ptiii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $12 = $6;
 $13 = $7;
 $14 = Math_imul($12, $13)|0;
 $15 = $8;
 $16 = Math_imul($14, $15)|0;
 $10 = $16;
 $17 = $10;
 $18 = (__ZL12stbi__mallocm($17)|0);
 $11 = $18;
 $19 = $11;
 $20 = ($19|0)==(0|0);
 if ($20) {
  $21 = (__ZL9stbi__errPKc(9723)|0);
  $22 = ($21|0)!=(0);
  $23 = $22 ? 0 : 0;
  $24 = $23;
  $4 = $24;
  $42 = $4;
  STACKTOP = sp;return ($42|0);
 }
 $9 = 0;
 while(1) {
  $25 = $9;
  $26 = $10;
  $27 = ($25|0)<($26|0);
  $28 = $5;
  if (!($27)) {
   break;
  }
  $29 = $9;
  $30 = (($28) + ($29<<1)|0);
  $31 = HEAP16[$30>>1]|0;
  $32 = $31&65535;
  $33 = $32 >> 8;
  $34 = $33 & 255;
  $35 = $34&255;
  $36 = $11;
  $37 = $9;
  $38 = (($36) + ($37)|0);
  HEAP8[$38>>0] = $35;
  $39 = $9;
  $40 = (($39) + 1)|0;
  $9 = $40;
 }
 _free($28);
 $41 = $11;
 $4 = $41;
 $42 = $4;
 STACKTOP = sp;return ($42|0);
}
function __ZL19stbi__vertical_flipPviii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2096|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2096|0);
 $10 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $16 = $5;
 $17 = $7;
 $18 = Math_imul($16, $17)|0;
 $9 = $18;
 $19 = $4;
 $11 = $19;
 $8 = 0;
 while(1) {
  $20 = $8;
  $21 = $6;
  $22 = $21 >> 1;
  $23 = ($20|0)<($22|0);
  if (!($23)) {
   break;
  }
  $24 = $11;
  $25 = $8;
  $26 = $9;
  $27 = Math_imul($25, $26)|0;
  $28 = (($24) + ($27)|0);
  $12 = $28;
  $29 = $11;
  $30 = $6;
  $31 = $8;
  $32 = (($30) - ($31))|0;
  $33 = (($32) - 1)|0;
  $34 = $9;
  $35 = Math_imul($33, $34)|0;
  $36 = (($29) + ($35)|0);
  $13 = $36;
  $37 = $9;
  $14 = $37;
  while(1) {
   $38 = $14;
   $39 = ($38|0)!=(0);
   if (!($39)) {
    break;
   }
   $40 = $14;
   $41 = ($40>>>0)<(2048);
   $42 = $14;
   $43 = $41 ? $42 : 2048;
   $15 = $43;
   $44 = $12;
   $45 = $15;
   _memcpy(($10|0),($44|0),($45|0))|0;
   $46 = $12;
   $47 = $13;
   $48 = $15;
   _memcpy(($46|0),($47|0),($48|0))|0;
   $49 = $13;
   $50 = $15;
   _memcpy(($49|0),($10|0),($50|0))|0;
   $51 = $15;
   $52 = $12;
   $53 = (($52) + ($51)|0);
   $12 = $53;
   $54 = $15;
   $55 = $13;
   $56 = (($55) + ($54)|0);
   $13 = $56;
   $57 = $15;
   $58 = $14;
   $59 = (($58) - ($57))|0;
   $14 = $59;
  }
  $60 = $8;
  $61 = (($60) + 1)|0;
  $8 = $61;
 }
 STACKTOP = sp;return;
}
function __ZL12stbi__mallocm($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_malloc($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZL15stbi__jpeg_testP13stbi__context($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = (__ZL12stbi__mallocm(18456)|0);
 $3 = $4;
 $5 = $1;
 $6 = $3;
 HEAP32[$6>>2] = $5;
 $7 = $3;
 __ZL16stbi__setup_jpegP10stbi__jpeg($7);
 $8 = $3;
 $9 = (__ZL24stbi__decode_jpeg_headerP10stbi__jpegi($8,1)|0);
 $2 = $9;
 $10 = $1;
 __ZL12stbi__rewindP13stbi__context($10);
 $11 = $3;
 _free($11);
 $12 = $2;
 STACKTOP = sp;return ($12|0);
}
function __ZL15stbi__jpeg_loadP13stbi__contextPiS1_S1_iP17stbi__result_info($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $14 = (__ZL12stbi__mallocm(18456)|0);
 $13 = $14;
 $15 = $6;
 $16 = $13;
 HEAP32[$16>>2] = $15;
 $17 = $13;
 __ZL16stbi__setup_jpegP10stbi__jpeg($17);
 $18 = $13;
 $19 = $7;
 $20 = $8;
 $21 = $9;
 $22 = $10;
 $23 = (__ZL15load_jpeg_imageP10stbi__jpegPiS1_S1_i($18,$19,$20,$21,$22)|0);
 $12 = $23;
 $24 = $13;
 _free($24);
 $25 = $12;
 STACKTOP = sp;return ($25|0);
}
function __ZL14stbi__png_testP13stbi__context($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (__ZL22stbi__check_png_headerP13stbi__context($3)|0);
 $2 = $4;
 $5 = $1;
 __ZL12stbi__rewindP13stbi__context($5);
 $6 = $2;
 STACKTOP = sp;return ($6|0);
}
function __ZL14stbi__png_loadP13stbi__contextPiS1_S1_iP17stbi__result_info($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $12 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $13 = $6;
 HEAP32[$12>>2] = $13;
 $14 = $7;
 $15 = $8;
 $16 = $9;
 $17 = $10;
 $18 = $11;
 $19 = (__ZL12stbi__do_pngP9stbi__pngPiS1_S1_iP17stbi__result_info($12,$14,$15,$16,$17,$18)|0);
 STACKTOP = sp;return ($19|0);
}
function __ZL14stbi__bmp_testP13stbi__context($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (__ZL18stbi__bmp_test_rawP13stbi__context($3)|0);
 $2 = $4;
 $5 = $1;
 __ZL12stbi__rewindP13stbi__context($5);
 $6 = $2;
 STACKTOP = sp;return ($6|0);
}
function __ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_iP17stbi__result_info($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
 var $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
 var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0;
 var $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0;
 var $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1232|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1232|0);
 $19 = sp;
 $27 = sp + 1112|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $14 = 0;
 $15 = 0;
 $16 = 0;
 $17 = 0;
 $20 = 0;
 $51 = ((($27)) + 28|0);
 HEAP32[$51>>2] = 255;
 $52 = $7;
 $53 = (__ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data($52,$27)|0);
 $54 = ($53|0)==(0|0);
 if ($54) {
  $6 = 0;
  $658 = $6;
  STACKTOP = sp;return ($658|0);
 }
 $55 = $7;
 $56 = ((($55)) + 4|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ($57|0)>(0);
 $59 = $58&1;
 $24 = $59;
 $60 = $7;
 $61 = ((($60)) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = (Math_abs(($62|0))|0);
 $64 = $7;
 $65 = ((($64)) + 4|0);
 HEAP32[$65>>2] = $63;
 $66 = ((($27)) + 12|0);
 $67 = HEAP32[$66>>2]|0;
 $14 = $67;
 $68 = ((($27)) + 16|0);
 $69 = HEAP32[$68>>2]|0;
 $15 = $69;
 $70 = ((($27)) + 20|0);
 $71 = HEAP32[$70>>2]|0;
 $16 = $71;
 $72 = ((($27)) + 24|0);
 $73 = HEAP32[$72>>2]|0;
 $17 = $73;
 $74 = ((($27)) + 28|0);
 $75 = HEAP32[$74>>2]|0;
 $18 = $75;
 $76 = ((($27)) + 8|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ($77|0)==(12);
 $79 = HEAP32[$27>>2]|0;
 if ($78) {
  $80 = ($79|0)<(24);
  if ($80) {
   $81 = ((($27)) + 4|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = (($82) - 14)|0;
   $84 = (($83) - 24)|0;
   $85 = (($84|0) / 3)&-1;
   $20 = $85;
  }
 } else {
  $86 = ($79|0)<(16);
  if ($86) {
   $87 = ((($27)) + 4|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = (($88) - 14)|0;
   $90 = ((($27)) + 8|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = (($89) - ($91))|0;
   $93 = $92 >> 2;
   $20 = $93;
  }
 }
 $94 = $17;
 $95 = ($94|0)!=(0);
 $96 = $95 ? 4 : 3;
 $97 = $7;
 $98 = ((($97)) + 8|0);
 HEAP32[$98>>2] = $96;
 $99 = $11;
 $100 = ($99|0)!=(0);
 $101 = $11;
 $102 = ($101|0)>=(3);
 $or$cond = $100 & $102;
 if ($or$cond) {
  $103 = $11;
  $26 = $103;
 } else {
  $104 = $7;
  $105 = ((($104)) + 8|0);
  $106 = HEAP32[$105>>2]|0;
  $26 = $106;
 }
 $107 = $26;
 $108 = $7;
 $109 = HEAP32[$108>>2]|0;
 $110 = $7;
 $111 = ((($110)) + 4|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = (__ZL21stbi__mad3sizes_validiiii($107,$109,$112,0)|0);
 $114 = ($113|0)!=(0);
 if (!($114)) {
  $115 = (__ZL9stbi__errPKc(9762)|0);
  $116 = ($115|0)!=(0);
  $117 = $116 ? 0 : 0;
  $118 = $117;
  $6 = $118;
  $658 = $6;
  STACKTOP = sp;return ($658|0);
 }
 $119 = $26;
 $120 = $7;
 $121 = HEAP32[$120>>2]|0;
 $122 = $7;
 $123 = ((($122)) + 4|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = (__ZL17stbi__malloc_mad3iiii($119,$121,$124,0)|0);
 $13 = $125;
 $126 = $13;
 $127 = ($126|0)!=(0|0);
 if (!($127)) {
  $128 = (__ZL9stbi__errPKc(9723)|0);
  $129 = ($128|0)!=(0);
  $130 = $129 ? 0 : 0;
  $131 = $130;
  $6 = $131;
  $658 = $6;
  STACKTOP = sp;return ($658|0);
 }
 $132 = HEAP32[$27>>2]|0;
 $133 = ($132|0)<(16);
 L23: do {
  if ($133) {
   $28 = 0;
   $134 = $20;
   $135 = ($134|0)==(0);
   $136 = $20;
   $137 = ($136|0)>(256);
   $or$cond3 = $135 | $137;
   if ($or$cond3) {
    $138 = $13;
    _free($138);
    $139 = (__ZL9stbi__errPKc(10305)|0);
    $140 = ($139|0)!=(0);
    $141 = $140 ? 0 : 0;
    $142 = $141;
    $6 = $142;
    $658 = $6;
    STACKTOP = sp;return ($658|0);
   }
   $21 = 0;
   while(1) {
    $143 = $21;
    $144 = $20;
    $145 = ($143|0)<($144|0);
    $146 = $7;
    if (!($145)) {
     break;
    }
    $147 = (__ZL10stbi__get8P13stbi__context($146)|0);
    $148 = $21;
    $149 = (($19) + ($148<<2)|0);
    $150 = ((($149)) + 2|0);
    HEAP8[$150>>0] = $147;
    $151 = $7;
    $152 = (__ZL10stbi__get8P13stbi__context($151)|0);
    $153 = $21;
    $154 = (($19) + ($153<<2)|0);
    $155 = ((($154)) + 1|0);
    HEAP8[$155>>0] = $152;
    $156 = $7;
    $157 = (__ZL10stbi__get8P13stbi__context($156)|0);
    $158 = $21;
    $159 = (($19) + ($158<<2)|0);
    HEAP8[$159>>0] = $157;
    $160 = ((($27)) + 8|0);
    $161 = HEAP32[$160>>2]|0;
    $162 = ($161|0)!=(12);
    if ($162) {
     $163 = $7;
     (__ZL10stbi__get8P13stbi__context($163)|0);
    }
    $164 = $21;
    $165 = (($19) + ($164<<2)|0);
    $166 = ((($165)) + 3|0);
    HEAP8[$166>>0] = -1;
    $167 = $21;
    $168 = (($167) + 1)|0;
    $21 = $168;
   }
   $169 = ((($27)) + 4|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = (($170) - 14)|0;
   $172 = ((($27)) + 8|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = (($171) - ($173))|0;
   $175 = $20;
   $176 = ((($27)) + 8|0);
   $177 = HEAP32[$176>>2]|0;
   $178 = ($177|0)==(12);
   $179 = $178 ? 3 : 4;
   $180 = Math_imul($175, $179)|0;
   $181 = (($174) - ($180))|0;
   __ZL10stbi__skipP13stbi__contexti($146,$181);
   $182 = HEAP32[$27>>2]|0;
   $183 = ($182|0)==(1);
   do {
    if ($183) {
     $184 = $7;
     $185 = HEAP32[$184>>2]|0;
     $186 = (($185) + 7)|0;
     $187 = $186 >>> 3;
     $23 = $187;
    } else {
     $188 = HEAP32[$27>>2]|0;
     $189 = ($188|0)==(4);
     if ($189) {
      $190 = $7;
      $191 = HEAP32[$190>>2]|0;
      $192 = (($191) + 1)|0;
      $193 = $192 >>> 1;
      $23 = $193;
      break;
     }
     $194 = HEAP32[$27>>2]|0;
     $195 = ($194|0)==(8);
     if ($195) {
      $196 = $7;
      $197 = HEAP32[$196>>2]|0;
      $23 = $197;
      break;
     }
     $198 = $13;
     _free($198);
     $199 = (__ZL9stbi__errPKc(10313)|0);
     $200 = ($199|0)!=(0);
     $201 = $200 ? 0 : 0;
     $202 = $201;
     $6 = $202;
     $658 = $6;
     STACKTOP = sp;return ($658|0);
    }
   } while(0);
   $203 = $23;
   $204 = (0 - ($203))|0;
   $205 = $204 & 3;
   $25 = $205;
   $206 = HEAP32[$27>>2]|0;
   $207 = ($206|0)==(1);
   $22 = 0;
   if ($207) {
    while(1) {
     $208 = $22;
     $209 = $7;
     $210 = ((($209)) + 4|0);
     $211 = HEAP32[$210>>2]|0;
     $212 = ($208|0)<($211|0);
     if (!($212)) {
      break L23;
     }
     $29 = 7;
     $213 = $7;
     $214 = (__ZL10stbi__get8P13stbi__context($213)|0);
     $215 = $214&255;
     $30 = $215;
     $21 = 0;
     while(1) {
      $216 = $21;
      $217 = $7;
      $218 = HEAP32[$217>>2]|0;
      $219 = ($216|0)<($218|0);
      if (!($219)) {
       break;
      }
      $220 = $30;
      $221 = $29;
      $222 = $220 >> $221;
      $223 = $222 & 1;
      $31 = $223;
      $224 = $31;
      $225 = (($19) + ($224<<2)|0);
      $226 = HEAP8[$225>>0]|0;
      $227 = $13;
      $228 = $28;
      $229 = (($228) + 1)|0;
      $28 = $229;
      $230 = (($227) + ($228)|0);
      HEAP8[$230>>0] = $226;
      $231 = $31;
      $232 = (($19) + ($231<<2)|0);
      $233 = ((($232)) + 1|0);
      $234 = HEAP8[$233>>0]|0;
      $235 = $13;
      $236 = $28;
      $237 = (($236) + 1)|0;
      $28 = $237;
      $238 = (($235) + ($236)|0);
      HEAP8[$238>>0] = $234;
      $239 = $31;
      $240 = (($19) + ($239<<2)|0);
      $241 = ((($240)) + 2|0);
      $242 = HEAP8[$241>>0]|0;
      $243 = $13;
      $244 = $28;
      $245 = (($244) + 1)|0;
      $28 = $245;
      $246 = (($243) + ($244)|0);
      HEAP8[$246>>0] = $242;
      $247 = $26;
      $248 = ($247|0)==(4);
      if ($248) {
       $249 = $13;
       $250 = $28;
       $251 = (($250) + 1)|0;
       $28 = $251;
       $252 = (($249) + ($250)|0);
       HEAP8[$252>>0] = -1;
      }
      $253 = $21;
      $254 = (($253) + 1)|0;
      $255 = $7;
      $256 = HEAP32[$255>>2]|0;
      $257 = ($254|0)==($256|0);
      if ($257) {
       break;
      }
      $258 = $29;
      $259 = (($258) + -1)|0;
      $29 = $259;
      $260 = ($259|0)<(0);
      if ($260) {
       $29 = 7;
       $261 = $7;
       $262 = (__ZL10stbi__get8P13stbi__context($261)|0);
       $263 = $262&255;
       $30 = $263;
      }
      $264 = $21;
      $265 = (($264) + 1)|0;
      $21 = $265;
     }
     $266 = $7;
     $267 = $25;
     __ZL10stbi__skipP13stbi__contexti($266,$267);
     $268 = $22;
     $269 = (($268) + 1)|0;
     $22 = $269;
    }
   }
   while(1) {
    $270 = $22;
    $271 = $7;
    $272 = ((($271)) + 4|0);
    $273 = HEAP32[$272>>2]|0;
    $274 = ($270|0)<($273|0);
    if (!($274)) {
     break L23;
    }
    $21 = 0;
    while(1) {
     $275 = $21;
     $276 = $7;
     $277 = HEAP32[$276>>2]|0;
     $278 = ($275|0)<($277|0);
     if (!($278)) {
      break;
     }
     $279 = $7;
     $280 = (__ZL10stbi__get8P13stbi__context($279)|0);
     $281 = $280&255;
     $32 = $281;
     $33 = 0;
     $282 = HEAP32[$27>>2]|0;
     $283 = ($282|0)==(4);
     if ($283) {
      $284 = $32;
      $285 = $284 & 15;
      $33 = $285;
      $286 = $32;
      $287 = $286 >> 4;
      $32 = $287;
     }
     $288 = $32;
     $289 = (($19) + ($288<<2)|0);
     $290 = HEAP8[$289>>0]|0;
     $291 = $13;
     $292 = $28;
     $293 = (($292) + 1)|0;
     $28 = $293;
     $294 = (($291) + ($292)|0);
     HEAP8[$294>>0] = $290;
     $295 = $32;
     $296 = (($19) + ($295<<2)|0);
     $297 = ((($296)) + 1|0);
     $298 = HEAP8[$297>>0]|0;
     $299 = $13;
     $300 = $28;
     $301 = (($300) + 1)|0;
     $28 = $301;
     $302 = (($299) + ($300)|0);
     HEAP8[$302>>0] = $298;
     $303 = $32;
     $304 = (($19) + ($303<<2)|0);
     $305 = ((($304)) + 2|0);
     $306 = HEAP8[$305>>0]|0;
     $307 = $13;
     $308 = $28;
     $309 = (($308) + 1)|0;
     $28 = $309;
     $310 = (($307) + ($308)|0);
     HEAP8[$310>>0] = $306;
     $311 = $26;
     $312 = ($311|0)==(4);
     if ($312) {
      $313 = $13;
      $314 = $28;
      $315 = (($314) + 1)|0;
      $28 = $315;
      $316 = (($313) + ($314)|0);
      HEAP8[$316>>0] = -1;
     }
     $317 = $21;
     $318 = (($317) + 1)|0;
     $319 = $7;
     $320 = HEAP32[$319>>2]|0;
     $321 = ($318|0)==($320|0);
     if ($321) {
      break;
     }
     $322 = HEAP32[$27>>2]|0;
     $323 = ($322|0)==(8);
     if ($323) {
      $324 = $7;
      $325 = (__ZL10stbi__get8P13stbi__context($324)|0);
      $326 = $325&255;
      $328 = $326;
     } else {
      $327 = $33;
      $328 = $327;
     }
     $32 = $328;
     $329 = $32;
     $330 = (($19) + ($329<<2)|0);
     $331 = HEAP8[$330>>0]|0;
     $332 = $13;
     $333 = $28;
     $334 = (($333) + 1)|0;
     $28 = $334;
     $335 = (($332) + ($333)|0);
     HEAP8[$335>>0] = $331;
     $336 = $32;
     $337 = (($19) + ($336<<2)|0);
     $338 = ((($337)) + 1|0);
     $339 = HEAP8[$338>>0]|0;
     $340 = $13;
     $341 = $28;
     $342 = (($341) + 1)|0;
     $28 = $342;
     $343 = (($340) + ($341)|0);
     HEAP8[$343>>0] = $339;
     $344 = $32;
     $345 = (($19) + ($344<<2)|0);
     $346 = ((($345)) + 2|0);
     $347 = HEAP8[$346>>0]|0;
     $348 = $13;
     $349 = $28;
     $350 = (($349) + 1)|0;
     $28 = $350;
     $351 = (($348) + ($349)|0);
     HEAP8[$351>>0] = $347;
     $352 = $26;
     $353 = ($352|0)==(4);
     if ($353) {
      $354 = $13;
      $355 = $28;
      $356 = (($355) + 1)|0;
      $28 = $356;
      $357 = (($354) + ($355)|0);
      HEAP8[$357>>0] = -1;
     }
     $358 = $21;
     $359 = (($358) + 2)|0;
     $21 = $359;
    }
    $360 = $7;
    $361 = $25;
    __ZL10stbi__skipP13stbi__contexti($360,$361);
    $362 = $22;
    $363 = (($362) + 1)|0;
    $22 = $363;
   }
  } else {
   $34 = 0;
   $35 = 0;
   $36 = 0;
   $37 = 0;
   $38 = 0;
   $39 = 0;
   $40 = 0;
   $41 = 0;
   $42 = 0;
   $43 = 0;
   $364 = $7;
   $365 = ((($27)) + 4|0);
   $366 = HEAP32[$365>>2]|0;
   $367 = (($366) - 14)|0;
   $368 = ((($27)) + 8|0);
   $369 = HEAP32[$368>>2]|0;
   $370 = (($367) - ($369))|0;
   __ZL10stbi__skipP13stbi__contexti($364,$370);
   $371 = HEAP32[$27>>2]|0;
   $372 = ($371|0)==(24);
   do {
    if ($372) {
     $373 = $7;
     $374 = HEAP32[$373>>2]|0;
     $375 = ($374*3)|0;
     $23 = $375;
    } else {
     $376 = HEAP32[$27>>2]|0;
     $377 = ($376|0)==(16);
     if ($377) {
      $378 = $7;
      $379 = HEAP32[$378>>2]|0;
      $380 = $379<<1;
      $23 = $380;
      break;
     } else {
      $23 = 0;
      break;
     }
    }
   } while(0);
   $381 = $23;
   $382 = (0 - ($381))|0;
   $383 = $382 & 3;
   $25 = $383;
   $384 = HEAP32[$27>>2]|0;
   $385 = ($384|0)==(24);
   if ($385) {
    $43 = 1;
   } else {
    $386 = HEAP32[$27>>2]|0;
    $387 = ($386|0)==(32);
    if ($387) {
     $388 = $16;
     $389 = ($388|0)==(255);
     $390 = $15;
     $391 = ($390|0)==(65280);
     $or$cond5 = $389 & $391;
     $392 = $14;
     $393 = ($392|0)==(16711680);
     $or$cond7 = $or$cond5 & $393;
     $394 = $17;
     $395 = ($394|0)==(-16777216);
     $or$cond9 = $or$cond7 & $395;
     if ($or$cond9) {
      $43 = 2;
     }
    }
   }
   $396 = $43;
   $397 = ($396|0)!=(0);
   do {
    if (!($397)) {
     $398 = $14;
     $399 = ($398|0)!=(0);
     $400 = $15;
     $401 = ($400|0)!=(0);
     $or$cond11 = $399 & $401;
     $402 = $16;
     $403 = ($402|0)!=(0);
     $or$cond13 = $or$cond11 & $403;
     if ($or$cond13) {
      $409 = $14;
      $410 = (__ZL14stbi__high_bitj($409)|0);
      $411 = (($410) - 7)|0;
      $34 = $411;
      $412 = $14;
      $413 = (__ZL14stbi__bitcountj($412)|0);
      $38 = $413;
      $414 = $15;
      $415 = (__ZL14stbi__high_bitj($414)|0);
      $416 = (($415) - 7)|0;
      $35 = $416;
      $417 = $15;
      $418 = (__ZL14stbi__bitcountj($417)|0);
      $39 = $418;
      $419 = $16;
      $420 = (__ZL14stbi__high_bitj($419)|0);
      $421 = (($420) - 7)|0;
      $36 = $421;
      $422 = $16;
      $423 = (__ZL14stbi__bitcountj($422)|0);
      $40 = $423;
      $424 = $17;
      $425 = (__ZL14stbi__high_bitj($424)|0);
      $426 = (($425) - 7)|0;
      $37 = $426;
      $427 = $17;
      $428 = (__ZL14stbi__bitcountj($427)|0);
      $41 = $428;
      break;
     }
     $404 = $13;
     _free($404);
     $405 = (__ZL9stbi__errPKc(10321)|0);
     $406 = ($405|0)!=(0);
     $407 = $406 ? 0 : 0;
     $408 = $407;
     $6 = $408;
     $658 = $6;
     STACKTOP = sp;return ($658|0);
    }
   } while(0);
   $22 = 0;
   while(1) {
    $429 = $22;
    $430 = $7;
    $431 = ((($430)) + 4|0);
    $432 = HEAP32[$431>>2]|0;
    $433 = ($429|0)<($432|0);
    if (!($433)) {
     break L23;
    }
    $434 = $43;
    $435 = ($434|0)!=(0);
    L109: do {
     if ($435) {
      $21 = 0;
      while(1) {
       $436 = $21;
       $437 = $7;
       $438 = HEAP32[$437>>2]|0;
       $439 = ($436|0)<($438|0);
       if (!($439)) {
        break L109;
       }
       $440 = $7;
       $441 = (__ZL10stbi__get8P13stbi__context($440)|0);
       $442 = $13;
       $443 = $42;
       $444 = (($443) + 2)|0;
       $445 = (($442) + ($444)|0);
       HEAP8[$445>>0] = $441;
       $446 = $7;
       $447 = (__ZL10stbi__get8P13stbi__context($446)|0);
       $448 = $13;
       $449 = $42;
       $450 = (($449) + 1)|0;
       $451 = (($448) + ($450)|0);
       HEAP8[$451>>0] = $447;
       $452 = $7;
       $453 = (__ZL10stbi__get8P13stbi__context($452)|0);
       $454 = $13;
       $455 = $42;
       $456 = (($455) + 0)|0;
       $457 = (($454) + ($456)|0);
       HEAP8[$457>>0] = $453;
       $458 = $42;
       $459 = (($458) + 3)|0;
       $42 = $459;
       $460 = $43;
       $461 = ($460|0)==(2);
       if ($461) {
        $462 = $7;
        $463 = (__ZL10stbi__get8P13stbi__context($462)|0);
        $464 = $463&255;
        $466 = $464;
       } else {
        $466 = 255;
       }
       $465 = $466&255;
       $44 = $465;
       $467 = $44;
       $468 = $467&255;
       $469 = $18;
       $470 = $469 | $468;
       $18 = $470;
       $471 = $26;
       $472 = ($471|0)==(4);
       if ($472) {
        $473 = $44;
        $474 = $13;
        $475 = $42;
        $476 = (($475) + 1)|0;
        $42 = $476;
        $477 = (($474) + ($475)|0);
        HEAP8[$477>>0] = $473;
       }
       $478 = $21;
       $479 = (($478) + 1)|0;
       $21 = $479;
      }
     } else {
      $480 = HEAP32[$27>>2]|0;
      $45 = $480;
      $21 = 0;
      while(1) {
       $481 = $21;
       $482 = $7;
       $483 = HEAP32[$482>>2]|0;
       $484 = ($481|0)<($483|0);
       if (!($484)) {
        break L109;
       }
       $485 = $45;
       $486 = ($485|0)==(16);
       $487 = $7;
       if ($486) {
        $488 = (__ZL13stbi__get16leP13stbi__context($487)|0);
        $490 = $488;
       } else {
        $489 = (__ZL13stbi__get32leP13stbi__context($487)|0);
        $490 = $489;
       }
       $46 = $490;
       $491 = $46;
       $492 = $14;
       $493 = $491 & $492;
       $494 = $34;
       $495 = $38;
       $496 = (__ZL17stbi__shiftsignedjii($493,$494,$495)|0);
       $497 = $496 & 255;
       $498 = $497&255;
       $499 = $13;
       $500 = $42;
       $501 = (($500) + 1)|0;
       $42 = $501;
       $502 = (($499) + ($500)|0);
       HEAP8[$502>>0] = $498;
       $503 = $46;
       $504 = $15;
       $505 = $503 & $504;
       $506 = $35;
       $507 = $39;
       $508 = (__ZL17stbi__shiftsignedjii($505,$506,$507)|0);
       $509 = $508 & 255;
       $510 = $509&255;
       $511 = $13;
       $512 = $42;
       $513 = (($512) + 1)|0;
       $42 = $513;
       $514 = (($511) + ($512)|0);
       HEAP8[$514>>0] = $510;
       $515 = $46;
       $516 = $16;
       $517 = $515 & $516;
       $518 = $36;
       $519 = $40;
       $520 = (__ZL17stbi__shiftsignedjii($517,$518,$519)|0);
       $521 = $520 & 255;
       $522 = $521&255;
       $523 = $13;
       $524 = $42;
       $525 = (($524) + 1)|0;
       $42 = $525;
       $526 = (($523) + ($524)|0);
       HEAP8[$526>>0] = $522;
       $527 = $17;
       $528 = ($527|0)!=(0);
       if ($528) {
        $529 = $46;
        $530 = $17;
        $531 = $529 & $530;
        $532 = $37;
        $533 = $41;
        $534 = (__ZL17stbi__shiftsignedjii($531,$532,$533)|0);
        $535 = $534;
       } else {
        $535 = 255;
       }
       $47 = $535;
       $536 = $47;
       $537 = $18;
       $538 = $537 | $536;
       $18 = $538;
       $539 = $26;
       $540 = ($539|0)==(4);
       if ($540) {
        $541 = $47;
        $542 = $541 & 255;
        $543 = $542&255;
        $544 = $13;
        $545 = $42;
        $546 = (($545) + 1)|0;
        $42 = $546;
        $547 = (($544) + ($545)|0);
        HEAP8[$547>>0] = $543;
       }
       $548 = $21;
       $549 = (($548) + 1)|0;
       $21 = $549;
      }
     }
    } while(0);
    $550 = $7;
    $551 = $25;
    __ZL10stbi__skipP13stbi__contexti($550,$551);
    $552 = $22;
    $553 = (($552) + 1)|0;
    $22 = $553;
   }
  }
 } while(0);
 $554 = $26;
 $555 = ($554|0)==(4);
 $556 = $18;
 $557 = ($556|0)==(0);
 $or$cond15 = $555 & $557;
 L136: do {
  if ($or$cond15) {
   $558 = $7;
   $559 = HEAP32[$558>>2]|0;
   $560 = $559<<2;
   $561 = $7;
   $562 = ((($561)) + 4|0);
   $563 = HEAP32[$562>>2]|0;
   $564 = Math_imul($560, $563)|0;
   $565 = (($564) - 1)|0;
   $21 = $565;
   while(1) {
    $566 = $21;
    $567 = ($566|0)>=(0);
    if (!($567)) {
     break L136;
    }
    $568 = $13;
    $569 = $21;
    $570 = (($568) + ($569)|0);
    HEAP8[$570>>0] = -1;
    $571 = $21;
    $572 = (($571) - 4)|0;
    $21 = $572;
   }
  }
 } while(0);
 $573 = $24;
 $574 = ($573|0)!=(0);
 L142: do {
  if ($574) {
   $22 = 0;
   while(1) {
    $575 = $22;
    $576 = $7;
    $577 = ((($576)) + 4|0);
    $578 = HEAP32[$577>>2]|0;
    $579 = $578 >> 1;
    $580 = ($575|0)<($579|0);
    if (!($580)) {
     break L142;
    }
    $581 = $13;
    $582 = $22;
    $583 = $7;
    $584 = HEAP32[$583>>2]|0;
    $585 = Math_imul($582, $584)|0;
    $586 = $26;
    $587 = Math_imul($585, $586)|0;
    $588 = (($581) + ($587)|0);
    $49 = $588;
    $589 = $13;
    $590 = $7;
    $591 = ((($590)) + 4|0);
    $592 = HEAP32[$591>>2]|0;
    $593 = (($592) - 1)|0;
    $594 = $22;
    $595 = (($593) - ($594))|0;
    $596 = $7;
    $597 = HEAP32[$596>>2]|0;
    $598 = Math_imul($595, $597)|0;
    $599 = $26;
    $600 = Math_imul($598, $599)|0;
    $601 = (($589) + ($600)|0);
    $50 = $601;
    $21 = 0;
    while(1) {
     $602 = $21;
     $603 = $7;
     $604 = HEAP32[$603>>2]|0;
     $605 = $26;
     $606 = Math_imul($604, $605)|0;
     $607 = ($602|0)<($606|0);
     if (!($607)) {
      break;
     }
     $608 = $49;
     $609 = $21;
     $610 = (($608) + ($609)|0);
     $611 = HEAP8[$610>>0]|0;
     $48 = $611;
     $612 = $50;
     $613 = $21;
     $614 = (($612) + ($613)|0);
     $615 = HEAP8[$614>>0]|0;
     $616 = $49;
     $617 = $21;
     $618 = (($616) + ($617)|0);
     HEAP8[$618>>0] = $615;
     $619 = $48;
     $620 = $50;
     $621 = $21;
     $622 = (($620) + ($621)|0);
     HEAP8[$622>>0] = $619;
     $623 = $21;
     $624 = (($623) + 1)|0;
     $21 = $624;
    }
    $625 = $22;
    $626 = (($625) + 1)|0;
    $22 = $626;
   }
  }
 } while(0);
 $627 = $11;
 $628 = ($627|0)!=(0);
 if ($628) {
  $629 = $11;
  $630 = $26;
  $631 = ($629|0)!=($630|0);
  if ($631) {
   $632 = $13;
   $633 = $26;
   $634 = $11;
   $635 = $7;
   $636 = HEAP32[$635>>2]|0;
   $637 = $7;
   $638 = ((($637)) + 4|0);
   $639 = HEAP32[$638>>2]|0;
   $640 = (__ZL20stbi__convert_formatPhiijj($632,$633,$634,$636,$639)|0);
   $13 = $640;
   $641 = $13;
   $642 = ($641|0)==(0|0);
   if ($642) {
    $643 = $13;
    $6 = $643;
    $658 = $6;
    STACKTOP = sp;return ($658|0);
   }
  }
 }
 $644 = $7;
 $645 = HEAP32[$644>>2]|0;
 $646 = $8;
 HEAP32[$646>>2] = $645;
 $647 = $7;
 $648 = ((($647)) + 4|0);
 $649 = HEAP32[$648>>2]|0;
 $650 = $9;
 HEAP32[$650>>2] = $649;
 $651 = $10;
 $652 = ($651|0)!=(0|0);
 if ($652) {
  $653 = $7;
  $654 = ((($653)) + 8|0);
  $655 = HEAP32[$654>>2]|0;
  $656 = $10;
  HEAP32[$656>>2] = $655;
 }
 $657 = $13;
 $6 = $657;
 $658 = $6;
 STACKTOP = sp;return ($658|0);
}
function __ZL14stbi__gif_testP13stbi__context($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (__ZL18stbi__gif_test_rawP13stbi__context($3)|0);
 $2 = $4;
 $5 = $1;
 __ZL12stbi__rewindP13stbi__context($5);
 $6 = $2;
 STACKTOP = sp;return ($6|0);
}
function __ZL14stbi__gif_loadP13stbi__contextPiS1_S1_iP17stbi__result_info($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $spec$store$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 34944|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(34944|0);
 $13 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 0;
 _memset(($13|0),0,34904)|0;
 $14 = $6;
 $15 = $9;
 $16 = $10;
 $17 = (__ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh($14,$13,$15,$16,0)|0);
 $12 = $17;
 $18 = $12;
 $19 = $6;
 $20 = ($18|0)==($19|0);
 $spec$store$select = $20 ? 0 : $17;
 $12 = $spec$store$select;
 $21 = $12;
 $22 = ($21|0)!=(0|0);
 if ($22) {
  $23 = HEAP32[$13>>2]|0;
  $24 = $7;
  HEAP32[$24>>2] = $23;
  $25 = ((($13)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $8;
  HEAP32[$27>>2] = $26;
  $28 = $10;
  $29 = ($28|0)!=(0);
  $30 = $10;
  $31 = ($30|0)!=(4);
  $or$cond = $29 & $31;
  if ($or$cond) {
   $32 = $12;
   $33 = $10;
   $34 = HEAP32[$13>>2]|0;
   $35 = ((($13)) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (__ZL20stbi__convert_formatPhiijj($32,4,$33,$34,$36)|0);
   $12 = $37;
  }
 } else {
  $38 = ((($13)) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($39|0)!=(0|0);
  if ($40) {
   $41 = ((($13)) + 8|0);
   $42 = HEAP32[$41>>2]|0;
   _free($42);
  }
 }
 $43 = ((($13)) + 16|0);
 $44 = HEAP32[$43>>2]|0;
 _free($44);
 $45 = ((($13)) + 12|0);
 $46 = HEAP32[$45>>2]|0;
 _free($46);
 $47 = $12;
 STACKTOP = sp;return ($47|0);
}
function __ZL14stbi__psd_testP13stbi__context($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (__ZL13stbi__get32beP13stbi__context($3)|0);
 $5 = ($4|0)==(943870035);
 $6 = $5&1;
 $2 = $6;
 $7 = $1;
 __ZL12stbi__rewindP13stbi__context($7);
 $8 = $2;
 STACKTOP = sp;return ($8|0);
}
function __ZL14stbi__psd_loadP13stbi__contextPiS1_S1_iP17stbi__result_infoi($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0, $293 = 0, $294 = 0, $295 = 0.0, $296 = 0.0, $297 = 0.0, $298 = 0.0, $299 = 0.0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0.0, $319 = 0.0, $32 = 0.0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0.0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0.0, $352 = 0.0, $353 = 0.0;
 var $354 = 0.0, $355 = 0.0, $356 = 0.0, $357 = 0.0, $358 = 0, $359 = 0, $36 = 0.0, $360 = 0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0.0, $370 = 0, $371 = 0;
 var $372 = 0.0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0.0, $377 = 0, $378 = 0, $379 = 0, $38 = 0.0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0.0, $385 = 0.0, $386 = 0.0, $387 = 0.0, $388 = 0.0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0;
 var $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $39 = $8;
 $40 = (__ZL13stbi__get32beP13stbi__context($39)|0);
 $41 = ($40|0)!=(943870035);
 if ($41) {
  $42 = (__ZL9stbi__errPKc(10069)|0);
  $43 = ($42|0)!=(0);
  $44 = $43 ? 0 : 0;
  $45 = $44;
  $7 = $45;
  $421 = $7;
  STACKTOP = sp;return ($421|0);
 }
 $46 = $8;
 $47 = (__ZL13stbi__get16beP13stbi__context($46)|0);
 $48 = ($47|0)!=(1);
 if ($48) {
  $49 = (__ZL9stbi__errPKc(10077)|0);
  $50 = ($49|0)!=(0);
  $51 = $50 ? 0 : 0;
  $52 = $51;
  $7 = $52;
  $421 = $7;
  STACKTOP = sp;return ($421|0);
 }
 $53 = $8;
 __ZL10stbi__skipP13stbi__contexti($53,6);
 $54 = $8;
 $55 = (__ZL13stbi__get16beP13stbi__context($54)|0);
 $16 = $55;
 $56 = $16;
 $57 = ($56|0)<(0);
 $58 = $16;
 $59 = ($58|0)>(16);
 $or$cond = $57 | $59;
 if ($or$cond) {
  $60 = (__ZL9stbi__errPKc(10091)|0);
  $61 = ($60|0)!=(0);
  $62 = $61 ? 0 : 0;
  $63 = $62;
  $7 = $63;
  $421 = $7;
  STACKTOP = sp;return ($421|0);
 }
 $64 = $8;
 $65 = (__ZL13stbi__get32beP13stbi__context($64)|0);
 $22 = $65;
 $66 = $8;
 $67 = (__ZL13stbi__get32beP13stbi__context($66)|0);
 $21 = $67;
 $68 = $8;
 $69 = (__ZL13stbi__get16beP13stbi__context($68)|0);
 $20 = $69;
 $70 = $20;
 $71 = ($70|0)!=(8);
 $72 = $20;
 $73 = ($72|0)!=(16);
 $or$cond3 = $71 & $73;
 if ($or$cond3) {
  $74 = (__ZL9stbi__errPKc(10111)|0);
  $75 = ($74|0)!=(0);
  $76 = $75 ? 0 : 0;
  $77 = $76;
  $7 = $77;
  $421 = $7;
  STACKTOP = sp;return ($421|0);
 }
 $78 = $8;
 $79 = (__ZL13stbi__get16beP13stbi__context($78)|0);
 $80 = ($79|0)!=(3);
 if ($80) {
  $81 = (__ZL9stbi__errPKc(10133)|0);
  $82 = ($81|0)!=(0);
  $83 = $82 ? 0 : 0;
  $84 = $83;
  $7 = $84;
  $421 = $7;
  STACKTOP = sp;return ($421|0);
 }
 $85 = $8;
 $86 = $8;
 $87 = (__ZL13stbi__get32beP13stbi__context($86)|0);
 __ZL10stbi__skipP13stbi__contexti($85,$87);
 $88 = $8;
 $89 = $8;
 $90 = (__ZL13stbi__get32beP13stbi__context($89)|0);
 __ZL10stbi__skipP13stbi__contexti($88,$90);
 $91 = $8;
 $92 = $8;
 $93 = (__ZL13stbi__get32beP13stbi__context($92)|0);
 __ZL10stbi__skipP13stbi__contexti($91,$93);
 $94 = $8;
 $95 = (__ZL13stbi__get16beP13stbi__context($94)|0);
 $17 = $95;
 $96 = $17;
 $97 = ($96|0)>(1);
 if ($97) {
  $98 = (__ZL9stbi__errPKc(10152)|0);
  $99 = ($98|0)!=(0);
  $100 = $99 ? 0 : 0;
  $101 = $100;
  $7 = $101;
  $421 = $7;
  STACKTOP = sp;return ($421|0);
 }
 $102 = $21;
 $103 = $22;
 $104 = (__ZL21stbi__mad3sizes_validiiii(4,$102,$103,0)|0);
 $105 = ($104|0)!=(0);
 if (!($105)) {
  $106 = (__ZL9stbi__errPKc(9762)|0);
  $107 = ($106|0)!=(0);
  $108 = $107 ? 0 : 0;
  $109 = $108;
  $7 = $109;
  $421 = $7;
  STACKTOP = sp;return ($421|0);
 }
 $110 = $17;
 $111 = ($110|0)==(0);
 $112 = $20;
 $113 = ($112|0)==(16);
 $or$cond5 = $111 & $113;
 $114 = $14;
 $115 = ($114|0)==(16);
 $or$cond7 = $or$cond5 & $115;
 $116 = $21;
 if ($or$cond7) {
  $117 = $22;
  $118 = (__ZL17stbi__malloc_mad3iiii(8,$116,$117,0)|0);
  $23 = $118;
  $119 = $13;
  HEAP32[$119>>2] = 16;
 } else {
  $120 = $116<<2;
  $121 = $22;
  $122 = Math_imul($120, $121)|0;
  $123 = (__ZL12stbi__mallocm($122)|0);
  $23 = $123;
 }
 $124 = $23;
 $125 = ($124|0)!=(0|0);
 if (!($125)) {
  $126 = (__ZL9stbi__errPKc(9723)|0);
  $127 = ($126|0)!=(0);
  $128 = $127 ? 0 : 0;
  $129 = $128;
  $7 = $129;
  $421 = $7;
  STACKTOP = sp;return ($421|0);
 }
 $130 = $21;
 $131 = $22;
 $132 = Math_imul($130, $131)|0;
 $15 = $132;
 $133 = $17;
 $134 = ($133|0)!=(0);
 L37: do {
  if ($134) {
   $135 = $8;
   $136 = $22;
   $137 = $16;
   $138 = Math_imul($136, $137)|0;
   $139 = $138<<1;
   __ZL10stbi__skipP13stbi__contexti($135,$139);
   $18 = 0;
   L39: while(1) {
    $140 = $18;
    $141 = ($140|0)<(4);
    if (!($141)) {
     break L37;
    }
    $142 = $23;
    $143 = $18;
    $144 = (($142) + ($143)|0);
    $24 = $144;
    $145 = $18;
    $146 = $16;
    $147 = ($145|0)>=($146|0);
    L42: do {
     if ($147) {
      $19 = 0;
      while(1) {
       $148 = $19;
       $149 = $15;
       $150 = ($148|0)<($149|0);
       if (!($150)) {
        break L42;
       }
       $151 = $18;
       $152 = ($151|0)==(3);
       $153 = $152 ? 255 : 0;
       $154 = $153&255;
       $155 = $24;
       HEAP8[$155>>0] = $154;
       $156 = $19;
       $157 = (($156) + 1)|0;
       $19 = $157;
       $158 = $24;
       $159 = ((($158)) + 4|0);
       $24 = $159;
      }
     } else {
      $160 = $8;
      $161 = $24;
      $162 = $15;
      $163 = (__ZL20stbi__psd_decode_rleP13stbi__contextPhi($160,$161,$162)|0);
      $164 = ($163|0)!=(0);
      if (!($164)) {
       break L39;
      }
     }
    } while(0);
    $170 = $18;
    $171 = (($170) + 1)|0;
    $18 = $171;
   }
   $165 = $23;
   _free($165);
   $166 = (__ZL9stbi__errPKc(10006)|0);
   $167 = ($166|0)!=(0);
   $168 = $167 ? 0 : 0;
   $169 = $168;
   $7 = $169;
   $421 = $7;
   STACKTOP = sp;return ($421|0);
  } else {
   $18 = 0;
   while(1) {
    $172 = $18;
    $173 = ($172|0)<(4);
    if (!($173)) {
     break L37;
    }
    $174 = $18;
    $175 = $16;
    $176 = ($174|0)>=($175|0);
    L55: do {
     if ($176) {
      $177 = $20;
      $178 = ($177|0)==(16);
      $179 = $14;
      $180 = ($179|0)==(16);
      $or$cond9 = $178 & $180;
      $181 = $23;
      if ($or$cond9) {
       $182 = $18;
       $183 = (($181) + ($182<<1)|0);
       $25 = $183;
       $184 = $18;
       $185 = ($184|0)==(3);
       $186 = $185 ? 65535 : 0;
       $187 = $186&65535;
       $26 = $187;
       $19 = 0;
       while(1) {
        $188 = $19;
        $189 = $15;
        $190 = ($188|0)<($189|0);
        if (!($190)) {
         break L55;
        }
        $191 = $26;
        $192 = $25;
        HEAP16[$192>>1] = $191;
        $193 = $19;
        $194 = (($193) + 1)|0;
        $19 = $194;
        $195 = $25;
        $196 = ((($195)) + 8|0);
        $25 = $196;
       }
      } else {
       $197 = $18;
       $198 = (($181) + ($197)|0);
       $27 = $198;
       $199 = $18;
       $200 = ($199|0)==(3);
       $201 = $200 ? 255 : 0;
       $202 = $201&255;
       $28 = $202;
       $19 = 0;
       while(1) {
        $203 = $19;
        $204 = $15;
        $205 = ($203|0)<($204|0);
        if (!($205)) {
         break L55;
        }
        $206 = $28;
        $207 = $27;
        HEAP8[$207>>0] = $206;
        $208 = $19;
        $209 = (($208) + 1)|0;
        $19 = $209;
        $210 = $27;
        $211 = ((($210)) + 4|0);
        $27 = $211;
       }
      }
     } else {
      $212 = $13;
      $213 = HEAP32[$212>>2]|0;
      $214 = ($213|0)==(16);
      $215 = $23;
      if ($214) {
       $216 = $18;
       $217 = (($215) + ($216<<1)|0);
       $29 = $217;
       $19 = 0;
       while(1) {
        $218 = $19;
        $219 = $15;
        $220 = ($218|0)<($219|0);
        if (!($220)) {
         break L55;
        }
        $221 = $8;
        $222 = (__ZL13stbi__get16beP13stbi__context($221)|0);
        $223 = $222&65535;
        $224 = $29;
        HEAP16[$224>>1] = $223;
        $225 = $19;
        $226 = (($225) + 1)|0;
        $19 = $226;
        $227 = $29;
        $228 = ((($227)) + 8|0);
        $29 = $228;
       }
      }
      $229 = $18;
      $230 = (($215) + ($229)|0);
      $30 = $230;
      $231 = $20;
      $232 = ($231|0)==(16);
      $19 = 0;
      if ($232) {
       while(1) {
        $233 = $19;
        $234 = $15;
        $235 = ($233|0)<($234|0);
        if (!($235)) {
         break L55;
        }
        $236 = $8;
        $237 = (__ZL13stbi__get16beP13stbi__context($236)|0);
        $238 = $237 >> 8;
        $239 = $238&255;
        $240 = $30;
        HEAP8[$240>>0] = $239;
        $241 = $19;
        $242 = (($241) + 1)|0;
        $19 = $242;
        $243 = $30;
        $244 = ((($243)) + 4|0);
        $30 = $244;
       }
      } else {
       while(1) {
        $245 = $19;
        $246 = $15;
        $247 = ($245|0)<($246|0);
        if (!($247)) {
         break L55;
        }
        $248 = $8;
        $249 = (__ZL10stbi__get8P13stbi__context($248)|0);
        $250 = $30;
        HEAP8[$250>>0] = $249;
        $251 = $19;
        $252 = (($251) + 1)|0;
        $19 = $252;
        $253 = $30;
        $254 = ((($253)) + 4|0);
        $30 = $254;
       }
      }
     }
    } while(0);
    $255 = $18;
    $256 = (($255) + 1)|0;
    $18 = $256;
   }
  }
 } while(0);
 $257 = $16;
 $258 = ($257|0)>=(4);
 L84: do {
  if ($258) {
   $259 = $13;
   $260 = HEAP32[$259>>2]|0;
   $261 = ($260|0)==(16);
   $19 = 0;
   if ($261) {
    while(1) {
     $262 = $19;
     $263 = $21;
     $264 = $22;
     $265 = Math_imul($263, $264)|0;
     $266 = ($262|0)<($265|0);
     if (!($266)) {
      break L84;
     }
     $267 = $23;
     $268 = $19;
     $269 = $268<<2;
     $270 = (($267) + ($269<<1)|0);
     $31 = $270;
     $271 = $31;
     $272 = ((($271)) + 6|0);
     $273 = HEAP16[$272>>1]|0;
     $274 = $273&65535;
     $275 = ($274|0)!=(0);
     if ($275) {
      $276 = $31;
      $277 = ((($276)) + 6|0);
      $278 = HEAP16[$277>>1]|0;
      $279 = $278&65535;
      $280 = ($279|0)!=(65535);
      if ($280) {
       $281 = $31;
       $282 = ((($281)) + 6|0);
       $283 = HEAP16[$282>>1]|0;
       $284 = $283&65535;
       $285 = (+($284|0));
       $286 = $285 / 65535.0;
       $32 = $286;
       $287 = $32;
       $288 = 1.0 / $287;
       $33 = $288;
       $289 = $33;
       $290 = 1.0 - $289;
       $291 = 65535.0 * $290;
       $34 = $291;
       $292 = $31;
       $293 = HEAP16[$292>>1]|0;
       $294 = $293&65535;
       $295 = (+($294|0));
       $296 = $33;
       $297 = $295 * $296;
       $298 = $34;
       $299 = $297 + $298;
       $300 = (~~(($299))&65535);
       $301 = $31;
       HEAP16[$301>>1] = $300;
       $302 = $31;
       $303 = ((($302)) + 2|0);
       $304 = HEAP16[$303>>1]|0;
       $305 = $304&65535;
       $306 = (+($305|0));
       $307 = $33;
       $308 = $306 * $307;
       $309 = $34;
       $310 = $308 + $309;
       $311 = (~~(($310))&65535);
       $312 = $31;
       $313 = ((($312)) + 2|0);
       HEAP16[$313>>1] = $311;
       $314 = $31;
       $315 = ((($314)) + 4|0);
       $316 = HEAP16[$315>>1]|0;
       $317 = $316&65535;
       $318 = (+($317|0));
       $319 = $33;
       $320 = $318 * $319;
       $321 = $34;
       $322 = $320 + $321;
       $323 = (~~(($322))&65535);
       $324 = $31;
       $325 = ((($324)) + 4|0);
       HEAP16[$325>>1] = $323;
      }
     }
     $326 = $19;
     $327 = (($326) + 1)|0;
     $19 = $327;
    }
   } else {
    while(1) {
     $328 = $19;
     $329 = $21;
     $330 = $22;
     $331 = Math_imul($329, $330)|0;
     $332 = ($328|0)<($331|0);
     if (!($332)) {
      break L84;
     }
     $333 = $23;
     $334 = $19;
     $335 = $334<<2;
     $336 = (($333) + ($335)|0);
     $35 = $336;
     $337 = $35;
     $338 = ((($337)) + 3|0);
     $339 = HEAP8[$338>>0]|0;
     $340 = $339&255;
     $341 = ($340|0)!=(0);
     if ($341) {
      $342 = $35;
      $343 = ((($342)) + 3|0);
      $344 = HEAP8[$343>>0]|0;
      $345 = $344&255;
      $346 = ($345|0)!=(255);
      if ($346) {
       $347 = $35;
       $348 = ((($347)) + 3|0);
       $349 = HEAP8[$348>>0]|0;
       $350 = $349&255;
       $351 = (+($350|0));
       $352 = $351 / 255.0;
       $36 = $352;
       $353 = $36;
       $354 = 1.0 / $353;
       $37 = $354;
       $355 = $37;
       $356 = 1.0 - $355;
       $357 = 255.0 * $356;
       $38 = $357;
       $358 = $35;
       $359 = HEAP8[$358>>0]|0;
       $360 = $359&255;
       $361 = (+($360|0));
       $362 = $37;
       $363 = $361 * $362;
       $364 = $38;
       $365 = $363 + $364;
       $366 = (~~(($365))&255);
       $367 = $35;
       HEAP8[$367>>0] = $366;
       $368 = $35;
       $369 = ((($368)) + 1|0);
       $370 = HEAP8[$369>>0]|0;
       $371 = $370&255;
       $372 = (+($371|0));
       $373 = $37;
       $374 = $372 * $373;
       $375 = $38;
       $376 = $374 + $375;
       $377 = (~~(($376))&255);
       $378 = $35;
       $379 = ((($378)) + 1|0);
       HEAP8[$379>>0] = $377;
       $380 = $35;
       $381 = ((($380)) + 2|0);
       $382 = HEAP8[$381>>0]|0;
       $383 = $382&255;
       $384 = (+($383|0));
       $385 = $37;
       $386 = $384 * $385;
       $387 = $38;
       $388 = $386 + $387;
       $389 = (~~(($388))&255);
       $390 = $35;
       $391 = ((($390)) + 2|0);
       HEAP8[$391>>0] = $389;
      }
     }
     $392 = $19;
     $393 = (($392) + 1)|0;
     $19 = $393;
    }
   }
  }
 } while(0);
 $394 = $12;
 $395 = ($394|0)!=(0);
 $396 = $12;
 $397 = ($396|0)!=(4);
 $or$cond11 = $395 & $397;
 if ($or$cond11) {
  $398 = $13;
  $399 = HEAP32[$398>>2]|0;
  $400 = ($399|0)==(16);
  $401 = $23;
  if ($400) {
   $402 = $12;
   $403 = $21;
   $404 = $22;
   $405 = (__ZL22stbi__convert_format16Ptiijj($401,4,$402,$403,$404)|0);
   $23 = $405;
  } else {
   $406 = $12;
   $407 = $21;
   $408 = $22;
   $409 = (__ZL20stbi__convert_formatPhiijj($401,4,$406,$407,$408)|0);
   $23 = $409;
  }
  $410 = $23;
  $411 = ($410|0)==(0|0);
  if ($411) {
   $412 = $23;
   $7 = $412;
   $421 = $7;
   STACKTOP = sp;return ($421|0);
  }
 }
 $413 = $11;
 $414 = ($413|0)!=(0|0);
 if ($414) {
  $415 = $11;
  HEAP32[$415>>2] = 4;
 }
 $416 = $22;
 $417 = $10;
 HEAP32[$417>>2] = $416;
 $418 = $21;
 $419 = $9;
 HEAP32[$419>>2] = $418;
 $420 = $23;
 $7 = $420;
 $421 = $7;
 STACKTOP = sp;return ($421|0);
}
function __ZL14stbi__pic_testP13stbi__context($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (__ZL19stbi__pic_test_coreP13stbi__context($3)|0);
 $2 = $4;
 $5 = $1;
 __ZL12stbi__rewindP13stbi__context($5);
 $6 = $2;
 STACKTOP = sp;return ($6|0);
}
function __ZL14stbi__pic_loadP13stbi__contextPiS1_S1_iP17stbi__result_info($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $17 = sp;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $18 = $10;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  $10 = $17;
 }
 $14 = 0;
 while(1) {
  $20 = $14;
  $21 = ($20|0)<(92);
  $22 = $7;
  if (!($21)) {
   break;
  }
  (__ZL10stbi__get8P13stbi__context($22)|0);
  $23 = $14;
  $24 = (($23) + 1)|0;
  $14 = $24;
 }
 $25 = (__ZL13stbi__get16beP13stbi__context($22)|0);
 $15 = $25;
 $26 = $7;
 $27 = (__ZL13stbi__get16beP13stbi__context($26)|0);
 $16 = $27;
 $28 = $7;
 $29 = (__ZL12stbi__at_eofP13stbi__context($28)|0);
 $30 = ($29|0)!=(0);
 if ($30) {
  $31 = (__ZL9stbi__errPKc(10050)|0);
  $32 = ($31|0)!=(0);
  $33 = $32 ? 0 : 0;
  $34 = $33;
  $6 = $34;
  $76 = $6;
  STACKTOP = sp;return ($76|0);
 }
 $35 = $15;
 $36 = $16;
 $37 = (__ZL21stbi__mad3sizes_validiiii($35,$36,4,0)|0);
 $38 = ($37|0)!=(0);
 if (!($38)) {
  $39 = (__ZL9stbi__errPKc(9762)|0);
  $40 = ($39|0)!=(0);
  $41 = $40 ? 0 : 0;
  $42 = $41;
  $6 = $42;
  $76 = $6;
  STACKTOP = sp;return ($76|0);
 }
 $43 = $7;
 (__ZL13stbi__get32beP13stbi__context($43)|0);
 $44 = $7;
 (__ZL13stbi__get16beP13stbi__context($44)|0);
 $45 = $7;
 (__ZL13stbi__get16beP13stbi__context($45)|0);
 $46 = $15;
 $47 = $16;
 $48 = (__ZL17stbi__malloc_mad3iiii($46,$47,4,0)|0);
 $13 = $48;
 $49 = $13;
 $50 = $15;
 $51 = $16;
 $52 = Math_imul($50, $51)|0;
 $53 = $52<<2;
 _memset(($49|0),-1,($53|0))|0;
 $54 = $7;
 $55 = $15;
 $56 = $16;
 $57 = $10;
 $58 = $13;
 $59 = (__ZL19stbi__pic_load_coreP13stbi__contextiiPiPh($54,$55,$56,$57,$58)|0);
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  $61 = $13;
  _free($61);
  $13 = 0;
 }
 $62 = $15;
 $63 = $8;
 HEAP32[$63>>2] = $62;
 $64 = $16;
 $65 = $9;
 HEAP32[$65>>2] = $64;
 $66 = $11;
 $67 = ($66|0)==(0);
 if ($67) {
  $68 = $10;
  $69 = HEAP32[$68>>2]|0;
  $11 = $69;
 }
 $70 = $13;
 $71 = $11;
 $72 = $15;
 $73 = $16;
 $74 = (__ZL20stbi__convert_formatPhiijj($70,4,$71,$72,$73)|0);
 $13 = $74;
 $75 = $13;
 $6 = $75;
 $76 = $6;
 STACKTOP = sp;return ($76|0);
}
function __ZL14stbi__pnm_testP13stbi__context($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $6 = (__ZL10stbi__get8P13stbi__context($5)|0);
 $3 = $6;
 $7 = $2;
 $8 = (__ZL10stbi__get8P13stbi__context($7)|0);
 $4 = $8;
 $9 = $3;
 $10 = $9 << 24 >> 24;
 $11 = ($10|0)!=(80);
 do {
  if (!($11)) {
   $12 = $4;
   $13 = $12 << 24 >> 24;
   $14 = ($13|0)!=(53);
   if ($14) {
    $15 = $4;
    $16 = $15 << 24 >> 24;
    $17 = ($16|0)!=(54);
    if ($17) {
     break;
    }
   }
   $1 = 1;
   $19 = $1;
   STACKTOP = sp;return ($19|0);
  }
 } while(0);
 $18 = $2;
 __ZL12stbi__rewindP13stbi__context($18);
 $1 = 0;
 $19 = $1;
 STACKTOP = sp;return ($19|0);
}
function __ZL14stbi__pnm_loadP13stbi__contextPiS1_S1_iP17stbi__result_info($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $14 = $7;
 $15 = $7;
 $16 = $7;
 $17 = ((($16)) + 4|0);
 $18 = $7;
 $19 = ((($18)) + 8|0);
 $20 = (__ZL14stbi__pnm_infoP13stbi__contextPiS1_S1_($14,$15,$17,$19)|0);
 $21 = ($20|0)!=(0);
 if (!($21)) {
  $6 = 0;
  $98 = $6;
  STACKTOP = sp;return ($98|0);
 }
 $22 = $7;
 $23 = HEAP32[$22>>2]|0;
 $24 = $8;
 HEAP32[$24>>2] = $23;
 $25 = $7;
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $9;
 HEAP32[$28>>2] = $27;
 $29 = $10;
 $30 = ($29|0)!=(0|0);
 if ($30) {
  $31 = $7;
  $32 = ((($31)) + 8|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $10;
  HEAP32[$34>>2] = $33;
 }
 $35 = $7;
 $36 = ((($35)) + 8|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $7;
 $39 = HEAP32[$38>>2]|0;
 $40 = $7;
 $41 = ((($40)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (__ZL21stbi__mad3sizes_validiiii($37,$39,$42,0)|0);
 $44 = ($43|0)!=(0);
 if (!($44)) {
  $45 = (__ZL9stbi__errPKc(9762)|0);
  $46 = ($45|0)!=(0);
  $47 = $46 ? 0 : 0;
  $48 = $47;
  $6 = $48;
  $98 = $6;
  STACKTOP = sp;return ($98|0);
 }
 $49 = $7;
 $50 = ((($49)) + 8|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = $7;
 $53 = HEAP32[$52>>2]|0;
 $54 = $7;
 $55 = ((($54)) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (__ZL17stbi__malloc_mad3iiii($51,$53,$56,0)|0);
 $13 = $57;
 $58 = $13;
 $59 = ($58|0)!=(0|0);
 if (!($59)) {
  $60 = (__ZL9stbi__errPKc(9723)|0);
  $61 = ($60|0)!=(0);
  $62 = $61 ? 0 : 0;
  $63 = $62;
  $6 = $63;
  $98 = $6;
  STACKTOP = sp;return ($98|0);
 }
 $64 = $7;
 $65 = $13;
 $66 = $7;
 $67 = ((($66)) + 8|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = $7;
 $70 = HEAP32[$69>>2]|0;
 $71 = Math_imul($68, $70)|0;
 $72 = $7;
 $73 = ((($72)) + 4|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = Math_imul($71, $74)|0;
 (__ZL10stbi__getnP13stbi__contextPhi($64,$65,$75)|0);
 $76 = $11;
 $77 = ($76|0)!=(0);
 if ($77) {
  $78 = $11;
  $79 = $7;
  $80 = ((($79)) + 8|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = ($78|0)!=($81|0);
  if ($82) {
   $83 = $13;
   $84 = $7;
   $85 = ((($84)) + 8|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = $11;
   $88 = $7;
   $89 = HEAP32[$88>>2]|0;
   $90 = $7;
   $91 = ((($90)) + 4|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = (__ZL20stbi__convert_formatPhiijj($83,$86,$87,$89,$92)|0);
   $13 = $93;
   $94 = $13;
   $95 = ($94|0)==(0|0);
   if ($95) {
    $96 = $13;
    $6 = $96;
    $98 = $6;
    STACKTOP = sp;return ($98|0);
   }
  }
 }
 $97 = $13;
 $6 = $97;
 $98 = $6;
 STACKTOP = sp;return ($98|0);
}
function __ZL14stbi__hdr_testP13stbi__context($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (__ZL19stbi__hdr_test_coreP13stbi__contextPKc($3,10014)|0);
 $2 = $4;
 $5 = $1;
 __ZL12stbi__rewindP13stbi__context($5);
 $6 = $2;
 $7 = ($6|0)!=(0);
 if ($7) {
  $11 = $2;
  STACKTOP = sp;return ($11|0);
 }
 $8 = $1;
 $9 = (__ZL19stbi__hdr_test_coreP13stbi__contextPKc($8,10026)|0);
 $2 = $9;
 $10 = $1;
 __ZL12stbi__rewindP13stbi__context($10);
 $11 = $2;
 STACKTOP = sp;return ($11|0);
}
function __ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_iP17stbi__result_info($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1136|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1136|0);
 $13 = sp;
 $14 = sp + 1080|0;
 $30 = sp + 1116|0;
 $31 = sp + 1112|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $15 = 0;
 $33 = $7;
 $34 = (__ZL18stbi__hdr_gettokenP13stbi__contextPc($33,$13)|0);
 $29 = $34;
 $35 = $29;
 $36 = (_strcmp($35,9874)|0);
 $37 = ($36|0)!=(0);
 if ($37) {
  $38 = $29;
  $39 = (_strcmp($38,9885)|0);
  $40 = ($39|0)!=(0);
  if ($40) {
   $41 = (__ZL9stbi__errPKc(9892)|0);
   $42 = ($41|0)!=(0);
   $43 = $42 ? 0 : 0;
   $44 = $43;
   $6 = $44;
   $297 = $6;
   STACKTOP = sp;return ($297|0);
  }
 }
 while(1) {
  $45 = $7;
  $46 = (__ZL18stbi__hdr_gettokenP13stbi__contextPc($45,$13)|0);
  HEAP32[$14>>2] = $46;
  $47 = HEAP32[$14>>2]|0;
  $48 = HEAP8[$47>>0]|0;
  $49 = $48 << 24 >> 24;
  $50 = ($49|0)==(0);
  if ($50) {
   break;
  }
  $51 = HEAP32[$14>>2]|0;
  $52 = (_strcmp($51,9900)|0);
  $53 = ($52|0)==(0);
  if ($53) {
   $15 = 1;
  }
 }
 $54 = $15;
 $55 = ($54|0)!=(0);
 if (!($55)) {
  $56 = (__ZL9stbi__errPKc(9923)|0);
  $57 = ($56|0)!=(0);
  $58 = $57 ? 0 : 0;
  $59 = $58;
  $6 = $59;
  $297 = $6;
  STACKTOP = sp;return ($297|0);
 }
 $60 = $7;
 $61 = (__ZL18stbi__hdr_gettokenP13stbi__contextPc($60,$13)|0);
 HEAP32[$14>>2] = $61;
 $62 = HEAP32[$14>>2]|0;
 $63 = (_strncmp($62,9942,3)|0);
 $64 = ($63|0)!=(0);
 if ($64) {
  $65 = (__ZL9stbi__errPKc(9946)|0);
  $66 = ($65|0)!=(0);
  $67 = $66 ? 0 : 0;
  $68 = $67;
  $6 = $68;
  $297 = $6;
  STACKTOP = sp;return ($297|0);
 }
 $69 = HEAP32[$14>>2]|0;
 $70 = ((($69)) + 3|0);
 HEAP32[$14>>2] = $70;
 $71 = HEAP32[$14>>2]|0;
 $72 = (_strtol($71,$14,10)|0);
 $17 = $72;
 while(1) {
  $73 = HEAP32[$14>>2]|0;
  $74 = HEAP8[$73>>0]|0;
  $75 = $74 << 24 >> 24;
  $76 = ($75|0)==(32);
  $77 = HEAP32[$14>>2]|0;
  if (!($76)) {
   break;
  }
  $78 = ((($77)) + 1|0);
  HEAP32[$14>>2] = $78;
 }
 $79 = (_strncmp($77,9970,3)|0);
 $80 = ($79|0)!=(0);
 if ($80) {
  $81 = (__ZL9stbi__errPKc(9946)|0);
  $82 = ($81|0)!=(0);
  $83 = $82 ? 0 : 0;
  $84 = $83;
  $6 = $84;
  $297 = $6;
  STACKTOP = sp;return ($297|0);
 }
 $85 = HEAP32[$14>>2]|0;
 $86 = ((($85)) + 3|0);
 HEAP32[$14>>2] = $86;
 $87 = HEAP32[$14>>2]|0;
 $88 = (_strtol($87,0,10)|0);
 $16 = $88;
 $89 = $16;
 $90 = $8;
 HEAP32[$90>>2] = $89;
 $91 = $17;
 $92 = $9;
 HEAP32[$92>>2] = $91;
 $93 = $10;
 $94 = ($93|0)!=(0|0);
 if ($94) {
  $95 = $10;
  HEAP32[$95>>2] = 3;
 }
 $96 = $11;
 $97 = ($96|0)==(0);
 if ($97) {
  $11 = 3;
 }
 $98 = $16;
 $99 = $17;
 $100 = $11;
 $101 = (__ZL21stbi__mad4sizes_validiiiii($98,$99,$100,4,0)|0);
 $102 = ($101|0)!=(0);
 if (!($102)) {
  $103 = (__ZL9stbi__errPKc(9762)|0);
  $104 = ($103|0)!=(0);
  $105 = $104 ? 0 : 0;
  $106 = $105;
  $6 = $106;
  $297 = $6;
  STACKTOP = sp;return ($297|0);
 }
 $107 = $16;
 $108 = $17;
 $109 = $11;
 $110 = (__ZL17stbi__malloc_mad4iiiii($107,$108,$109,4,0)|0);
 $19 = $110;
 $111 = $19;
 $112 = ($111|0)!=(0|0);
 if (!($112)) {
  $113 = (__ZL9stbi__errPKc(9723)|0);
  $114 = ($113|0)!=(0);
  $115 = $114 ? 0 : 0;
  $116 = $115;
  $6 = $116;
  $297 = $6;
  STACKTOP = sp;return ($297|0);
 }
 $117 = $16;
 $118 = ($117|0)<(8);
 $119 = $16;
 $120 = ($119|0)>=(32768);
 $or$cond = $118 | $120;
 do {
  if ($or$cond) {
   $24 = 0;
   label = 28;
  } else {
   $18 = 0;
   $24 = 0;
   L46: while(1) {
    $144 = $24;
    $145 = $17;
    $146 = ($144|0)<($145|0);
    if (!($146)) {
     label = 64;
     break;
    }
    $147 = $7;
    $148 = (__ZL10stbi__get8P13stbi__context($147)|0);
    $149 = $148&255;
    $26 = $149;
    $150 = $7;
    $151 = (__ZL10stbi__get8P13stbi__context($150)|0);
    $152 = $151&255;
    $27 = $152;
    $153 = $7;
    $154 = (__ZL10stbi__get8P13stbi__context($153)|0);
    $155 = $154&255;
    $20 = $155;
    $156 = $26;
    $157 = ($156|0)!=(2);
    $158 = $27;
    $159 = ($158|0)!=(2);
    $or$cond3 = $157 | $159;
    if ($or$cond3) {
     label = 37;
     break;
    }
    $160 = $20;
    $161 = $160 & 128;
    $162 = ($161|0)!=(0);
    if ($162) {
     label = 37;
     break;
    }
    $177 = $20;
    $178 = $177 << 8;
    $20 = $178;
    $179 = $7;
    $180 = (__ZL10stbi__get8P13stbi__context($179)|0);
    $181 = $180&255;
    $182 = $20;
    $183 = $182 | $181;
    $20 = $183;
    $184 = $20;
    $185 = $16;
    $186 = ($184|0)!=($185|0);
    if ($186) {
     label = 39;
     break;
    }
    $193 = $18;
    $194 = ($193|0)==(0|0);
    if ($194) {
     $195 = $16;
     $196 = (__ZL17stbi__malloc_mad2iii($195,4,0)|0);
     $18 = $196;
     $197 = $18;
     $198 = ($197|0)!=(0|0);
     if (!($198)) {
      label = 42;
      break;
     }
    }
    $25 = 0;
    while(1) {
     $204 = $25;
     $205 = ($204|0)<(4);
     $23 = 0;
     if (!($205)) {
      break;
     }
     while(1) {
      $206 = $16;
      $207 = $23;
      $208 = (($206) - ($207))|0;
      $32 = $208;
      $209 = ($208|0)>(0);
      if (!($209)) {
       break;
      }
      $210 = $7;
      $211 = (__ZL10stbi__get8P13stbi__context($210)|0);
      $21 = $211;
      $212 = $21;
      $213 = $212&255;
      $214 = ($213|0)>(128);
      L61: do {
       if ($214) {
        $215 = $7;
        $216 = (__ZL10stbi__get8P13stbi__context($215)|0);
        $22 = $216;
        $217 = $21;
        $218 = $217&255;
        $219 = (($218) - 128)|0;
        $220 = $219&255;
        $21 = $220;
        $221 = $21;
        $222 = $221&255;
        $223 = $32;
        $224 = ($222|0)>($223|0);
        if ($224) {
         label = 49;
         break L46;
        }
        $28 = 0;
        while(1) {
         $231 = $28;
         $232 = $21;
         $233 = $232&255;
         $234 = ($231|0)<($233|0);
         if (!($234)) {
          break L61;
         }
         $235 = $22;
         $236 = $18;
         $237 = $23;
         $238 = (($237) + 1)|0;
         $23 = $238;
         $239 = $237<<2;
         $240 = $25;
         $241 = (($239) + ($240))|0;
         $242 = (($236) + ($241)|0);
         HEAP8[$242>>0] = $235;
         $243 = $28;
         $244 = (($243) + 1)|0;
         $28 = $244;
        }
       } else {
        $245 = $21;
        $246 = $245&255;
        $247 = $32;
        $248 = ($246|0)>($247|0);
        if ($248) {
         label = 54;
         break L46;
        }
        $28 = 0;
        while(1) {
         $255 = $28;
         $256 = $21;
         $257 = $256&255;
         $258 = ($255|0)<($257|0);
         if (!($258)) {
          break L61;
         }
         $259 = $7;
         $260 = (__ZL10stbi__get8P13stbi__context($259)|0);
         $261 = $18;
         $262 = $23;
         $263 = (($262) + 1)|0;
         $23 = $263;
         $264 = $262<<2;
         $265 = $25;
         $266 = (($264) + ($265))|0;
         $267 = (($261) + ($266)|0);
         HEAP8[$267>>0] = $260;
         $268 = $28;
         $269 = (($268) + 1)|0;
         $28 = $269;
        }
       }
      } while(0);
     }
     $270 = $25;
     $271 = (($270) + 1)|0;
     $25 = $271;
    }
    while(1) {
     $272 = $23;
     $273 = $16;
     $274 = ($272|0)<($273|0);
     if (!($274)) {
      break;
     }
     $275 = $19;
     $276 = $24;
     $277 = $16;
     $278 = Math_imul($276, $277)|0;
     $279 = $23;
     $280 = (($278) + ($279))|0;
     $281 = $11;
     $282 = Math_imul($280, $281)|0;
     $283 = (($275) + ($282<<2)|0);
     $284 = $18;
     $285 = $23;
     $286 = $285<<2;
     $287 = (($284) + ($286)|0);
     $288 = $11;
     __ZL17stbi__hdr_convertPfPhi($283,$287,$288);
     $289 = $23;
     $290 = (($289) + 1)|0;
     $23 = $290;
    }
    $291 = $24;
    $292 = (($291) + 1)|0;
    $24 = $292;
   }
   if ((label|0) == 37) {
    $163 = $26;
    $164 = $163&255;
    HEAP8[$31>>0] = $164;
    $165 = $27;
    $166 = $165&255;
    $167 = ((($31)) + 1|0);
    HEAP8[$167>>0] = $166;
    $168 = $20;
    $169 = $168&255;
    $170 = ((($31)) + 2|0);
    HEAP8[$170>>0] = $169;
    $171 = $7;
    $172 = (__ZL10stbi__get8P13stbi__context($171)|0);
    $173 = ((($31)) + 3|0);
    HEAP8[$173>>0] = $172;
    $174 = $19;
    $175 = $11;
    __ZL17stbi__hdr_convertPfPhi($174,$31,$175);
    $23 = 1;
    $24 = 0;
    $176 = $18;
    _free($176);
    label = 31;
    break;
   }
   else if ((label|0) == 39) {
    $187 = $19;
    _free($187);
    $188 = $18;
    _free($188);
    $189 = (__ZL9stbi__errPKc(9974)|0);
    $190 = ($189|0)!=(0);
    $191 = $190 ? 0 : 0;
    $192 = $191;
    $6 = $192;
    $297 = $6;
    STACKTOP = sp;return ($297|0);
   }
   else if ((label|0) == 42) {
    $199 = $19;
    _free($199);
    $200 = (__ZL9stbi__errPKc(9723)|0);
    $201 = ($200|0)!=(0);
    $202 = $201 ? 0 : 0;
    $203 = $202;
    $6 = $203;
    $297 = $6;
    STACKTOP = sp;return ($297|0);
   }
   else if ((label|0) == 49) {
    $225 = $19;
    _free($225);
    $226 = $18;
    _free($226);
    $227 = (__ZL9stbi__errPKc(10006)|0);
    $228 = ($227|0)!=(0);
    $229 = $228 ? 0 : 0;
    $230 = $229;
    $6 = $230;
    $297 = $6;
    STACKTOP = sp;return ($297|0);
   }
   else if ((label|0) == 54) {
    $249 = $19;
    _free($249);
    $250 = $18;
    _free($250);
    $251 = (__ZL9stbi__errPKc(10006)|0);
    $252 = ($251|0)!=(0);
    $253 = $252 ? 0 : 0;
    $254 = $253;
    $6 = $254;
    $297 = $6;
    STACKTOP = sp;return ($297|0);
   }
   else if ((label|0) == 64) {
    $293 = $18;
    $294 = ($293|0)!=(0|0);
    if (!($294)) {
     label = 66;
     break;
    }
    $295 = $18;
    _free($295);
    label = 66;
    break;
   }
  }
 } while(0);
 while(1) {
  if ((label|0) == 28) {
   label = 0;
   $121 = $24;
   $122 = $17;
   $123 = ($121|0)<($122|0);
   if (!($123)) {
    label = 66;
    continue;
   }
   $23 = 0;
  }
  else if ((label|0) == 31) {
   label = 0;
   $127 = $7;
   (__ZL10stbi__getnP13stbi__contextPhi($127,$30,4)|0);
   $128 = $19;
   $129 = $24;
   $130 = $16;
   $131 = Math_imul($129, $130)|0;
   $132 = $11;
   $133 = Math_imul($131, $132)|0;
   $134 = (($128) + ($133<<2)|0);
   $135 = $23;
   $136 = $11;
   $137 = Math_imul($135, $136)|0;
   $138 = (($134) + ($137<<2)|0);
   $139 = $11;
   __ZL17stbi__hdr_convertPfPhi($138,$30,$139);
   $140 = $23;
   $141 = (($140) + 1)|0;
   $23 = $141;
  }
  else if ((label|0) == 66) {
   label = 0;
   $296 = $19;
   $6 = $296;
   break;
  }
  $124 = $23;
  $125 = $16;
  $126 = ($124|0)<($125|0);
  if ($126) {
   label = 31;
   continue;
  }
  $142 = $24;
  $143 = (($142) + 1)|0;
  $24 = $143;
  label = 28;
 }
 $297 = $6;
 STACKTOP = sp;return ($297|0);
}
function __ZL16stbi__hdr_to_ldrPfiii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $17 = $7;
 $18 = ($17|0)!=(0|0);
 if (!($18)) {
  $6 = 0;
  $104 = $6;
  STACKTOP = sp;return ($104|0);
 }
 $19 = $8;
 $20 = $9;
 $21 = $10;
 $22 = (__ZL17stbi__malloc_mad3iiii($19,$20,$21,0)|0);
 $14 = $22;
 $23 = $14;
 $24 = ($23|0)==(0|0);
 if ($24) {
  $25 = $7;
  _free($25);
  $26 = (__ZL9stbi__errPKc(9723)|0);
  $27 = ($26|0)!=(0);
  $28 = $27 ? 0 : 0;
  $29 = $28;
  $6 = $29;
  $104 = $6;
  STACKTOP = sp;return ($104|0);
 }
 $30 = $10;
 $31 = $30 & 1;
 $32 = ($31|0)!=(0);
 $33 = $10;
 if ($32) {
  $13 = $33;
 } else {
  $34 = (($33) - 1)|0;
  $13 = $34;
 }
 $11 = 0;
 while(1) {
  $35 = $11;
  $36 = $8;
  $37 = $9;
  $38 = Math_imul($36, $37)|0;
  $39 = ($35|0)<($38|0);
  if (!($39)) {
   break;
  }
  $12 = 0;
  while(1) {
   $40 = $12;
   $41 = $13;
   $42 = ($40|0)<($41|0);
   if (!($42)) {
    break;
   }
   $43 = $7;
   $44 = $11;
   $45 = $10;
   $46 = Math_imul($44, $45)|0;
   $47 = $12;
   $48 = (($46) + ($47))|0;
   $49 = (($43) + ($48<<2)|0);
   $50 = +HEAPF32[$49>>2];
   $51 = $50 * 1.0;
   $4 = $51;
   $5 = 0.45454543828964233;
   $52 = $4;
   $53 = $5;
   $54 = (+Math_pow((+$52),(+$53)));
   $55 = $54 * 255.0;
   $56 = $55 + 0.5;
   $15 = $56;
   $57 = $15;
   $58 = $57 < 0.0;
   if ($58) {
    $15 = 0.0;
   }
   $59 = $15;
   $60 = $59 > 255.0;
   if ($60) {
    $15 = 255.0;
   }
   $61 = $15;
   $62 = (~~(($61)));
   $63 = $62&255;
   $64 = $14;
   $65 = $11;
   $66 = $10;
   $67 = Math_imul($65, $66)|0;
   $68 = $12;
   $69 = (($67) + ($68))|0;
   $70 = (($64) + ($69)|0);
   HEAP8[$70>>0] = $63;
   $71 = $12;
   $72 = (($71) + 1)|0;
   $12 = $72;
  }
  $73 = $12;
  $74 = $10;
  $75 = ($73|0)<($74|0);
  if ($75) {
   $76 = $7;
   $77 = $11;
   $78 = $10;
   $79 = Math_imul($77, $78)|0;
   $80 = $12;
   $81 = (($79) + ($80))|0;
   $82 = (($76) + ($81<<2)|0);
   $83 = +HEAPF32[$82>>2];
   $84 = $83 * 255.0;
   $85 = $84 + 0.5;
   $16 = $85;
   $86 = $16;
   $87 = $86 < 0.0;
   if ($87) {
    $16 = 0.0;
   }
   $88 = $16;
   $89 = $88 > 255.0;
   if ($89) {
    $16 = 255.0;
   }
   $90 = $16;
   $91 = (~~(($90)));
   $92 = $91&255;
   $93 = $14;
   $94 = $11;
   $95 = $10;
   $96 = Math_imul($94, $95)|0;
   $97 = $12;
   $98 = (($96) + ($97))|0;
   $99 = (($93) + ($98)|0);
   HEAP8[$99>>0] = $92;
  }
  $100 = $11;
  $101 = (($100) + 1)|0;
  $11 = $101;
 }
 $102 = $7;
 _free($102);
 $103 = $14;
 $6 = $103;
 $104 = $6;
 STACKTOP = sp;return ($104|0);
}
function __ZL14stbi__tga_testP13stbi__context($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond19 = 0, $or$cond21 = 0, $or$cond23 = 0, $or$cond25 = 0, $or$cond27 = 0, $or$cond3 = 0;
 var $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $5 = $1;
 (__ZL10stbi__get8P13stbi__context($5)|0);
 $6 = $1;
 $7 = (__ZL10stbi__get8P13stbi__context($6)|0);
 $8 = $7&255;
 $4 = $8;
 $9 = $4;
 $10 = ($9|0)>(1);
 do {
  if (!($10)) {
   $11 = $1;
   $12 = (__ZL10stbi__get8P13stbi__context($11)|0);
   $13 = $12&255;
   $3 = $13;
   $14 = $4;
   $15 = ($14|0)==(1);
   $16 = $3;
   if ($15) {
    $17 = ($16|0)!=(1);
    $18 = $3;
    $19 = ($18|0)!=(9);
    $or$cond = $17 & $19;
    if ($or$cond) {
     break;
    }
    $20 = $1;
    __ZL10stbi__skipP13stbi__contexti($20,4);
    $21 = $1;
    $22 = (__ZL10stbi__get8P13stbi__context($21)|0);
    $23 = $22&255;
    $3 = $23;
    $24 = $3;
    $25 = ($24|0)!=(8);
    $26 = $3;
    $27 = ($26|0)!=(15);
    $or$cond3 = $25 & $27;
    $28 = $3;
    $29 = ($28|0)!=(16);
    $or$cond5 = $or$cond3 & $29;
    $30 = $3;
    $31 = ($30|0)!=(24);
    $or$cond7 = $or$cond5 & $31;
    $32 = $3;
    $33 = ($32|0)!=(32);
    $or$cond9 = $or$cond7 & $33;
    if ($or$cond9) {
     break;
    }
    $34 = $1;
    __ZL10stbi__skipP13stbi__contexti($34,4);
   } else {
    $35 = ($16|0)!=(2);
    $36 = $3;
    $37 = ($36|0)!=(3);
    $or$cond11 = $35 & $37;
    $38 = $3;
    $39 = ($38|0)!=(10);
    $or$cond13 = $or$cond11 & $39;
    $40 = $3;
    $41 = ($40|0)!=(11);
    $or$cond15 = $or$cond13 & $41;
    if ($or$cond15) {
     break;
    }
    $42 = $1;
    __ZL10stbi__skipP13stbi__contexti($42,9);
   }
   $43 = $1;
   $44 = (__ZL13stbi__get16leP13stbi__context($43)|0);
   $45 = ($44|0)<(1);
   if (!($45)) {
    $46 = $1;
    $47 = (__ZL13stbi__get16leP13stbi__context($46)|0);
    $48 = ($47|0)<(1);
    if (!($48)) {
     $49 = $1;
     $50 = (__ZL10stbi__get8P13stbi__context($49)|0);
     $51 = $50&255;
     $3 = $51;
     $52 = $4;
     $53 = ($52|0)==(1);
     $54 = $3;
     $55 = ($54|0)!=(8);
     $or$cond17 = $53 & $55;
     $56 = $3;
     $57 = ($56|0)!=(16);
     $or$cond19 = $or$cond17 & $57;
     if (!($or$cond19)) {
      $58 = $3;
      $59 = ($58|0)!=(8);
      $60 = $3;
      $61 = ($60|0)!=(15);
      $or$cond21 = $59 & $61;
      $62 = $3;
      $63 = ($62|0)!=(16);
      $or$cond23 = $or$cond21 & $63;
      $64 = $3;
      $65 = ($64|0)!=(24);
      $or$cond25 = $or$cond23 & $65;
      $66 = $3;
      $67 = ($66|0)!=(32);
      $or$cond27 = $or$cond25 & $67;
      if (!($or$cond27)) {
       $2 = 1;
      }
     }
    }
   }
  }
 } while(0);
 $68 = $1;
 __ZL12stbi__rewindP13stbi__context($68);
 $69 = $2;
 STACKTOP = sp;return ($69|0);
}
function __ZL14stbi__tga_loadP13stbi__contextPiS1_S1_iP17stbi__result_info($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $spec$store$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $26 = sp + 64|0;
 $32 = sp + 152|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $46 = $7;
 $47 = (__ZL10stbi__get8P13stbi__context($46)|0);
 $48 = $47&255;
 $13 = $48;
 $49 = $7;
 $50 = (__ZL10stbi__get8P13stbi__context($49)|0);
 $51 = $50&255;
 $14 = $51;
 $52 = $7;
 $53 = (__ZL10stbi__get8P13stbi__context($52)|0);
 $54 = $53&255;
 $15 = $54;
 $16 = 0;
 $55 = $7;
 $56 = (__ZL13stbi__get16leP13stbi__context($55)|0);
 $17 = $56;
 $57 = $7;
 $58 = (__ZL13stbi__get16leP13stbi__context($57)|0);
 $18 = $58;
 $59 = $7;
 $60 = (__ZL10stbi__get8P13stbi__context($59)|0);
 $61 = $60&255;
 $19 = $61;
 $62 = $7;
 $63 = (__ZL13stbi__get16leP13stbi__context($62)|0);
 $20 = $63;
 $64 = $7;
 $65 = (__ZL13stbi__get16leP13stbi__context($64)|0);
 $21 = $65;
 $66 = $7;
 $67 = (__ZL13stbi__get16leP13stbi__context($66)|0);
 $22 = $67;
 $68 = $7;
 $69 = (__ZL13stbi__get16leP13stbi__context($68)|0);
 $23 = $69;
 $70 = $7;
 $71 = (__ZL10stbi__get8P13stbi__context($70)|0);
 $72 = $71&255;
 $24 = $72;
 HEAP32[$26>>2] = 0;
 $73 = $7;
 $74 = (__ZL10stbi__get8P13stbi__context($73)|0);
 $75 = $74&255;
 $27 = $75;
 $29 = 0;
 ;HEAP8[$32>>0]=0|0;HEAP8[$32+1>>0]=0|0;HEAP8[$32+2>>0]=0|0;HEAP8[$32+3>>0]=0|0;
 $33 = 0;
 $34 = 0;
 $35 = 1;
 $76 = $15;
 $77 = ($76|0)>=(8);
 if ($77) {
  $78 = $15;
  $79 = (($78) - 8)|0;
  $15 = $79;
  $16 = 1;
 }
 $80 = $27;
 $81 = $80 >> 5;
 $82 = $81 & 1;
 $83 = (1 - ($82))|0;
 $27 = $83;
 $84 = $14;
 $85 = ($84|0)!=(0);
 if ($85) {
  $86 = $19;
  $87 = (__ZL18stbi__tga_get_compiiPi($86,0,$26)|0);
  $25 = $87;
 } else {
  $88 = $24;
  $89 = $15;
  $90 = ($89|0)==(3);
  $91 = $90&1;
  $92 = (__ZL18stbi__tga_get_compiiPi($88,$91,$26)|0);
  $25 = $92;
 }
 $93 = $25;
 $94 = ($93|0)!=(0);
 if (!($94)) {
  $95 = (__ZL9stbi__errPKc(9751)|0);
  $96 = ($95|0)!=(0);
  $97 = $96 ? 0 : 0;
  $98 = $97;
  $6 = $98;
  $369 = $6;
  STACKTOP = sp;return ($369|0);
 }
 $99 = $22;
 $100 = $8;
 HEAP32[$100>>2] = $99;
 $101 = $23;
 $102 = $9;
 HEAP32[$102>>2] = $101;
 $103 = $10;
 $104 = ($103|0)!=(0|0);
 if ($104) {
  $105 = $25;
  $106 = $10;
  HEAP32[$106>>2] = $105;
 }
 $107 = $22;
 $108 = $23;
 $109 = $25;
 $110 = (__ZL21stbi__mad3sizes_validiiii($107,$108,$109,0)|0);
 $111 = ($110|0)!=(0);
 if (!($111)) {
  $112 = (__ZL9stbi__errPKc(9762)|0);
  $113 = ($112|0)!=(0);
  $114 = $113 ? 0 : 0;
  $115 = $114;
  $6 = $115;
  $369 = $6;
  STACKTOP = sp;return ($369|0);
 }
 $116 = $22;
 $117 = $23;
 $118 = $25;
 $119 = (__ZL17stbi__malloc_mad3iiii($116,$117,$118,0)|0);
 $28 = $119;
 $120 = $28;
 $121 = ($120|0)!=(0|0);
 if (!($121)) {
  $122 = (__ZL9stbi__errPKc(9723)|0);
  $123 = ($122|0)!=(0);
  $124 = $123 ? 0 : 0;
  $125 = $124;
  $6 = $125;
  $369 = $6;
  STACKTOP = sp;return ($369|0);
 }
 $126 = $7;
 $127 = $13;
 __ZL10stbi__skipP13stbi__contexti($126,$127);
 $128 = $14;
 $129 = ($128|0)!=(0);
 $130 = $16;
 $131 = ($130|0)!=(0);
 $or$cond = $129 | $131;
 $132 = HEAP32[$26>>2]|0;
 $133 = ($132|0)!=(0);
 $or$cond3 = $or$cond | $133;
 L23: do {
  if ($or$cond3) {
   $159 = $14;
   $160 = ($159|0)!=(0);
   L25: do {
    if ($160) {
     $161 = $7;
     $162 = $17;
     __ZL10stbi__skipP13stbi__contexti($161,$162);
     $163 = $18;
     $164 = $25;
     $165 = (__ZL17stbi__malloc_mad2iii($163,$164,0)|0);
     $29 = $165;
     $166 = $29;
     $167 = ($166|0)!=(0|0);
     if (!($167)) {
      $168 = $28;
      _free($168);
      $169 = (__ZL9stbi__errPKc(9723)|0);
      $170 = ($169|0)!=(0);
      $171 = $170 ? 0 : 0;
      $172 = $171;
      $6 = $172;
      $369 = $6;
      STACKTOP = sp;return ($369|0);
     }
     $173 = HEAP32[$26>>2]|0;
     $174 = ($173|0)!=(0);
     if (!($174)) {
      $188 = $7;
      $189 = $29;
      $190 = $18;
      $191 = $25;
      $192 = Math_imul($190, $191)|0;
      $193 = (__ZL10stbi__getnP13stbi__contextPhi($188,$189,$192)|0);
      $194 = ($193|0)!=(0);
      if ($194) {
       break;
      }
      $195 = $28;
      _free($195);
      $196 = $29;
      _free($196);
      $197 = (__ZL9stbi__errPKc(9808)|0);
      $198 = ($197|0)!=(0);
      $199 = $198 ? 0 : 0;
      $200 = $199;
      $6 = $200;
      $369 = $6;
      STACKTOP = sp;return ($369|0);
     }
     $175 = $29;
     $38 = $175;
     $176 = $25;
     $177 = ($176|0)==(3);
     if (!($177)) {
      ___assert_fail((9772|0),(9662|0),6552,(9793|0));
      // unreachable;
     }
     $30 = 0;
     while(1) {
      $178 = $30;
      $179 = $18;
      $180 = ($178|0)<($179|0);
      if (!($180)) {
       break L25;
      }
      $181 = $7;
      $182 = $38;
      __ZL20stbi__tga_read_rgb16P13stbi__contextPh($181,$182);
      $183 = $25;
      $184 = $38;
      $185 = (($184) + ($183)|0);
      $38 = $185;
      $186 = $30;
      $187 = (($186) + 1)|0;
      $30 = $187;
     }
    }
   } while(0);
   $30 = 0;
   L43: while(1) {
    $201 = $30;
    $202 = $22;
    $203 = $23;
    $204 = Math_imul($202, $203)|0;
    $205 = ($201|0)<($204|0);
    if (!($205)) {
     break;
    }
    $206 = $16;
    $207 = ($206|0)!=(0);
    do {
     if ($207) {
      $208 = $33;
      $209 = ($208|0)==(0);
      if ($209) {
       $210 = $7;
       $211 = (__ZL10stbi__get8P13stbi__context($210)|0);
       $212 = $211&255;
       $39 = $212;
       $213 = $39;
       $214 = $213 & 127;
       $215 = (1 + ($214))|0;
       $33 = $215;
       $216 = $39;
       $217 = $216 >> 7;
       $34 = $217;
       $35 = 1;
       break;
      }
      $218 = $34;
      $219 = ($218|0)!=(0);
      if (!($219)) {
       $35 = 1;
      }
     } else {
      $35 = 1;
     }
    } while(0);
    $220 = $35;
    $221 = ($220|0)!=(0);
    if ($221) {
     $222 = $14;
     $223 = ($222|0)!=(0);
     L56: do {
      if ($223) {
       $224 = $24;
       $225 = ($224|0)==(8);
       $226 = $7;
       if ($225) {
        $227 = (__ZL10stbi__get8P13stbi__context($226)|0);
        $228 = $227&255;
        $230 = $228;
       } else {
        $229 = (__ZL13stbi__get16leP13stbi__context($226)|0);
        $230 = $229;
       }
       $40 = $230;
       $231 = $40;
       $232 = $18;
       $233 = ($231|0)>=($232|0);
       $spec$store$select = $233 ? 0 : $230;
       $40 = $spec$store$select;
       $234 = $25;
       $235 = $40;
       $236 = Math_imul($235, $234)|0;
       $40 = $236;
       $31 = 0;
       while(1) {
        $237 = $31;
        $238 = $25;
        $239 = ($237|0)<($238|0);
        if (!($239)) {
         break L56;
        }
        $240 = $29;
        $241 = $40;
        $242 = $31;
        $243 = (($241) + ($242))|0;
        $244 = (($240) + ($243)|0);
        $245 = HEAP8[$244>>0]|0;
        $246 = $31;
        $247 = (($32) + ($246)|0);
        HEAP8[$247>>0] = $245;
        $248 = $31;
        $249 = (($248) + 1)|0;
        $31 = $249;
       }
      } else {
       $250 = HEAP32[$26>>2]|0;
       $251 = ($250|0)!=(0);
       if ($251) {
        $252 = $25;
        $253 = ($252|0)==(3);
        if (!($253)) {
         label = 50;
         break L43;
        }
        $254 = $7;
        __ZL20stbi__tga_read_rgb16P13stbi__contextPh($254,$32);
        break;
       }
       $31 = 0;
       while(1) {
        $255 = $31;
        $256 = $25;
        $257 = ($255|0)<($256|0);
        if (!($257)) {
         break L56;
        }
        $258 = $7;
        $259 = (__ZL10stbi__get8P13stbi__context($258)|0);
        $260 = $31;
        $261 = (($32) + ($260)|0);
        HEAP8[$261>>0] = $259;
        $262 = $31;
        $263 = (($262) + 1)|0;
        $31 = $263;
       }
      }
     } while(0);
     $35 = 0;
    }
    $31 = 0;
    while(1) {
     $264 = $31;
     $265 = $25;
     $266 = ($264|0)<($265|0);
     if (!($266)) {
      break;
     }
     $267 = $31;
     $268 = (($32) + ($267)|0);
     $269 = HEAP8[$268>>0]|0;
     $270 = $28;
     $271 = $30;
     $272 = $25;
     $273 = Math_imul($271, $272)|0;
     $274 = $31;
     $275 = (($273) + ($274))|0;
     $276 = (($270) + ($275)|0);
     HEAP8[$276>>0] = $269;
     $277 = $31;
     $278 = (($277) + 1)|0;
     $31 = $278;
    }
    $279 = $33;
    $280 = (($279) + -1)|0;
    $33 = $280;
    $281 = $30;
    $282 = (($281) + 1)|0;
    $30 = $282;
   }
   if ((label|0) == 50) {
    ___assert_fail((9772|0),(9662|0),6604,(9793|0));
    // unreachable;
   }
   $283 = $27;
   $284 = ($283|0)!=(0);
   L82: do {
    if ($284) {
     $31 = 0;
     while(1) {
      $285 = $31;
      $286 = $285<<1;
      $287 = $23;
      $288 = ($286|0)<($287|0);
      if (!($288)) {
       break L82;
      }
      $289 = $31;
      $290 = $22;
      $291 = Math_imul($289, $290)|0;
      $292 = $25;
      $293 = Math_imul($291, $292)|0;
      $41 = $293;
      $294 = $23;
      $295 = (($294) - 1)|0;
      $296 = $31;
      $297 = (($295) - ($296))|0;
      $298 = $22;
      $299 = Math_imul($297, $298)|0;
      $300 = $25;
      $301 = Math_imul($299, $300)|0;
      $42 = $301;
      $302 = $22;
      $303 = $25;
      $304 = Math_imul($302, $303)|0;
      $30 = $304;
      while(1) {
       $305 = $30;
       $306 = ($305|0)>(0);
       if (!($306)) {
        break;
       }
       $307 = $28;
       $308 = $41;
       $309 = (($307) + ($308)|0);
       $310 = HEAP8[$309>>0]|0;
       $43 = $310;
       $311 = $28;
       $312 = $42;
       $313 = (($311) + ($312)|0);
       $314 = HEAP8[$313>>0]|0;
       $315 = $28;
       $316 = $41;
       $317 = (($315) + ($316)|0);
       HEAP8[$317>>0] = $314;
       $318 = $43;
       $319 = $28;
       $320 = $42;
       $321 = (($319) + ($320)|0);
       HEAP8[$321>>0] = $318;
       $322 = $41;
       $323 = (($322) + 1)|0;
       $41 = $323;
       $324 = $42;
       $325 = (($324) + 1)|0;
       $42 = $325;
       $326 = $30;
       $327 = (($326) + -1)|0;
       $30 = $327;
      }
      $328 = $31;
      $329 = (($328) + 1)|0;
      $31 = $329;
     }
    }
   } while(0);
   $330 = $29;
   $331 = ($330|0)!=(0|0);
   if ($331) {
    $332 = $29;
    _free($332);
   }
  } else {
   $30 = 0;
   while(1) {
    $134 = $30;
    $135 = $23;
    $136 = ($134|0)<($135|0);
    if (!($136)) {
     break L23;
    }
    $137 = $27;
    $138 = ($137|0)!=(0);
    if ($138) {
     $139 = $23;
     $140 = $30;
     $141 = (($139) - ($140))|0;
     $142 = (($141) - 1)|0;
     $144 = $142;
    } else {
     $143 = $30;
     $144 = $143;
    }
    $36 = $144;
    $145 = $28;
    $146 = $36;
    $147 = $22;
    $148 = Math_imul($146, $147)|0;
    $149 = $25;
    $150 = Math_imul($148, $149)|0;
    $151 = (($145) + ($150)|0);
    $37 = $151;
    $152 = $7;
    $153 = $37;
    $154 = $22;
    $155 = $25;
    $156 = Math_imul($154, $155)|0;
    (__ZL10stbi__getnP13stbi__contextPhi($152,$153,$156)|0);
    $157 = $30;
    $158 = (($157) + 1)|0;
    $30 = $158;
   }
  }
 } while(0);
 $333 = $25;
 $334 = ($333|0)<(3);
 $335 = HEAP32[$26>>2]|0;
 $336 = ($335|0)!=(0);
 $or$cond5 = $334 | $336;
 L102: do {
  if (!($or$cond5)) {
   $337 = $28;
   $44 = $337;
   $30 = 0;
   while(1) {
    $338 = $30;
    $339 = $22;
    $340 = $23;
    $341 = Math_imul($339, $340)|0;
    $342 = ($338|0)<($341|0);
    if (!($342)) {
     break L102;
    }
    $343 = $44;
    $344 = HEAP8[$343>>0]|0;
    $45 = $344;
    $345 = $44;
    $346 = ((($345)) + 2|0);
    $347 = HEAP8[$346>>0]|0;
    $348 = $44;
    HEAP8[$348>>0] = $347;
    $349 = $45;
    $350 = $44;
    $351 = ((($350)) + 2|0);
    HEAP8[$351>>0] = $349;
    $352 = $25;
    $353 = $44;
    $354 = (($353) + ($352)|0);
    $44 = $354;
    $355 = $30;
    $356 = (($355) + 1)|0;
    $30 = $356;
   }
  }
 } while(0);
 $357 = $11;
 $358 = ($357|0)!=(0);
 if ($358) {
  $359 = $11;
  $360 = $25;
  $361 = ($359|0)!=($360|0);
  if ($361) {
   $362 = $28;
   $363 = $25;
   $364 = $11;
   $365 = $22;
   $366 = $23;
   $367 = (__ZL20stbi__convert_formatPhiijj($362,$363,$364,$365,$366)|0);
   $28 = $367;
  }
 }
 $21 = 0;
 $20 = 0;
 $19 = 0;
 $18 = 0;
 $17 = 0;
 $368 = $28;
 $6 = $368;
 $369 = $6;
 STACKTOP = sp;return ($369|0);
}
function __ZL10stbi__get8P13stbi__context($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ((($3)) + 168|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $2;
 $7 = ((($6)) + 172|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5>>>0)<($8>>>0);
 $10 = $2;
 if ($9) {
  $11 = ((($10)) + 168|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($12)) + 1|0);
  HEAP32[$11>>2] = $13;
  $14 = HEAP8[$12>>0]|0;
  $1 = $14;
  $24 = $1;
  STACKTOP = sp;return ($24|0);
 }
 $15 = ((($10)) + 32|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = $2;
  __ZL19stbi__refill_bufferP13stbi__context($18);
  $19 = $2;
  $20 = ((($19)) + 168|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ((($21)) + 1|0);
  HEAP32[$20>>2] = $22;
  $23 = HEAP8[$21>>0]|0;
  $1 = $23;
  $24 = $1;
  STACKTOP = sp;return ($24|0);
 } else {
  $1 = 0;
  $24 = $1;
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function __ZL13stbi__get16leP13stbi__context($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (__ZL10stbi__get8P13stbi__context($3)|0);
 $5 = $4&255;
 $2 = $5;
 $6 = $2;
 $7 = $1;
 $8 = (__ZL10stbi__get8P13stbi__context($7)|0);
 $9 = $8&255;
 $10 = $9 << 8;
 $11 = (($6) + ($10))|0;
 STACKTOP = sp;return ($11|0);
}
function __ZL18stbi__tga_get_compiiPi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $6;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $6;
  HEAP32[$9>>2] = 0;
 }
 $10 = $4;
 switch ($10|0) {
 case 8:  {
  $3 = 1;
  break;
 }
 case 16:  {
  $11 = $5;
  $12 = ($11|0)!=(0);
  if ($12) {
   $3 = 2;
  } else {
   label = 7;
  }
  break;
 }
 case 15:  {
  label = 7;
  break;
 }
 case 32: case 24:  {
  $16 = $4;
  $17 = (($16|0) / 8)&-1;
  $3 = $17;
  break;
 }
 default: {
  $3 = 0;
 }
 }
 if ((label|0) == 7) {
  $13 = $6;
  $14 = ($13|0)!=(0|0);
  if ($14) {
   $15 = $6;
   HEAP32[$15>>2] = 1;
  }
  $3 = 3;
 }
 $18 = $3;
 STACKTOP = sp;return ($18|0);
}
function __ZL21stbi__mad3sizes_validiiii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 $10 = (__ZL21stbi__mul2sizes_validii($8,$9)|0);
 $11 = ($10|0)!=(0);
 if (!($11)) {
  $27 = 0;
  $26 = $27&1;
  STACKTOP = sp;return ($26|0);
 }
 $12 = $4;
 $13 = $5;
 $14 = Math_imul($12, $13)|0;
 $15 = $6;
 $16 = (__ZL21stbi__mul2sizes_validii($14,$15)|0);
 $17 = ($16|0)!=(0);
 if (!($17)) {
  $27 = 0;
  $26 = $27&1;
  STACKTOP = sp;return ($26|0);
 }
 $18 = $4;
 $19 = $5;
 $20 = Math_imul($18, $19)|0;
 $21 = $6;
 $22 = Math_imul($20, $21)|0;
 $23 = $7;
 $24 = (__ZL20stbi__addsizes_validii($22,$23)|0);
 $25 = ($24|0)!=(0);
 $27 = $25;
 $26 = $27&1;
 STACKTOP = sp;return ($26|0);
}
function __ZL17stbi__malloc_mad3iiii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $5;
 $10 = $6;
 $11 = $7;
 $12 = $8;
 $13 = (__ZL21stbi__mad3sizes_validiiii($9,$10,$11,$12)|0);
 $14 = ($13|0)!=(0);
 if ($14) {
  $15 = $5;
  $16 = $6;
  $17 = Math_imul($15, $16)|0;
  $18 = $7;
  $19 = Math_imul($17, $18)|0;
  $20 = $8;
  $21 = (($19) + ($20))|0;
  $22 = (__ZL12stbi__mallocm($21)|0);
  $4 = $22;
  $23 = $4;
  STACKTOP = sp;return ($23|0);
 } else {
  $4 = 0;
  $23 = $4;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function __ZL10stbi__skipP13stbi__contexti($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = ($5|0)<(0);
 $7 = $2;
 if ($6) {
  $8 = ((($7)) + 172|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $2;
  $11 = ((($10)) + 168|0);
  HEAP32[$11>>2] = $9;
  STACKTOP = sp;return;
 }
 $12 = ((($7)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = $2;
  $16 = ((($15)) + 172|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $2;
  $19 = ((($18)) + 168|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $17;
  $22 = $20;
  $23 = (($21) - ($22))|0;
  $4 = $23;
  $24 = $4;
  $25 = $3;
  $26 = ($24|0)<($25|0);
  if ($26) {
   $27 = $2;
   $28 = ((($27)) + 172|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $2;
   $31 = ((($30)) + 168|0);
   HEAP32[$31>>2] = $29;
   $32 = $2;
   $33 = ((($32)) + 16|0);
   $34 = ((($33)) + 4|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $2;
   $37 = ((($36)) + 28|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = $3;
   $40 = $4;
   $41 = (($39) - ($40))|0;
   FUNCTION_TABLE_vii[$35 & 511]($38,$41);
   STACKTOP = sp;return;
  }
 }
 $42 = $3;
 $43 = $2;
 $44 = ((($43)) + 168|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($45) + ($42)|0);
 HEAP32[$44>>2] = $46;
 STACKTOP = sp;return;
}
function __ZL10stbi__getnP13stbi__contextPhi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $4;
 $11 = ((($10)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = $4;
  $15 = ((($14)) + 172|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $4;
  $18 = ((($17)) + 168|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $16;
  $21 = $19;
  $22 = (($20) - ($21))|0;
  $7 = $22;
  $23 = $7;
  $24 = $6;
  $25 = ($23|0)<($24|0);
  if ($25) {
   $26 = $5;
   $27 = $4;
   $28 = ((($27)) + 168|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $7;
   _memcpy(($26|0),($29|0),($30|0))|0;
   $31 = $4;
   $32 = ((($31)) + 16|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $4;
   $35 = ((($34)) + 28|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = $5;
   $38 = $7;
   $39 = (($37) + ($38)|0);
   $40 = $6;
   $41 = $7;
   $42 = (($40) - ($41))|0;
   $43 = (FUNCTION_TABLE_iiii[$33 & 511]($36,$39,$42)|0);
   $9 = $43;
   $44 = $9;
   $45 = $6;
   $46 = $7;
   $47 = (($45) - ($46))|0;
   $48 = ($44|0)==($47|0);
   $49 = $48&1;
   $8 = $49;
   $50 = $4;
   $51 = ((($50)) + 172|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $4;
   $54 = ((($53)) + 168|0);
   HEAP32[$54>>2] = $52;
   $55 = $8;
   $3 = $55;
   $75 = $3;
   STACKTOP = sp;return ($75|0);
  }
 }
 $56 = $4;
 $57 = ((($56)) + 168|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = $6;
 $60 = (($58) + ($59)|0);
 $61 = $4;
 $62 = ((($61)) + 172|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = ($60>>>0)<=($63>>>0);
 if ($64) {
  $65 = $5;
  $66 = $4;
  $67 = ((($66)) + 168|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = $6;
  _memcpy(($65|0),($68|0),($69|0))|0;
  $70 = $6;
  $71 = $4;
  $72 = ((($71)) + 168|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($73) + ($70)|0);
  HEAP32[$72>>2] = $74;
  $3 = 1;
  $75 = $3;
  STACKTOP = sp;return ($75|0);
 } else {
  $3 = 0;
  $75 = $3;
  STACKTOP = sp;return ($75|0);
 }
 return (0)|0;
}
function __ZL17stbi__malloc_mad2iii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $4;
 $8 = $5;
 $9 = $6;
 $10 = (__ZL21stbi__mad2sizes_validiii($7,$8,$9)|0);
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $4;
  $13 = $5;
  $14 = Math_imul($12, $13)|0;
  $15 = $6;
  $16 = (($14) + ($15))|0;
  $17 = (__ZL12stbi__mallocm($16)|0);
  $3 = $17;
  $18 = $3;
  STACKTOP = sp;return ($18|0);
 } else {
  $3 = 0;
  $18 = $3;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function __ZL20stbi__tga_read_rgb16P13stbi__contextPh($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $9 = $2;
 $10 = (__ZL13stbi__get16leP13stbi__context($9)|0);
 $11 = $10&65535;
 $4 = $11;
 $5 = 31;
 $12 = $4;
 $13 = $12&65535;
 $14 = $13 >> 10;
 $15 = $5;
 $16 = $15&65535;
 $17 = $14 & $16;
 $6 = $17;
 $18 = $4;
 $19 = $18&65535;
 $20 = $19 >> 5;
 $21 = $5;
 $22 = $21&65535;
 $23 = $20 & $22;
 $7 = $23;
 $24 = $4;
 $25 = $24&65535;
 $26 = $5;
 $27 = $26&65535;
 $28 = $25 & $27;
 $8 = $28;
 $29 = $6;
 $30 = ($29*255)|0;
 $31 = (($30|0) / 31)&-1;
 $32 = $31&255;
 $33 = $3;
 HEAP8[$33>>0] = $32;
 $34 = $7;
 $35 = ($34*255)|0;
 $36 = (($35|0) / 31)&-1;
 $37 = $36&255;
 $38 = $3;
 $39 = ((($38)) + 1|0);
 HEAP8[$39>>0] = $37;
 $40 = $8;
 $41 = ($40*255)|0;
 $42 = (($41|0) / 31)&-1;
 $43 = $42&255;
 $44 = $3;
 $45 = ((($44)) + 2|0);
 HEAP8[$45>>0] = $43;
 STACKTOP = sp;return;
}
function __ZL20stbi__convert_formatPhiijj($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $16 = $8;
 $17 = $7;
 $18 = ($16|0)==($17|0);
 if ($18) {
  $19 = $6;
  $5 = $19;
  $309 = $5;
  STACKTOP = sp;return ($309|0);
 }
 $20 = $8;
 $21 = ($20|0)>=(1);
 $22 = $8;
 $23 = ($22|0)<=(4);
 $or$cond = $21 & $23;
 if (!($or$cond)) {
  ___assert_fail((9820|0),(9662|0),1655,(9851|0));
  // unreachable;
 }
 $24 = $8;
 $25 = $9;
 $26 = $10;
 $27 = (__ZL17stbi__malloc_mad3iiii($24,$25,$26,0)|0);
 $13 = $27;
 $28 = $13;
 $29 = ($28|0)==(0|0);
 if ($29) {
  $30 = $6;
  _free($30);
  $31 = (__ZL9stbi__errPKc(9723)|0);
  $32 = ($31|0)!=(0);
  $33 = $32 ? 0 : 0;
  $34 = $33;
  $5 = $34;
  $309 = $5;
  STACKTOP = sp;return ($309|0);
 }
 $12 = 0;
 L12: while(1) {
  $35 = $12;
  $36 = $10;
  $37 = ($35|0)<($36|0);
  $38 = $6;
  if (!($37)) {
   break;
  }
  $39 = $12;
  $40 = $9;
  $41 = Math_imul($39, $40)|0;
  $42 = $7;
  $43 = Math_imul($41, $42)|0;
  $44 = (($38) + ($43)|0);
  $14 = $44;
  $45 = $13;
  $46 = $12;
  $47 = $9;
  $48 = Math_imul($46, $47)|0;
  $49 = $8;
  $50 = Math_imul($48, $49)|0;
  $51 = (($45) + ($50)|0);
  $15 = $51;
  $52 = $7;
  $53 = $52<<3;
  $54 = $8;
  $55 = (($53) + ($54))|0;
  L15: do {
   switch ($55|0) {
   case 10:  {
    $56 = $9;
    $57 = (($56) - 1)|0;
    $11 = $57;
    while(1) {
     $58 = $11;
     $59 = ($58|0)>=(0);
     if (!($59)) {
      break L15;
     }
     $60 = $14;
     $61 = HEAP8[$60>>0]|0;
     $62 = $15;
     HEAP8[$62>>0] = $61;
     $63 = $15;
     $64 = ((($63)) + 1|0);
     HEAP8[$64>>0] = -1;
     $65 = $11;
     $66 = (($65) + -1)|0;
     $11 = $66;
     $67 = $14;
     $68 = ((($67)) + 1|0);
     $14 = $68;
     $69 = $15;
     $70 = ((($69)) + 2|0);
     $15 = $70;
    }
    break;
   }
   case 11:  {
    $71 = $9;
    $72 = (($71) - 1)|0;
    $11 = $72;
    while(1) {
     $73 = $11;
     $74 = ($73|0)>=(0);
     if (!($74)) {
      break L15;
     }
     $75 = $14;
     $76 = HEAP8[$75>>0]|0;
     $77 = $15;
     $78 = ((($77)) + 2|0);
     HEAP8[$78>>0] = $76;
     $79 = $15;
     $80 = ((($79)) + 1|0);
     HEAP8[$80>>0] = $76;
     $81 = $15;
     HEAP8[$81>>0] = $76;
     $82 = $11;
     $83 = (($82) + -1)|0;
     $11 = $83;
     $84 = $14;
     $85 = ((($84)) + 1|0);
     $14 = $85;
     $86 = $15;
     $87 = ((($86)) + 3|0);
     $15 = $87;
    }
    break;
   }
   case 12:  {
    $88 = $9;
    $89 = (($88) - 1)|0;
    $11 = $89;
    while(1) {
     $90 = $11;
     $91 = ($90|0)>=(0);
     if (!($91)) {
      break L15;
     }
     $92 = $14;
     $93 = HEAP8[$92>>0]|0;
     $94 = $15;
     $95 = ((($94)) + 2|0);
     HEAP8[$95>>0] = $93;
     $96 = $15;
     $97 = ((($96)) + 1|0);
     HEAP8[$97>>0] = $93;
     $98 = $15;
     HEAP8[$98>>0] = $93;
     $99 = $15;
     $100 = ((($99)) + 3|0);
     HEAP8[$100>>0] = -1;
     $101 = $11;
     $102 = (($101) + -1)|0;
     $11 = $102;
     $103 = $14;
     $104 = ((($103)) + 1|0);
     $14 = $104;
     $105 = $15;
     $106 = ((($105)) + 4|0);
     $15 = $106;
    }
    break;
   }
   case 17:  {
    $107 = $9;
    $108 = (($107) - 1)|0;
    $11 = $108;
    while(1) {
     $109 = $11;
     $110 = ($109|0)>=(0);
     if (!($110)) {
      break L15;
     }
     $111 = $14;
     $112 = HEAP8[$111>>0]|0;
     $113 = $15;
     HEAP8[$113>>0] = $112;
     $114 = $11;
     $115 = (($114) + -1)|0;
     $11 = $115;
     $116 = $14;
     $117 = ((($116)) + 2|0);
     $14 = $117;
     $118 = $15;
     $119 = ((($118)) + 1|0);
     $15 = $119;
    }
    break;
   }
   case 19:  {
    $120 = $9;
    $121 = (($120) - 1)|0;
    $11 = $121;
    while(1) {
     $122 = $11;
     $123 = ($122|0)>=(0);
     if (!($123)) {
      break L15;
     }
     $124 = $14;
     $125 = HEAP8[$124>>0]|0;
     $126 = $15;
     $127 = ((($126)) + 2|0);
     HEAP8[$127>>0] = $125;
     $128 = $15;
     $129 = ((($128)) + 1|0);
     HEAP8[$129>>0] = $125;
     $130 = $15;
     HEAP8[$130>>0] = $125;
     $131 = $11;
     $132 = (($131) + -1)|0;
     $11 = $132;
     $133 = $14;
     $134 = ((($133)) + 2|0);
     $14 = $134;
     $135 = $15;
     $136 = ((($135)) + 3|0);
     $15 = $136;
    }
    break;
   }
   case 20:  {
    $137 = $9;
    $138 = (($137) - 1)|0;
    $11 = $138;
    while(1) {
     $139 = $11;
     $140 = ($139|0)>=(0);
     if (!($140)) {
      break L15;
     }
     $141 = $14;
     $142 = HEAP8[$141>>0]|0;
     $143 = $15;
     $144 = ((($143)) + 2|0);
     HEAP8[$144>>0] = $142;
     $145 = $15;
     $146 = ((($145)) + 1|0);
     HEAP8[$146>>0] = $142;
     $147 = $15;
     HEAP8[$147>>0] = $142;
     $148 = $14;
     $149 = ((($148)) + 1|0);
     $150 = HEAP8[$149>>0]|0;
     $151 = $15;
     $152 = ((($151)) + 3|0);
     HEAP8[$152>>0] = $150;
     $153 = $11;
     $154 = (($153) + -1)|0;
     $11 = $154;
     $155 = $14;
     $156 = ((($155)) + 2|0);
     $14 = $156;
     $157 = $15;
     $158 = ((($157)) + 4|0);
     $15 = $158;
    }
    break;
   }
   case 28:  {
    $159 = $9;
    $160 = (($159) - 1)|0;
    $11 = $160;
    while(1) {
     $161 = $11;
     $162 = ($161|0)>=(0);
     if (!($162)) {
      break L15;
     }
     $163 = $14;
     $164 = HEAP8[$163>>0]|0;
     $165 = $15;
     HEAP8[$165>>0] = $164;
     $166 = $14;
     $167 = ((($166)) + 1|0);
     $168 = HEAP8[$167>>0]|0;
     $169 = $15;
     $170 = ((($169)) + 1|0);
     HEAP8[$170>>0] = $168;
     $171 = $14;
     $172 = ((($171)) + 2|0);
     $173 = HEAP8[$172>>0]|0;
     $174 = $15;
     $175 = ((($174)) + 2|0);
     HEAP8[$175>>0] = $173;
     $176 = $15;
     $177 = ((($176)) + 3|0);
     HEAP8[$177>>0] = -1;
     $178 = $11;
     $179 = (($178) + -1)|0;
     $11 = $179;
     $180 = $14;
     $181 = ((($180)) + 3|0);
     $14 = $181;
     $182 = $15;
     $183 = ((($182)) + 4|0);
     $15 = $183;
    }
    break;
   }
   case 25:  {
    $184 = $9;
    $185 = (($184) - 1)|0;
    $11 = $185;
    while(1) {
     $186 = $11;
     $187 = ($186|0)>=(0);
     if (!($187)) {
      break L15;
     }
     $188 = $14;
     $189 = HEAP8[$188>>0]|0;
     $190 = $189&255;
     $191 = $14;
     $192 = ((($191)) + 1|0);
     $193 = HEAP8[$192>>0]|0;
     $194 = $193&255;
     $195 = $14;
     $196 = ((($195)) + 2|0);
     $197 = HEAP8[$196>>0]|0;
     $198 = $197&255;
     $199 = (__ZL15stbi__compute_yiii($190,$194,$198)|0);
     $200 = $15;
     HEAP8[$200>>0] = $199;
     $201 = $11;
     $202 = (($201) + -1)|0;
     $11 = $202;
     $203 = $14;
     $204 = ((($203)) + 3|0);
     $14 = $204;
     $205 = $15;
     $206 = ((($205)) + 1|0);
     $15 = $206;
    }
    break;
   }
   case 26:  {
    $207 = $9;
    $208 = (($207) - 1)|0;
    $11 = $208;
    while(1) {
     $209 = $11;
     $210 = ($209|0)>=(0);
     if (!($210)) {
      break L15;
     }
     $211 = $14;
     $212 = HEAP8[$211>>0]|0;
     $213 = $212&255;
     $214 = $14;
     $215 = ((($214)) + 1|0);
     $216 = HEAP8[$215>>0]|0;
     $217 = $216&255;
     $218 = $14;
     $219 = ((($218)) + 2|0);
     $220 = HEAP8[$219>>0]|0;
     $221 = $220&255;
     $222 = (__ZL15stbi__compute_yiii($213,$217,$221)|0);
     $223 = $15;
     HEAP8[$223>>0] = $222;
     $224 = $15;
     $225 = ((($224)) + 1|0);
     HEAP8[$225>>0] = -1;
     $226 = $11;
     $227 = (($226) + -1)|0;
     $11 = $227;
     $228 = $14;
     $229 = ((($228)) + 3|0);
     $14 = $229;
     $230 = $15;
     $231 = ((($230)) + 2|0);
     $15 = $231;
    }
    break;
   }
   case 33:  {
    $232 = $9;
    $233 = (($232) - 1)|0;
    $11 = $233;
    while(1) {
     $234 = $11;
     $235 = ($234|0)>=(0);
     if (!($235)) {
      break L15;
     }
     $236 = $14;
     $237 = HEAP8[$236>>0]|0;
     $238 = $237&255;
     $239 = $14;
     $240 = ((($239)) + 1|0);
     $241 = HEAP8[$240>>0]|0;
     $242 = $241&255;
     $243 = $14;
     $244 = ((($243)) + 2|0);
     $245 = HEAP8[$244>>0]|0;
     $246 = $245&255;
     $247 = (__ZL15stbi__compute_yiii($238,$242,$246)|0);
     $248 = $15;
     HEAP8[$248>>0] = $247;
     $249 = $11;
     $250 = (($249) + -1)|0;
     $11 = $250;
     $251 = $14;
     $252 = ((($251)) + 4|0);
     $14 = $252;
     $253 = $15;
     $254 = ((($253)) + 1|0);
     $15 = $254;
    }
    break;
   }
   case 34:  {
    $255 = $9;
    $256 = (($255) - 1)|0;
    $11 = $256;
    while(1) {
     $257 = $11;
     $258 = ($257|0)>=(0);
     if (!($258)) {
      break L15;
     }
     $259 = $14;
     $260 = HEAP8[$259>>0]|0;
     $261 = $260&255;
     $262 = $14;
     $263 = ((($262)) + 1|0);
     $264 = HEAP8[$263>>0]|0;
     $265 = $264&255;
     $266 = $14;
     $267 = ((($266)) + 2|0);
     $268 = HEAP8[$267>>0]|0;
     $269 = $268&255;
     $270 = (__ZL15stbi__compute_yiii($261,$265,$269)|0);
     $271 = $15;
     HEAP8[$271>>0] = $270;
     $272 = $14;
     $273 = ((($272)) + 3|0);
     $274 = HEAP8[$273>>0]|0;
     $275 = $15;
     $276 = ((($275)) + 1|0);
     HEAP8[$276>>0] = $274;
     $277 = $11;
     $278 = (($277) + -1)|0;
     $11 = $278;
     $279 = $14;
     $280 = ((($279)) + 4|0);
     $14 = $280;
     $281 = $15;
     $282 = ((($281)) + 2|0);
     $15 = $282;
    }
    break;
   }
   case 35:  {
    $283 = $9;
    $284 = (($283) - 1)|0;
    $11 = $284;
    while(1) {
     $285 = $11;
     $286 = ($285|0)>=(0);
     if (!($286)) {
      break L15;
     }
     $287 = $14;
     $288 = HEAP8[$287>>0]|0;
     $289 = $15;
     HEAP8[$289>>0] = $288;
     $290 = $14;
     $291 = ((($290)) + 1|0);
     $292 = HEAP8[$291>>0]|0;
     $293 = $15;
     $294 = ((($293)) + 1|0);
     HEAP8[$294>>0] = $292;
     $295 = $14;
     $296 = ((($295)) + 2|0);
     $297 = HEAP8[$296>>0]|0;
     $298 = $15;
     $299 = ((($298)) + 2|0);
     HEAP8[$299>>0] = $297;
     $300 = $11;
     $301 = (($300) + -1)|0;
     $11 = $301;
     $302 = $14;
     $303 = ((($302)) + 4|0);
     $14 = $303;
     $304 = $15;
     $305 = ((($304)) + 3|0);
     $15 = $305;
    }
    break;
   }
   default: {
    label = 46;
    break L12;
   }
   }
  } while(0);
  $306 = $12;
  $307 = (($306) + 1)|0;
  $12 = $307;
 }
 if ((label|0) == 46) {
  ___assert_fail((9872|0),(9662|0),1700,(9851|0));
  // unreachable;
 }
 _free($38);
 $308 = $13;
 $5 = $308;
 $309 = $5;
 STACKTOP = sp;return ($309|0);
}
function __ZL15stbi__compute_yiii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ($6*77)|0;
 $8 = $4;
 $9 = ($8*150)|0;
 $10 = (($7) + ($9))|0;
 $11 = $5;
 $12 = ($11*29)|0;
 $13 = (($10) + ($12))|0;
 $14 = $13 >> 8;
 $15 = $14&255;
 STACKTOP = sp;return ($15|0);
}
function __ZL21stbi__mad2sizes_validiii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = (__ZL21stbi__mul2sizes_validii($6,$7)|0);
 $9 = ($8|0)!=(0);
 if (!($9)) {
  $17 = 0;
  $16 = $17&1;
  STACKTOP = sp;return ($16|0);
 }
 $10 = $3;
 $11 = $4;
 $12 = Math_imul($10, $11)|0;
 $13 = $5;
 $14 = (__ZL20stbi__addsizes_validii($12,$13)|0);
 $15 = ($14|0)!=(0);
 $17 = $15;
 $16 = $17&1;
 STACKTOP = sp;return ($16|0);
}
function __ZL21stbi__mul2sizes_validii($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = ($5|0)<(0);
 $7 = $4;
 $8 = ($7|0)<(0);
 $or$cond = $6 | $8;
 do {
  if ($or$cond) {
   $2 = 0;
  } else {
   $9 = $4;
   $10 = ($9|0)==(0);
   if ($10) {
    $2 = 1;
    break;
   } else {
    $11 = $3;
    $12 = $4;
    $13 = (2147483647 / ($12|0))&-1;
    $14 = ($11|0)<=($13|0);
    $15 = $14&1;
    $2 = $15;
    break;
   }
  }
 } while(0);
 $16 = $2;
 STACKTOP = sp;return ($16|0);
}
function __ZL20stbi__addsizes_validii($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $4;
 $6 = ($5|0)<(0);
 if ($6) {
  $2 = 0;
 } else {
  $7 = $3;
  $8 = $4;
  $9 = (2147483647 - ($8))|0;
  $10 = ($7|0)<=($9|0);
  $11 = $10&1;
  $2 = $11;
 }
 $12 = $2;
 STACKTOP = sp;return ($12|0);
}
function __ZL19stbi__refill_bufferP13stbi__context($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = ((($6)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = ((($9)) + 40|0);
 $11 = $1;
 $12 = ((($11)) + 36|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_iiii[$5 & 511]($8,$10,$13)|0);
 $2 = $14;
 $15 = $2;
 $16 = ($15|0)==(0);
 $17 = $1;
 if ($16) {
  $18 = ((($17)) + 32|0);
  HEAP32[$18>>2] = 0;
  $19 = $1;
  $20 = ((($19)) + 40|0);
  $21 = $1;
  $22 = ((($21)) + 168|0);
  HEAP32[$22>>2] = $20;
  $23 = $1;
  $24 = ((($23)) + 40|0);
  $25 = ((($24)) + 1|0);
  $26 = $1;
  $27 = ((($26)) + 172|0);
  HEAP32[$27>>2] = $25;
  $28 = $1;
  $29 = ((($28)) + 168|0);
  $30 = HEAP32[$29>>2]|0;
  HEAP8[$30>>0] = 0;
  STACKTOP = sp;return;
 } else {
  $31 = ((($17)) + 40|0);
  $32 = $1;
  $33 = ((($32)) + 168|0);
  HEAP32[$33>>2] = $31;
  $34 = $1;
  $35 = ((($34)) + 40|0);
  $36 = $2;
  $37 = (($35) + ($36)|0);
  $38 = $1;
  $39 = ((($38)) + 172|0);
  HEAP32[$39>>2] = $37;
  STACKTOP = sp;return;
 }
}
function __ZL12stbi__rewindP13stbi__context($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 176|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 168|0);
 HEAP32[$6>>2] = $4;
 $7 = $1;
 $8 = ((($7)) + 180|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 $11 = ((($10)) + 172|0);
 HEAP32[$11>>2] = $9;
 STACKTOP = sp;return;
}
function __ZL18stbi__hdr_gettokenP13stbi__contextPc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $5 = 0;
 $6 = $2;
 $7 = (__ZL10stbi__get8P13stbi__context($6)|0);
 $5 = $7;
 while(1) {
  $8 = $2;
  $9 = (__ZL12stbi__at_eofP13stbi__context($8)|0);
  $10 = ($9|0)!=(0);
  if ($10) {
   break;
  }
  $11 = $5;
  $12 = $11 << 24 >> 24;
  $13 = ($12|0)!=(10);
  if (!($13)) {
   break;
  }
  $14 = $5;
  $15 = $3;
  $16 = $4;
  $17 = (($16) + 1)|0;
  $4 = $17;
  $18 = (($15) + ($16)|0);
  HEAP8[$18>>0] = $14;
  $19 = $4;
  $20 = ($19|0)==(1023);
  if ($20) {
   label = 5;
   break;
  }
  $28 = $2;
  $29 = (__ZL10stbi__get8P13stbi__context($28)|0);
  $5 = $29;
 }
 L6: do {
  if ((label|0) == 5) {
   while(1) {
    $21 = $2;
    $22 = (__ZL12stbi__at_eofP13stbi__context($21)|0);
    $23 = ($22|0)!=(0);
    if ($23) {
     break L6;
    }
    $24 = $2;
    $25 = (__ZL10stbi__get8P13stbi__context($24)|0);
    $26 = $25&255;
    $27 = ($26|0)!=(10);
    if (!($27)) {
     break L6;
    }
   }
  }
 } while(0);
 $30 = $3;
 $31 = $4;
 $32 = (($30) + ($31)|0);
 HEAP8[$32>>0] = 0;
 $33 = $3;
 STACKTOP = sp;return ($33|0);
}
function __ZL21stbi__mad4sizes_validiiiii($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 $11 = $6;
 $12 = (__ZL21stbi__mul2sizes_validii($10,$11)|0);
 $13 = ($12|0)!=(0);
 if (!($13)) {
  $39 = 0;
  $38 = $39&1;
  STACKTOP = sp;return ($38|0);
 }
 $14 = $5;
 $15 = $6;
 $16 = Math_imul($14, $15)|0;
 $17 = $7;
 $18 = (__ZL21stbi__mul2sizes_validii($16,$17)|0);
 $19 = ($18|0)!=(0);
 if (!($19)) {
  $39 = 0;
  $38 = $39&1;
  STACKTOP = sp;return ($38|0);
 }
 $20 = $5;
 $21 = $6;
 $22 = Math_imul($20, $21)|0;
 $23 = $7;
 $24 = Math_imul($22, $23)|0;
 $25 = $8;
 $26 = (__ZL21stbi__mul2sizes_validii($24,$25)|0);
 $27 = ($26|0)!=(0);
 if (!($27)) {
  $39 = 0;
  $38 = $39&1;
  STACKTOP = sp;return ($38|0);
 }
 $28 = $5;
 $29 = $6;
 $30 = Math_imul($28, $29)|0;
 $31 = $7;
 $32 = Math_imul($30, $31)|0;
 $33 = $8;
 $34 = Math_imul($32, $33)|0;
 $35 = $9;
 $36 = (__ZL20stbi__addsizes_validii($34,$35)|0);
 $37 = ($36|0)!=(0);
 $39 = $37;
 $38 = $39&1;
 STACKTOP = sp;return ($38|0);
}
function __ZL17stbi__malloc_mad4iiiii($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $6;
 $12 = $7;
 $13 = $8;
 $14 = $9;
 $15 = $10;
 $16 = (__ZL21stbi__mad4sizes_validiiiii($11,$12,$13,$14,$15)|0);
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = $6;
  $19 = $7;
  $20 = Math_imul($18, $19)|0;
  $21 = $8;
  $22 = Math_imul($20, $21)|0;
  $23 = $9;
  $24 = Math_imul($22, $23)|0;
  $25 = $10;
  $26 = (($24) + ($25))|0;
  $27 = (__ZL12stbi__mallocm($26)|0);
  $5 = $27;
  $28 = $5;
  STACKTOP = sp;return ($28|0);
 } else {
  $5 = 0;
  $28 = $5;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function __ZL17stbi__hdr_convertPfPhi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $9 = $6;
 $10 = ((($9)) + 3|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = ($12|0)!=(0);
 if (!($13)) {
  $72 = $7;
  switch ($72|0) {
  case 4:  {
   $73 = $5;
   $74 = ((($73)) + 12|0);
   HEAPF32[$74>>2] = 1.0;
   label = 11;
   break;
  }
  case 3:  {
   label = 11;
   break;
  }
  case 2:  {
   $80 = $5;
   $81 = ((($80)) + 4|0);
   HEAPF32[$81>>2] = 1.0;
   label = 13;
   break;
  }
  case 1:  {
   label = 13;
   break;
  }
  default: {
   STACKTOP = sp;return;
  }
  }
  if ((label|0) == 11) {
   $75 = $5;
   $76 = ((($75)) + 8|0);
   HEAPF32[$76>>2] = 0.0;
   $77 = $5;
   $78 = ((($77)) + 4|0);
   HEAPF32[$78>>2] = 0.0;
   $79 = $5;
   HEAPF32[$79>>2] = 0.0;
   STACKTOP = sp;return;
  }
  else if ((label|0) == 13) {
   $82 = $5;
   HEAPF32[$82>>2] = 0.0;
   STACKTOP = sp;return;
  }
 }
 $14 = $6;
 $15 = ((($14)) + 3|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = (($17) - 136)|0;
 $3 = 1.0;
 $4 = $18;
 $19 = $3;
 $20 = $4;
 $21 = (+_ldexpf($19,$20));
 $8 = $21;
 $22 = $7;
 $23 = ($22|0)<=(2);
 $24 = $6;
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 if ($23) {
  $27 = $6;
  $28 = ((($27)) + 1|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = (($26) + ($30))|0;
  $32 = $6;
  $33 = ((($32)) + 2|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = $34&255;
  $36 = (($31) + ($35))|0;
  $37 = (+($36|0));
  $38 = $8;
  $39 = $37 * $38;
  $40 = $39 / 3.0;
  $41 = $5;
  HEAPF32[$41>>2] = $40;
 } else {
  $42 = (+($26|0));
  $43 = $8;
  $44 = $42 * $43;
  $45 = $5;
  HEAPF32[$45>>2] = $44;
  $46 = $6;
  $47 = ((($46)) + 1|0);
  $48 = HEAP8[$47>>0]|0;
  $49 = $48&255;
  $50 = (+($49|0));
  $51 = $8;
  $52 = $50 * $51;
  $53 = $5;
  $54 = ((($53)) + 4|0);
  HEAPF32[$54>>2] = $52;
  $55 = $6;
  $56 = ((($55)) + 2|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = $57&255;
  $59 = (+($58|0));
  $60 = $8;
  $61 = $59 * $60;
  $62 = $5;
  $63 = ((($62)) + 8|0);
  HEAPF32[$63>>2] = $61;
 }
 $64 = $7;
 $65 = ($64|0)==(2);
 if ($65) {
  $66 = $5;
  $67 = ((($66)) + 4|0);
  HEAPF32[$67>>2] = 1.0;
 }
 $68 = $7;
 $69 = ($68|0)==(4);
 if (!($69)) {
  STACKTOP = sp;return;
 }
 $70 = $5;
 $71 = ((($70)) + 12|0);
 HEAPF32[$71>>2] = 1.0;
 STACKTOP = sp;return;
}
function __ZL12stbi__at_eofP13stbi__context($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $2;
  $8 = ((($7)) + 16|0);
  $9 = ((($8)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $2;
  $12 = ((($11)) + 28|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_ii[$10 & 255]($13)|0);
  $15 = ($14|0)!=(0);
  if (!($15)) {
   $1 = 0;
   $28 = $1;
   STACKTOP = sp;return ($28|0);
  }
  $16 = $2;
  $17 = ((($16)) + 32|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(0);
  if ($19) {
   $1 = 1;
   $28 = $1;
   STACKTOP = sp;return ($28|0);
  }
 }
 $20 = $2;
 $21 = ((($20)) + 168|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $2;
 $24 = ((($23)) + 172|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($22>>>0)>=($25>>>0);
 $27 = $26&1;
 $1 = $27;
 $28 = $1;
 STACKTOP = sp;return ($28|0);
}
function __ZL19stbi__hdr_test_coreP13stbi__contextPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = 0;
 while(1) {
  $6 = $4;
  $7 = $5;
  $8 = (($6) + ($7)|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)!=(0);
  $11 = $3;
  if (!($10)) {
   label = 6;
   break;
  }
  $12 = (__ZL10stbi__get8P13stbi__context($11)|0);
  $13 = $12&255;
  $14 = $4;
  $15 = $5;
  $16 = (($14) + ($15)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17 << 24 >> 24;
  $19 = ($13|0)!=($18|0);
  if ($19) {
   label = 4;
   break;
  }
  $20 = $5;
  $21 = (($20) + 1)|0;
  $5 = $21;
 }
 if ((label|0) == 4) {
  $2 = 0;
  $22 = $2;
  STACKTOP = sp;return ($22|0);
 }
 else if ((label|0) == 6) {
  __ZL12stbi__rewindP13stbi__context($11);
  $2 = 1;
  $22 = $2;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function __ZL14stbi__pnm_infoP13stbi__contextPiS1_S1_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $10 = sp;
 $11 = sp + 30|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $14 = $6;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  $6 = $10;
 }
 $16 = $7;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  $7 = $10;
 }
 $18 = $8;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  $8 = $10;
 }
 $20 = $5;
 __ZL12stbi__rewindP13stbi__context($20);
 $21 = $5;
 $22 = (__ZL10stbi__get8P13stbi__context($21)|0);
 $12 = $22;
 $23 = $5;
 $24 = (__ZL10stbi__get8P13stbi__context($23)|0);
 $13 = $24;
 $25 = $12;
 $26 = $25 << 24 >> 24;
 $27 = ($26|0)!=(80);
 do {
  if (!($27)) {
   $28 = $13;
   $29 = $28 << 24 >> 24;
   $30 = ($29|0)!=(53);
   if ($30) {
    $31 = $13;
    $32 = $31 << 24 >> 24;
    $33 = ($32|0)!=(54);
    if ($33) {
     break;
    }
   }
   $35 = $13;
   $36 = $35 << 24 >> 24;
   $37 = ($36|0)==(54);
   $38 = $37 ? 3 : 1;
   $39 = $8;
   HEAP32[$39>>2] = $38;
   $40 = $5;
   $41 = (__ZL10stbi__get8P13stbi__context($40)|0);
   HEAP8[$11>>0] = $41;
   $42 = $5;
   __ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc($42,$11);
   $43 = $5;
   $44 = (__ZL20stbi__pnm_getintegerP13stbi__contextPc($43,$11)|0);
   $45 = $6;
   HEAP32[$45>>2] = $44;
   $46 = $5;
   __ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc($46,$11);
   $47 = $5;
   $48 = (__ZL20stbi__pnm_getintegerP13stbi__contextPc($47,$11)|0);
   $49 = $7;
   HEAP32[$49>>2] = $48;
   $50 = $5;
   __ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc($50,$11);
   $51 = $5;
   $52 = (__ZL20stbi__pnm_getintegerP13stbi__contextPc($51,$11)|0);
   $9 = $52;
   $53 = $9;
   $54 = ($53|0)>(255);
   if ($54) {
    $55 = (__ZL9stbi__errPKc(10034)|0);
    $4 = $55;
    $56 = $4;
    STACKTOP = sp;return ($56|0);
   } else {
    $4 = 1;
    $56 = $4;
    STACKTOP = sp;return ($56|0);
   }
  }
 } while(0);
 $34 = $5;
 __ZL12stbi__rewindP13stbi__context($34);
 $4 = 0;
 $56 = $4;
 STACKTOP = sp;return ($56|0);
}
function __ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 while(1) {
  while(1) {
   $4 = $2;
   $5 = (__ZL12stbi__at_eofP13stbi__context($4)|0);
   $6 = ($5|0)!=(0);
   if ($6) {
    $34 = 0;
   } else {
    $7 = $3;
    $8 = HEAP8[$7>>0]|0;
    $9 = (__ZL17stbi__pnm_isspacec($8)|0);
    $10 = ($9|0)!=(0);
    $34 = $10;
   }
   $11 = $2;
   if (!($34)) {
    break;
   }
   $12 = (__ZL10stbi__get8P13stbi__context($11)|0);
   $13 = $3;
   HEAP8[$13>>0] = $12;
  }
  $14 = (__ZL12stbi__at_eofP13stbi__context($11)|0);
  $15 = ($14|0)!=(0);
  if ($15) {
   label = 15;
   break;
  }
  $16 = $3;
  $17 = HEAP8[$16>>0]|0;
  $18 = $17 << 24 >> 24;
  $19 = ($18|0)!=(35);
  if ($19) {
   label = 15;
   break;
  }
  while(1) {
   $20 = $2;
   $21 = (__ZL12stbi__at_eofP13stbi__context($20)|0);
   $22 = ($21|0)!=(0);
   if ($22) {
    break;
   }
   $23 = $3;
   $24 = HEAP8[$23>>0]|0;
   $25 = $24 << 24 >> 24;
   $26 = ($25|0)!=(10);
   if (!($26)) {
    break;
   }
   $27 = $3;
   $28 = HEAP8[$27>>0]|0;
   $29 = $28 << 24 >> 24;
   $30 = ($29|0)!=(13);
   if (!($30)) {
    break;
   }
   $31 = $2;
   $32 = (__ZL10stbi__get8P13stbi__context($31)|0);
   $33 = $3;
   HEAP8[$33>>0] = $32;
  }
 }
 if ((label|0) == 15) {
  STACKTOP = sp;return;
 }
}
function __ZL20stbi__pnm_getintegerP13stbi__contextPc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 while(1) {
  $5 = $2;
  $6 = (__ZL12stbi__at_eofP13stbi__context($5)|0);
  $7 = ($6|0)!=(0);
  if ($7) {
   $22 = 0;
  } else {
   $8 = $3;
   $9 = HEAP8[$8>>0]|0;
   $10 = (__ZL17stbi__pnm_isdigitc($9)|0);
   $11 = ($10|0)!=(0);
   $22 = $11;
  }
  $12 = $4;
  if (!($22)) {
   break;
  }
  $13 = ($12*10)|0;
  $14 = $3;
  $15 = HEAP8[$14>>0]|0;
  $16 = $15 << 24 >> 24;
  $17 = (($16) - 48)|0;
  $18 = (($13) + ($17))|0;
  $4 = $18;
  $19 = $2;
  $20 = (__ZL10stbi__get8P13stbi__context($19)|0);
  $21 = $3;
  HEAP8[$21>>0] = $20;
 }
 STACKTOP = sp;return ($12|0);
}
function __ZL17stbi__pnm_isdigitc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 << 24 >> 24;
 $4 = ($3|0)>=(48);
 if ($4) {
  $5 = $1;
  $6 = $5 << 24 >> 24;
  $7 = ($6|0)<=(57);
  $9 = $7;
 } else {
  $9 = 0;
 }
 $8 = $9&1;
 STACKTOP = sp;return ($8|0);
}
function __ZL17stbi__pnm_isspacec($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 << 24 >> 24;
 $4 = ($3|0)==(32);
 if ($4) {
  $21 = 1;
 } else {
  $5 = $1;
  $6 = $5 << 24 >> 24;
  $7 = ($6|0)==(9);
  if ($7) {
   $21 = 1;
  } else {
   $8 = $1;
   $9 = $8 << 24 >> 24;
   $10 = ($9|0)==(10);
   if ($10) {
    $21 = 1;
   } else {
    $11 = $1;
    $12 = $11 << 24 >> 24;
    $13 = ($12|0)==(11);
    if ($13) {
     $21 = 1;
    } else {
     $14 = $1;
     $15 = $14 << 24 >> 24;
     $16 = ($15|0)==(12);
     if ($16) {
      $21 = 1;
     } else {
      $17 = $1;
      $18 = $17 << 24 >> 24;
      $19 = ($18|0)==(13);
      $21 = $19;
     }
    }
   }
  }
 }
 $20 = $21&1;
 STACKTOP = sp;return ($20|0);
}
function __ZL13stbi__get16beP13stbi__context($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (__ZL10stbi__get8P13stbi__context($3)|0);
 $5 = $4&255;
 $2 = $5;
 $6 = $2;
 $7 = $6 << 8;
 $8 = $1;
 $9 = (__ZL10stbi__get8P13stbi__context($8)|0);
 $10 = $9&255;
 $11 = (($7) + ($10))|0;
 STACKTOP = sp;return ($11|0);
}
function __ZL13stbi__get32beP13stbi__context($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (__ZL13stbi__get16beP13stbi__context($3)|0);
 $2 = $4;
 $5 = $2;
 $6 = $5 << 16;
 $7 = $1;
 $8 = (__ZL13stbi__get16beP13stbi__context($7)|0);
 $9 = (($6) + ($8))|0;
 STACKTOP = sp;return ($9|0);
}
function __ZL19stbi__pic_load_coreP13stbi__contextiiPiPh($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $15 = sp;
 $24 = sp + 116|0;
 $28 = sp + 112|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = 0;
 $12 = 0;
 while(1) {
  $29 = $12;
  $30 = ($29|0)==(10);
  if ($30) {
   label = 3;
   break;
  }
  $35 = $12;
  $36 = (($35) + 1)|0;
  $12 = $36;
  $37 = (($15) + (($35*3)|0)|0);
  $16 = $37;
  $38 = $6;
  $39 = (__ZL10stbi__get8P13stbi__context($38)|0);
  $40 = $39&255;
  $14 = $40;
  $41 = $6;
  $42 = (__ZL10stbi__get8P13stbi__context($41)|0);
  $43 = $16;
  HEAP8[$43>>0] = $42;
  $44 = $6;
  $45 = (__ZL10stbi__get8P13stbi__context($44)|0);
  $46 = $16;
  $47 = ((($46)) + 1|0);
  HEAP8[$47>>0] = $45;
  $48 = $6;
  $49 = (__ZL10stbi__get8P13stbi__context($48)|0);
  $50 = $16;
  $51 = ((($50)) + 2|0);
  HEAP8[$51>>0] = $49;
  $52 = $16;
  $53 = ((($52)) + 2|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54&255;
  $56 = $11;
  $57 = $56 | $55;
  $11 = $57;
  $58 = $6;
  $59 = (__ZL12stbi__at_eofP13stbi__context($58)|0);
  $60 = ($59|0)!=(0);
  if ($60) {
   label = 5;
   break;
  }
  $65 = $16;
  $66 = HEAP8[$65>>0]|0;
  $67 = $66&255;
  $68 = ($67|0)!=(8);
  if ($68) {
   label = 7;
   break;
  }
  $73 = $14;
  $74 = ($73|0)!=(0);
  if (!($74)) {
   label = 9;
   break;
  }
 }
 if ((label|0) == 3) {
  $31 = (__ZL9stbi__errPKc(9751)|0);
  $32 = ($31|0)!=(0);
  $33 = $32 ? 0 : 0;
  $34 = $33;
  $5 = $34;
  $237 = $5;
  STACKTOP = sp;return ($237|0);
 }
 else if ((label|0) == 5) {
  $61 = (__ZL9stbi__errPKc(10050)|0);
  $62 = ($61|0)!=(0);
  $63 = $62 ? 0 : 0;
  $64 = $63;
  $5 = $64;
  $237 = $5;
  STACKTOP = sp;return ($237|0);
 }
 else if ((label|0) == 7) {
  $69 = (__ZL9stbi__errPKc(9751)|0);
  $70 = ($69|0)!=(0);
  $71 = $70 ? 0 : 0;
  $72 = $71;
  $5 = $72;
  $237 = $5;
  STACKTOP = sp;return ($237|0);
 }
 else if ((label|0) == 9) {
  $75 = $11;
  $76 = $75 & 16;
  $77 = ($76|0)!=(0);
  $78 = $77 ? 4 : 3;
  $79 = $9;
  HEAP32[$79>>2] = $78;
  $13 = 0;
  L10: while(1) {
   $80 = $13;
   $81 = $8;
   $82 = ($80|0)<($81|0);
   if (!($82)) {
    label = 57;
    break;
   }
   $17 = 0;
   while(1) {
    $83 = $17;
    $84 = $12;
    $85 = ($83|0)<($84|0);
    if (!($85)) {
     break;
    }
    $86 = $17;
    $87 = (($15) + (($86*3)|0)|0);
    $18 = $87;
    $88 = $10;
    $89 = $13;
    $90 = $7;
    $91 = Math_imul($89, $90)|0;
    $92 = $91<<2;
    $93 = (($88) + ($92)|0);
    $19 = $93;
    $94 = $18;
    $95 = ((($94)) + 1|0);
    $96 = HEAP8[$95>>0]|0;
    $97 = $96&255;
    L16: do {
     switch ($97|0) {
     case 0:  {
      $20 = 0;
      while(1) {
       $102 = $20;
       $103 = $7;
       $104 = ($102|0)<($103|0);
       if (!($104)) {
        break L16;
       }
       $105 = $6;
       $106 = $18;
       $107 = ((($106)) + 2|0);
       $108 = HEAP8[$107>>0]|0;
       $109 = $108&255;
       $110 = $19;
       $111 = (__ZL13stbi__readvalP13stbi__contextiPh($105,$109,$110)|0);
       $112 = ($111|0)!=(0|0);
       if (!($112)) {
        label = 18;
        break L10;
       }
       $113 = $20;
       $114 = (($113) + 1)|0;
       $20 = $114;
       $115 = $19;
       $116 = ((($115)) + 4|0);
       $19 = $116;
      }
      break;
     }
     case 1:  {
      $117 = $7;
      $21 = $117;
      while(1) {
       $118 = $21;
       $119 = ($118|0)>(0);
       if (!($119)) {
        break L16;
       }
       $120 = $6;
       $121 = (__ZL10stbi__get8P13stbi__context($120)|0);
       $23 = $121;
       $122 = $6;
       $123 = (__ZL12stbi__at_eofP13stbi__context($122)|0);
       $124 = ($123|0)!=(0);
       if ($124) {
        label = 23;
        break L10;
       }
       $129 = $23;
       $130 = $129&255;
       $131 = $21;
       $132 = ($130|0)>($131|0);
       if ($132) {
        $133 = $21;
        $134 = $133&255;
        $23 = $134;
       }
       $135 = $6;
       $136 = $18;
       $137 = ((($136)) + 2|0);
       $138 = HEAP8[$137>>0]|0;
       $139 = $138&255;
       $140 = (__ZL13stbi__readvalP13stbi__contextiPh($135,$139,$24)|0);
       $141 = ($140|0)!=(0|0);
       if (!($141)) {
        label = 27;
        break L10;
       }
       $22 = 0;
       while(1) {
        $142 = $22;
        $143 = $23;
        $144 = $143&255;
        $145 = ($142|0)<($144|0);
        if (!($145)) {
         break;
        }
        $146 = $18;
        $147 = ((($146)) + 2|0);
        $148 = HEAP8[$147>>0]|0;
        $149 = $148&255;
        $150 = $19;
        __ZL13stbi__copyvaliPhPKh($149,$150,$24);
        $151 = $22;
        $152 = (($151) + 1)|0;
        $22 = $152;
        $153 = $19;
        $154 = ((($153)) + 4|0);
        $19 = $154;
       }
       $155 = $23;
       $156 = $155&255;
       $157 = $21;
       $158 = (($157) - ($156))|0;
       $21 = $158;
      }
      break;
     }
     case 2:  {
      $159 = $7;
      $25 = $159;
      while(1) {
       $160 = $25;
       $161 = ($160|0)>(0);
       if (!($161)) {
        break L16;
       }
       $162 = $6;
       $163 = (__ZL10stbi__get8P13stbi__context($162)|0);
       $164 = $163&255;
       $26 = $164;
       $165 = $6;
       $166 = (__ZL12stbi__at_eofP13stbi__context($165)|0);
       $167 = ($166|0)!=(0);
       if ($167) {
        label = 35;
        break L10;
       }
       $172 = $26;
       $173 = ($172|0)>=(128);
       $174 = $26;
       L40: do {
        if ($173) {
         $175 = ($174|0)==(128);
         if ($175) {
          $176 = $6;
          $177 = (__ZL13stbi__get16beP13stbi__context($176)|0);
          $26 = $177;
         } else {
          $178 = $26;
          $179 = (($178) - 127)|0;
          $26 = $179;
         }
         $180 = $26;
         $181 = $25;
         $182 = ($180|0)>($181|0);
         if ($182) {
          label = 41;
          break L10;
         }
         $187 = $6;
         $188 = $18;
         $189 = ((($188)) + 2|0);
         $190 = HEAP8[$189>>0]|0;
         $191 = $190&255;
         $192 = (__ZL13stbi__readvalP13stbi__contextiPh($187,$191,$28)|0);
         $193 = ($192|0)!=(0|0);
         if (!($193)) {
          label = 43;
          break L10;
         }
         $27 = 0;
         while(1) {
          $194 = $27;
          $195 = $26;
          $196 = ($194|0)<($195|0);
          if (!($196)) {
           break L40;
          }
          $197 = $18;
          $198 = ((($197)) + 2|0);
          $199 = HEAP8[$198>>0]|0;
          $200 = $199&255;
          $201 = $19;
          __ZL13stbi__copyvaliPhPKh($200,$201,$28);
          $202 = $27;
          $203 = (($202) + 1)|0;
          $27 = $203;
          $204 = $19;
          $205 = ((($204)) + 4|0);
          $19 = $205;
         }
        } else {
         $206 = (($174) + 1)|0;
         $26 = $206;
         $207 = $26;
         $208 = $25;
         $209 = ($207|0)>($208|0);
         if ($209) {
          label = 48;
          break L10;
         }
         $27 = 0;
         while(1) {
          $214 = $27;
          $215 = $26;
          $216 = ($214|0)<($215|0);
          if (!($216)) {
           break L40;
          }
          $217 = $6;
          $218 = $18;
          $219 = ((($218)) + 2|0);
          $220 = HEAP8[$219>>0]|0;
          $221 = $220&255;
          $222 = $19;
          $223 = (__ZL13stbi__readvalP13stbi__contextiPh($217,$221,$222)|0);
          $224 = ($223|0)!=(0|0);
          if (!($224)) {
           label = 52;
           break L10;
          }
          $225 = $27;
          $226 = (($225) + 1)|0;
          $27 = $226;
          $227 = $19;
          $228 = ((($227)) + 4|0);
          $19 = $228;
         }
        }
       } while(0);
       $229 = $26;
       $230 = $25;
       $231 = (($230) - ($229))|0;
       $25 = $231;
      }
      break;
     }
     default: {
      label = 14;
      break L10;
     }
     }
    } while(0);
    $232 = $17;
    $233 = (($232) + 1)|0;
    $17 = $233;
   }
   $234 = $13;
   $235 = (($234) + 1)|0;
   $13 = $235;
  }
  switch (label|0) {
   case 14: {
    $98 = (__ZL9stbi__errPKc(9751)|0);
    $99 = ($98|0)!=(0);
    $100 = $99 ? 0 : 0;
    $101 = $100;
    $5 = $101;
    $237 = $5;
    STACKTOP = sp;return ($237|0);
    break;
   }
   case 18: {
    $5 = 0;
    $237 = $5;
    STACKTOP = sp;return ($237|0);
    break;
   }
   case 23: {
    $125 = (__ZL9stbi__errPKc(10050)|0);
    $126 = ($125|0)!=(0);
    $127 = $126 ? 0 : 0;
    $128 = $127;
    $5 = $128;
    $237 = $5;
    STACKTOP = sp;return ($237|0);
    break;
   }
   case 27: {
    $5 = 0;
    $237 = $5;
    STACKTOP = sp;return ($237|0);
    break;
   }
   case 35: {
    $168 = (__ZL9stbi__errPKc(10050)|0);
    $169 = ($168|0)!=(0);
    $170 = $169 ? 0 : 0;
    $171 = $170;
    $5 = $171;
    $237 = $5;
    STACKTOP = sp;return ($237|0);
    break;
   }
   case 41: {
    $183 = (__ZL9stbi__errPKc(10050)|0);
    $184 = ($183|0)!=(0);
    $185 = $184 ? 0 : 0;
    $186 = $185;
    $5 = $186;
    $237 = $5;
    STACKTOP = sp;return ($237|0);
    break;
   }
   case 43: {
    $5 = 0;
    $237 = $5;
    STACKTOP = sp;return ($237|0);
    break;
   }
   case 48: {
    $210 = (__ZL9stbi__errPKc(10050)|0);
    $211 = ($210|0)!=(0);
    $212 = $211 ? 0 : 0;
    $213 = $212;
    $5 = $213;
    $237 = $5;
    STACKTOP = sp;return ($237|0);
    break;
   }
   case 52: {
    $5 = 0;
    $237 = $5;
    STACKTOP = sp;return ($237|0);
    break;
   }
   case 57: {
    $236 = $10;
    $5 = $236;
    $237 = $5;
    STACKTOP = sp;return ($237|0);
    break;
   }
  }
 }
 return (0)|0;
}
function __ZL13stbi__readvalP13stbi__contextiPh($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 128;
 $8 = 0;
 while(1) {
  $9 = $8;
  $10 = ($9|0)<(4);
  if (!($10)) {
   label = 8;
   break;
  }
  $11 = $5;
  $12 = $7;
  $13 = $11 & $12;
  $14 = ($13|0)!=(0);
  if ($14) {
   $15 = $4;
   $16 = (__ZL12stbi__at_eofP13stbi__context($15)|0);
   $17 = ($16|0)!=(0);
   if ($17) {
    label = 5;
    break;
   }
   $22 = $4;
   $23 = (__ZL10stbi__get8P13stbi__context($22)|0);
   $24 = $6;
   $25 = $8;
   $26 = (($24) + ($25)|0);
   HEAP8[$26>>0] = $23;
  }
  $27 = $8;
  $28 = (($27) + 1)|0;
  $8 = $28;
  $29 = $7;
  $30 = $29 >> 1;
  $7 = $30;
 }
 if ((label|0) == 5) {
  $18 = (__ZL9stbi__errPKc(10050)|0);
  $19 = ($18|0)!=(0);
  $20 = $19 ? 0 : 0;
  $21 = $20;
  $3 = $21;
  $32 = $3;
  STACKTOP = sp;return ($32|0);
 }
 else if ((label|0) == 8) {
  $31 = $6;
  $3 = $31;
  $32 = $3;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function __ZL13stbi__copyvaliPhPKh($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 128;
 $7 = 0;
 while(1) {
  $8 = $7;
  $9 = ($8|0)<(4);
  if (!($9)) {
   break;
  }
  $10 = $3;
  $11 = $6;
  $12 = $10 & $11;
  $13 = ($12|0)!=(0);
  if ($13) {
   $14 = $5;
   $15 = $7;
   $16 = (($14) + ($15)|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = $4;
   $19 = $7;
   $20 = (($18) + ($19)|0);
   HEAP8[$20>>0] = $17;
  }
  $21 = $7;
  $22 = (($21) + 1)|0;
  $7 = $22;
  $23 = $6;
  $24 = $23 >> 1;
  $6 = $24;
 }
 STACKTOP = sp;return;
}
function __ZL19stbi__pic_test_coreP13stbi__context($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = (__ZL13stbi__pic_is4P13stbi__contextPKc($4,10059)|0);
 $6 = ($5|0)!=(0);
 do {
  if ($6) {
   $3 = 0;
   while(1) {
    $7 = $3;
    $8 = ($7|0)<(84);
    $9 = $2;
    if (!($8)) {
     break;
    }
    (__ZL10stbi__get8P13stbi__context($9)|0);
    $10 = $3;
    $11 = (($10) + 1)|0;
    $3 = $11;
   }
   $12 = (__ZL13stbi__pic_is4P13stbi__contextPKc($9,10064)|0);
   $13 = ($12|0)!=(0);
   if ($13) {
    $1 = 1;
    break;
   } else {
    $1 = 0;
    break;
   }
  } else {
   $1 = 0;
  }
 } while(0);
 $14 = $1;
 STACKTOP = sp;return ($14|0);
}
function __ZL13stbi__pic_is4P13stbi__contextPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = 0;
 while(1) {
  $6 = $5;
  $7 = ($6|0)<(4);
  if (!($7)) {
   label = 6;
   break;
  }
  $8 = $3;
  $9 = (__ZL10stbi__get8P13stbi__context($8)|0);
  $10 = $9&255;
  $11 = $4;
  $12 = $5;
  $13 = (($11) + ($12)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = ($10|0)!=($15|0);
  if ($16) {
   label = 4;
   break;
  }
  $17 = $5;
  $18 = (($17) + 1)|0;
  $5 = $18;
 }
 if ((label|0) == 4) {
  $2 = 0;
  $19 = $2;
  STACKTOP = sp;return ($19|0);
 }
 else if ((label|0) == 6) {
  $2 = 1;
  $19 = $2;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function __ZL20stbi__psd_decode_rleP13stbi__contextPhi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 L1: while(1) {
  $11 = $6;
  $12 = $7;
  $13 = (($11) - ($12))|0;
  $8 = $13;
  $14 = ($13|0)>(0);
  if (!($14)) {
   label = 17;
   break;
  }
  $15 = $4;
  $16 = (__ZL10stbi__get8P13stbi__context($15)|0);
  $17 = $16&255;
  $9 = $17;
  $18 = $9;
  $19 = ($18|0)==(128);
  L4: do {
   if (!($19)) {
    $20 = $9;
    $21 = ($20|0)<(128);
    $22 = $9;
    if ($21) {
     $23 = (($22) + 1)|0;
     $9 = $23;
     $24 = $9;
     $25 = $8;
     $26 = ($24|0)>($25|0);
     if ($26) {
      label = 6;
      break L1;
     }
     $27 = $9;
     $28 = $7;
     $29 = (($28) + ($27))|0;
     $7 = $29;
     while(1) {
      $30 = $9;
      $31 = ($30|0)!=(0);
      if (!($31)) {
       break L4;
      }
      $32 = $4;
      $33 = (__ZL10stbi__get8P13stbi__context($32)|0);
      $34 = $5;
      HEAP8[$34>>0] = $33;
      $35 = $5;
      $36 = ((($35)) + 4|0);
      $5 = $36;
      $37 = $9;
      $38 = (($37) + -1)|0;
      $9 = $38;
     }
    }
    $39 = ($22|0)>(128);
    if ($39) {
     $40 = $9;
     $41 = (257 - ($40))|0;
     $9 = $41;
     $42 = $9;
     $43 = $8;
     $44 = ($42|0)>($43|0);
     if ($44) {
      label = 12;
      break L1;
     }
     $45 = $4;
     $46 = (__ZL10stbi__get8P13stbi__context($45)|0);
     $10 = $46;
     $47 = $9;
     $48 = $7;
     $49 = (($48) + ($47))|0;
     $7 = $49;
     while(1) {
      $50 = $9;
      $51 = ($50|0)!=(0);
      if (!($51)) {
       break L4;
      }
      $52 = $10;
      $53 = $5;
      HEAP8[$53>>0] = $52;
      $54 = $5;
      $55 = ((($54)) + 4|0);
      $5 = $55;
      $56 = $9;
      $57 = (($56) + -1)|0;
      $9 = $57;
     }
    }
   }
  } while(0);
 }
 if ((label|0) == 6) {
  $3 = 0;
  $58 = $3;
  STACKTOP = sp;return ($58|0);
 }
 else if ((label|0) == 12) {
  $3 = 0;
  $58 = $3;
  STACKTOP = sp;return ($58|0);
 }
 else if ((label|0) == 17) {
  $3 = 1;
  $58 = $3;
  STACKTOP = sp;return ($58|0);
 }
 return (0)|0;
}
function __ZL22stbi__convert_format16Ptiijj($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $16 = $8;
 $17 = $7;
 $18 = ($16|0)==($17|0);
 if ($18) {
  $19 = $6;
  $5 = $19;
  $312 = $5;
  STACKTOP = sp;return ($312|0);
 }
 $20 = $8;
 $21 = ($20|0)>=(1);
 $22 = $8;
 $23 = ($22|0)<=(4);
 $or$cond = $21 & $23;
 if (!($or$cond)) {
  ___assert_fail((9820|0),(9662|0),1721,(10168|0));
  // unreachable;
 }
 $24 = $8;
 $25 = $9;
 $26 = Math_imul($24, $25)|0;
 $27 = $10;
 $28 = Math_imul($26, $27)|0;
 $29 = $28<<1;
 $30 = (__ZL12stbi__mallocm($29)|0);
 $13 = $30;
 $31 = $13;
 $32 = ($31|0)==(0|0);
 if ($32) {
  $33 = $6;
  _free($33);
  $34 = (__ZL9stbi__errPKc(9723)|0);
  $35 = ($34|0)!=(0);
  $36 = $35 ? 0 : 0;
  $37 = $36;
  $5 = $37;
  $312 = $5;
  STACKTOP = sp;return ($312|0);
 }
 $12 = 0;
 L12: while(1) {
  $38 = $12;
  $39 = $10;
  $40 = ($38|0)<($39|0);
  $41 = $6;
  if (!($40)) {
   break;
  }
  $42 = $12;
  $43 = $9;
  $44 = Math_imul($42, $43)|0;
  $45 = $7;
  $46 = Math_imul($44, $45)|0;
  $47 = (($41) + ($46<<1)|0);
  $14 = $47;
  $48 = $13;
  $49 = $12;
  $50 = $9;
  $51 = Math_imul($49, $50)|0;
  $52 = $8;
  $53 = Math_imul($51, $52)|0;
  $54 = (($48) + ($53<<1)|0);
  $15 = $54;
  $55 = $7;
  $56 = $55<<3;
  $57 = $8;
  $58 = (($56) + ($57))|0;
  L15: do {
   switch ($58|0) {
   case 10:  {
    $59 = $9;
    $60 = (($59) - 1)|0;
    $11 = $60;
    while(1) {
     $61 = $11;
     $62 = ($61|0)>=(0);
     if (!($62)) {
      break L15;
     }
     $63 = $14;
     $64 = HEAP16[$63>>1]|0;
     $65 = $15;
     HEAP16[$65>>1] = $64;
     $66 = $15;
     $67 = ((($66)) + 2|0);
     HEAP16[$67>>1] = -1;
     $68 = $11;
     $69 = (($68) + -1)|0;
     $11 = $69;
     $70 = $14;
     $71 = ((($70)) + 2|0);
     $14 = $71;
     $72 = $15;
     $73 = ((($72)) + 4|0);
     $15 = $73;
    }
    break;
   }
   case 11:  {
    $74 = $9;
    $75 = (($74) - 1)|0;
    $11 = $75;
    while(1) {
     $76 = $11;
     $77 = ($76|0)>=(0);
     if (!($77)) {
      break L15;
     }
     $78 = $14;
     $79 = HEAP16[$78>>1]|0;
     $80 = $15;
     $81 = ((($80)) + 4|0);
     HEAP16[$81>>1] = $79;
     $82 = $15;
     $83 = ((($82)) + 2|0);
     HEAP16[$83>>1] = $79;
     $84 = $15;
     HEAP16[$84>>1] = $79;
     $85 = $11;
     $86 = (($85) + -1)|0;
     $11 = $86;
     $87 = $14;
     $88 = ((($87)) + 2|0);
     $14 = $88;
     $89 = $15;
     $90 = ((($89)) + 6|0);
     $15 = $90;
    }
    break;
   }
   case 12:  {
    $91 = $9;
    $92 = (($91) - 1)|0;
    $11 = $92;
    while(1) {
     $93 = $11;
     $94 = ($93|0)>=(0);
     if (!($94)) {
      break L15;
     }
     $95 = $14;
     $96 = HEAP16[$95>>1]|0;
     $97 = $15;
     $98 = ((($97)) + 4|0);
     HEAP16[$98>>1] = $96;
     $99 = $15;
     $100 = ((($99)) + 2|0);
     HEAP16[$100>>1] = $96;
     $101 = $15;
     HEAP16[$101>>1] = $96;
     $102 = $15;
     $103 = ((($102)) + 6|0);
     HEAP16[$103>>1] = -1;
     $104 = $11;
     $105 = (($104) + -1)|0;
     $11 = $105;
     $106 = $14;
     $107 = ((($106)) + 2|0);
     $14 = $107;
     $108 = $15;
     $109 = ((($108)) + 8|0);
     $15 = $109;
    }
    break;
   }
   case 17:  {
    $110 = $9;
    $111 = (($110) - 1)|0;
    $11 = $111;
    while(1) {
     $112 = $11;
     $113 = ($112|0)>=(0);
     if (!($113)) {
      break L15;
     }
     $114 = $14;
     $115 = HEAP16[$114>>1]|0;
     $116 = $15;
     HEAP16[$116>>1] = $115;
     $117 = $11;
     $118 = (($117) + -1)|0;
     $11 = $118;
     $119 = $14;
     $120 = ((($119)) + 4|0);
     $14 = $120;
     $121 = $15;
     $122 = ((($121)) + 2|0);
     $15 = $122;
    }
    break;
   }
   case 19:  {
    $123 = $9;
    $124 = (($123) - 1)|0;
    $11 = $124;
    while(1) {
     $125 = $11;
     $126 = ($125|0)>=(0);
     if (!($126)) {
      break L15;
     }
     $127 = $14;
     $128 = HEAP16[$127>>1]|0;
     $129 = $15;
     $130 = ((($129)) + 4|0);
     HEAP16[$130>>1] = $128;
     $131 = $15;
     $132 = ((($131)) + 2|0);
     HEAP16[$132>>1] = $128;
     $133 = $15;
     HEAP16[$133>>1] = $128;
     $134 = $11;
     $135 = (($134) + -1)|0;
     $11 = $135;
     $136 = $14;
     $137 = ((($136)) + 4|0);
     $14 = $137;
     $138 = $15;
     $139 = ((($138)) + 6|0);
     $15 = $139;
    }
    break;
   }
   case 20:  {
    $140 = $9;
    $141 = (($140) - 1)|0;
    $11 = $141;
    while(1) {
     $142 = $11;
     $143 = ($142|0)>=(0);
     if (!($143)) {
      break L15;
     }
     $144 = $14;
     $145 = HEAP16[$144>>1]|0;
     $146 = $15;
     $147 = ((($146)) + 4|0);
     HEAP16[$147>>1] = $145;
     $148 = $15;
     $149 = ((($148)) + 2|0);
     HEAP16[$149>>1] = $145;
     $150 = $15;
     HEAP16[$150>>1] = $145;
     $151 = $14;
     $152 = ((($151)) + 2|0);
     $153 = HEAP16[$152>>1]|0;
     $154 = $15;
     $155 = ((($154)) + 6|0);
     HEAP16[$155>>1] = $153;
     $156 = $11;
     $157 = (($156) + -1)|0;
     $11 = $157;
     $158 = $14;
     $159 = ((($158)) + 4|0);
     $14 = $159;
     $160 = $15;
     $161 = ((($160)) + 8|0);
     $15 = $161;
    }
    break;
   }
   case 28:  {
    $162 = $9;
    $163 = (($162) - 1)|0;
    $11 = $163;
    while(1) {
     $164 = $11;
     $165 = ($164|0)>=(0);
     if (!($165)) {
      break L15;
     }
     $166 = $14;
     $167 = HEAP16[$166>>1]|0;
     $168 = $15;
     HEAP16[$168>>1] = $167;
     $169 = $14;
     $170 = ((($169)) + 2|0);
     $171 = HEAP16[$170>>1]|0;
     $172 = $15;
     $173 = ((($172)) + 2|0);
     HEAP16[$173>>1] = $171;
     $174 = $14;
     $175 = ((($174)) + 4|0);
     $176 = HEAP16[$175>>1]|0;
     $177 = $15;
     $178 = ((($177)) + 4|0);
     HEAP16[$178>>1] = $176;
     $179 = $15;
     $180 = ((($179)) + 6|0);
     HEAP16[$180>>1] = -1;
     $181 = $11;
     $182 = (($181) + -1)|0;
     $11 = $182;
     $183 = $14;
     $184 = ((($183)) + 6|0);
     $14 = $184;
     $185 = $15;
     $186 = ((($185)) + 8|0);
     $15 = $186;
    }
    break;
   }
   case 25:  {
    $187 = $9;
    $188 = (($187) - 1)|0;
    $11 = $188;
    while(1) {
     $189 = $11;
     $190 = ($189|0)>=(0);
     if (!($190)) {
      break L15;
     }
     $191 = $14;
     $192 = HEAP16[$191>>1]|0;
     $193 = $192&65535;
     $194 = $14;
     $195 = ((($194)) + 2|0);
     $196 = HEAP16[$195>>1]|0;
     $197 = $196&65535;
     $198 = $14;
     $199 = ((($198)) + 4|0);
     $200 = HEAP16[$199>>1]|0;
     $201 = $200&65535;
     $202 = (__ZL18stbi__compute_y_16iii($193,$197,$201)|0);
     $203 = $15;
     HEAP16[$203>>1] = $202;
     $204 = $11;
     $205 = (($204) + -1)|0;
     $11 = $205;
     $206 = $14;
     $207 = ((($206)) + 6|0);
     $14 = $207;
     $208 = $15;
     $209 = ((($208)) + 2|0);
     $15 = $209;
    }
    break;
   }
   case 26:  {
    $210 = $9;
    $211 = (($210) - 1)|0;
    $11 = $211;
    while(1) {
     $212 = $11;
     $213 = ($212|0)>=(0);
     if (!($213)) {
      break L15;
     }
     $214 = $14;
     $215 = HEAP16[$214>>1]|0;
     $216 = $215&65535;
     $217 = $14;
     $218 = ((($217)) + 2|0);
     $219 = HEAP16[$218>>1]|0;
     $220 = $219&65535;
     $221 = $14;
     $222 = ((($221)) + 4|0);
     $223 = HEAP16[$222>>1]|0;
     $224 = $223&65535;
     $225 = (__ZL18stbi__compute_y_16iii($216,$220,$224)|0);
     $226 = $15;
     HEAP16[$226>>1] = $225;
     $227 = $15;
     $228 = ((($227)) + 2|0);
     HEAP16[$228>>1] = -1;
     $229 = $11;
     $230 = (($229) + -1)|0;
     $11 = $230;
     $231 = $14;
     $232 = ((($231)) + 6|0);
     $14 = $232;
     $233 = $15;
     $234 = ((($233)) + 4|0);
     $15 = $234;
    }
    break;
   }
   case 33:  {
    $235 = $9;
    $236 = (($235) - 1)|0;
    $11 = $236;
    while(1) {
     $237 = $11;
     $238 = ($237|0)>=(0);
     if (!($238)) {
      break L15;
     }
     $239 = $14;
     $240 = HEAP16[$239>>1]|0;
     $241 = $240&65535;
     $242 = $14;
     $243 = ((($242)) + 2|0);
     $244 = HEAP16[$243>>1]|0;
     $245 = $244&65535;
     $246 = $14;
     $247 = ((($246)) + 4|0);
     $248 = HEAP16[$247>>1]|0;
     $249 = $248&65535;
     $250 = (__ZL18stbi__compute_y_16iii($241,$245,$249)|0);
     $251 = $15;
     HEAP16[$251>>1] = $250;
     $252 = $11;
     $253 = (($252) + -1)|0;
     $11 = $253;
     $254 = $14;
     $255 = ((($254)) + 8|0);
     $14 = $255;
     $256 = $15;
     $257 = ((($256)) + 2|0);
     $15 = $257;
    }
    break;
   }
   case 34:  {
    $258 = $9;
    $259 = (($258) - 1)|0;
    $11 = $259;
    while(1) {
     $260 = $11;
     $261 = ($260|0)>=(0);
     if (!($261)) {
      break L15;
     }
     $262 = $14;
     $263 = HEAP16[$262>>1]|0;
     $264 = $263&65535;
     $265 = $14;
     $266 = ((($265)) + 2|0);
     $267 = HEAP16[$266>>1]|0;
     $268 = $267&65535;
     $269 = $14;
     $270 = ((($269)) + 4|0);
     $271 = HEAP16[$270>>1]|0;
     $272 = $271&65535;
     $273 = (__ZL18stbi__compute_y_16iii($264,$268,$272)|0);
     $274 = $15;
     HEAP16[$274>>1] = $273;
     $275 = $14;
     $276 = ((($275)) + 6|0);
     $277 = HEAP16[$276>>1]|0;
     $278 = $15;
     $279 = ((($278)) + 2|0);
     HEAP16[$279>>1] = $277;
     $280 = $11;
     $281 = (($280) + -1)|0;
     $11 = $281;
     $282 = $14;
     $283 = ((($282)) + 8|0);
     $14 = $283;
     $284 = $15;
     $285 = ((($284)) + 4|0);
     $15 = $285;
    }
    break;
   }
   case 35:  {
    $286 = $9;
    $287 = (($286) - 1)|0;
    $11 = $287;
    while(1) {
     $288 = $11;
     $289 = ($288|0)>=(0);
     if (!($289)) {
      break L15;
     }
     $290 = $14;
     $291 = HEAP16[$290>>1]|0;
     $292 = $15;
     HEAP16[$292>>1] = $291;
     $293 = $14;
     $294 = ((($293)) + 2|0);
     $295 = HEAP16[$294>>1]|0;
     $296 = $15;
     $297 = ((($296)) + 2|0);
     HEAP16[$297>>1] = $295;
     $298 = $14;
     $299 = ((($298)) + 4|0);
     $300 = HEAP16[$299>>1]|0;
     $301 = $15;
     $302 = ((($301)) + 4|0);
     HEAP16[$302>>1] = $300;
     $303 = $11;
     $304 = (($303) + -1)|0;
     $11 = $304;
     $305 = $14;
     $306 = ((($305)) + 8|0);
     $14 = $306;
     $307 = $15;
     $308 = ((($307)) + 6|0);
     $15 = $308;
    }
    break;
   }
   default: {
    label = 46;
    break L12;
   }
   }
  } while(0);
  $309 = $12;
  $310 = (($309) + 1)|0;
  $12 = $310;
 }
 if ((label|0) == 46) {
  ___assert_fail((9872|0),(9662|0),1766,(10168|0));
  // unreachable;
 }
 _free($41);
 $311 = $13;
 $5 = $311;
 $312 = $5;
 STACKTOP = sp;return ($312|0);
}
function __ZL18stbi__compute_y_16iii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ($6*77)|0;
 $8 = $4;
 $9 = ($8*150)|0;
 $10 = (($7) + ($9))|0;
 $11 = $5;
 $12 = ($11*29)|0;
 $13 = (($10) + ($12))|0;
 $14 = $13 >> 8;
 $15 = $14&65535;
 STACKTOP = sp;return ($15|0);
}
function __ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPiiPh($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $12 = 0;
 $23 = $7;
 $24 = ((($23)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(0|0);
 do {
  if ($26) {
   $27 = $6;
   $28 = $7;
   $29 = $8;
   $30 = (__ZL16stbi__gif_headerP13stbi__contextP9stbi__gifPii($27,$28,$29,0)|0);
   $31 = ($30|0)!=(0);
   if (!($31)) {
    $5 = 0;
    $438 = $5;
    STACKTOP = sp;return ($438|0);
   }
   $32 = $7;
   $33 = HEAP32[$32>>2]|0;
   $34 = $7;
   $35 = ((($34)) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (__ZL21stbi__mad3sizes_validiiii(4,$33,$36,0)|0);
   $38 = ($37|0)!=(0);
   if (!($38)) {
    $39 = (__ZL9stbi__errPKc(9762)|0);
    $40 = ($39|0)!=(0);
    $41 = $40 ? 0 : 0;
    $42 = $41;
    $5 = $42;
    $438 = $5;
    STACKTOP = sp;return ($438|0);
   }
   $43 = $7;
   $44 = HEAP32[$43>>2]|0;
   $45 = $7;
   $46 = ((($45)) + 4|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = Math_imul($44, $47)|0;
   $14 = $48;
   $49 = $14;
   $50 = $49<<2;
   $51 = (__ZL12stbi__mallocm($50)|0);
   $52 = $7;
   $53 = ((($52)) + 8|0);
   HEAP32[$53>>2] = $51;
   $54 = $14;
   $55 = $54<<2;
   $56 = (__ZL12stbi__mallocm($55)|0);
   $57 = $7;
   $58 = ((($57)) + 12|0);
   HEAP32[$58>>2] = $56;
   $59 = $14;
   $60 = (__ZL12stbi__mallocm($59)|0);
   $61 = $7;
   $62 = ((($61)) + 16|0);
   HEAP32[$62>>2] = $60;
   $63 = $7;
   $64 = ((($63)) + 8|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ($65|0)!=(0|0);
   if ($66) {
    $67 = $7;
    $68 = ((($67)) + 12|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ($69|0)!=(0|0);
    if ($70) {
     $71 = $7;
     $72 = ((($71)) + 16|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($73|0)!=(0|0);
     if ($74) {
      $79 = $7;
      $80 = ((($79)) + 8|0);
      $81 = HEAP32[$80>>2]|0;
      $82 = $14;
      $83 = $82<<2;
      _memset(($81|0),0,($83|0))|0;
      $84 = $7;
      $85 = ((($84)) + 12|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = $14;
      $88 = $87<<2;
      _memset(($86|0),0,($88|0))|0;
      $89 = $7;
      $90 = ((($89)) + 16|0);
      $91 = HEAP32[$90>>2]|0;
      $92 = $14;
      _memset(($91|0),0,($92|0))|0;
      $12 = 1;
      break;
     }
    }
   }
   $75 = (__ZL9stbi__errPKc(9723)|0);
   $76 = ($75|0)!=(0);
   $77 = $76 ? 0 : 0;
   $78 = $77;
   $5 = $78;
   $438 = $5;
   STACKTOP = sp;return ($438|0);
  } else {
   $93 = $7;
   $94 = ((($93)) + 36|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $95 & 28;
   $97 = $96 >> 2;
   $11 = $97;
   $98 = $7;
   $99 = HEAP32[$98>>2]|0;
   $100 = $7;
   $101 = ((($100)) + 4|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = Math_imul($99, $102)|0;
   $14 = $103;
   $104 = $11;
   $105 = ($104|0)==(3);
   $106 = $10;
   $107 = ($106|0)==(0|0);
   $or$cond = $105 & $107;
   if ($or$cond) {
    $11 = 2;
   }
   $108 = $11;
   $109 = ($108|0)==(3);
   L21: do {
    if ($109) {
     $13 = 0;
     while(1) {
      $110 = $13;
      $111 = $14;
      $112 = ($110|0)<($111|0);
      if (!($112)) {
       break L21;
      }
      $113 = $7;
      $114 = ((($113)) + 16|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = $13;
      $117 = (($115) + ($116)|0);
      $118 = HEAP8[$117>>0]|0;
      $119 = ($118<<24>>24)!=(0);
      if ($119) {
       $120 = $7;
       $121 = ((($120)) + 8|0);
       $122 = HEAP32[$121>>2]|0;
       $123 = $13;
       $124 = $123<<2;
       $125 = (($122) + ($124)|0);
       $126 = $10;
       $127 = $13;
       $128 = $127<<2;
       $129 = (($126) + ($128)|0);
       ;HEAP8[$125>>0]=HEAP8[$129>>0]|0;HEAP8[$125+1>>0]=HEAP8[$129+1>>0]|0;HEAP8[$125+2>>0]=HEAP8[$129+2>>0]|0;HEAP8[$125+3>>0]=HEAP8[$129+3>>0]|0;
      }
      $130 = $13;
      $131 = (($130) + 1)|0;
      $13 = $131;
     }
    } else {
     $132 = $11;
     $133 = ($132|0)==(2);
     if ($133) {
      $13 = 0;
      while(1) {
       $134 = $13;
       $135 = $14;
       $136 = ($134|0)<($135|0);
       if (!($136)) {
        break L21;
       }
       $137 = $7;
       $138 = ((($137)) + 16|0);
       $139 = HEAP32[$138>>2]|0;
       $140 = $13;
       $141 = (($139) + ($140)|0);
       $142 = HEAP8[$141>>0]|0;
       $143 = ($142<<24>>24)!=(0);
       if ($143) {
        $144 = $7;
        $145 = ((($144)) + 8|0);
        $146 = HEAP32[$145>>2]|0;
        $147 = $13;
        $148 = $147<<2;
        $149 = (($146) + ($148)|0);
        $150 = $7;
        $151 = ((($150)) + 12|0);
        $152 = HEAP32[$151>>2]|0;
        $153 = $13;
        $154 = $153<<2;
        $155 = (($152) + ($154)|0);
        ;HEAP8[$149>>0]=HEAP8[$155>>0]|0;HEAP8[$149+1>>0]=HEAP8[$155+1>>0]|0;HEAP8[$149+2>>0]=HEAP8[$155+2>>0]|0;HEAP8[$149+3>>0]=HEAP8[$155+3>>0]|0;
       }
       $156 = $13;
       $157 = (($156) + 1)|0;
       $13 = $157;
      }
     }
    }
   } while(0);
   $158 = $7;
   $159 = ((($158)) + 12|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = $7;
   $162 = ((($161)) + 8|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = $7;
   $165 = HEAP32[$164>>2]|0;
   $166 = $165<<2;
   $167 = $7;
   $168 = ((($167)) + 4|0);
   $169 = HEAP32[$168>>2]|0;
   $170 = Math_imul($166, $169)|0;
   _memcpy(($160|0),($163|0),($170|0))|0;
  }
 } while(0);
 $171 = $7;
 $172 = ((($171)) + 16|0);
 $173 = HEAP32[$172>>2]|0;
 $174 = $7;
 $175 = HEAP32[$174>>2]|0;
 $176 = $7;
 $177 = ((($176)) + 4|0);
 $178 = HEAP32[$177>>2]|0;
 $179 = Math_imul($175, $178)|0;
 _memset(($173|0),0,($179|0))|0;
 L39: while(1) {
  $180 = $6;
  $181 = (__ZL10stbi__get8P13stbi__context($180)|0);
  $182 = $181&255;
  $15 = $182;
  $183 = $15;
  switch ($183|0) {
  case 44:  {
   label = 28;
   break L39;
   break;
  }
  case 59:  {
   label = 65;
   break L39;
   break;
  }
  case 33:  {
   break;
  }
  default: {
   label = 66;
   break L39;
  }
  }
  $372 = $6;
  $373 = (__ZL10stbi__get8P13stbi__context($372)|0);
  $374 = $373&255;
  $22 = $374;
  $375 = $22;
  $376 = ($375|0)==(249);
  do {
   if ($376) {
    $377 = $6;
    $378 = (__ZL10stbi__get8P13stbi__context($377)|0);
    $379 = $378&255;
    $21 = $379;
    $380 = $21;
    $381 = ($380|0)==(4);
    $382 = $6;
    if (!($381)) {
     $426 = $21;
     __ZL10stbi__skipP13stbi__contexti($382,$426);
     break;
    }
    $383 = (__ZL10stbi__get8P13stbi__context($382)|0);
    $384 = $383&255;
    $385 = $7;
    $386 = ((($385)) + 36|0);
    HEAP32[$386>>2] = $384;
    $387 = $6;
    $388 = (__ZL13stbi__get16leP13stbi__context($387)|0);
    $389 = ($388*10)|0;
    $390 = $7;
    $391 = ((($390)) + 34900|0);
    HEAP32[$391>>2] = $389;
    $392 = $7;
    $393 = ((($392)) + 32|0);
    $394 = HEAP32[$393>>2]|0;
    $395 = ($394|0)>=(0);
    if ($395) {
     $396 = $7;
     $397 = ((($396)) + 40|0);
     $398 = $7;
     $399 = ((($398)) + 32|0);
     $400 = HEAP32[$399>>2]|0;
     $401 = (($397) + ($400<<2)|0);
     $402 = ((($401)) + 3|0);
     HEAP8[$402>>0] = -1;
    }
    $403 = $7;
    $404 = ((($403)) + 36|0);
    $405 = HEAP32[$404>>2]|0;
    $406 = $405 & 1;
    $407 = ($406|0)!=(0);
    $408 = $6;
    if (!($407)) {
     __ZL10stbi__skipP13stbi__contexti($408,1);
     $424 = $7;
     $425 = ((($424)) + 32|0);
     HEAP32[$425>>2] = -1;
     label = 62;
     break;
    }
    $409 = (__ZL10stbi__get8P13stbi__context($408)|0);
    $410 = $409&255;
    $411 = $7;
    $412 = ((($411)) + 32|0);
    HEAP32[$412>>2] = $410;
    $413 = $7;
    $414 = ((($413)) + 32|0);
    $415 = HEAP32[$414>>2]|0;
    $416 = ($415|0)>=(0);
    if ($416) {
     $417 = $7;
     $418 = ((($417)) + 40|0);
     $419 = $7;
     $420 = ((($419)) + 32|0);
     $421 = HEAP32[$420>>2]|0;
     $422 = (($418) + ($421<<2)|0);
     $423 = ((($422)) + 3|0);
     HEAP8[$423>>0] = 0;
     label = 62;
    } else {
     label = 62;
    }
   } else {
    label = 62;
   }
  } while(0);
  L54: do {
   if ((label|0) == 62) {
    label = 0;
    while(1) {
     $427 = $6;
     $428 = (__ZL10stbi__get8P13stbi__context($427)|0);
     $429 = $428&255;
     $21 = $429;
     $430 = ($429|0)!=(0);
     if (!($430)) {
      break L54;
     }
     $431 = $6;
     $432 = $21;
     __ZL10stbi__skipP13stbi__contexti($431,$432);
    }
   }
  } while(0);
 }
 if ((label|0) == 28) {
  $184 = $6;
  $185 = (__ZL13stbi__get16leP13stbi__context($184)|0);
  $16 = $185;
  $186 = $6;
  $187 = (__ZL13stbi__get16leP13stbi__context($186)|0);
  $17 = $187;
  $188 = $6;
  $189 = (__ZL13stbi__get16leP13stbi__context($188)|0);
  $18 = $189;
  $190 = $6;
  $191 = (__ZL13stbi__get16leP13stbi__context($190)|0);
  $19 = $191;
  $192 = $16;
  $193 = $18;
  $194 = (($192) + ($193))|0;
  $195 = $7;
  $196 = HEAP32[$195>>2]|0;
  $197 = ($194|0)>($196|0);
  if (!($197)) {
   $198 = $17;
   $199 = $19;
   $200 = (($198) + ($199))|0;
   $201 = $7;
   $202 = ((($201)) + 4|0);
   $203 = HEAP32[$202>>2]|0;
   $204 = ($200|0)>($203|0);
   if (!($204)) {
    $209 = $7;
    $210 = HEAP32[$209>>2]|0;
    $211 = $210<<2;
    $212 = $7;
    $213 = ((($212)) + 34896|0);
    HEAP32[$213>>2] = $211;
    $214 = $16;
    $215 = $214<<2;
    $216 = $7;
    $217 = ((($216)) + 34872|0);
    HEAP32[$217>>2] = $215;
    $218 = $17;
    $219 = $7;
    $220 = ((($219)) + 34896|0);
    $221 = HEAP32[$220>>2]|0;
    $222 = Math_imul($218, $221)|0;
    $223 = $7;
    $224 = ((($223)) + 34876|0);
    HEAP32[$224>>2] = $222;
    $225 = $7;
    $226 = ((($225)) + 34872|0);
    $227 = HEAP32[$226>>2]|0;
    $228 = $18;
    $229 = $228<<2;
    $230 = (($227) + ($229))|0;
    $231 = $7;
    $232 = ((($231)) + 34880|0);
    HEAP32[$232>>2] = $230;
    $233 = $7;
    $234 = ((($233)) + 34876|0);
    $235 = HEAP32[$234>>2]|0;
    $236 = $19;
    $237 = $7;
    $238 = ((($237)) + 34896|0);
    $239 = HEAP32[$238>>2]|0;
    $240 = Math_imul($236, $239)|0;
    $241 = (($235) + ($240))|0;
    $242 = $7;
    $243 = ((($242)) + 34884|0);
    HEAP32[$243>>2] = $241;
    $244 = $7;
    $245 = ((($244)) + 34872|0);
    $246 = HEAP32[$245>>2]|0;
    $247 = $7;
    $248 = ((($247)) + 34888|0);
    HEAP32[$248>>2] = $246;
    $249 = $7;
    $250 = ((($249)) + 34876|0);
    $251 = HEAP32[$250>>2]|0;
    $252 = $7;
    $253 = ((($252)) + 34892|0);
    HEAP32[$253>>2] = $251;
    $254 = $18;
    $255 = ($254|0)==(0);
    if ($255) {
     $256 = $7;
     $257 = ((($256)) + 34884|0);
     $258 = HEAP32[$257>>2]|0;
     $259 = $7;
     $260 = ((($259)) + 34892|0);
     HEAP32[$260>>2] = $258;
    }
    $261 = $6;
    $262 = (__ZL10stbi__get8P13stbi__context($261)|0);
    $263 = $262&255;
    $264 = $7;
    $265 = ((($264)) + 34868|0);
    HEAP32[$265>>2] = $263;
    $266 = $7;
    $267 = ((($266)) + 34868|0);
    $268 = HEAP32[$267>>2]|0;
    $269 = $268 & 64;
    $270 = ($269|0)!=(0);
    $271 = $7;
    $272 = ((($271)) + 34896|0);
    $273 = HEAP32[$272>>2]|0;
    if ($270) {
     $274 = $273<<3;
     $275 = $7;
     $276 = ((($275)) + 34864|0);
     HEAP32[$276>>2] = $274;
     $277 = $7;
     $278 = ((($277)) + 34860|0);
     HEAP32[$278>>2] = 3;
    } else {
     $279 = $7;
     $280 = ((($279)) + 34864|0);
     HEAP32[$280>>2] = $273;
     $281 = $7;
     $282 = ((($281)) + 34860|0);
     HEAP32[$282>>2] = 0;
    }
    $283 = $7;
    $284 = ((($283)) + 34868|0);
    $285 = HEAP32[$284>>2]|0;
    $286 = $285 & 128;
    $287 = ($286|0)!=(0);
    do {
     if ($287) {
      $288 = $6;
      $289 = $7;
      $290 = ((($289)) + 1064|0);
      $291 = $7;
      $292 = ((($291)) + 34868|0);
      $293 = HEAP32[$292>>2]|0;
      $294 = $293 & 7;
      $295 = 2 << $294;
      $296 = $7;
      $297 = ((($296)) + 36|0);
      $298 = HEAP32[$297>>2]|0;
      $299 = $298 & 1;
      $300 = ($299|0)!=(0);
      if ($300) {
       $301 = $7;
       $302 = ((($301)) + 32|0);
       $303 = HEAP32[$302>>2]|0;
       $304 = $303;
      } else {
       $304 = -1;
      }
      __ZL26stbi__gif_parse_colortableP13stbi__contextPA4_hii($288,$290,$295,$304);
      $305 = $7;
      $306 = ((($305)) + 1064|0);
      $307 = $7;
      $308 = ((($307)) + 34856|0);
      HEAP32[$308>>2] = $306;
     } else {
      $309 = $7;
      $310 = ((($309)) + 20|0);
      $311 = HEAP32[$310>>2]|0;
      $312 = $311 & 128;
      $313 = ($312|0)!=(0);
      if ($313) {
       $314 = $7;
       $315 = ((($314)) + 40|0);
       $316 = $7;
       $317 = ((($316)) + 34856|0);
       HEAP32[$317>>2] = $315;
       break;
      }
      $318 = (__ZL9stbi__errPKc(10212)|0);
      $319 = ($318|0)!=(0);
      $320 = $319 ? 0 : 0;
      $321 = $320;
      $5 = $321;
      $438 = $5;
      STACKTOP = sp;return ($438|0);
     }
    } while(0);
    $322 = $6;
    $323 = $7;
    $324 = (__ZL24stbi__process_gif_rasterP13stbi__contextP9stbi__gif($322,$323)|0);
    $20 = $324;
    $325 = $20;
    $326 = ($325|0)!=(0|0);
    if (!($326)) {
     $5 = 0;
     $438 = $5;
     STACKTOP = sp;return ($438|0);
    }
    $327 = $7;
    $328 = HEAP32[$327>>2]|0;
    $329 = $7;
    $330 = ((($329)) + 4|0);
    $331 = HEAP32[$330>>2]|0;
    $332 = Math_imul($328, $331)|0;
    $14 = $332;
    $333 = $12;
    $334 = ($333|0)!=(0);
    L89: do {
     if ($334) {
      $335 = $7;
      $336 = ((($335)) + 24|0);
      $337 = HEAP32[$336>>2]|0;
      $338 = ($337|0)>(0);
      if ($338) {
       $13 = 0;
       while(1) {
        $339 = $13;
        $340 = $14;
        $341 = ($339|0)<($340|0);
        if (!($341)) {
         break L89;
        }
        $342 = $7;
        $343 = ((($342)) + 16|0);
        $344 = HEAP32[$343>>2]|0;
        $345 = $13;
        $346 = (($344) + ($345)|0);
        $347 = HEAP8[$346>>0]|0;
        $348 = $347&255;
        $349 = ($348|0)==(0);
        if ($349) {
         $350 = $7;
         $351 = ((($350)) + 40|0);
         $352 = $7;
         $353 = ((($352)) + 24|0);
         $354 = HEAP32[$353>>2]|0;
         $355 = (($351) + ($354<<2)|0);
         $356 = ((($355)) + 3|0);
         HEAP8[$356>>0] = -1;
         $357 = $7;
         $358 = ((($357)) + 8|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = $13;
         $361 = $360<<2;
         $362 = (($359) + ($361)|0);
         $363 = $7;
         $364 = ((($363)) + 40|0);
         $365 = $7;
         $366 = ((($365)) + 24|0);
         $367 = HEAP32[$366>>2]|0;
         $368 = (($364) + ($367<<2)|0);
         ;HEAP8[$362>>0]=HEAP8[$368>>0]|0;HEAP8[$362+1>>0]=HEAP8[$368+1>>0]|0;HEAP8[$362+2>>0]=HEAP8[$368+2>>0]|0;HEAP8[$362+3>>0]=HEAP8[$368+3>>0]|0;
        }
        $369 = $13;
        $370 = (($369) + 1)|0;
        $13 = $370;
       }
      }
     }
    } while(0);
    $371 = $20;
    $5 = $371;
    $438 = $5;
    STACKTOP = sp;return ($438|0);
   }
  }
  $205 = (__ZL9stbi__errPKc(10191)|0);
  $206 = ($205|0)!=(0);
  $207 = $206 ? 0 : 0;
  $208 = $207;
  $5 = $208;
  $438 = $5;
  STACKTOP = sp;return ($438|0);
 }
 else if ((label|0) == 65) {
  $433 = $6;
  $5 = $433;
  $438 = $5;
  STACKTOP = sp;return ($438|0);
 }
 else if ((label|0) == 66) {
  $434 = (__ZL9stbi__errPKc(10232)|0);
  $435 = ($434|0)!=(0);
  $436 = $435 ? 0 : 0;
  $437 = $436;
  $5 = $437;
  $438 = $5;
  STACKTOP = sp;return ($438|0);
 }
 return (0)|0;
}
function __ZL16stbi__gif_headerP13stbi__contextP9stbi__gifPii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $5;
 $11 = (__ZL10stbi__get8P13stbi__context($10)|0);
 $12 = $11&255;
 $13 = ($12|0)!=(71);
 if (!($13)) {
  $14 = $5;
  $15 = (__ZL10stbi__get8P13stbi__context($14)|0);
  $16 = $15&255;
  $17 = ($16|0)!=(73);
  if (!($17)) {
   $18 = $5;
   $19 = (__ZL10stbi__get8P13stbi__context($18)|0);
   $20 = $19&255;
   $21 = ($20|0)!=(70);
   if (!($21)) {
    $22 = $5;
    $23 = (__ZL10stbi__get8P13stbi__context($22)|0);
    $24 = $23&255;
    $25 = ($24|0)!=(56);
    if (!($25)) {
     $27 = $5;
     $28 = (__ZL10stbi__get8P13stbi__context($27)|0);
     $9 = $28;
     $29 = $9;
     $30 = $29&255;
     $31 = ($30|0)!=(55);
     if ($31) {
      $32 = $9;
      $33 = $32&255;
      $34 = ($33|0)!=(57);
      if ($34) {
       $35 = (__ZL9stbi__errPKc(10297)|0);
       $4 = $35;
       $83 = $4;
       STACKTOP = sp;return ($83|0);
      }
     }
     $36 = $5;
     $37 = (__ZL10stbi__get8P13stbi__context($36)|0);
     $38 = $37&255;
     $39 = ($38|0)!=(97);
     if ($39) {
      $40 = (__ZL9stbi__errPKc(10297)|0);
      $4 = $40;
      $83 = $4;
      STACKTOP = sp;return ($83|0);
     }
     $41 = $5;
     $42 = (__ZL13stbi__get16leP13stbi__context($41)|0);
     $43 = $6;
     HEAP32[$43>>2] = $42;
     $44 = $5;
     $45 = (__ZL13stbi__get16leP13stbi__context($44)|0);
     $46 = $6;
     $47 = ((($46)) + 4|0);
     HEAP32[$47>>2] = $45;
     $48 = $5;
     $49 = (__ZL10stbi__get8P13stbi__context($48)|0);
     $50 = $49&255;
     $51 = $6;
     $52 = ((($51)) + 20|0);
     HEAP32[$52>>2] = $50;
     $53 = $5;
     $54 = (__ZL10stbi__get8P13stbi__context($53)|0);
     $55 = $54&255;
     $56 = $6;
     $57 = ((($56)) + 24|0);
     HEAP32[$57>>2] = $55;
     $58 = $5;
     $59 = (__ZL10stbi__get8P13stbi__context($58)|0);
     $60 = $59&255;
     $61 = $6;
     $62 = ((($61)) + 28|0);
     HEAP32[$62>>2] = $60;
     $63 = $6;
     $64 = ((($63)) + 32|0);
     HEAP32[$64>>2] = -1;
     $65 = $7;
     $66 = ($65|0)!=(0|0);
     if ($66) {
      $67 = $7;
      HEAP32[$67>>2] = 4;
     }
     $68 = $8;
     $69 = ($68|0)!=(0);
     if ($69) {
      $4 = 1;
      $83 = $4;
      STACKTOP = sp;return ($83|0);
     }
     $70 = $6;
     $71 = ((($70)) + 20|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = $72 & 128;
     $74 = ($73|0)!=(0);
     if ($74) {
      $75 = $5;
      $76 = $6;
      $77 = ((($76)) + 40|0);
      $78 = $6;
      $79 = ((($78)) + 20|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = $80 & 7;
      $82 = 2 << $81;
      __ZL26stbi__gif_parse_colortableP13stbi__contextPA4_hii($75,$77,$82,-1);
     }
     $4 = 1;
     $83 = $4;
     STACKTOP = sp;return ($83|0);
    }
   }
  }
 }
 $26 = (__ZL9stbi__errPKc(10297)|0);
 $4 = $26;
 $83 = $4;
 STACKTOP = sp;return ($83|0);
}
function __ZL26stbi__gif_parse_colortableP13stbi__contextPA4_hii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 0;
 while(1) {
  $9 = $8;
  $10 = $6;
  $11 = ($9|0)<($10|0);
  if (!($11)) {
   break;
  }
  $12 = $4;
  $13 = (__ZL10stbi__get8P13stbi__context($12)|0);
  $14 = $5;
  $15 = $8;
  $16 = (($14) + ($15<<2)|0);
  $17 = ((($16)) + 2|0);
  HEAP8[$17>>0] = $13;
  $18 = $4;
  $19 = (__ZL10stbi__get8P13stbi__context($18)|0);
  $20 = $5;
  $21 = $8;
  $22 = (($20) + ($21<<2)|0);
  $23 = ((($22)) + 1|0);
  HEAP8[$23>>0] = $19;
  $24 = $4;
  $25 = (__ZL10stbi__get8P13stbi__context($24)|0);
  $26 = $5;
  $27 = $8;
  $28 = (($26) + ($27<<2)|0);
  HEAP8[$28>>0] = $25;
  $29 = $7;
  $30 = $8;
  $31 = ($29|0)==($30|0);
  $32 = $31 ? 0 : 255;
  $33 = $32&255;
  $34 = $5;
  $35 = $8;
  $36 = (($34) + ($35<<2)|0);
  $37 = ((($36)) + 3|0);
  HEAP8[$37>>0] = $33;
  $38 = $8;
  $39 = (($38) + 1)|0;
  $8 = $39;
 }
 STACKTOP = sp;return;
}
function __ZL24stbi__process_gif_rasterP13stbi__contextP9stbi__gif($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = $0;
 $4 = $1;
 $18 = $3;
 $19 = (__ZL10stbi__get8P13stbi__context($18)|0);
 $5 = $19;
 $20 = $5;
 $21 = $20&255;
 $22 = ($21|0)>(12);
 if ($22) {
  $2 = 0;
  $190 = $2;
  STACKTOP = sp;return ($190|0);
 }
 $23 = $5;
 $24 = $23&255;
 $25 = 1 << $24;
 $15 = $25;
 $8 = 1;
 $26 = $5;
 $27 = $26&255;
 $28 = (($27) + 1)|0;
 $9 = $28;
 $29 = $9;
 $30 = 1 << $29;
 $31 = (($30) - 1)|0;
 $10 = $31;
 $13 = 0;
 $14 = 0;
 $7 = 0;
 while(1) {
  $32 = $7;
  $33 = $15;
  $34 = ($32|0)<($33|0);
  if (!($34)) {
   break;
  }
  $35 = $4;
  $36 = ((($35)) + 2088|0);
  $37 = $7;
  $38 = (($36) + ($37<<2)|0);
  HEAP16[$38>>1] = -1;
  $39 = $7;
  $40 = $39&255;
  $41 = $4;
  $42 = ((($41)) + 2088|0);
  $43 = $7;
  $44 = (($42) + ($43<<2)|0);
  $45 = ((($44)) + 2|0);
  HEAP8[$45>>0] = $40;
  $46 = $7;
  $47 = $46&255;
  $48 = $4;
  $49 = ((($48)) + 2088|0);
  $50 = $7;
  $51 = (($49) + ($50<<2)|0);
  $52 = ((($51)) + 3|0);
  HEAP8[$52>>0] = $47;
  $53 = $7;
  $54 = (($53) + 1)|0;
  $7 = $54;
 }
 $55 = $15;
 $56 = (($55) + 2)|0;
 $11 = $56;
 $12 = -1;
 $6 = 0;
 L9: while(1) {
  $57 = $14;
  $58 = $9;
  $59 = ($57|0)<($58|0);
  do {
   if ($59) {
    $60 = $6;
    $61 = ($60|0)==(0);
    if ($61) {
     $62 = $3;
     $63 = (__ZL10stbi__get8P13stbi__context($62)|0);
     $64 = $63&255;
     $6 = $64;
     $65 = $6;
     $66 = ($65|0)==(0);
     if ($66) {
      label = 10;
      break L9;
     }
    }
    $70 = $6;
    $71 = (($70) + -1)|0;
    $6 = $71;
    $72 = $3;
    $73 = (__ZL10stbi__get8P13stbi__context($72)|0);
    $74 = $73&255;
    $75 = $14;
    $76 = $74 << $75;
    $77 = $13;
    $78 = $77 | $76;
    $13 = $78;
    $79 = $14;
    $80 = (($79) + 8)|0;
    $14 = $80;
   } else {
    $81 = $13;
    $82 = $10;
    $83 = $81 & $82;
    $17 = $83;
    $84 = $9;
    $85 = $13;
    $86 = $85 >> $84;
    $13 = $86;
    $87 = $9;
    $88 = $14;
    $89 = (($88) - ($87))|0;
    $14 = $89;
    $90 = $17;
    $91 = $15;
    $92 = ($90|0)==($91|0);
    if ($92) {
     $93 = $5;
     $94 = $93&255;
     $95 = (($94) + 1)|0;
     $9 = $95;
     $96 = $9;
     $97 = 1 << $96;
     $98 = (($97) - 1)|0;
     $10 = $98;
     $99 = $15;
     $100 = (($99) + 2)|0;
     $11 = $100;
     $12 = -1;
     $8 = 0;
     break;
    }
    $101 = $17;
    $102 = $15;
    $103 = (($102) + 1)|0;
    $104 = ($101|0)==($103|0);
    if ($104) {
     label = 15;
     break L9;
    }
    $116 = $17;
    $117 = $11;
    $118 = ($116|0)<=($117|0);
    if (!($118)) {
     label = 34;
     break L9;
    }
    $119 = $8;
    $120 = ($119|0)!=(0);
    if ($120) {
     label = 21;
     break L9;
    }
    $125 = $12;
    $126 = ($125|0)>=(0);
    if ($126) {
     $127 = $4;
     $128 = ((($127)) + 2088|0);
     $129 = $11;
     $130 = (($129) + 1)|0;
     $11 = $130;
     $131 = (($128) + ($129<<2)|0);
     $16 = $131;
     $132 = $11;
     $133 = ($132|0)>(8192);
     if ($133) {
      label = 24;
      break L9;
     }
     $138 = $12;
     $139 = $138&65535;
     $140 = $16;
     HEAP16[$140>>1] = $139;
     $141 = $4;
     $142 = ((($141)) + 2088|0);
     $143 = $12;
     $144 = (($142) + ($143<<2)|0);
     $145 = ((($144)) + 2|0);
     $146 = HEAP8[$145>>0]|0;
     $147 = $16;
     $148 = ((($147)) + 2|0);
     HEAP8[$148>>0] = $146;
     $149 = $17;
     $150 = $11;
     $151 = ($149|0)==($150|0);
     if ($151) {
      $152 = $16;
      $153 = ((($152)) + 2|0);
      $154 = HEAP8[$153>>0]|0;
      $163 = $154;
     } else {
      $155 = $4;
      $156 = ((($155)) + 2088|0);
      $157 = $17;
      $158 = (($156) + ($157<<2)|0);
      $159 = ((($158)) + 2|0);
      $160 = HEAP8[$159>>0]|0;
      $163 = $160;
     }
     $161 = $16;
     $162 = ((($161)) + 3|0);
     HEAP8[$162>>0] = $163;
    } else {
     $164 = $17;
     $165 = $11;
     $166 = ($164|0)==($165|0);
     if ($166) {
      label = 30;
      break L9;
     }
    }
    $171 = $4;
    $172 = $17;
    $173 = $172&65535;
    __ZL18stbi__out_gif_codeP9stbi__gift($171,$173);
    $174 = $11;
    $175 = $10;
    $176 = $174 & $175;
    $177 = ($176|0)==(0);
    $178 = $11;
    $179 = ($178|0)<=(4095);
    $or$cond = $177 & $179;
    if ($or$cond) {
     $180 = $9;
     $181 = (($180) + 1)|0;
     $9 = $181;
     $182 = $9;
     $183 = 1 << $182;
     $184 = (($183) - 1)|0;
     $10 = $184;
    }
    $185 = $17;
    $12 = $185;
   }
  } while(0);
 }
 if ((label|0) == 10) {
  $67 = $4;
  $68 = ((($67)) + 8|0);
  $69 = HEAP32[$68>>2]|0;
  $2 = $69;
  $190 = $2;
  STACKTOP = sp;return ($190|0);
 }
 else if ((label|0) == 15) {
  $105 = $3;
  $106 = $6;
  __ZL10stbi__skipP13stbi__contexti($105,$106);
  while(1) {
   $107 = $3;
   $108 = (__ZL10stbi__get8P13stbi__context($107)|0);
   $109 = $108&255;
   $6 = $109;
   $110 = ($109|0)>(0);
   if (!($110)) {
    break;
   }
   $111 = $3;
   $112 = $6;
   __ZL10stbi__skipP13stbi__contexti($111,$112);
  }
  $113 = $4;
  $114 = ((($113)) + 8|0);
  $115 = HEAP32[$114>>2]|0;
  $2 = $115;
  $190 = $2;
  STACKTOP = sp;return ($190|0);
 }
 else if ((label|0) == 21) {
  $121 = (__ZL9stbi__errPKc(10245)|0);
  $122 = ($121|0)!=(0);
  $123 = $122 ? 0 : 0;
  $124 = $123;
  $2 = $124;
  $190 = $2;
  STACKTOP = sp;return ($190|0);
 }
 else if ((label|0) == 24) {
  $134 = (__ZL9stbi__errPKc(10259)|0);
  $135 = ($134|0)!=(0);
  $136 = $135 ? 0 : 0;
  $137 = $136;
  $2 = $137;
  $190 = $2;
  STACKTOP = sp;return ($190|0);
 }
 else if ((label|0) == 30) {
  $167 = (__ZL9stbi__errPKc(10274)|0);
  $168 = ($167|0)!=(0);
  $169 = $168 ? 0 : 0;
  $170 = $169;
  $2 = $170;
  $190 = $2;
  STACKTOP = sp;return ($190|0);
 }
 else if ((label|0) == 34) {
  $186 = (__ZL9stbi__errPKc(10274)|0);
  $187 = ($186|0)!=(0);
  $188 = $187 ? 0 : 0;
  $189 = $188;
  $2 = $189;
  $190 = $2;
  STACKTOP = sp;return ($190|0);
 }
 return (0)|0;
}
function __ZL18stbi__out_gif_codeP9stbi__gift($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $7 = $2;
 $8 = ((($7)) + 2088|0);
 $9 = $3;
 $10 = $9&65535;
 $11 = (($8) + ($10<<2)|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12 << 16 >> 16;
 $14 = ($13|0)>=(0);
 if ($14) {
  $15 = $2;
  $16 = $2;
  $17 = ((($16)) + 2088|0);
  $18 = $3;
  $19 = $18&65535;
  $20 = (($17) + ($19<<2)|0);
  $21 = HEAP16[$20>>1]|0;
  __ZL18stbi__out_gif_codeP9stbi__gift($15,$21);
 }
 $22 = $2;
 $23 = ((($22)) + 34892|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $2;
 $26 = ((($25)) + 34884|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($24|0)>=($27|0);
 if ($28) {
  STACKTOP = sp;return;
 }
 $29 = $2;
 $30 = ((($29)) + 34888|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $2;
 $33 = ((($32)) + 34892|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($31) + ($34))|0;
 $6 = $35;
 $36 = $2;
 $37 = ((($36)) + 8|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $6;
 $40 = (($38) + ($39)|0);
 $4 = $40;
 $41 = $2;
 $42 = ((($41)) + 16|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $6;
 $45 = (($44|0) / 4)&-1;
 $46 = (($43) + ($45)|0);
 HEAP8[$46>>0] = 1;
 $47 = $2;
 $48 = ((($47)) + 34856|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $2;
 $51 = ((($50)) + 2088|0);
 $52 = $3;
 $53 = $52&65535;
 $54 = (($51) + ($53<<2)|0);
 $55 = ((($54)) + 3|0);
 $56 = HEAP8[$55>>0]|0;
 $57 = $56&255;
 $58 = $57<<2;
 $59 = (($49) + ($58)|0);
 $5 = $59;
 $60 = $5;
 $61 = ((($60)) + 3|0);
 $62 = HEAP8[$61>>0]|0;
 $63 = $62&255;
 $64 = ($63|0)>(128);
 if ($64) {
  $65 = $5;
  $66 = ((($65)) + 2|0);
  $67 = HEAP8[$66>>0]|0;
  $68 = $4;
  HEAP8[$68>>0] = $67;
  $69 = $5;
  $70 = ((($69)) + 1|0);
  $71 = HEAP8[$70>>0]|0;
  $72 = $4;
  $73 = ((($72)) + 1|0);
  HEAP8[$73>>0] = $71;
  $74 = $5;
  $75 = HEAP8[$74>>0]|0;
  $76 = $4;
  $77 = ((($76)) + 2|0);
  HEAP8[$77>>0] = $75;
  $78 = $5;
  $79 = ((($78)) + 3|0);
  $80 = HEAP8[$79>>0]|0;
  $81 = $4;
  $82 = ((($81)) + 3|0);
  HEAP8[$82>>0] = $80;
 }
 $83 = $2;
 $84 = ((($83)) + 34888|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = (($85) + 4)|0;
 HEAP32[$84>>2] = $86;
 $87 = $2;
 $88 = ((($87)) + 34888|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = $2;
 $91 = ((($90)) + 34880|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = ($89|0)>=($92|0);
 if (!($93)) {
  STACKTOP = sp;return;
 }
 $94 = $2;
 $95 = ((($94)) + 34872|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = $2;
 $98 = ((($97)) + 34888|0);
 HEAP32[$98>>2] = $96;
 $99 = $2;
 $100 = ((($99)) + 34864|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = $2;
 $103 = ((($102)) + 34892|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = (($104) + ($101))|0;
 HEAP32[$103>>2] = $105;
 while(1) {
  $106 = $2;
  $107 = ((($106)) + 34892|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = $2;
  $110 = ((($109)) + 34884|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = ($108|0)>=($111|0);
  if (!($112)) {
   label = 11;
   break;
  }
  $113 = $2;
  $114 = ((($113)) + 34860|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = ($115|0)>(0);
  if (!($116)) {
   label = 11;
   break;
  }
  $117 = $2;
  $118 = ((($117)) + 34860|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = 1 << $119;
  $121 = $2;
  $122 = ((($121)) + 34896|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = Math_imul($120, $123)|0;
  $125 = $2;
  $126 = ((($125)) + 34864|0);
  HEAP32[$126>>2] = $124;
  $127 = $2;
  $128 = ((($127)) + 34876|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = $2;
  $131 = ((($130)) + 34864|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = $132 >> 1;
  $134 = (($129) + ($133))|0;
  $135 = $2;
  $136 = ((($135)) + 34892|0);
  HEAP32[$136>>2] = $134;
  $137 = $2;
  $138 = ((($137)) + 34860|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = (($139) + -1)|0;
  HEAP32[$138>>2] = $140;
 }
 if ((label|0) == 11) {
  STACKTOP = sp;return;
 }
}
function __ZL18stbi__gif_test_rawP13stbi__context($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = (__ZL10stbi__get8P13stbi__context($4)|0);
 $6 = $5&255;
 $7 = ($6|0)!=(71);
 if (!($7)) {
  $8 = $2;
  $9 = (__ZL10stbi__get8P13stbi__context($8)|0);
  $10 = $9&255;
  $11 = ($10|0)!=(73);
  if (!($11)) {
   $12 = $2;
   $13 = (__ZL10stbi__get8P13stbi__context($12)|0);
   $14 = $13&255;
   $15 = ($14|0)!=(70);
   if (!($15)) {
    $16 = $2;
    $17 = (__ZL10stbi__get8P13stbi__context($16)|0);
    $18 = $17&255;
    $19 = ($18|0)!=(56);
    if (!($19)) {
     $20 = $2;
     $21 = (__ZL10stbi__get8P13stbi__context($20)|0);
     $22 = $21&255;
     $3 = $22;
     $23 = $3;
     $24 = ($23|0)!=(57);
     $25 = $3;
     $26 = ($25|0)!=(55);
     $or$cond = $24 & $26;
     if ($or$cond) {
      $1 = 0;
      $31 = $1;
      STACKTOP = sp;return ($31|0);
     }
     $27 = $2;
     $28 = (__ZL10stbi__get8P13stbi__context($27)|0);
     $29 = $28&255;
     $30 = ($29|0)!=(97);
     if ($30) {
      $1 = 0;
      $31 = $1;
      STACKTOP = sp;return ($31|0);
     } else {
      $1 = 1;
      $31 = $1;
      STACKTOP = sp;return ($31|0);
     }
    }
   }
  }
 }
 $1 = 0;
 $31 = $1;
 STACKTOP = sp;return ($31|0);
}
function __ZL22stbi__bmp_parse_headerP13stbi__contextP14stbi__bmp_data($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = (__ZL10stbi__get8P13stbi__context($8)|0);
 $10 = $9&255;
 $11 = ($10|0)!=(66);
 if (!($11)) {
  $12 = $3;
  $13 = (__ZL10stbi__get8P13stbi__context($12)|0);
  $14 = $13&255;
  $15 = ($14|0)!=(77);
  if (!($15)) {
   $20 = $3;
   (__ZL13stbi__get32leP13stbi__context($20)|0);
   $21 = $3;
   (__ZL13stbi__get16leP13stbi__context($21)|0);
   $22 = $3;
   (__ZL13stbi__get16leP13stbi__context($22)|0);
   $23 = $3;
   $24 = (__ZL13stbi__get32leP13stbi__context($23)|0);
   $25 = $4;
   $26 = ((($25)) + 4|0);
   HEAP32[$26>>2] = $24;
   $27 = $3;
   $28 = (__ZL13stbi__get32leP13stbi__context($27)|0);
   $5 = $28;
   $29 = $4;
   $30 = ((($29)) + 8|0);
   HEAP32[$30>>2] = $28;
   $31 = $4;
   $32 = ((($31)) + 24|0);
   HEAP32[$32>>2] = 0;
   $33 = $4;
   $34 = ((($33)) + 20|0);
   HEAP32[$34>>2] = 0;
   $35 = $4;
   $36 = ((($35)) + 16|0);
   HEAP32[$36>>2] = 0;
   $37 = $4;
   $38 = ((($37)) + 12|0);
   HEAP32[$38>>2] = 0;
   $39 = $5;
   $40 = ($39|0)!=(12);
   $41 = $5;
   $42 = ($41|0)!=(40);
   $or$cond = $40 & $42;
   $43 = $5;
   $44 = ($43|0)!=(56);
   $or$cond3 = $or$cond & $44;
   $45 = $5;
   $46 = ($45|0)!=(108);
   $or$cond5 = $or$cond3 & $46;
   $47 = $5;
   $48 = ($47|0)!=(124);
   $or$cond7 = $or$cond5 & $48;
   if ($or$cond7) {
    $49 = (__ZL9stbi__errPKc(10380)|0);
    $50 = ($49|0)!=(0);
    $51 = $50 ? 0 : 0;
    $52 = $51;
    $2 = $52;
    $201 = $2;
    STACKTOP = sp;return ($201|0);
   }
   $53 = $5;
   $54 = ($53|0)==(12);
   $55 = $3;
   if ($54) {
    $56 = (__ZL13stbi__get16leP13stbi__context($55)|0);
    $57 = $3;
    HEAP32[$57>>2] = $56;
    $58 = $3;
    $59 = (__ZL13stbi__get16leP13stbi__context($58)|0);
    $60 = $3;
    $61 = ((($60)) + 4|0);
    HEAP32[$61>>2] = $59;
   } else {
    $62 = (__ZL13stbi__get32leP13stbi__context($55)|0);
    $63 = $3;
    HEAP32[$63>>2] = $62;
    $64 = $3;
    $65 = (__ZL13stbi__get32leP13stbi__context($64)|0);
    $66 = $3;
    $67 = ((($66)) + 4|0);
    HEAP32[$67>>2] = $65;
   }
   $68 = $3;
   $69 = (__ZL13stbi__get16leP13stbi__context($68)|0);
   $70 = ($69|0)!=(1);
   if ($70) {
    $71 = (__ZL9stbi__errPKc(10392)|0);
    $72 = ($71|0)!=(0);
    $73 = $72 ? 0 : 0;
    $74 = $73;
    $2 = $74;
    $201 = $2;
    STACKTOP = sp;return ($201|0);
   }
   $75 = $3;
   $76 = (__ZL13stbi__get16leP13stbi__context($75)|0);
   $77 = $4;
   HEAP32[$77>>2] = $76;
   $78 = $5;
   $79 = ($78|0)!=(12);
   do {
    if ($79) {
     $80 = $3;
     $81 = (__ZL13stbi__get32leP13stbi__context($80)|0);
     $6 = $81;
     $82 = $6;
     $83 = ($82|0)==(1);
     $84 = $6;
     $85 = ($84|0)==(2);
     $or$cond9 = $83 | $85;
     if ($or$cond9) {
      $86 = (__ZL9stbi__errPKc(10400)|0);
      $87 = ($86|0)!=(0);
      $88 = $87 ? 0 : 0;
      $89 = $88;
      $2 = $89;
      $201 = $2;
      STACKTOP = sp;return ($201|0);
     }
     $90 = $3;
     (__ZL13stbi__get32leP13stbi__context($90)|0);
     $91 = $3;
     (__ZL13stbi__get32leP13stbi__context($91)|0);
     $92 = $3;
     (__ZL13stbi__get32leP13stbi__context($92)|0);
     $93 = $3;
     (__ZL13stbi__get32leP13stbi__context($93)|0);
     $94 = $3;
     (__ZL13stbi__get32leP13stbi__context($94)|0);
     $95 = $5;
     $96 = ($95|0)==(40);
     $97 = $5;
     $98 = ($97|0)==(56);
     $or$cond11 = $96 | $98;
     $99 = $5;
     if (!($or$cond11)) {
      $166 = ($99|0)!=(108);
      $167 = $5;
      $168 = ($167|0)!=(124);
      $or$cond13 = $166 & $168;
      if ($or$cond13) {
       $169 = (__ZL9stbi__errPKc(10392)|0);
       $170 = ($169|0)!=(0);
       $171 = $170 ? 0 : 0;
       $172 = $171;
       $2 = $172;
       $201 = $2;
       STACKTOP = sp;return ($201|0);
      }
      $173 = $3;
      $174 = (__ZL13stbi__get32leP13stbi__context($173)|0);
      $175 = $4;
      $176 = ((($175)) + 12|0);
      HEAP32[$176>>2] = $174;
      $177 = $3;
      $178 = (__ZL13stbi__get32leP13stbi__context($177)|0);
      $179 = $4;
      $180 = ((($179)) + 16|0);
      HEAP32[$180>>2] = $178;
      $181 = $3;
      $182 = (__ZL13stbi__get32leP13stbi__context($181)|0);
      $183 = $4;
      $184 = ((($183)) + 20|0);
      HEAP32[$184>>2] = $182;
      $185 = $3;
      $186 = (__ZL13stbi__get32leP13stbi__context($185)|0);
      $187 = $4;
      $188 = ((($187)) + 24|0);
      HEAP32[$188>>2] = $186;
      $189 = $3;
      (__ZL13stbi__get32leP13stbi__context($189)|0);
      $7 = 0;
      while(1) {
       $190 = $7;
       $191 = ($190|0)<(12);
       if (!($191)) {
        break;
       }
       $192 = $3;
       (__ZL13stbi__get32leP13stbi__context($192)|0);
       $193 = $7;
       $194 = (($193) + 1)|0;
       $7 = $194;
      }
      $195 = $5;
      $196 = ($195|0)==(124);
      if (!($196)) {
       break;
      }
      $197 = $3;
      (__ZL13stbi__get32leP13stbi__context($197)|0);
      $198 = $3;
      (__ZL13stbi__get32leP13stbi__context($198)|0);
      $199 = $3;
      (__ZL13stbi__get32leP13stbi__context($199)|0);
      $200 = $3;
      (__ZL13stbi__get32leP13stbi__context($200)|0);
      break;
     }
     $100 = ($99|0)==(56);
     if ($100) {
      $101 = $3;
      (__ZL13stbi__get32leP13stbi__context($101)|0);
      $102 = $3;
      (__ZL13stbi__get32leP13stbi__context($102)|0);
      $103 = $3;
      (__ZL13stbi__get32leP13stbi__context($103)|0);
      $104 = $3;
      (__ZL13stbi__get32leP13stbi__context($104)|0);
     }
     $105 = $4;
     $106 = HEAP32[$105>>2]|0;
     $107 = ($106|0)==(16);
     if (!($107)) {
      $108 = $4;
      $109 = HEAP32[$108>>2]|0;
      $110 = ($109|0)==(32);
      if (!($110)) {
       break;
      }
     }
     $111 = $6;
     $112 = ($111|0)==(0);
     if ($112) {
      $113 = $4;
      $114 = HEAP32[$113>>2]|0;
      $115 = ($114|0)==(32);
      $116 = $4;
      $117 = ((($116)) + 12|0);
      if ($115) {
       HEAP32[$117>>2] = 16711680;
       $118 = $4;
       $119 = ((($118)) + 16|0);
       HEAP32[$119>>2] = 65280;
       $120 = $4;
       $121 = ((($120)) + 20|0);
       HEAP32[$121>>2] = 255;
       $122 = $4;
       $123 = ((($122)) + 24|0);
       HEAP32[$123>>2] = -16777216;
       $124 = $4;
       $125 = ((($124)) + 28|0);
       HEAP32[$125>>2] = 0;
       break;
      } else {
       HEAP32[$117>>2] = 31744;
       $126 = $4;
       $127 = ((($126)) + 16|0);
       HEAP32[$127>>2] = 992;
       $128 = $4;
       $129 = ((($128)) + 20|0);
       HEAP32[$129>>2] = 31;
       break;
      }
     }
     $130 = $6;
     $131 = ($130|0)==(3);
     if (!($131)) {
      $162 = (__ZL9stbi__errPKc(10392)|0);
      $163 = ($162|0)!=(0);
      $164 = $163 ? 0 : 0;
      $165 = $164;
      $2 = $165;
      $201 = $2;
      STACKTOP = sp;return ($201|0);
     }
     $132 = $3;
     $133 = (__ZL13stbi__get32leP13stbi__context($132)|0);
     $134 = $4;
     $135 = ((($134)) + 12|0);
     HEAP32[$135>>2] = $133;
     $136 = $3;
     $137 = (__ZL13stbi__get32leP13stbi__context($136)|0);
     $138 = $4;
     $139 = ((($138)) + 16|0);
     HEAP32[$139>>2] = $137;
     $140 = $3;
     $141 = (__ZL13stbi__get32leP13stbi__context($140)|0);
     $142 = $4;
     $143 = ((($142)) + 20|0);
     HEAP32[$143>>2] = $141;
     $144 = $4;
     $145 = ((($144)) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = $4;
     $148 = ((($147)) + 16|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = ($146|0)==($149|0);
     if ($150) {
      $151 = $4;
      $152 = ((($151)) + 16|0);
      $153 = HEAP32[$152>>2]|0;
      $154 = $4;
      $155 = ((($154)) + 20|0);
      $156 = HEAP32[$155>>2]|0;
      $157 = ($153|0)==($156|0);
      if ($157) {
       $158 = (__ZL9stbi__errPKc(10392)|0);
       $159 = ($158|0)!=(0);
       $160 = $159 ? 0 : 0;
       $161 = $160;
       $2 = $161;
       $201 = $2;
       STACKTOP = sp;return ($201|0);
      }
     }
    }
   } while(0);
   $2 = (1);
   $201 = $2;
   STACKTOP = sp;return ($201|0);
  }
 }
 $16 = (__ZL9stbi__errPKc(10372)|0);
 $17 = ($16|0)!=(0);
 $18 = $17 ? 0 : 0;
 $19 = $18;
 $2 = $19;
 $201 = $2;
 STACKTOP = sp;return ($201|0);
}
function __ZL14stbi__high_bitj($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = 0;
 $4 = $2;
 $5 = ($4|0)==(0);
 if ($5) {
  $1 = -1;
  $37 = $1;
  STACKTOP = sp;return ($37|0);
 }
 $6 = $2;
 $7 = ($6>>>0)>=(65536);
 if ($7) {
  $8 = $3;
  $9 = (($8) + 16)|0;
  $3 = $9;
  $10 = $2;
  $11 = $10 >>> 16;
  $2 = $11;
 }
 $12 = $2;
 $13 = ($12>>>0)>=(256);
 if ($13) {
  $14 = $3;
  $15 = (($14) + 8)|0;
  $3 = $15;
  $16 = $2;
  $17 = $16 >>> 8;
  $2 = $17;
 }
 $18 = $2;
 $19 = ($18>>>0)>=(16);
 if ($19) {
  $20 = $3;
  $21 = (($20) + 4)|0;
  $3 = $21;
  $22 = $2;
  $23 = $22 >>> 4;
  $2 = $23;
 }
 $24 = $2;
 $25 = ($24>>>0)>=(4);
 if ($25) {
  $26 = $3;
  $27 = (($26) + 2)|0;
  $3 = $27;
  $28 = $2;
  $29 = $28 >>> 2;
  $2 = $29;
 }
 $30 = $2;
 $31 = ($30>>>0)>=(2);
 if ($31) {
  $32 = $3;
  $33 = (($32) + 1)|0;
  $3 = $33;
  $34 = $2;
  $35 = $34 >>> 1;
  $2 = $35;
 }
 $36 = $3;
 $1 = $36;
 $37 = $1;
 STACKTOP = sp;return ($37|0);
}
function __ZL14stbi__bitcountj($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 & 1431655765;
 $4 = $1;
 $5 = $4 >>> 1;
 $6 = $5 & 1431655765;
 $7 = (($3) + ($6))|0;
 $1 = $7;
 $8 = $1;
 $9 = $8 & 858993459;
 $10 = $1;
 $11 = $10 >>> 2;
 $12 = $11 & 858993459;
 $13 = (($9) + ($12))|0;
 $1 = $13;
 $14 = $1;
 $15 = $1;
 $16 = $15 >>> 4;
 $17 = (($14) + ($16))|0;
 $18 = $17 & 252645135;
 $1 = $18;
 $19 = $1;
 $20 = $1;
 $21 = $20 >>> 8;
 $22 = (($19) + ($21))|0;
 $1 = $22;
 $23 = $1;
 $24 = $1;
 $25 = $24 >>> 16;
 $26 = (($23) + ($25))|0;
 $1 = $26;
 $27 = $1;
 $28 = $27 & 255;
 STACKTOP = sp;return ($28|0);
}
function __ZL13stbi__get32leP13stbi__context($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (__ZL13stbi__get16leP13stbi__context($3)|0);
 $2 = $4;
 $5 = $2;
 $6 = $1;
 $7 = (__ZL13stbi__get16leP13stbi__context($6)|0);
 $8 = $7 << 16;
 $9 = (($5) + ($8))|0;
 STACKTOP = sp;return ($9|0);
}
function __ZL17stbi__shiftsignedjii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = ($6|0)<(0);
 $8 = $4;
 if ($7) {
  $9 = (0 - ($8))|0;
  $10 = $3;
  $11 = $10 << $9;
  $3 = $11;
 } else {
  $12 = $3;
  $13 = $12 >>> $8;
  $3 = $13;
 }
 $14 = $5;
 $15 = (8 - ($14))|0;
 $16 = $3;
 $17 = $16 >>> $15;
 $3 = $17;
 $18 = $5;
 $19 = ($18|0)>=(0);
 $20 = $5;
 $21 = ($20|0)<=(8);
 $or$cond = $19 & $21;
 if ($or$cond) {
  $22 = $3;
  $23 = $5;
  $24 = (208 + ($23<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = Math_imul($22, $25)|0;
  $27 = $5;
  $28 = (256 + ($27<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $26 >> $29;
  STACKTOP = sp;return ($30|0);
 } else {
  ___assert_fail((10331|0),(9662|0),5936,(10354|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZL18stbi__bmp_test_rawP13stbi__context($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $6 = (__ZL10stbi__get8P13stbi__context($5)|0);
 $7 = $6&255;
 $8 = ($7|0)!=(66);
 if ($8) {
  $1 = 0;
  $32 = $1;
  STACKTOP = sp;return ($32|0);
 }
 $9 = $2;
 $10 = (__ZL10stbi__get8P13stbi__context($9)|0);
 $11 = $10&255;
 $12 = ($11|0)!=(77);
 if ($12) {
  $1 = 0;
  $32 = $1;
  STACKTOP = sp;return ($32|0);
 }
 $13 = $2;
 (__ZL13stbi__get32leP13stbi__context($13)|0);
 $14 = $2;
 (__ZL13stbi__get16leP13stbi__context($14)|0);
 $15 = $2;
 (__ZL13stbi__get16leP13stbi__context($15)|0);
 $16 = $2;
 (__ZL13stbi__get32leP13stbi__context($16)|0);
 $17 = $2;
 $18 = (__ZL13stbi__get32leP13stbi__context($17)|0);
 $4 = $18;
 $19 = $4;
 $20 = ($19|0)==(12);
 $21 = $4;
 $22 = ($21|0)==(40);
 $or$cond = $20 | $22;
 $23 = $4;
 $24 = ($23|0)==(56);
 $or$cond3 = $or$cond | $24;
 $25 = $4;
 $26 = ($25|0)==(108);
 $or$cond5 = $or$cond3 | $26;
 if ($or$cond5) {
  $30 = 1;
 } else {
  $27 = $4;
  $28 = ($27|0)==(124);
  $30 = $28;
 }
 $29 = $30&1;
 $3 = $29;
 $31 = $3;
 $1 = $31;
 $32 = $1;
 STACKTOP = sp;return ($32|0);
}
function __ZL12stbi__do_pngP9stbi__pngPiS1_S1_iP17stbi__result_info($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = 0;
 $14 = $11;
 $15 = ($14|0)<(0);
 $16 = $11;
 $17 = ($16|0)>(4);
 $or$cond = $15 | $17;
 if ($or$cond) {
  $18 = (__ZL9stbi__errPKc(10408)|0);
  $19 = ($18|0)!=(0);
  $20 = $19 ? 0 : 0;
  $21 = $20;
  $6 = $21;
  $117 = $6;
  STACKTOP = sp;return ($117|0);
 }
 $22 = $7;
 $23 = $11;
 $24 = (__ZL20stbi__parse_png_fileP9stbi__pngii($22,0,$23)|0);
 $25 = ($24|0)!=(0);
 if ($25) {
  $26 = $7;
  $27 = ((($26)) + 16|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)<(8);
  if ($29) {
   $30 = $12;
   HEAP32[$30>>2] = 8;
  } else {
   $31 = $7;
   $32 = ((($31)) + 16|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $12;
   HEAP32[$34>>2] = $33;
  }
  $35 = $7;
  $36 = ((($35)) + 12|0);
  $37 = HEAP32[$36>>2]|0;
  $13 = $37;
  $38 = $7;
  $39 = ((($38)) + 12|0);
  HEAP32[$39>>2] = 0;
  $40 = $11;
  $41 = ($40|0)!=(0);
  if ($41) {
   $42 = $11;
   $43 = $7;
   $44 = HEAP32[$43>>2]|0;
   $45 = ((($44)) + 12|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($42|0)!=($46|0);
   if ($47) {
    $48 = $12;
    $49 = HEAP32[$48>>2]|0;
    $50 = ($49|0)==(8);
    $51 = $13;
    if ($50) {
     $52 = $7;
     $53 = HEAP32[$52>>2]|0;
     $54 = ((($53)) + 12|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = $11;
     $57 = $7;
     $58 = HEAP32[$57>>2]|0;
     $59 = HEAP32[$58>>2]|0;
     $60 = $7;
     $61 = HEAP32[$60>>2]|0;
     $62 = ((($61)) + 4|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = (__ZL20stbi__convert_formatPhiijj($51,$55,$56,$59,$63)|0);
     $13 = $64;
    } else {
     $65 = $7;
     $66 = HEAP32[$65>>2]|0;
     $67 = ((($66)) + 12|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = $11;
     $70 = $7;
     $71 = HEAP32[$70>>2]|0;
     $72 = HEAP32[$71>>2]|0;
     $73 = $7;
     $74 = HEAP32[$73>>2]|0;
     $75 = ((($74)) + 4|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = (__ZL22stbi__convert_format16Ptiijj($51,$68,$69,$72,$76)|0);
     $13 = $77;
    }
    $78 = $11;
    $79 = $7;
    $80 = HEAP32[$79>>2]|0;
    $81 = ((($80)) + 12|0);
    HEAP32[$81>>2] = $78;
    $82 = $13;
    $83 = ($82|0)==(0|0);
    if ($83) {
     $84 = $13;
     $6 = $84;
     $117 = $6;
     STACKTOP = sp;return ($117|0);
    }
   }
  }
  $85 = $7;
  $86 = HEAP32[$85>>2]|0;
  $87 = HEAP32[$86>>2]|0;
  $88 = $8;
  HEAP32[$88>>2] = $87;
  $89 = $7;
  $90 = HEAP32[$89>>2]|0;
  $91 = ((($90)) + 4|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = $9;
  HEAP32[$93>>2] = $92;
  $94 = $10;
  $95 = ($94|0)!=(0|0);
  if ($95) {
   $96 = $7;
   $97 = HEAP32[$96>>2]|0;
   $98 = ((($97)) + 8|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = $10;
   HEAP32[$100>>2] = $99;
  }
 }
 $101 = $7;
 $102 = ((($101)) + 12|0);
 $103 = HEAP32[$102>>2]|0;
 _free($103);
 $104 = $7;
 $105 = ((($104)) + 12|0);
 HEAP32[$105>>2] = 0;
 $106 = $7;
 $107 = ((($106)) + 8|0);
 $108 = HEAP32[$107>>2]|0;
 _free($108);
 $109 = $7;
 $110 = ((($109)) + 8|0);
 HEAP32[$110>>2] = 0;
 $111 = $7;
 $112 = ((($111)) + 4|0);
 $113 = HEAP32[$112>>2]|0;
 _free($113);
 $114 = $7;
 $115 = ((($114)) + 4|0);
 HEAP32[$115>>2] = 0;
 $116 = $13;
 $6 = $116;
 $117 = $6;
 STACKTOP = sp;return ($117|0);
}
function __ZL20stbi__parse_png_fileP9stbi__pngii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond3$not = 0;
 var $or$cond5 = 0, $or$cond5$not = 0, $or$cond7 = 0, $or$cond8 = 0, $switch$split2D = 0, $switch$split342D = 0, $switch$split372D = 0, $switch$split402D = 0, $switch$split432D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1136|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1136|0);
 $7 = sp;
 $10 = sp + 1118|0;
 $11 = sp + 1112|0;
 $22 = sp + 1048|0;
 $27 = sp + 1028|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = 0;
 $9 = 0;
 ;HEAP8[$10>>0]=0|0;HEAP8[$10+1>>0]=0|0;HEAP8[$10+2>>0]=0|0;
 $12 = 0;
 $13 = 0;
 $15 = 0;
 $16 = 1;
 $18 = 0;
 $19 = 0;
 $20 = 0;
 $29 = $4;
 $30 = HEAP32[$29>>2]|0;
 $21 = $30;
 $31 = $4;
 $32 = ((($31)) + 8|0);
 HEAP32[$32>>2] = 0;
 $33 = $4;
 $34 = ((($33)) + 4|0);
 HEAP32[$34>>2] = 0;
 $35 = $4;
 $36 = ((($35)) + 12|0);
 HEAP32[$36>>2] = 0;
 $37 = $21;
 $38 = (__ZL22stbi__check_png_headerP13stbi__context($37)|0);
 $39 = ($38|0)!=(0);
 if (!($39)) {
  $3 = 0;
  $539 = $3;
  STACKTOP = sp;return ($539|0);
 }
 $40 = $5;
 $41 = ($40|0)==(1);
 if ($41) {
  $3 = 1;
  $539 = $3;
  STACKTOP = sp;return ($539|0);
 }
 L9: while(1) {
  $42 = $21;
  __ZL22stbi__get_chunk_headerP13stbi__context($22,$42);
  $43 = ((($22)) + 4|0);
  $44 = HEAP32[$43>>2]|0;
  $switch$split2D = ($44|0)<(1229472850);
  L11: do {
   if ($switch$split2D) {
    $switch$split342D = ($44|0)<(1229209940);
    if ($switch$split342D) {
     switch ($44|0) {
     case 1130840649:  {
      break;
     }
     default: {
      label = 131;
      break L11;
     }
     }
     $20 = 1;
     $45 = $21;
     $46 = HEAP32[$22>>2]|0;
     __ZL10stbi__skipP13stbi__contexti($45,$46);
     break;
    }
    $switch$split402D = ($44|0)<(1229278788);
    if (!($switch$split402D)) {
     switch ($44|0) {
     case 1229278788:  {
      label = 101;
      break L9;
      break;
     }
     default: {
      label = 131;
      break L11;
     }
     }
    }
    switch ($44|0) {
    case 1229209940:  {
     break;
    }
    default: {
     label = 131;
     break L11;
    }
    }
    $301 = $16;
    $302 = ($301|0)!=(0);
    if ($302) {
     label = 82;
     break L9;
    }
    $304 = $8;
    $305 = ($304<<24>>24)==(0);
    $306 = $15;
    $307 = ($306|0)!=(0);
    $or$cond = $305 | $307;
    if (!($or$cond)) {
     label = 84;
     break L9;
    }
    $309 = $5;
    $310 = ($309|0)==(2);
    if ($310) {
     label = 86;
     break L9;
    }
    $315 = $12;
    $316 = HEAP32[$22>>2]|0;
    $317 = (($315) + ($316))|0;
    $318 = $12;
    $319 = ($317|0)<($318|0);
    if ($319) {
     label = 88;
     break L9;
    }
    $320 = $12;
    $321 = HEAP32[$22>>2]|0;
    $322 = (($320) + ($321))|0;
    $323 = $13;
    $324 = ($322>>>0)>($323>>>0);
    if ($324) {
     $325 = $13;
     $25 = $325;
     $326 = $13;
     $327 = ($326|0)==(0);
     if ($327) {
      $328 = HEAP32[$22>>2]|0;
      $329 = ($328>>>0)>(4096);
      $330 = HEAP32[$22>>2]|0;
      $331 = $329 ? $330 : 4096;
      $13 = $331;
     }
     while(1) {
      $332 = $12;
      $333 = HEAP32[$22>>2]|0;
      $334 = (($332) + ($333))|0;
      $335 = $13;
      $336 = ($334>>>0)>($335>>>0);
      if (!($336)) {
       break;
      }
      $337 = $13;
      $338 = $337<<1;
      $13 = $338;
     }
     $339 = $4;
     $340 = ((($339)) + 4|0);
     $341 = HEAP32[$340>>2]|0;
     $342 = $13;
     $343 = (_realloc($341,$342)|0);
     $26 = $343;
     $344 = $26;
     $345 = ($344|0)==(0|0);
     if ($345) {
      label = 96;
      break L9;
     }
     $347 = $26;
     $348 = $4;
     $349 = ((($348)) + 4|0);
     HEAP32[$349>>2] = $347;
    }
    $350 = $21;
    $351 = $4;
    $352 = ((($351)) + 4|0);
    $353 = HEAP32[$352>>2]|0;
    $354 = $12;
    $355 = (($353) + ($354)|0);
    $356 = HEAP32[$22>>2]|0;
    $357 = (__ZL10stbi__getnP13stbi__contextPhi($350,$355,$356)|0);
    $358 = ($357|0)!=(0);
    if (!($358)) {
     label = 99;
     break L9;
    }
    $360 = HEAP32[$22>>2]|0;
    $361 = $12;
    $362 = (($361) + ($360))|0;
    $12 = $362;
   } else {
    $switch$split372D = ($44|0)<(1347179589);
    if ($switch$split372D) {
     switch ($44|0) {
     case 1229472850:  {
      break;
     }
     default: {
      label = 131;
      break L11;
     }
     }
     $47 = $16;
     $48 = ($47|0)!=(0);
     if (!($48)) {
      label = 9;
      break L9;
     }
     $16 = 0;
     $50 = HEAP32[$22>>2]|0;
     $51 = ($50|0)!=(13);
     if ($51) {
      label = 11;
      break L9;
     }
     $53 = $21;
     $54 = (__ZL13stbi__get32beP13stbi__context($53)|0);
     $55 = $21;
     HEAP32[$55>>2] = $54;
     $56 = $21;
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57>>>0)>(16777216);
     if ($58) {
      label = 13;
      break L9;
     }
     $60 = $21;
     $61 = (__ZL13stbi__get32beP13stbi__context($60)|0);
     $62 = $21;
     $63 = ((($62)) + 4|0);
     HEAP32[$63>>2] = $61;
     $64 = $21;
     $65 = ((($64)) + 4|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = ($66>>>0)>(16777216);
     if ($67) {
      label = 15;
      break L9;
     }
     $69 = $21;
     $70 = (__ZL10stbi__get8P13stbi__context($69)|0);
     $71 = $70&255;
     $72 = $4;
     $73 = ((($72)) + 16|0);
     HEAP32[$73>>2] = $71;
     $74 = $4;
     $75 = ((($74)) + 16|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = ($76|0)!=(1);
     if ($77) {
      $78 = $4;
      $79 = ((($78)) + 16|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = ($80|0)!=(2);
      if ($81) {
       $82 = $4;
       $83 = ((($82)) + 16|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = ($84|0)!=(4);
       if ($85) {
        $86 = $4;
        $87 = ((($86)) + 16|0);
        $88 = HEAP32[$87>>2]|0;
        $89 = ($88|0)!=(8);
        if ($89) {
         $90 = $4;
         $91 = ((($90)) + 16|0);
         $92 = HEAP32[$91>>2]|0;
         $93 = ($92|0)!=(16);
         if ($93) {
          label = 21;
          break L9;
         }
        }
       }
      }
     }
     $95 = $21;
     $96 = (__ZL10stbi__get8P13stbi__context($95)|0);
     $97 = $96&255;
     $19 = $97;
     $98 = $19;
     $99 = ($98|0)>(6);
     if ($99) {
      label = 23;
      break L9;
     }
     $101 = $19;
     $102 = ($101|0)==(3);
     if ($102) {
      $103 = $4;
      $104 = ((($103)) + 16|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = ($105|0)==(16);
      if ($106) {
       label = 26;
       break L9;
      }
     }
     $108 = $19;
     $109 = ($108|0)==(3);
     if ($109) {
      $8 = 3;
     } else {
      $110 = $19;
      $111 = $110 & 1;
      $112 = ($111|0)!=(0);
      if ($112) {
       label = 30;
       break L9;
      }
     }
     $114 = $21;
     $115 = (__ZL10stbi__get8P13stbi__context($114)|0);
     $116 = $115&255;
     $23 = $116;
     $117 = $23;
     $118 = ($117|0)!=(0);
     if ($118) {
      label = 32;
      break L9;
     }
     $120 = $21;
     $121 = (__ZL10stbi__get8P13stbi__context($120)|0);
     $122 = $121&255;
     $24 = $122;
     $123 = $24;
     $124 = ($123|0)!=(0);
     if ($124) {
      label = 34;
      break L9;
     }
     $126 = $21;
     $127 = (__ZL10stbi__get8P13stbi__context($126)|0);
     $128 = $127&255;
     $18 = $128;
     $129 = $18;
     $130 = ($129|0)>(1);
     if ($130) {
      label = 36;
      break L9;
     }
     $132 = $21;
     $133 = HEAP32[$132>>2]|0;
     $134 = ($133|0)!=(0);
     if (!($134)) {
      label = 39;
      break L9;
     }
     $135 = $21;
     $136 = ((($135)) + 4|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = ($137|0)!=(0);
     if (!($138)) {
      label = 39;
      break L9;
     }
     $140 = $8;
     $141 = ($140<<24>>24)!=(0);
     if ($141) {
      $167 = $21;
      $168 = ((($167)) + 8|0);
      HEAP32[$168>>2] = 1;
      $169 = $21;
      $170 = HEAP32[$169>>2]|0;
      $171 = (1073741824 / ($170>>>0))&-1;
      $172 = (($171>>>0) / 4)&-1;
      $173 = $21;
      $174 = ((($173)) + 4|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($172>>>0)<($175>>>0);
      if ($176) {
       label = 46;
       break L9;
      } else {
       break;
      }
     }
     $142 = $19;
     $143 = $142 & 2;
     $144 = ($143|0)!=(0);
     $145 = $144 ? 3 : 1;
     $146 = $19;
     $147 = $146 & 4;
     $148 = ($147|0)!=(0);
     $149 = $148 ? 1 : 0;
     $150 = (($145) + ($149))|0;
     $151 = $21;
     $152 = ((($151)) + 8|0);
     HEAP32[$152>>2] = $150;
     $153 = $21;
     $154 = HEAP32[$153>>2]|0;
     $155 = (1073741824 / ($154>>>0))&-1;
     $156 = $21;
     $157 = ((($156)) + 8|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = (($155>>>0) / ($158>>>0))&-1;
     $160 = $21;
     $161 = ((($160)) + 4|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = ($159>>>0)<($162>>>0);
     if ($163) {
      label = 42;
      break L9;
     }
     $165 = $5;
     $166 = ($165|0)==(2);
     if ($166) {
      label = 44;
      break L9;
     } else {
      break;
     }
    }
    $switch$split432D = ($44|0)<(1951551059);
    if ($switch$split432D) {
     switch ($44|0) {
     case 1347179589:  {
      break;
     }
     default: {
      label = 131;
      break L11;
     }
     }
     $178 = $16;
     $179 = ($178|0)!=(0);
     if ($179) {
      label = 48;
      break L9;
     }
     $181 = HEAP32[$22>>2]|0;
     $182 = ($181>>>0)>(768);
     if ($182) {
      label = 50;
      break L9;
     }
     $184 = HEAP32[$22>>2]|0;
     $185 = (($184>>>0) / 3)&-1;
     $15 = $185;
     $186 = $15;
     $187 = ($186*3)|0;
     $188 = HEAP32[$22>>2]|0;
     $189 = ($187|0)!=($188|0);
     if ($189) {
      label = 52;
      break L9;
     }
     $14 = 0;
     while(1) {
      $191 = $14;
      $192 = $15;
      $193 = ($191>>>0)<($192>>>0);
      if (!($193)) {
       break L11;
      }
      $194 = $21;
      $195 = (__ZL10stbi__get8P13stbi__context($194)|0);
      $196 = $14;
      $197 = $196<<2;
      $198 = (($197) + 0)|0;
      $199 = (($7) + ($198)|0);
      HEAP8[$199>>0] = $195;
      $200 = $21;
      $201 = (__ZL10stbi__get8P13stbi__context($200)|0);
      $202 = $14;
      $203 = $202<<2;
      $204 = (($203) + 1)|0;
      $205 = (($7) + ($204)|0);
      HEAP8[$205>>0] = $201;
      $206 = $21;
      $207 = (__ZL10stbi__get8P13stbi__context($206)|0);
      $208 = $14;
      $209 = $208<<2;
      $210 = (($209) + 2)|0;
      $211 = (($7) + ($210)|0);
      HEAP8[$211>>0] = $207;
      $212 = $14;
      $213 = $212<<2;
      $214 = (($213) + 3)|0;
      $215 = (($7) + ($214)|0);
      HEAP8[$215>>0] = -1;
      $216 = $14;
      $217 = (($216) + 1)|0;
      $14 = $217;
     }
    }
    switch ($44|0) {
    case 1951551059:  {
     break;
    }
    default: {
     label = 131;
     break L11;
    }
    }
    $218 = $16;
    $219 = ($218|0)!=(0);
    if ($219) {
     label = 57;
     break L9;
    }
    $221 = $4;
    $222 = ((($221)) + 4|0);
    $223 = HEAP32[$222>>2]|0;
    $224 = ($223|0)!=(0|0);
    if ($224) {
     label = 59;
     break L9;
    }
    $226 = $8;
    $227 = ($226<<24>>24)!=(0);
    if ($227) {
     $228 = $5;
     $229 = ($228|0)==(2);
     if ($229) {
      label = 62;
      break L9;
     }
     $232 = $15;
     $233 = ($232|0)==(0);
     if ($233) {
      label = 64;
      break L9;
     }
     $235 = HEAP32[$22>>2]|0;
     $236 = $15;
     $237 = ($235>>>0)>($236>>>0);
     if ($237) {
      label = 66;
      break L9;
     }
     $8 = 4;
     $14 = 0;
     while(1) {
      $239 = $14;
      $240 = HEAP32[$22>>2]|0;
      $241 = ($239>>>0)<($240>>>0);
      if (!($241)) {
       break L11;
      }
      $242 = $21;
      $243 = (__ZL10stbi__get8P13stbi__context($242)|0);
      $244 = $14;
      $245 = $244<<2;
      $246 = (($245) + 3)|0;
      $247 = (($7) + ($246)|0);
      HEAP8[$247>>0] = $243;
      $248 = $14;
      $249 = (($248) + 1)|0;
      $14 = $249;
     }
    }
    $250 = $21;
    $251 = ((($250)) + 8|0);
    $252 = HEAP32[$251>>2]|0;
    $253 = $252 & 1;
    $254 = ($253|0)!=(0);
    if (!($254)) {
     label = 71;
     break L9;
    }
    $256 = HEAP32[$22>>2]|0;
    $257 = $21;
    $258 = ((($257)) + 8|0);
    $259 = HEAP32[$258>>2]|0;
    $260 = $259<<1;
    $261 = ($256|0)!=($260|0);
    if ($261) {
     label = 73;
     break L9;
    }
    $9 = 1;
    $263 = $4;
    $264 = ((($263)) + 16|0);
    $265 = HEAP32[$264>>2]|0;
    $266 = ($265|0)==(16);
    $17 = 0;
    if ($266) {
     while(1) {
      $267 = $17;
      $268 = $21;
      $269 = ((($268)) + 8|0);
      $270 = HEAP32[$269>>2]|0;
      $271 = ($267|0)<($270|0);
      if (!($271)) {
       break L11;
      }
      $272 = $21;
      $273 = (__ZL13stbi__get16beP13stbi__context($272)|0);
      $274 = $273&65535;
      $275 = $17;
      $276 = (($11) + ($275<<1)|0);
      HEAP16[$276>>1] = $274;
      $277 = $17;
      $278 = (($277) + 1)|0;
      $17 = $278;
     }
    } else {
     while(1) {
      $279 = $17;
      $280 = $21;
      $281 = ((($280)) + 8|0);
      $282 = HEAP32[$281>>2]|0;
      $283 = ($279|0)<($282|0);
      if (!($283)) {
       break L11;
      }
      $284 = $21;
      $285 = (__ZL13stbi__get16beP13stbi__context($284)|0);
      $286 = $285 & 255;
      $287 = $286&255;
      $288 = $287&255;
      $289 = $4;
      $290 = ((($289)) + 16|0);
      $291 = HEAP32[$290>>2]|0;
      $292 = (10637 + ($291)|0);
      $293 = HEAP8[$292>>0]|0;
      $294 = $293&255;
      $295 = Math_imul($288, $294)|0;
      $296 = $295&255;
      $297 = $17;
      $298 = (($10) + ($297)|0);
      HEAP8[$298>>0] = $296;
      $299 = $17;
      $300 = (($299) + 1)|0;
      $17 = $300;
     }
    }
   }
  } while(0);
  if ((label|0) == 131) {
   label = 0;
   $508 = $16;
   $509 = ($508|0)!=(0);
   if ($509) {
    label = 132;
    break;
   }
   $511 = ((($22)) + 4|0);
   $512 = HEAP32[$511>>2]|0;
   $513 = $512 & 536870912;
   $514 = ($513|0)==(0);
   if ($514) {
    label = 134;
    break;
   }
   $536 = $21;
   $537 = HEAP32[$22>>2]|0;
   __ZL10stbi__skipP13stbi__contexti($536,$537);
  }
  $538 = $21;
  (__ZL13stbi__get32beP13stbi__context($538)|0);
 }
 switch (label|0) {
  case 9: {
   $49 = (__ZL9stbi__errPKc(10421)|0);
   $3 = $49;
   $539 = $3;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 11: {
   $52 = (__ZL9stbi__errPKc(10435)|0);
   $3 = $52;
   $539 = $3;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 13: {
   $59 = (__ZL9stbi__errPKc(9762)|0);
   $3 = $59;
   $539 = $3;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 15: {
   $68 = (__ZL9stbi__errPKc(9762)|0);
   $3 = $68;
   $539 = $3;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 21: {
   $94 = (__ZL9stbi__errPKc(10448)|0);
   $3 = $94;
   $539 = $3;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 23: {
   $100 = (__ZL9stbi__errPKc(10468)|0);
   $3 = $100;
   $539 = $3;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 26: {
   $107 = (__ZL9stbi__errPKc(10468)|0);
   $3 = $107;
   $539 = $3;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 30: {
   $113 = (__ZL9stbi__errPKc(10468)|0);
   $3 = $113;
   $539 = $3;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 32: {
   $119 = (__ZL9stbi__errPKc(10478)|0);
   $3 = $119;
   $539 = $3;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 34: {
   $125 = (__ZL9stbi__errPKc(10494)|0);
   $3 = $125;
   $539 = $3;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 36: {
   $131 = (__ZL9stbi__errPKc(10512)|0);
   $3 = $131;
   $539 = $3;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 39: {
   $139 = (__ZL9stbi__errPKc(10533)|0);
   $3 = $139;
   $539 = $3;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 42: {
   $164 = (__ZL9stbi__errPKc(9762)|0);
   $3 = $164;
   $539 = $3;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 44: {
   $3 = 1;
   $539 = $3;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 46: {
   $177 = (__ZL9stbi__errPKc(9762)|0);
   $3 = $177;
   $539 = $3;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 48: {
   $180 = (__ZL9stbi__errPKc(10547)|0);
   $3 = $180;
   $539 = $3;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 50: {
   $183 = (__ZL9stbi__errPKc(10562)|0);
   $3 = $183;
   $539 = $3;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 52: {
   $190 = (__ZL9stbi__errPKc(10562)|0);
   $3 = $190;
   $539 = $3;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 57: {
   $220 = (__ZL9stbi__errPKc(10547)|0);
   $3 = $220;
   $539 = $3;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 59: {
   $225 = (__ZL9stbi__errPKc(10575)|0);
   $3 = $225;
   $539 = $3;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 62: {
   $230 = $21;
   $231 = ((($230)) + 8|0);
   HEAP32[$231>>2] = 4;
   $3 = 1;
   $539 = $3;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 64: {
   $234 = (__ZL9stbi__errPKc(10591)|0);
   $3 = $234;
   $539 = $3;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 66: {
   $238 = (__ZL9stbi__errPKc(10608)|0);
   $3 = $238;
   $539 = $3;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 71: {
   $255 = (__ZL9stbi__errPKc(10621)|0);
   $3 = $255;
   $539 = $3;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 73: {
   $262 = (__ZL9stbi__errPKc(10608)|0);
   $3 = $262;
   $539 = $3;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 82: {
   $303 = (__ZL9stbi__errPKc(10547)|0);
   $3 = $303;
   $539 = $3;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 84: {
   $308 = (__ZL9stbi__errPKc(10646)|0);
   $3 = $308;
   $539 = $3;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 86: {
   $311 = $8;
   $312 = $311&255;
   $313 = $21;
   $314 = ((($313)) + 8|0);
   HEAP32[$314>>2] = $312;
   $3 = 1;
   $539 = $3;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 88: {
   $3 = 0;
   $539 = $3;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 96: {
   $346 = (__ZL9stbi__errPKc(9723)|0);
   $3 = $346;
   $539 = $3;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 99: {
   $359 = (__ZL9stbi__errPKc(10654)|0);
   $3 = $359;
   $539 = $3;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 101: {
   $363 = $16;
   $364 = ($363|0)!=(0);
   if ($364) {
    $365 = (__ZL9stbi__errPKc(10547)|0);
    $3 = $365;
    $539 = $3;
    STACKTOP = sp;return ($539|0);
   }
   $366 = $5;
   $367 = ($366|0)!=(0);
   if ($367) {
    $3 = 1;
    $539 = $3;
    STACKTOP = sp;return ($539|0);
   }
   $368 = $4;
   $369 = ((($368)) + 4|0);
   $370 = HEAP32[$369>>2]|0;
   $371 = ($370|0)==(0|0);
   if ($371) {
    $372 = (__ZL9stbi__errPKc(10664)|0);
    $3 = $372;
    $539 = $3;
    STACKTOP = sp;return ($539|0);
   }
   $373 = $21;
   $374 = HEAP32[$373>>2]|0;
   $375 = $4;
   $376 = ((($375)) + 16|0);
   $377 = HEAP32[$376>>2]|0;
   $378 = Math_imul($374, $377)|0;
   $379 = (($378) + 7)|0;
   $380 = (($379>>>0) / 8)&-1;
   $28 = $380;
   $381 = $28;
   $382 = $21;
   $383 = ((($382)) + 4|0);
   $384 = HEAP32[$383>>2]|0;
   $385 = Math_imul($381, $384)|0;
   $386 = $21;
   $387 = ((($386)) + 8|0);
   $388 = HEAP32[$387>>2]|0;
   $389 = Math_imul($385, $388)|0;
   $390 = $21;
   $391 = ((($390)) + 4|0);
   $392 = HEAP32[$391>>2]|0;
   $393 = (($389) + ($392))|0;
   HEAP32[$27>>2] = $393;
   $394 = $4;
   $395 = ((($394)) + 4|0);
   $396 = HEAP32[$395>>2]|0;
   $397 = $12;
   $398 = HEAP32[$27>>2]|0;
   $399 = $20;
   $400 = ($399|0)!=(0);
   $401 = $400 ^ 1;
   $402 = $401&1;
   $403 = (_stbi_zlib_decode_malloc_guesssize_headerflag($396,$397,$398,$27,$402)|0);
   $404 = $4;
   $405 = ((($404)) + 8|0);
   HEAP32[$405>>2] = $403;
   $406 = $4;
   $407 = ((($406)) + 8|0);
   $408 = HEAP32[$407>>2]|0;
   $409 = ($408|0)==(0|0);
   if ($409) {
    $3 = 0;
    $539 = $3;
    STACKTOP = sp;return ($539|0);
   }
   $410 = $4;
   $411 = ((($410)) + 4|0);
   $412 = HEAP32[$411>>2]|0;
   _free($412);
   $413 = $4;
   $414 = ((($413)) + 4|0);
   HEAP32[$414>>2] = 0;
   $415 = $6;
   $416 = $21;
   $417 = ((($416)) + 8|0);
   $418 = HEAP32[$417>>2]|0;
   $419 = (($418) + 1)|0;
   $420 = ($415|0)==($419|0);
   $421 = $6;
   $422 = ($421|0)!=(3);
   $or$cond3 = $420 & $422;
   $or$cond3$not = $or$cond3 ^ 1;
   $423 = $8;
   $424 = ($423<<24>>24)!=(0);
   $or$cond5 = $or$cond3$not | $424;
   $or$cond5$not = $or$cond5 ^ 1;
   $425 = $9;
   $426 = ($425<<24>>24)!=(0);
   $or$cond7 = $or$cond5$not | $426;
   $427 = $21;
   $428 = ((($427)) + 8|0);
   $429 = HEAP32[$428>>2]|0;
   if ($or$cond7) {
    $430 = (($429) + 1)|0;
    $431 = $21;
    $432 = ((($431)) + 12|0);
    HEAP32[$432>>2] = $430;
   } else {
    $433 = $21;
    $434 = ((($433)) + 12|0);
    HEAP32[$434>>2] = $429;
   }
   $435 = $4;
   $436 = $4;
   $437 = ((($436)) + 8|0);
   $438 = HEAP32[$437>>2]|0;
   $439 = HEAP32[$27>>2]|0;
   $440 = $21;
   $441 = ((($440)) + 12|0);
   $442 = HEAP32[$441>>2]|0;
   $443 = $4;
   $444 = ((($443)) + 16|0);
   $445 = HEAP32[$444>>2]|0;
   $446 = $19;
   $447 = $18;
   $448 = (__ZL22stbi__create_png_imageP9stbi__pngPhjiiii($435,$438,$439,$442,$445,$446,$447)|0);
   $449 = ($448|0)!=(0);
   if (!($449)) {
    $3 = 0;
    $539 = $3;
    STACKTOP = sp;return ($539|0);
   }
   $450 = $9;
   $451 = ($450<<24>>24)!=(0);
   do {
    if ($451) {
     $452 = $4;
     $453 = ((($452)) + 16|0);
     $454 = HEAP32[$453>>2]|0;
     $455 = ($454|0)==(16);
     $456 = $4;
     if ($455) {
      $457 = $21;
      $458 = ((($457)) + 12|0);
      $459 = HEAP32[$458>>2]|0;
      $460 = (__ZL28stbi__compute_transparency16P9stbi__pngPti($456,$11,$459)|0);
      $461 = ($460|0)!=(0);
      if ($461) {
       break;
      }
      $3 = 0;
      $539 = $3;
      STACKTOP = sp;return ($539|0);
     } else {
      $462 = $21;
      $463 = ((($462)) + 12|0);
      $464 = HEAP32[$463>>2]|0;
      $465 = (__ZL26stbi__compute_transparencyP9stbi__pngPhi($456,$10,$464)|0);
      $466 = ($465|0)!=(0);
      if ($466) {
       break;
      }
      $3 = 0;
      $539 = $3;
      STACKTOP = sp;return ($539|0);
     }
    }
   } while(0);
   $467 = $20;
   $468 = ($467|0)!=(0);
   $469 = (0)!=(0);
   $or$cond8 = $468 & $469;
   if ($or$cond8) {
    $470 = $21;
    $471 = ((($470)) + 12|0);
    $472 = HEAP32[$471>>2]|0;
    $473 = ($472|0)>(2);
    if ($473) {
     $474 = $4;
     __ZL15stbi__de_iphoneP9stbi__png($474);
    }
   }
   $475 = $8;
   $476 = ($475<<24>>24)!=(0);
   if ($476) {
    $477 = $8;
    $478 = $477&255;
    $479 = $21;
    $480 = ((($479)) + 8|0);
    HEAP32[$480>>2] = $478;
    $481 = $8;
    $482 = $481&255;
    $483 = $21;
    $484 = ((($483)) + 12|0);
    HEAP32[$484>>2] = $482;
    $485 = $6;
    $486 = ($485|0)>=(3);
    if ($486) {
     $487 = $6;
     $488 = $21;
     $489 = ((($488)) + 12|0);
     HEAP32[$489>>2] = $487;
    }
    $490 = $4;
    $491 = $15;
    $492 = $21;
    $493 = ((($492)) + 12|0);
    $494 = HEAP32[$493>>2]|0;
    $495 = (__ZL24stbi__expand_png_paletteP9stbi__pngPhii($490,$7,$491,$494)|0);
    $496 = ($495|0)!=(0);
    if (!($496)) {
     $3 = 0;
     $539 = $3;
     STACKTOP = sp;return ($539|0);
    }
   } else {
    $497 = $9;
    $498 = ($497<<24>>24)!=(0);
    if ($498) {
     $499 = $21;
     $500 = ((($499)) + 8|0);
     $501 = HEAP32[$500>>2]|0;
     $502 = (($501) + 1)|0;
     HEAP32[$500>>2] = $502;
    }
   }
   $503 = $4;
   $504 = ((($503)) + 8|0);
   $505 = HEAP32[$504>>2]|0;
   _free($505);
   $506 = $4;
   $507 = ((($506)) + 8|0);
   HEAP32[$507>>2] = 0;
   $3 = 1;
   $539 = $3;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 132: {
   $510 = (__ZL9stbi__errPKc(10547)|0);
   $3 = $510;
   $539 = $3;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 134: {
   $515 = ((($22)) + 4|0);
   $516 = HEAP32[$515>>2]|0;
   $517 = $516 >>> 24;
   $518 = $517 & 255;
   $519 = $518&255;
   HEAP8[304] = $519;
   $520 = ((($22)) + 4|0);
   $521 = HEAP32[$520>>2]|0;
   $522 = $521 >>> 16;
   $523 = $522 & 255;
   $524 = $523&255;
   HEAP8[(305)>>0] = $524;
   $525 = ((($22)) + 4|0);
   $526 = HEAP32[$525>>2]|0;
   $527 = $526 >>> 8;
   $528 = $527 & 255;
   $529 = $528&255;
   HEAP8[(306)>>0] = $529;
   $530 = ((($22)) + 4|0);
   $531 = HEAP32[$530>>2]|0;
   $532 = $531 >>> 0;
   $533 = $532 & 255;
   $534 = $533&255;
   HEAP8[(307)>>0] = $534;
   $535 = (__ZL9stbi__errPKc(304)|0);
   $3 = $535;
   $539 = $3;
   STACKTOP = sp;return ($539|0);
   break;
  }
 }
 return (0)|0;
}
function __ZL22stbi__check_png_headerP13stbi__context($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = 0;
 while(1) {
  $4 = $3;
  $5 = ($4|0)<(8);
  if (!($5)) {
   label = 6;
   break;
  }
  $6 = $2;
  $7 = (__ZL10stbi__get8P13stbi__context($6)|0);
  $8 = $7&255;
  $9 = $3;
  $10 = (11288 + ($9)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = ($8|0)!=($12|0);
  if ($13) {
   label = 4;
   break;
  }
  $15 = $3;
  $16 = (($15) + 1)|0;
  $3 = $16;
 }
 if ((label|0) == 4) {
  $14 = (__ZL9stbi__errPKc(11296)|0);
  $1 = $14;
  $17 = $1;
  STACKTOP = sp;return ($17|0);
 }
 else if ((label|0) == 6) {
  $1 = 1;
  $17 = $1;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function __ZL22stbi__get_chunk_headerP13stbi__context($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $1;
 $3 = $2;
 $4 = (__ZL13stbi__get32beP13stbi__context($3)|0);
 HEAP32[$0>>2] = $4;
 $5 = $2;
 $6 = (__ZL13stbi__get32beP13stbi__context($5)|0);
 $7 = ((($0)) + 4|0);
 HEAP32[$7>>2] = $6;
 STACKTOP = sp;return;
}
function _stbi_zlib_decode_malloc_guesssize_headerflag($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4112|0);
 $11 = sp + 8|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $13 = $8;
 $14 = (__ZL12stbi__mallocm($13)|0);
 $12 = $14;
 $15 = $12;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $5 = 0;
  $41 = $5;
  STACKTOP = sp;return ($41|0);
 }
 $17 = $6;
 HEAP32[$11>>2] = $17;
 $18 = $6;
 $19 = $7;
 $20 = (($18) + ($19)|0);
 $21 = ((($11)) + 4|0);
 HEAP32[$21>>2] = $20;
 $22 = $12;
 $23 = $8;
 $24 = $10;
 $25 = (__ZL13stbi__do_zlibP10stbi__zbufPciii($11,$22,$23,1,$24)|0);
 $26 = ($25|0)!=(0);
 if (!($26)) {
  $39 = ((($11)) + 20|0);
  $40 = HEAP32[$39>>2]|0;
  _free($40);
  $5 = 0;
  $41 = $5;
  STACKTOP = sp;return ($41|0);
 }
 $27 = $9;
 $28 = ($27|0)!=(0|0);
 if ($28) {
  $29 = ((($11)) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ((($11)) + 20|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $30;
  $34 = $32;
  $35 = (($33) - ($34))|0;
  $36 = $9;
  HEAP32[$36>>2] = $35;
 }
 $37 = ((($11)) + 20|0);
 $38 = HEAP32[$37>>2]|0;
 $5 = $38;
 $41 = $5;
 STACKTOP = sp;return ($41|0);
}
function __ZL22stbi__create_png_imageP9stbi__pngPhjiiii($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $19 = sp + 96|0;
 $20 = sp + 64|0;
 $21 = sp + 32|0;
 $22 = sp;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $30 = $12;
 $31 = ($30|0)==(16);
 $32 = $31 ? 2 : 1;
 $15 = $32;
 $33 = $11;
 $34 = $15;
 $35 = Math_imul($33, $34)|0;
 $16 = $35;
 $36 = $14;
 $37 = ($36|0)!=(0);
 $38 = $8;
 if (!($37)) {
  $39 = $9;
  $40 = $10;
  $41 = $11;
  $42 = $8;
  $43 = HEAP32[$42>>2]|0;
  $44 = HEAP32[$43>>2]|0;
  $45 = $8;
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($46)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $12;
  $50 = $13;
  $51 = (__ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii($38,$39,$40,$41,$44,$48,$49,$50)|0);
  $7 = $51;
  $189 = $7;
  STACKTOP = sp;return ($189|0);
 }
 $52 = HEAP32[$38>>2]|0;
 $53 = HEAP32[$52>>2]|0;
 $54 = $8;
 $55 = HEAP32[$54>>2]|0;
 $56 = ((($55)) + 4|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = $16;
 $59 = (__ZL17stbi__malloc_mad3iiii($53,$57,$58,0)|0);
 $17 = $59;
 $18 = 0;
 while(1) {
  $60 = $18;
  $61 = ($60|0)<(7);
  if (!($61)) {
   label = 16;
   break;
  }
  ;HEAP32[$19>>2]=HEAP32[336>>2]|0;HEAP32[$19+4>>2]=HEAP32[336+4>>2]|0;HEAP32[$19+8>>2]=HEAP32[336+8>>2]|0;HEAP32[$19+12>>2]=HEAP32[336+12>>2]|0;HEAP32[$19+16>>2]=HEAP32[336+16>>2]|0;HEAP32[$19+20>>2]=HEAP32[336+20>>2]|0;HEAP32[$19+24>>2]=HEAP32[336+24>>2]|0;
  ;HEAP32[$20>>2]=HEAP32[368>>2]|0;HEAP32[$20+4>>2]=HEAP32[368+4>>2]|0;HEAP32[$20+8>>2]=HEAP32[368+8>>2]|0;HEAP32[$20+12>>2]=HEAP32[368+12>>2]|0;HEAP32[$20+16>>2]=HEAP32[368+16>>2]|0;HEAP32[$20+20>>2]=HEAP32[368+20>>2]|0;HEAP32[$20+24>>2]=HEAP32[368+24>>2]|0;
  ;HEAP32[$21>>2]=HEAP32[400>>2]|0;HEAP32[$21+4>>2]=HEAP32[400+4>>2]|0;HEAP32[$21+8>>2]=HEAP32[400+8>>2]|0;HEAP32[$21+12>>2]=HEAP32[400+12>>2]|0;HEAP32[$21+16>>2]=HEAP32[400+16>>2]|0;HEAP32[$21+20>>2]=HEAP32[400+20>>2]|0;HEAP32[$21+24>>2]=HEAP32[400+24>>2]|0;
  ;HEAP32[$22>>2]=HEAP32[432>>2]|0;HEAP32[$22+4>>2]=HEAP32[432+4>>2]|0;HEAP32[$22+8>>2]=HEAP32[432+8>>2]|0;HEAP32[$22+12>>2]=HEAP32[432+12>>2]|0;HEAP32[$22+16>>2]=HEAP32[432+16>>2]|0;HEAP32[$22+20>>2]=HEAP32[432+20>>2]|0;HEAP32[$22+24>>2]=HEAP32[432+24>>2]|0;
  $62 = $8;
  $63 = HEAP32[$62>>2]|0;
  $64 = HEAP32[$63>>2]|0;
  $65 = $18;
  $66 = (($19) + ($65<<2)|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (($64) - ($67))|0;
  $69 = $18;
  $70 = (($21) + ($69<<2)|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($68) + ($71))|0;
  $73 = (($72) - 1)|0;
  $74 = $18;
  $75 = (($21) + ($74<<2)|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (($73>>>0) / ($76>>>0))&-1;
  $25 = $77;
  $78 = $8;
  $79 = HEAP32[$78>>2]|0;
  $80 = ((($79)) + 4|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = $18;
  $83 = (($20) + ($82<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (($81) - ($84))|0;
  $86 = $18;
  $87 = (($22) + ($86<<2)|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = (($85) + ($88))|0;
  $90 = (($89) - 1)|0;
  $91 = $18;
  $92 = (($22) + ($91<<2)|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = (($90>>>0) / ($93>>>0))&-1;
  $26 = $94;
  $95 = $25;
  $96 = ($95|0)!=(0);
  $97 = $26;
  $98 = ($97|0)!=(0);
  $or$cond = $96 & $98;
  if ($or$cond) {
   $99 = $8;
   $100 = HEAP32[$99>>2]|0;
   $101 = ((($100)) + 8|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = $25;
   $104 = Math_imul($102, $103)|0;
   $105 = $12;
   $106 = Math_imul($104, $105)|0;
   $107 = (($106) + 7)|0;
   $108 = $107 >> 3;
   $109 = (($108) + 1)|0;
   $110 = $26;
   $111 = Math_imul($109, $110)|0;
   $27 = $111;
   $112 = $8;
   $113 = $9;
   $114 = $10;
   $115 = $11;
   $116 = $25;
   $117 = $26;
   $118 = $12;
   $119 = $13;
   $120 = (__ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii($112,$113,$114,$115,$116,$117,$118,$119)|0);
   $121 = ($120|0)!=(0);
   if (!($121)) {
    label = 7;
    break;
   }
   $24 = 0;
   while(1) {
    $123 = $24;
    $124 = $26;
    $125 = ($123|0)<($124|0);
    if (!($125)) {
     break;
    }
    $23 = 0;
    while(1) {
     $126 = $23;
     $127 = $25;
     $128 = ($126|0)<($127|0);
     $129 = $24;
     if (!($128)) {
      break;
     }
     $130 = $18;
     $131 = (($22) + ($130<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = Math_imul($129, $132)|0;
     $134 = $18;
     $135 = (($20) + ($134<<2)|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = (($133) + ($136))|0;
     $28 = $137;
     $138 = $23;
     $139 = $18;
     $140 = (($21) + ($139<<2)|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = Math_imul($138, $141)|0;
     $143 = $18;
     $144 = (($19) + ($143<<2)|0);
     $145 = HEAP32[$144>>2]|0;
     $146 = (($142) + ($145))|0;
     $29 = $146;
     $147 = $17;
     $148 = $28;
     $149 = $8;
     $150 = HEAP32[$149>>2]|0;
     $151 = HEAP32[$150>>2]|0;
     $152 = Math_imul($148, $151)|0;
     $153 = $16;
     $154 = Math_imul($152, $153)|0;
     $155 = (($147) + ($154)|0);
     $156 = $29;
     $157 = $16;
     $158 = Math_imul($156, $157)|0;
     $159 = (($155) + ($158)|0);
     $160 = $8;
     $161 = ((($160)) + 12|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = $24;
     $164 = $25;
     $165 = Math_imul($163, $164)|0;
     $166 = $23;
     $167 = (($165) + ($166))|0;
     $168 = $16;
     $169 = Math_imul($167, $168)|0;
     $170 = (($162) + ($169)|0);
     $171 = $16;
     _memcpy(($159|0),($170|0),($171|0))|0;
     $172 = $23;
     $173 = (($172) + 1)|0;
     $23 = $173;
    }
    $174 = (($129) + 1)|0;
    $24 = $174;
   }
   $175 = $8;
   $176 = ((($175)) + 12|0);
   $177 = HEAP32[$176>>2]|0;
   _free($177);
   $178 = $27;
   $179 = $9;
   $180 = (($179) + ($178)|0);
   $9 = $180;
   $181 = $27;
   $182 = $10;
   $183 = (($182) - ($181))|0;
   $10 = $183;
  }
  $184 = $18;
  $185 = (($184) + 1)|0;
  $18 = $185;
 }
 if ((label|0) == 7) {
  $122 = $17;
  _free($122);
  $7 = 0;
  $189 = $7;
  STACKTOP = sp;return ($189|0);
 }
 else if ((label|0) == 16) {
  $186 = $17;
  $187 = $8;
  $188 = ((($187)) + 12|0);
  HEAP32[$188>>2] = $186;
  $7 = 1;
  $189 = $7;
  STACKTOP = sp;return ($189|0);
 }
 return (0)|0;
}
function __ZL28stbi__compute_transparency16P9stbi__pngPti($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $6 = $11;
 $12 = $6;
 $13 = HEAP32[$12>>2]|0;
 $14 = $6;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = Math_imul($13, $16)|0;
 $8 = $17;
 $18 = $3;
 $19 = ((($18)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $9 = $20;
 $21 = $5;
 $22 = ($21|0)==(2);
 $23 = $5;
 $24 = ($23|0)==(4);
 $or$cond = $22 | $24;
 if (!($or$cond)) {
  ___assert_fail((10706|0),(9662|0),5355,(10758|0));
  // unreachable;
 }
 $25 = $5;
 $26 = ($25|0)==(2);
 $7 = 0;
 if ($26) {
  while(1) {
   $27 = $7;
   $28 = $8;
   $29 = ($27>>>0)<($28>>>0);
   if (!($29)) {
    break;
   }
   $30 = $9;
   $31 = HEAP16[$30>>1]|0;
   $32 = $31&65535;
   $33 = $4;
   $34 = HEAP16[$33>>1]|0;
   $35 = $34&65535;
   $36 = ($32|0)==($35|0);
   $37 = $36 ? 0 : 65535;
   $38 = $37&65535;
   $39 = $9;
   $40 = ((($39)) + 2|0);
   HEAP16[$40>>1] = $38;
   $41 = $9;
   $42 = ((($41)) + 4|0);
   $9 = $42;
   $43 = $7;
   $44 = (($43) + 1)|0;
   $7 = $44;
  }
  STACKTOP = sp;return 1;
 }
 while(1) {
  $45 = $7;
  $46 = $8;
  $47 = ($45>>>0)<($46>>>0);
  if (!($47)) {
   break;
  }
  $48 = $9;
  $49 = HEAP16[$48>>1]|0;
  $50 = $49&65535;
  $51 = $4;
  $52 = HEAP16[$51>>1]|0;
  $53 = $52&65535;
  $54 = ($50|0)==($53|0);
  if ($54) {
   $55 = $9;
   $56 = ((($55)) + 2|0);
   $57 = HEAP16[$56>>1]|0;
   $58 = $57&65535;
   $59 = $4;
   $60 = ((($59)) + 2|0);
   $61 = HEAP16[$60>>1]|0;
   $62 = $61&65535;
   $63 = ($58|0)==($62|0);
   if ($63) {
    $64 = $9;
    $65 = ((($64)) + 4|0);
    $66 = HEAP16[$65>>1]|0;
    $67 = $66&65535;
    $68 = $4;
    $69 = ((($68)) + 4|0);
    $70 = HEAP16[$69>>1]|0;
    $71 = $70&65535;
    $72 = ($67|0)==($71|0);
    if ($72) {
     $73 = $9;
     $74 = ((($73)) + 6|0);
     HEAP16[$74>>1] = 0;
    }
   }
  }
  $75 = $9;
  $76 = ((($75)) + 8|0);
  $9 = $76;
  $77 = $7;
  $78 = (($77) + 1)|0;
  $7 = $78;
 }
 STACKTOP = sp;return 1;
}
function __ZL26stbi__compute_transparencyP9stbi__pngPhi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $6 = $11;
 $12 = $6;
 $13 = HEAP32[$12>>2]|0;
 $14 = $6;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = Math_imul($13, $16)|0;
 $8 = $17;
 $18 = $3;
 $19 = ((($18)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $9 = $20;
 $21 = $5;
 $22 = ($21|0)==(2);
 $23 = $5;
 $24 = ($23|0)==(4);
 $or$cond = $22 | $24;
 if (!($or$cond)) {
  ___assert_fail((10706|0),(9662|0),5325,(10731|0));
  // unreachable;
 }
 $25 = $5;
 $26 = ($25|0)==(2);
 $7 = 0;
 if ($26) {
  while(1) {
   $27 = $7;
   $28 = $8;
   $29 = ($27>>>0)<($28>>>0);
   if (!($29)) {
    break;
   }
   $30 = $9;
   $31 = HEAP8[$30>>0]|0;
   $32 = $31&255;
   $33 = $4;
   $34 = HEAP8[$33>>0]|0;
   $35 = $34&255;
   $36 = ($32|0)==($35|0);
   $37 = $36 ? 0 : 255;
   $38 = $37&255;
   $39 = $9;
   $40 = ((($39)) + 1|0);
   HEAP8[$40>>0] = $38;
   $41 = $9;
   $42 = ((($41)) + 2|0);
   $9 = $42;
   $43 = $7;
   $44 = (($43) + 1)|0;
   $7 = $44;
  }
  STACKTOP = sp;return 1;
 }
 while(1) {
  $45 = $7;
  $46 = $8;
  $47 = ($45>>>0)<($46>>>0);
  if (!($47)) {
   break;
  }
  $48 = $9;
  $49 = HEAP8[$48>>0]|0;
  $50 = $49&255;
  $51 = $4;
  $52 = HEAP8[$51>>0]|0;
  $53 = $52&255;
  $54 = ($50|0)==($53|0);
  if ($54) {
   $55 = $9;
   $56 = ((($55)) + 1|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = $57&255;
   $59 = $4;
   $60 = ((($59)) + 1|0);
   $61 = HEAP8[$60>>0]|0;
   $62 = $61&255;
   $63 = ($58|0)==($62|0);
   if ($63) {
    $64 = $9;
    $65 = ((($64)) + 2|0);
    $66 = HEAP8[$65>>0]|0;
    $67 = $66&255;
    $68 = $4;
    $69 = ((($68)) + 2|0);
    $70 = HEAP8[$69>>0]|0;
    $71 = $70&255;
    $72 = ($67|0)==($71|0);
    if ($72) {
     $73 = $9;
     $74 = ((($73)) + 3|0);
     HEAP8[$74>>0] = 0;
    }
   }
  }
  $75 = $9;
  $76 = ((($75)) + 4|0);
  $9 = $76;
  $77 = $7;
  $78 = (($77) + 1)|0;
  $7 = $78;
 }
 STACKTOP = sp;return 1;
}
function __ZL15stbi__de_iphoneP9stbi__png($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $11 = $1;
 $12 = HEAP32[$11>>2]|0;
 $2 = $12;
 $13 = $2;
 $14 = HEAP32[$13>>2]|0;
 $15 = $2;
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = Math_imul($14, $17)|0;
 $4 = $18;
 $19 = $1;
 $20 = ((($19)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $5 = $21;
 $22 = $2;
 $23 = ((($22)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(3);
 if ($25) {
  $3 = 0;
  while(1) {
   $26 = $3;
   $27 = $4;
   $28 = ($26>>>0)<($27>>>0);
   if (!($28)) {
    break;
   }
   $29 = $5;
   $30 = HEAP8[$29>>0]|0;
   $6 = $30;
   $31 = $5;
   $32 = ((($31)) + 2|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $5;
   HEAP8[$34>>0] = $33;
   $35 = $6;
   $36 = $5;
   $37 = ((($36)) + 2|0);
   HEAP8[$37>>0] = $35;
   $38 = $5;
   $39 = ((($38)) + 3|0);
   $5 = $39;
   $40 = $3;
   $41 = (($40) + 1)|0;
   $3 = $41;
  }
  STACKTOP = sp;return;
 }
 $42 = $2;
 $43 = ((($42)) + 12|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)==(4);
 if (!($45)) {
  ___assert_fail((10672|0),(9662|0),5451,(10690|0));
  // unreachable;
 }
 $46 = (0)!=(0);
 $3 = 0;
 if (!($46)) {
  while(1) {
   $111 = $3;
   $112 = $4;
   $113 = ($111>>>0)<($112>>>0);
   if (!($113)) {
    break;
   }
   $114 = $5;
   $115 = HEAP8[$114>>0]|0;
   $10 = $115;
   $116 = $5;
   $117 = ((($116)) + 2|0);
   $118 = HEAP8[$117>>0]|0;
   $119 = $5;
   HEAP8[$119>>0] = $118;
   $120 = $10;
   $121 = $5;
   $122 = ((($121)) + 2|0);
   HEAP8[$122>>0] = $120;
   $123 = $5;
   $124 = ((($123)) + 4|0);
   $5 = $124;
   $125 = $3;
   $126 = (($125) + 1)|0;
   $3 = $126;
  }
  STACKTOP = sp;return;
 }
 while(1) {
  $47 = $3;
  $48 = $4;
  $49 = ($47>>>0)<($48>>>0);
  if (!($49)) {
   break;
  }
  $50 = $5;
  $51 = ((($50)) + 3|0);
  $52 = HEAP8[$51>>0]|0;
  $7 = $52;
  $53 = $5;
  $54 = HEAP8[$53>>0]|0;
  $8 = $54;
  $55 = $7;
  $56 = ($55<<24>>24)!=(0);
  if ($56) {
   $57 = $7;
   $58 = $57&255;
   $59 = (($58|0) / 2)&-1;
   $60 = $59&255;
   $9 = $60;
   $61 = $5;
   $62 = ((($61)) + 2|0);
   $63 = HEAP8[$62>>0]|0;
   $64 = $63&255;
   $65 = ($64*255)|0;
   $66 = $9;
   $67 = $66&255;
   $68 = (($65) + ($67))|0;
   $69 = $7;
   $70 = $69&255;
   $71 = (($68|0) / ($70|0))&-1;
   $72 = $71&255;
   $73 = $5;
   HEAP8[$73>>0] = $72;
   $74 = $5;
   $75 = ((($74)) + 1|0);
   $76 = HEAP8[$75>>0]|0;
   $77 = $76&255;
   $78 = ($77*255)|0;
   $79 = $9;
   $80 = $79&255;
   $81 = (($78) + ($80))|0;
   $82 = $7;
   $83 = $82&255;
   $84 = (($81|0) / ($83|0))&-1;
   $85 = $84&255;
   $86 = $5;
   $87 = ((($86)) + 1|0);
   HEAP8[$87>>0] = $85;
   $88 = $8;
   $89 = $88&255;
   $90 = ($89*255)|0;
   $91 = $9;
   $92 = $91&255;
   $93 = (($90) + ($92))|0;
   $94 = $7;
   $95 = $94&255;
   $96 = (($93|0) / ($95|0))&-1;
   $97 = $96&255;
   $98 = $5;
   $99 = ((($98)) + 2|0);
   HEAP8[$99>>0] = $97;
  } else {
   $100 = $5;
   $101 = ((($100)) + 2|0);
   $102 = HEAP8[$101>>0]|0;
   $103 = $5;
   HEAP8[$103>>0] = $102;
   $104 = $8;
   $105 = $5;
   $106 = ((($105)) + 2|0);
   HEAP8[$106>>0] = $104;
  }
  $107 = $5;
  $108 = ((($107)) + 4|0);
  $5 = $108;
  $109 = $3;
  $110 = (($109) + 1)|0;
  $3 = $110;
 }
 STACKTOP = sp;return;
}
function __ZL24stbi__expand_png_paletteP9stbi__pngPhii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $16 = $5;
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[$17>>2]|0;
 $19 = $5;
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = Math_imul($18, $22)|0;
 $10 = $23;
 $24 = $5;
 $25 = ((($24)) + 12|0);
 $26 = HEAP32[$25>>2]|0;
 $13 = $26;
 $27 = $10;
 $28 = $8;
 $29 = (__ZL17stbi__malloc_mad2iii($27,$28,0)|0);
 $11 = $29;
 $30 = $11;
 $31 = ($30|0)==(0|0);
 if ($31) {
  $32 = (__ZL9stbi__errPKc(9723)|0);
  $4 = $32;
  $113 = $4;
  STACKTOP = sp;return ($113|0);
 }
 $33 = $11;
 $12 = $33;
 $34 = $8;
 $35 = ($34|0)==(3);
 $9 = 0;
 L5: do {
  if ($35) {
   while(1) {
    $36 = $9;
    $37 = $10;
    $38 = ($36>>>0)<($37>>>0);
    if (!($38)) {
     break L5;
    }
    $39 = $13;
    $40 = $9;
    $41 = (($39) + ($40)|0);
    $42 = HEAP8[$41>>0]|0;
    $43 = $42&255;
    $44 = $43<<2;
    $14 = $44;
    $45 = $6;
    $46 = $14;
    $47 = (($45) + ($46)|0);
    $48 = HEAP8[$47>>0]|0;
    $49 = $11;
    HEAP8[$49>>0] = $48;
    $50 = $6;
    $51 = $14;
    $52 = (($51) + 1)|0;
    $53 = (($50) + ($52)|0);
    $54 = HEAP8[$53>>0]|0;
    $55 = $11;
    $56 = ((($55)) + 1|0);
    HEAP8[$56>>0] = $54;
    $57 = $6;
    $58 = $14;
    $59 = (($58) + 2)|0;
    $60 = (($57) + ($59)|0);
    $61 = HEAP8[$60>>0]|0;
    $62 = $11;
    $63 = ((($62)) + 2|0);
    HEAP8[$63>>0] = $61;
    $64 = $11;
    $65 = ((($64)) + 3|0);
    $11 = $65;
    $66 = $9;
    $67 = (($66) + 1)|0;
    $9 = $67;
   }
  } else {
   while(1) {
    $68 = $9;
    $69 = $10;
    $70 = ($68>>>0)<($69>>>0);
    if (!($70)) {
     break L5;
    }
    $71 = $13;
    $72 = $9;
    $73 = (($71) + ($72)|0);
    $74 = HEAP8[$73>>0]|0;
    $75 = $74&255;
    $76 = $75<<2;
    $15 = $76;
    $77 = $6;
    $78 = $15;
    $79 = (($77) + ($78)|0);
    $80 = HEAP8[$79>>0]|0;
    $81 = $11;
    HEAP8[$81>>0] = $80;
    $82 = $6;
    $83 = $15;
    $84 = (($83) + 1)|0;
    $85 = (($82) + ($84)|0);
    $86 = HEAP8[$85>>0]|0;
    $87 = $11;
    $88 = ((($87)) + 1|0);
    HEAP8[$88>>0] = $86;
    $89 = $6;
    $90 = $15;
    $91 = (($90) + 2)|0;
    $92 = (($89) + ($91)|0);
    $93 = HEAP8[$92>>0]|0;
    $94 = $11;
    $95 = ((($94)) + 2|0);
    HEAP8[$95>>0] = $93;
    $96 = $6;
    $97 = $15;
    $98 = (($97) + 3)|0;
    $99 = (($96) + ($98)|0);
    $100 = HEAP8[$99>>0]|0;
    $101 = $11;
    $102 = ((($101)) + 3|0);
    HEAP8[$102>>0] = $100;
    $103 = $11;
    $104 = ((($103)) + 4|0);
    $11 = $104;
    $105 = $9;
    $106 = (($105) + 1)|0;
    $9 = $106;
   }
  }
 } while(0);
 $107 = $5;
 $108 = ((($107)) + 12|0);
 $109 = HEAP32[$108>>2]|0;
 _free($109);
 $110 = $12;
 $111 = $5;
 $112 = ((($111)) + 12|0);
 HEAP32[$112>>2] = $110;
 $4 = 1;
 $113 = $4;
 STACKTOP = sp;return ($113|0);
}
function __ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0;
 var $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0;
 var $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0;
 var $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0;
 var $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0;
 var $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0;
 var $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0;
 var $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0;
 var $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0;
 var $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0;
 var $1233 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
 var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
 var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
 var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
 var $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
 var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0;
 var $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0;
 var $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0;
 var $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0;
 var $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0;
 var $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0;
 var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
 var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0;
 var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
 var $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0;
 var $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0;
 var $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0;
 var $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0;
 var $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0;
 var $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0;
 var $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0;
 var $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0;
 var $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0;
 var $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0;
 var $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0;
 var $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0;
 var $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0;
 var $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0;
 var $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0;
 var $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0;
 var $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0;
 var $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0;
 var $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0;
 var $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $39 = $15;
 $40 = ($39|0)==(16);
 $41 = $40 ? 2 : 1;
 $17 = $41;
 $42 = $9;
 $43 = HEAP32[$42>>2]|0;
 $18 = $43;
 $44 = $13;
 $45 = $12;
 $46 = Math_imul($44, $45)|0;
 $47 = $17;
 $48 = Math_imul($46, $47)|0;
 $21 = $48;
 $49 = $18;
 $50 = ((($49)) + 8|0);
 $51 = HEAP32[$50>>2]|0;
 $25 = $51;
 $52 = $12;
 $53 = $17;
 $54 = Math_imul($52, $53)|0;
 $26 = $54;
 $55 = $25;
 $56 = $17;
 $57 = Math_imul($55, $56)|0;
 $27 = $57;
 $58 = $13;
 $28 = $58;
 $59 = $12;
 $60 = $18;
 $61 = ((($60)) + 8|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ($59|0)==($62|0);
 if (!($63)) {
  $64 = $12;
  $65 = $18;
  $66 = ((($65)) + 8|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (($67) + 1)|0;
  $69 = ($64|0)==($68|0);
  if (!($69)) {
   ___assert_fail((10787|0),(9662|0),4986,(10828|0));
   // unreachable;
  }
 }
 $70 = $13;
 $71 = $14;
 $72 = $26;
 $73 = (__ZL17stbi__malloc_mad3iiii($70,$71,$72,0)|0);
 $74 = $9;
 $75 = ((($74)) + 12|0);
 HEAP32[$75>>2] = $73;
 $76 = $9;
 $77 = ((($76)) + 12|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = ($78|0)!=(0|0);
 if (!($79)) {
  $80 = (__ZL9stbi__errPKc(9723)|0);
  $8 = $80;
  $1233 = $8;
  STACKTOP = sp;return ($1233|0);
 }
 $81 = $25;
 $82 = $13;
 $83 = $15;
 $84 = (__ZL21stbi__mad3sizes_validiiii($81,$82,$83,7)|0);
 $85 = ($84|0)!=(0);
 if (!($85)) {
  $86 = (__ZL9stbi__errPKc(9762)|0);
  $8 = $86;
  $1233 = $8;
  STACKTOP = sp;return ($1233|0);
 }
 $87 = $25;
 $88 = $13;
 $89 = Math_imul($87, $88)|0;
 $90 = $15;
 $91 = Math_imul($89, $90)|0;
 $92 = (($91) + 7)|0;
 $93 = $92 >>> 3;
 $23 = $93;
 $94 = $23;
 $95 = (($94) + 1)|0;
 $96 = $14;
 $97 = Math_imul($95, $96)|0;
 $22 = $97;
 $98 = $11;
 $99 = $22;
 $100 = ($98>>>0)<($99>>>0);
 if ($100) {
  $101 = (__ZL9stbi__errPKc(10855)|0);
  $8 = $101;
  $1233 = $8;
  STACKTOP = sp;return ($1233|0);
 }
 $20 = 0;
 L17: while(1) {
  $102 = $20;
  $103 = $14;
  $104 = ($102>>>0)<($103>>>0);
  if (!($104)) {
   label = 113;
   break;
  }
  $105 = $9;
  $106 = ((($105)) + 12|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = $21;
  $109 = $20;
  $110 = Math_imul($108, $109)|0;
  $111 = (($107) + ($110)|0);
  $29 = $111;
  $112 = $10;
  $113 = ((($112)) + 1|0);
  $10 = $113;
  $114 = HEAP8[$112>>0]|0;
  $115 = $114&255;
  $31 = $115;
  $116 = $31;
  $117 = ($116|0)>(4);
  if ($117) {
   label = 13;
   break;
  }
  $119 = $15;
  $120 = ($119|0)<(8);
  if ($120) {
   $121 = $23;
   $122 = $13;
   $123 = ($121>>>0)<=($122>>>0);
   if (!($123)) {
    label = 16;
    break;
   }
   $124 = $13;
   $125 = $12;
   $126 = Math_imul($124, $125)|0;
   $127 = $23;
   $128 = (($126) - ($127))|0;
   $129 = $29;
   $130 = (($129) + ($128)|0);
   $29 = $130;
   $27 = 1;
   $131 = $23;
   $28 = $131;
  }
  $132 = $29;
  $133 = $21;
  $134 = (0 - ($133))|0;
  $135 = (($132) + ($134)|0);
  $30 = $135;
  $136 = $20;
  $137 = ($136|0)==(0);
  if ($137) {
   $138 = $31;
   $139 = (10909 + ($138)|0);
   $140 = HEAP8[$139>>0]|0;
   $141 = $140&255;
   $31 = $141;
  }
  $24 = 0;
  while(1) {
   $142 = $24;
   $143 = $27;
   $144 = ($142|0)<($143|0);
   if (!($144)) {
    break;
   }
   $145 = $31;
   switch ($145|0) {
   case 0:  {
    $146 = $10;
    $147 = $24;
    $148 = (($146) + ($147)|0);
    $149 = HEAP8[$148>>0]|0;
    $150 = $29;
    $151 = $24;
    $152 = (($150) + ($151)|0);
    HEAP8[$152>>0] = $149;
    break;
   }
   case 1:  {
    $153 = $10;
    $154 = $24;
    $155 = (($153) + ($154)|0);
    $156 = HEAP8[$155>>0]|0;
    $157 = $29;
    $158 = $24;
    $159 = (($157) + ($158)|0);
    HEAP8[$159>>0] = $156;
    break;
   }
   case 2:  {
    $160 = $10;
    $161 = $24;
    $162 = (($160) + ($161)|0);
    $163 = HEAP8[$162>>0]|0;
    $164 = $163&255;
    $165 = $30;
    $166 = $24;
    $167 = (($165) + ($166)|0);
    $168 = HEAP8[$167>>0]|0;
    $169 = $168&255;
    $170 = (($164) + ($169))|0;
    $171 = $170 & 255;
    $172 = $171&255;
    $173 = $29;
    $174 = $24;
    $175 = (($173) + ($174)|0);
    HEAP8[$175>>0] = $172;
    break;
   }
   case 3:  {
    $176 = $10;
    $177 = $24;
    $178 = (($176) + ($177)|0);
    $179 = HEAP8[$178>>0]|0;
    $180 = $179&255;
    $181 = $30;
    $182 = $24;
    $183 = (($181) + ($182)|0);
    $184 = HEAP8[$183>>0]|0;
    $185 = $184&255;
    $186 = $185 >> 1;
    $187 = (($180) + ($186))|0;
    $188 = $187 & 255;
    $189 = $188&255;
    $190 = $29;
    $191 = $24;
    $192 = (($190) + ($191)|0);
    HEAP8[$192>>0] = $189;
    break;
   }
   case 4:  {
    $193 = $10;
    $194 = $24;
    $195 = (($193) + ($194)|0);
    $196 = HEAP8[$195>>0]|0;
    $197 = $196&255;
    $198 = $30;
    $199 = $24;
    $200 = (($198) + ($199)|0);
    $201 = HEAP8[$200>>0]|0;
    $202 = $201&255;
    $203 = (__ZL11stbi__paethiii(0,$202,0)|0);
    $204 = (($197) + ($203))|0;
    $205 = $204 & 255;
    $206 = $205&255;
    $207 = $29;
    $208 = $24;
    $209 = (($207) + ($208)|0);
    HEAP8[$209>>0] = $206;
    break;
   }
   case 5:  {
    $210 = $10;
    $211 = $24;
    $212 = (($210) + ($211)|0);
    $213 = HEAP8[$212>>0]|0;
    $214 = $29;
    $215 = $24;
    $216 = (($214) + ($215)|0);
    HEAP8[$216>>0] = $213;
    break;
   }
   case 6:  {
    $217 = $10;
    $218 = $24;
    $219 = (($217) + ($218)|0);
    $220 = HEAP8[$219>>0]|0;
    $221 = $29;
    $222 = $24;
    $223 = (($221) + ($222)|0);
    HEAP8[$223>>0] = $220;
    break;
   }
   default: {
   }
   }
   $224 = $24;
   $225 = (($224) + 1)|0;
   $24 = $225;
  }
  $226 = $15;
  $227 = ($226|0)==(8);
  do {
   if ($227) {
    $228 = $25;
    $229 = $12;
    $230 = ($228|0)!=($229|0);
    if ($230) {
     $231 = $29;
     $232 = $25;
     $233 = (($231) + ($232)|0);
     HEAP8[$233>>0] = -1;
    }
    $234 = $25;
    $235 = $10;
    $236 = (($235) + ($234)|0);
    $10 = $236;
    $237 = $12;
    $238 = $29;
    $239 = (($238) + ($237)|0);
    $29 = $239;
    $240 = $12;
    $241 = $30;
    $242 = (($241) + ($240)|0);
    $30 = $242;
   } else {
    $243 = $15;
    $244 = ($243|0)==(16);
    if (!($244)) {
     $264 = $10;
     $265 = ((($264)) + 1|0);
     $10 = $265;
     $266 = $29;
     $267 = ((($266)) + 1|0);
     $29 = $267;
     $268 = $30;
     $269 = ((($268)) + 1|0);
     $30 = $269;
     break;
    }
    $245 = $25;
    $246 = $12;
    $247 = ($245|0)!=($246|0);
    if ($247) {
     $248 = $29;
     $249 = $27;
     $250 = (($248) + ($249)|0);
     HEAP8[$250>>0] = -1;
     $251 = $29;
     $252 = $27;
     $253 = (($252) + 1)|0;
     $254 = (($251) + ($253)|0);
     HEAP8[$254>>0] = -1;
    }
    $255 = $27;
    $256 = $10;
    $257 = (($256) + ($255)|0);
    $10 = $257;
    $258 = $26;
    $259 = $29;
    $260 = (($259) + ($258)|0);
    $29 = $260;
    $261 = $26;
    $262 = $30;
    $263 = (($262) + ($261)|0);
    $30 = $263;
   }
  } while(0);
  $270 = $15;
  $271 = ($270|0)<(8);
  L54: do {
   if ($271) {
    label = 42;
   } else {
    $272 = $25;
    $273 = $12;
    $274 = ($272|0)==($273|0);
    if ($274) {
     label = 42;
    } else {
     $444 = $25;
     $445 = (($444) + 1)|0;
     $446 = $12;
     $447 = ($445|0)==($446|0);
     if (!($447)) {
      label = 64;
      break L17;
     }
     $448 = $31;
     L58: do {
      switch ($448|0) {
      case 0:  {
       $449 = $13;
       $450 = (($449) - 1)|0;
       $19 = $450;
       while(1) {
        $451 = $19;
        $452 = ($451>>>0)>=(1);
        if (!($452)) {
         break L58;
        }
        $24 = 0;
        while(1) {
         $453 = $24;
         $454 = $27;
         $455 = ($453|0)<($454|0);
         if (!($455)) {
          break;
         }
         $456 = $10;
         $457 = $24;
         $458 = (($456) + ($457)|0);
         $459 = HEAP8[$458>>0]|0;
         $460 = $29;
         $461 = $24;
         $462 = (($460) + ($461)|0);
         HEAP8[$462>>0] = $459;
         $463 = $24;
         $464 = (($463) + 1)|0;
         $24 = $464;
        }
        $465 = $19;
        $466 = (($465) + -1)|0;
        $19 = $466;
        $467 = $29;
        $468 = $27;
        $469 = (($467) + ($468)|0);
        HEAP8[$469>>0] = -1;
        $470 = $27;
        $471 = $10;
        $472 = (($471) + ($470)|0);
        $10 = $472;
        $473 = $26;
        $474 = $29;
        $475 = (($474) + ($473)|0);
        $29 = $475;
        $476 = $26;
        $477 = $30;
        $478 = (($477) + ($476)|0);
        $30 = $478;
       }
       break;
      }
      case 1:  {
       $479 = $13;
       $480 = (($479) - 1)|0;
       $19 = $480;
       while(1) {
        $481 = $19;
        $482 = ($481>>>0)>=(1);
        if (!($482)) {
         break L58;
        }
        $24 = 0;
        while(1) {
         $483 = $24;
         $484 = $27;
         $485 = ($483|0)<($484|0);
         if (!($485)) {
          break;
         }
         $486 = $10;
         $487 = $24;
         $488 = (($486) + ($487)|0);
         $489 = HEAP8[$488>>0]|0;
         $490 = $489&255;
         $491 = $29;
         $492 = $24;
         $493 = $26;
         $494 = (($492) - ($493))|0;
         $495 = (($491) + ($494)|0);
         $496 = HEAP8[$495>>0]|0;
         $497 = $496&255;
         $498 = (($490) + ($497))|0;
         $499 = $498 & 255;
         $500 = $499&255;
         $501 = $29;
         $502 = $24;
         $503 = (($501) + ($502)|0);
         HEAP8[$503>>0] = $500;
         $504 = $24;
         $505 = (($504) + 1)|0;
         $24 = $505;
        }
        $506 = $19;
        $507 = (($506) + -1)|0;
        $19 = $507;
        $508 = $29;
        $509 = $27;
        $510 = (($508) + ($509)|0);
        HEAP8[$510>>0] = -1;
        $511 = $27;
        $512 = $10;
        $513 = (($512) + ($511)|0);
        $10 = $513;
        $514 = $26;
        $515 = $29;
        $516 = (($515) + ($514)|0);
        $29 = $516;
        $517 = $26;
        $518 = $30;
        $519 = (($518) + ($517)|0);
        $30 = $519;
       }
       break;
      }
      case 2:  {
       $520 = $13;
       $521 = (($520) - 1)|0;
       $19 = $521;
       while(1) {
        $522 = $19;
        $523 = ($522>>>0)>=(1);
        if (!($523)) {
         break L58;
        }
        $24 = 0;
        while(1) {
         $524 = $24;
         $525 = $27;
         $526 = ($524|0)<($525|0);
         if (!($526)) {
          break;
         }
         $527 = $10;
         $528 = $24;
         $529 = (($527) + ($528)|0);
         $530 = HEAP8[$529>>0]|0;
         $531 = $530&255;
         $532 = $30;
         $533 = $24;
         $534 = (($532) + ($533)|0);
         $535 = HEAP8[$534>>0]|0;
         $536 = $535&255;
         $537 = (($531) + ($536))|0;
         $538 = $537 & 255;
         $539 = $538&255;
         $540 = $29;
         $541 = $24;
         $542 = (($540) + ($541)|0);
         HEAP8[$542>>0] = $539;
         $543 = $24;
         $544 = (($543) + 1)|0;
         $24 = $544;
        }
        $545 = $19;
        $546 = (($545) + -1)|0;
        $19 = $546;
        $547 = $29;
        $548 = $27;
        $549 = (($547) + ($548)|0);
        HEAP8[$549>>0] = -1;
        $550 = $27;
        $551 = $10;
        $552 = (($551) + ($550)|0);
        $10 = $552;
        $553 = $26;
        $554 = $29;
        $555 = (($554) + ($553)|0);
        $29 = $555;
        $556 = $26;
        $557 = $30;
        $558 = (($557) + ($556)|0);
        $30 = $558;
       }
       break;
      }
      case 3:  {
       $559 = $13;
       $560 = (($559) - 1)|0;
       $19 = $560;
       while(1) {
        $561 = $19;
        $562 = ($561>>>0)>=(1);
        if (!($562)) {
         break L58;
        }
        $24 = 0;
        while(1) {
         $563 = $24;
         $564 = $27;
         $565 = ($563|0)<($564|0);
         if (!($565)) {
          break;
         }
         $566 = $10;
         $567 = $24;
         $568 = (($566) + ($567)|0);
         $569 = HEAP8[$568>>0]|0;
         $570 = $569&255;
         $571 = $30;
         $572 = $24;
         $573 = (($571) + ($572)|0);
         $574 = HEAP8[$573>>0]|0;
         $575 = $574&255;
         $576 = $29;
         $577 = $24;
         $578 = $26;
         $579 = (($577) - ($578))|0;
         $580 = (($576) + ($579)|0);
         $581 = HEAP8[$580>>0]|0;
         $582 = $581&255;
         $583 = (($575) + ($582))|0;
         $584 = $583 >> 1;
         $585 = (($570) + ($584))|0;
         $586 = $585 & 255;
         $587 = $586&255;
         $588 = $29;
         $589 = $24;
         $590 = (($588) + ($589)|0);
         HEAP8[$590>>0] = $587;
         $591 = $24;
         $592 = (($591) + 1)|0;
         $24 = $592;
        }
        $593 = $19;
        $594 = (($593) + -1)|0;
        $19 = $594;
        $595 = $29;
        $596 = $27;
        $597 = (($595) + ($596)|0);
        HEAP8[$597>>0] = -1;
        $598 = $27;
        $599 = $10;
        $600 = (($599) + ($598)|0);
        $10 = $600;
        $601 = $26;
        $602 = $29;
        $603 = (($602) + ($601)|0);
        $29 = $603;
        $604 = $26;
        $605 = $30;
        $606 = (($605) + ($604)|0);
        $30 = $606;
       }
       break;
      }
      case 4:  {
       $607 = $13;
       $608 = (($607) - 1)|0;
       $19 = $608;
       while(1) {
        $609 = $19;
        $610 = ($609>>>0)>=(1);
        if (!($610)) {
         break L58;
        }
        $24 = 0;
        while(1) {
         $611 = $24;
         $612 = $27;
         $613 = ($611|0)<($612|0);
         if (!($613)) {
          break;
         }
         $614 = $10;
         $615 = $24;
         $616 = (($614) + ($615)|0);
         $617 = HEAP8[$616>>0]|0;
         $618 = $617&255;
         $619 = $29;
         $620 = $24;
         $621 = $26;
         $622 = (($620) - ($621))|0;
         $623 = (($619) + ($622)|0);
         $624 = HEAP8[$623>>0]|0;
         $625 = $624&255;
         $626 = $30;
         $627 = $24;
         $628 = (($626) + ($627)|0);
         $629 = HEAP8[$628>>0]|0;
         $630 = $629&255;
         $631 = $30;
         $632 = $24;
         $633 = $26;
         $634 = (($632) - ($633))|0;
         $635 = (($631) + ($634)|0);
         $636 = HEAP8[$635>>0]|0;
         $637 = $636&255;
         $638 = (__ZL11stbi__paethiii($625,$630,$637)|0);
         $639 = (($618) + ($638))|0;
         $640 = $639 & 255;
         $641 = $640&255;
         $642 = $29;
         $643 = $24;
         $644 = (($642) + ($643)|0);
         HEAP8[$644>>0] = $641;
         $645 = $24;
         $646 = (($645) + 1)|0;
         $24 = $646;
        }
        $647 = $19;
        $648 = (($647) + -1)|0;
        $19 = $648;
        $649 = $29;
        $650 = $27;
        $651 = (($649) + ($650)|0);
        HEAP8[$651>>0] = -1;
        $652 = $27;
        $653 = $10;
        $654 = (($653) + ($652)|0);
        $10 = $654;
        $655 = $26;
        $656 = $29;
        $657 = (($656) + ($655)|0);
        $29 = $657;
        $658 = $26;
        $659 = $30;
        $660 = (($659) + ($658)|0);
        $30 = $660;
       }
       break;
      }
      case 5:  {
       $661 = $13;
       $662 = (($661) - 1)|0;
       $19 = $662;
       while(1) {
        $663 = $19;
        $664 = ($663>>>0)>=(1);
        if (!($664)) {
         break L58;
        }
        $24 = 0;
        while(1) {
         $665 = $24;
         $666 = $27;
         $667 = ($665|0)<($666|0);
         if (!($667)) {
          break;
         }
         $668 = $10;
         $669 = $24;
         $670 = (($668) + ($669)|0);
         $671 = HEAP8[$670>>0]|0;
         $672 = $671&255;
         $673 = $29;
         $674 = $24;
         $675 = $26;
         $676 = (($674) - ($675))|0;
         $677 = (($673) + ($676)|0);
         $678 = HEAP8[$677>>0]|0;
         $679 = $678&255;
         $680 = $679 >> 1;
         $681 = (($672) + ($680))|0;
         $682 = $681 & 255;
         $683 = $682&255;
         $684 = $29;
         $685 = $24;
         $686 = (($684) + ($685)|0);
         HEAP8[$686>>0] = $683;
         $687 = $24;
         $688 = (($687) + 1)|0;
         $24 = $688;
        }
        $689 = $19;
        $690 = (($689) + -1)|0;
        $19 = $690;
        $691 = $29;
        $692 = $27;
        $693 = (($691) + ($692)|0);
        HEAP8[$693>>0] = -1;
        $694 = $27;
        $695 = $10;
        $696 = (($695) + ($694)|0);
        $10 = $696;
        $697 = $26;
        $698 = $29;
        $699 = (($698) + ($697)|0);
        $29 = $699;
        $700 = $26;
        $701 = $30;
        $702 = (($701) + ($700)|0);
        $30 = $702;
       }
       break;
      }
      case 6:  {
       $703 = $13;
       $704 = (($703) - 1)|0;
       $19 = $704;
       while(1) {
        $705 = $19;
        $706 = ($705>>>0)>=(1);
        if (!($706)) {
         break L58;
        }
        $24 = 0;
        while(1) {
         $707 = $24;
         $708 = $27;
         $709 = ($707|0)<($708|0);
         if (!($709)) {
          break;
         }
         $710 = $10;
         $711 = $24;
         $712 = (($710) + ($711)|0);
         $713 = HEAP8[$712>>0]|0;
         $714 = $713&255;
         $715 = $29;
         $716 = $24;
         $717 = $26;
         $718 = (($716) - ($717))|0;
         $719 = (($715) + ($718)|0);
         $720 = HEAP8[$719>>0]|0;
         $721 = $720&255;
         $722 = (__ZL11stbi__paethiii($721,0,0)|0);
         $723 = (($714) + ($722))|0;
         $724 = $723 & 255;
         $725 = $724&255;
         $726 = $29;
         $727 = $24;
         $728 = (($726) + ($727)|0);
         HEAP8[$728>>0] = $725;
         $729 = $24;
         $730 = (($729) + 1)|0;
         $24 = $730;
        }
        $731 = $19;
        $732 = (($731) + -1)|0;
        $19 = $732;
        $733 = $29;
        $734 = $27;
        $735 = (($733) + ($734)|0);
        HEAP8[$735>>0] = -1;
        $736 = $27;
        $737 = $10;
        $738 = (($737) + ($736)|0);
        $10 = $738;
        $739 = $26;
        $740 = $29;
        $741 = (($740) + ($739)|0);
        $29 = $741;
        $742 = $26;
        $743 = $30;
        $744 = (($743) + ($742)|0);
        $30 = $744;
       }
       break;
      }
      default: {
      }
      }
     } while(0);
     $745 = $15;
     $746 = ($745|0)==(16);
     if ($746) {
      $747 = $9;
      $748 = ((($747)) + 12|0);
      $749 = HEAP32[$748>>2]|0;
      $750 = $21;
      $751 = $20;
      $752 = Math_imul($750, $751)|0;
      $753 = (($749) + ($752)|0);
      $29 = $753;
      $19 = 0;
      while(1) {
       $754 = $19;
       $755 = $13;
       $756 = ($754>>>0)<($755>>>0);
       if (!($756)) {
        break L54;
       }
       $757 = $29;
       $758 = $27;
       $759 = (($758) + 1)|0;
       $760 = (($757) + ($759)|0);
       HEAP8[$760>>0] = -1;
       $761 = $19;
       $762 = (($761) + 1)|0;
       $19 = $762;
       $763 = $26;
       $764 = $29;
       $765 = (($764) + ($763)|0);
       $29 = $765;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 42) {
   label = 0;
   $275 = $28;
   $276 = (($275) - 1)|0;
   $277 = $27;
   $278 = Math_imul($276, $277)|0;
   $32 = $278;
   $279 = $31;
   L122: do {
    switch ($279|0) {
    case 0:  {
     $280 = $29;
     $281 = $10;
     $282 = $32;
     _memcpy(($280|0),($281|0),($282|0))|0;
     break;
    }
    case 1:  {
     $24 = 0;
     while(1) {
      $283 = $24;
      $284 = $32;
      $285 = ($283|0)<($284|0);
      if (!($285)) {
       break L122;
      }
      $286 = $10;
      $287 = $24;
      $288 = (($286) + ($287)|0);
      $289 = HEAP8[$288>>0]|0;
      $290 = $289&255;
      $291 = $29;
      $292 = $24;
      $293 = $27;
      $294 = (($292) - ($293))|0;
      $295 = (($291) + ($294)|0);
      $296 = HEAP8[$295>>0]|0;
      $297 = $296&255;
      $298 = (($290) + ($297))|0;
      $299 = $298 & 255;
      $300 = $299&255;
      $301 = $29;
      $302 = $24;
      $303 = (($301) + ($302)|0);
      HEAP8[$303>>0] = $300;
      $304 = $24;
      $305 = (($304) + 1)|0;
      $24 = $305;
     }
     break;
    }
    case 2:  {
     $24 = 0;
     while(1) {
      $306 = $24;
      $307 = $32;
      $308 = ($306|0)<($307|0);
      if (!($308)) {
       break L122;
      }
      $309 = $10;
      $310 = $24;
      $311 = (($309) + ($310)|0);
      $312 = HEAP8[$311>>0]|0;
      $313 = $312&255;
      $314 = $30;
      $315 = $24;
      $316 = (($314) + ($315)|0);
      $317 = HEAP8[$316>>0]|0;
      $318 = $317&255;
      $319 = (($313) + ($318))|0;
      $320 = $319 & 255;
      $321 = $320&255;
      $322 = $29;
      $323 = $24;
      $324 = (($322) + ($323)|0);
      HEAP8[$324>>0] = $321;
      $325 = $24;
      $326 = (($325) + 1)|0;
      $24 = $326;
     }
     break;
    }
    case 3:  {
     $24 = 0;
     while(1) {
      $327 = $24;
      $328 = $32;
      $329 = ($327|0)<($328|0);
      if (!($329)) {
       break L122;
      }
      $330 = $10;
      $331 = $24;
      $332 = (($330) + ($331)|0);
      $333 = HEAP8[$332>>0]|0;
      $334 = $333&255;
      $335 = $30;
      $336 = $24;
      $337 = (($335) + ($336)|0);
      $338 = HEAP8[$337>>0]|0;
      $339 = $338&255;
      $340 = $29;
      $341 = $24;
      $342 = $27;
      $343 = (($341) - ($342))|0;
      $344 = (($340) + ($343)|0);
      $345 = HEAP8[$344>>0]|0;
      $346 = $345&255;
      $347 = (($339) + ($346))|0;
      $348 = $347 >> 1;
      $349 = (($334) + ($348))|0;
      $350 = $349 & 255;
      $351 = $350&255;
      $352 = $29;
      $353 = $24;
      $354 = (($352) + ($353)|0);
      HEAP8[$354>>0] = $351;
      $355 = $24;
      $356 = (($355) + 1)|0;
      $24 = $356;
     }
     break;
    }
    case 4:  {
     $24 = 0;
     while(1) {
      $357 = $24;
      $358 = $32;
      $359 = ($357|0)<($358|0);
      if (!($359)) {
       break L122;
      }
      $360 = $10;
      $361 = $24;
      $362 = (($360) + ($361)|0);
      $363 = HEAP8[$362>>0]|0;
      $364 = $363&255;
      $365 = $29;
      $366 = $24;
      $367 = $27;
      $368 = (($366) - ($367))|0;
      $369 = (($365) + ($368)|0);
      $370 = HEAP8[$369>>0]|0;
      $371 = $370&255;
      $372 = $30;
      $373 = $24;
      $374 = (($372) + ($373)|0);
      $375 = HEAP8[$374>>0]|0;
      $376 = $375&255;
      $377 = $30;
      $378 = $24;
      $379 = $27;
      $380 = (($378) - ($379))|0;
      $381 = (($377) + ($380)|0);
      $382 = HEAP8[$381>>0]|0;
      $383 = $382&255;
      $384 = (__ZL11stbi__paethiii($371,$376,$383)|0);
      $385 = (($364) + ($384))|0;
      $386 = $385 & 255;
      $387 = $386&255;
      $388 = $29;
      $389 = $24;
      $390 = (($388) + ($389)|0);
      HEAP8[$390>>0] = $387;
      $391 = $24;
      $392 = (($391) + 1)|0;
      $24 = $392;
     }
     break;
    }
    case 5:  {
     $24 = 0;
     while(1) {
      $393 = $24;
      $394 = $32;
      $395 = ($393|0)<($394|0);
      if (!($395)) {
       break L122;
      }
      $396 = $10;
      $397 = $24;
      $398 = (($396) + ($397)|0);
      $399 = HEAP8[$398>>0]|0;
      $400 = $399&255;
      $401 = $29;
      $402 = $24;
      $403 = $27;
      $404 = (($402) - ($403))|0;
      $405 = (($401) + ($404)|0);
      $406 = HEAP8[$405>>0]|0;
      $407 = $406&255;
      $408 = $407 >> 1;
      $409 = (($400) + ($408))|0;
      $410 = $409 & 255;
      $411 = $410&255;
      $412 = $29;
      $413 = $24;
      $414 = (($412) + ($413)|0);
      HEAP8[$414>>0] = $411;
      $415 = $24;
      $416 = (($415) + 1)|0;
      $24 = $416;
     }
     break;
    }
    case 6:  {
     $24 = 0;
     while(1) {
      $417 = $24;
      $418 = $32;
      $419 = ($417|0)<($418|0);
      if (!($419)) {
       break L122;
      }
      $420 = $10;
      $421 = $24;
      $422 = (($420) + ($421)|0);
      $423 = HEAP8[$422>>0]|0;
      $424 = $423&255;
      $425 = $29;
      $426 = $24;
      $427 = $27;
      $428 = (($426) - ($427))|0;
      $429 = (($425) + ($428)|0);
      $430 = HEAP8[$429>>0]|0;
      $431 = $430&255;
      $432 = (__ZL11stbi__paethiii($431,0,0)|0);
      $433 = (($424) + ($432))|0;
      $434 = $433 & 255;
      $435 = $434&255;
      $436 = $29;
      $437 = $24;
      $438 = (($436) + ($437)|0);
      HEAP8[$438>>0] = $435;
      $439 = $24;
      $440 = (($439) + 1)|0;
      $24 = $440;
     }
     break;
    }
    default: {
    }
    }
   } while(0);
   $441 = $32;
   $442 = $10;
   $443 = (($442) + ($441)|0);
   $10 = $443;
  }
  $766 = $20;
  $767 = (($766) + 1)|0;
  $20 = $767;
 }
 if ((label|0) == 13) {
  $118 = (__ZL9stbi__errPKc(10873)|0);
  $8 = $118;
  $1233 = $8;
  STACKTOP = sp;return ($1233|0);
 }
 else if ((label|0) == 16) {
  ___assert_fail((10888|0),(9662|0),5013,(10828|0));
  // unreachable;
 }
 else if ((label|0) == 64) {
  ___assert_fail((10914|0),(9662|0),5114,(10828|0));
  // unreachable;
 }
 else if ((label|0) == 113) {
  $768 = $15;
  $769 = ($768|0)<(8);
  L152: do {
   if ($769) {
    $20 = 0;
    L154: while(1) {
     $770 = $20;
     $771 = $14;
     $772 = ($770>>>0)<($771>>>0);
     if (!($772)) {
      break L152;
     }
     $773 = $9;
     $774 = ((($773)) + 12|0);
     $775 = HEAP32[$774>>2]|0;
     $776 = $21;
     $777 = $20;
     $778 = Math_imul($776, $777)|0;
     $779 = (($775) + ($778)|0);
     $33 = $779;
     $780 = $9;
     $781 = ((($780)) + 12|0);
     $782 = HEAP32[$781>>2]|0;
     $783 = $21;
     $784 = $20;
     $785 = Math_imul($783, $784)|0;
     $786 = (($782) + ($785)|0);
     $787 = $13;
     $788 = $12;
     $789 = Math_imul($787, $788)|0;
     $790 = (($786) + ($789)|0);
     $791 = $23;
     $792 = (0 - ($791))|0;
     $793 = (($790) + ($792)|0);
     $34 = $793;
     $794 = $16;
     $795 = ($794|0)==(0);
     if ($795) {
      $796 = $15;
      $797 = (10637 + ($796)|0);
      $798 = HEAP8[$797>>0]|0;
      $799 = $798&255;
      $801 = $799;
     } else {
      $801 = 1;
     }
     $800 = $801&255;
     $35 = $800;
     $802 = $15;
     $803 = ($802|0)==(4);
     do {
      if ($803) {
       $804 = $13;
       $805 = $25;
       $806 = Math_imul($804, $805)|0;
       $24 = $806;
       while(1) {
        $807 = $24;
        $808 = ($807|0)>=(2);
        if (!($808)) {
         break;
        }
        $809 = $35;
        $810 = $809&255;
        $811 = $34;
        $812 = HEAP8[$811>>0]|0;
        $813 = $812&255;
        $814 = $813 >> 4;
        $815 = Math_imul($810, $814)|0;
        $816 = $815&255;
        $817 = $33;
        $818 = ((($817)) + 1|0);
        $33 = $818;
        HEAP8[$817>>0] = $816;
        $819 = $35;
        $820 = $819&255;
        $821 = $34;
        $822 = HEAP8[$821>>0]|0;
        $823 = $822&255;
        $824 = $823 & 15;
        $825 = Math_imul($820, $824)|0;
        $826 = $825&255;
        $827 = $33;
        $828 = ((($827)) + 1|0);
        $33 = $828;
        HEAP8[$827>>0] = $826;
        $829 = $24;
        $830 = (($829) - 2)|0;
        $24 = $830;
        $831 = $34;
        $832 = ((($831)) + 1|0);
        $34 = $832;
       }
       $833 = $24;
       $834 = ($833|0)>(0);
       if ($834) {
        $835 = $35;
        $836 = $835&255;
        $837 = $34;
        $838 = HEAP8[$837>>0]|0;
        $839 = $838&255;
        $840 = $839 >> 4;
        $841 = Math_imul($836, $840)|0;
        $842 = $841&255;
        $843 = $33;
        $844 = ((($843)) + 1|0);
        $33 = $844;
        HEAP8[$843>>0] = $842;
       }
      } else {
       $845 = $15;
       $846 = ($845|0)==(2);
       if ($846) {
        $847 = $13;
        $848 = $25;
        $849 = Math_imul($847, $848)|0;
        $24 = $849;
        while(1) {
         $850 = $24;
         $851 = ($850|0)>=(4);
         if (!($851)) {
          break;
         }
         $852 = $35;
         $853 = $852&255;
         $854 = $34;
         $855 = HEAP8[$854>>0]|0;
         $856 = $855&255;
         $857 = $856 >> 6;
         $858 = Math_imul($853, $857)|0;
         $859 = $858&255;
         $860 = $33;
         $861 = ((($860)) + 1|0);
         $33 = $861;
         HEAP8[$860>>0] = $859;
         $862 = $35;
         $863 = $862&255;
         $864 = $34;
         $865 = HEAP8[$864>>0]|0;
         $866 = $865&255;
         $867 = $866 >> 4;
         $868 = $867 & 3;
         $869 = Math_imul($863, $868)|0;
         $870 = $869&255;
         $871 = $33;
         $872 = ((($871)) + 1|0);
         $33 = $872;
         HEAP8[$871>>0] = $870;
         $873 = $35;
         $874 = $873&255;
         $875 = $34;
         $876 = HEAP8[$875>>0]|0;
         $877 = $876&255;
         $878 = $877 >> 2;
         $879 = $878 & 3;
         $880 = Math_imul($874, $879)|0;
         $881 = $880&255;
         $882 = $33;
         $883 = ((($882)) + 1|0);
         $33 = $883;
         HEAP8[$882>>0] = $881;
         $884 = $35;
         $885 = $884&255;
         $886 = $34;
         $887 = HEAP8[$886>>0]|0;
         $888 = $887&255;
         $889 = $888 & 3;
         $890 = Math_imul($885, $889)|0;
         $891 = $890&255;
         $892 = $33;
         $893 = ((($892)) + 1|0);
         $33 = $893;
         HEAP8[$892>>0] = $891;
         $894 = $24;
         $895 = (($894) - 4)|0;
         $24 = $895;
         $896 = $34;
         $897 = ((($896)) + 1|0);
         $34 = $897;
        }
        $898 = $24;
        $899 = ($898|0)>(0);
        if ($899) {
         $900 = $35;
         $901 = $900&255;
         $902 = $34;
         $903 = HEAP8[$902>>0]|0;
         $904 = $903&255;
         $905 = $904 >> 6;
         $906 = Math_imul($901, $905)|0;
         $907 = $906&255;
         $908 = $33;
         $909 = ((($908)) + 1|0);
         $33 = $909;
         HEAP8[$908>>0] = $907;
        }
        $910 = $24;
        $911 = ($910|0)>(1);
        if ($911) {
         $912 = $35;
         $913 = $912&255;
         $914 = $34;
         $915 = HEAP8[$914>>0]|0;
         $916 = $915&255;
         $917 = $916 >> 4;
         $918 = $917 & 3;
         $919 = Math_imul($913, $918)|0;
         $920 = $919&255;
         $921 = $33;
         $922 = ((($921)) + 1|0);
         $33 = $922;
         HEAP8[$921>>0] = $920;
        }
        $923 = $24;
        $924 = ($923|0)>(2);
        if (!($924)) {
         break;
        }
        $925 = $35;
        $926 = $925&255;
        $927 = $34;
        $928 = HEAP8[$927>>0]|0;
        $929 = $928&255;
        $930 = $929 >> 2;
        $931 = $930 & 3;
        $932 = Math_imul($926, $931)|0;
        $933 = $932&255;
        $934 = $33;
        $935 = ((($934)) + 1|0);
        $33 = $935;
        HEAP8[$934>>0] = $933;
        break;
       }
       $936 = $15;
       $937 = ($936|0)==(1);
       if ($937) {
        $938 = $13;
        $939 = $25;
        $940 = Math_imul($938, $939)|0;
        $24 = $940;
        while(1) {
         $941 = $24;
         $942 = ($941|0)>=(8);
         if (!($942)) {
          break;
         }
         $943 = $35;
         $944 = $943&255;
         $945 = $34;
         $946 = HEAP8[$945>>0]|0;
         $947 = $946&255;
         $948 = $947 >> 7;
         $949 = Math_imul($944, $948)|0;
         $950 = $949&255;
         $951 = $33;
         $952 = ((($951)) + 1|0);
         $33 = $952;
         HEAP8[$951>>0] = $950;
         $953 = $35;
         $954 = $953&255;
         $955 = $34;
         $956 = HEAP8[$955>>0]|0;
         $957 = $956&255;
         $958 = $957 >> 6;
         $959 = $958 & 1;
         $960 = Math_imul($954, $959)|0;
         $961 = $960&255;
         $962 = $33;
         $963 = ((($962)) + 1|0);
         $33 = $963;
         HEAP8[$962>>0] = $961;
         $964 = $35;
         $965 = $964&255;
         $966 = $34;
         $967 = HEAP8[$966>>0]|0;
         $968 = $967&255;
         $969 = $968 >> 5;
         $970 = $969 & 1;
         $971 = Math_imul($965, $970)|0;
         $972 = $971&255;
         $973 = $33;
         $974 = ((($973)) + 1|0);
         $33 = $974;
         HEAP8[$973>>0] = $972;
         $975 = $35;
         $976 = $975&255;
         $977 = $34;
         $978 = HEAP8[$977>>0]|0;
         $979 = $978&255;
         $980 = $979 >> 4;
         $981 = $980 & 1;
         $982 = Math_imul($976, $981)|0;
         $983 = $982&255;
         $984 = $33;
         $985 = ((($984)) + 1|0);
         $33 = $985;
         HEAP8[$984>>0] = $983;
         $986 = $35;
         $987 = $986&255;
         $988 = $34;
         $989 = HEAP8[$988>>0]|0;
         $990 = $989&255;
         $991 = $990 >> 3;
         $992 = $991 & 1;
         $993 = Math_imul($987, $992)|0;
         $994 = $993&255;
         $995 = $33;
         $996 = ((($995)) + 1|0);
         $33 = $996;
         HEAP8[$995>>0] = $994;
         $997 = $35;
         $998 = $997&255;
         $999 = $34;
         $1000 = HEAP8[$999>>0]|0;
         $1001 = $1000&255;
         $1002 = $1001 >> 2;
         $1003 = $1002 & 1;
         $1004 = Math_imul($998, $1003)|0;
         $1005 = $1004&255;
         $1006 = $33;
         $1007 = ((($1006)) + 1|0);
         $33 = $1007;
         HEAP8[$1006>>0] = $1005;
         $1008 = $35;
         $1009 = $1008&255;
         $1010 = $34;
         $1011 = HEAP8[$1010>>0]|0;
         $1012 = $1011&255;
         $1013 = $1012 >> 1;
         $1014 = $1013 & 1;
         $1015 = Math_imul($1009, $1014)|0;
         $1016 = $1015&255;
         $1017 = $33;
         $1018 = ((($1017)) + 1|0);
         $33 = $1018;
         HEAP8[$1017>>0] = $1016;
         $1019 = $35;
         $1020 = $1019&255;
         $1021 = $34;
         $1022 = HEAP8[$1021>>0]|0;
         $1023 = $1022&255;
         $1024 = $1023 & 1;
         $1025 = Math_imul($1020, $1024)|0;
         $1026 = $1025&255;
         $1027 = $33;
         $1028 = ((($1027)) + 1|0);
         $33 = $1028;
         HEAP8[$1027>>0] = $1026;
         $1029 = $24;
         $1030 = (($1029) - 8)|0;
         $24 = $1030;
         $1031 = $34;
         $1032 = ((($1031)) + 1|0);
         $34 = $1032;
        }
        $1033 = $24;
        $1034 = ($1033|0)>(0);
        if ($1034) {
         $1035 = $35;
         $1036 = $1035&255;
         $1037 = $34;
         $1038 = HEAP8[$1037>>0]|0;
         $1039 = $1038&255;
         $1040 = $1039 >> 7;
         $1041 = Math_imul($1036, $1040)|0;
         $1042 = $1041&255;
         $1043 = $33;
         $1044 = ((($1043)) + 1|0);
         $33 = $1044;
         HEAP8[$1043>>0] = $1042;
        }
        $1045 = $24;
        $1046 = ($1045|0)>(1);
        if ($1046) {
         $1047 = $35;
         $1048 = $1047&255;
         $1049 = $34;
         $1050 = HEAP8[$1049>>0]|0;
         $1051 = $1050&255;
         $1052 = $1051 >> 6;
         $1053 = $1052 & 1;
         $1054 = Math_imul($1048, $1053)|0;
         $1055 = $1054&255;
         $1056 = $33;
         $1057 = ((($1056)) + 1|0);
         $33 = $1057;
         HEAP8[$1056>>0] = $1055;
        }
        $1058 = $24;
        $1059 = ($1058|0)>(2);
        if ($1059) {
         $1060 = $35;
         $1061 = $1060&255;
         $1062 = $34;
         $1063 = HEAP8[$1062>>0]|0;
         $1064 = $1063&255;
         $1065 = $1064 >> 5;
         $1066 = $1065 & 1;
         $1067 = Math_imul($1061, $1066)|0;
         $1068 = $1067&255;
         $1069 = $33;
         $1070 = ((($1069)) + 1|0);
         $33 = $1070;
         HEAP8[$1069>>0] = $1068;
        }
        $1071 = $24;
        $1072 = ($1071|0)>(3);
        if ($1072) {
         $1073 = $35;
         $1074 = $1073&255;
         $1075 = $34;
         $1076 = HEAP8[$1075>>0]|0;
         $1077 = $1076&255;
         $1078 = $1077 >> 4;
         $1079 = $1078 & 1;
         $1080 = Math_imul($1074, $1079)|0;
         $1081 = $1080&255;
         $1082 = $33;
         $1083 = ((($1082)) + 1|0);
         $33 = $1083;
         HEAP8[$1082>>0] = $1081;
        }
        $1084 = $24;
        $1085 = ($1084|0)>(4);
        if ($1085) {
         $1086 = $35;
         $1087 = $1086&255;
         $1088 = $34;
         $1089 = HEAP8[$1088>>0]|0;
         $1090 = $1089&255;
         $1091 = $1090 >> 3;
         $1092 = $1091 & 1;
         $1093 = Math_imul($1087, $1092)|0;
         $1094 = $1093&255;
         $1095 = $33;
         $1096 = ((($1095)) + 1|0);
         $33 = $1096;
         HEAP8[$1095>>0] = $1094;
        }
        $1097 = $24;
        $1098 = ($1097|0)>(5);
        if ($1098) {
         $1099 = $35;
         $1100 = $1099&255;
         $1101 = $34;
         $1102 = HEAP8[$1101>>0]|0;
         $1103 = $1102&255;
         $1104 = $1103 >> 2;
         $1105 = $1104 & 1;
         $1106 = Math_imul($1100, $1105)|0;
         $1107 = $1106&255;
         $1108 = $33;
         $1109 = ((($1108)) + 1|0);
         $33 = $1109;
         HEAP8[$1108>>0] = $1107;
        }
        $1110 = $24;
        $1111 = ($1110|0)>(6);
        if (!($1111)) {
         break;
        }
        $1112 = $35;
        $1113 = $1112&255;
        $1114 = $34;
        $1115 = HEAP8[$1114>>0]|0;
        $1116 = $1115&255;
        $1117 = $1116 >> 1;
        $1118 = $1117 & 1;
        $1119 = Math_imul($1113, $1118)|0;
        $1120 = $1119&255;
        $1121 = $33;
        $1122 = ((($1121)) + 1|0);
        $33 = $1122;
        HEAP8[$1121>>0] = $1120;
       }
      }
     } while(0);
     $1123 = $25;
     $1124 = $12;
     $1125 = ($1123|0)!=($1124|0);
     L207: do {
      if ($1125) {
       $1126 = $9;
       $1127 = ((($1126)) + 12|0);
       $1128 = HEAP32[$1127>>2]|0;
       $1129 = $21;
       $1130 = $20;
       $1131 = Math_imul($1129, $1130)|0;
       $1132 = (($1128) + ($1131)|0);
       $33 = $1132;
       $1133 = $25;
       $1134 = ($1133|0)==(1);
       if ($1134) {
        $1135 = $13;
        $1136 = (($1135) - 1)|0;
        $36 = $1136;
        while(1) {
         $1137 = $36;
         $1138 = ($1137|0)>=(0);
         if (!($1138)) {
          break L207;
         }
         $1139 = $33;
         $1140 = $36;
         $1141 = $1140<<1;
         $1142 = (($1141) + 1)|0;
         $1143 = (($1139) + ($1142)|0);
         HEAP8[$1143>>0] = -1;
         $1144 = $33;
         $1145 = $36;
         $1146 = (($1144) + ($1145)|0);
         $1147 = HEAP8[$1146>>0]|0;
         $1148 = $33;
         $1149 = $36;
         $1150 = $1149<<1;
         $1151 = (($1150) + 0)|0;
         $1152 = (($1148) + ($1151)|0);
         HEAP8[$1152>>0] = $1147;
         $1153 = $36;
         $1154 = (($1153) + -1)|0;
         $36 = $1154;
        }
       }
       $1155 = $25;
       $1156 = ($1155|0)==(3);
       if (!($1156)) {
        break L154;
       }
       $1157 = $13;
       $1158 = (($1157) - 1)|0;
       $36 = $1158;
       while(1) {
        $1159 = $36;
        $1160 = ($1159|0)>=(0);
        if (!($1160)) {
         break L207;
        }
        $1161 = $33;
        $1162 = $36;
        $1163 = $1162<<2;
        $1164 = (($1163) + 3)|0;
        $1165 = (($1161) + ($1164)|0);
        HEAP8[$1165>>0] = -1;
        $1166 = $33;
        $1167 = $36;
        $1168 = ($1167*3)|0;
        $1169 = (($1168) + 2)|0;
        $1170 = (($1166) + ($1169)|0);
        $1171 = HEAP8[$1170>>0]|0;
        $1172 = $33;
        $1173 = $36;
        $1174 = $1173<<2;
        $1175 = (($1174) + 2)|0;
        $1176 = (($1172) + ($1175)|0);
        HEAP8[$1176>>0] = $1171;
        $1177 = $33;
        $1178 = $36;
        $1179 = ($1178*3)|0;
        $1180 = (($1179) + 1)|0;
        $1181 = (($1177) + ($1180)|0);
        $1182 = HEAP8[$1181>>0]|0;
        $1183 = $33;
        $1184 = $36;
        $1185 = $1184<<2;
        $1186 = (($1185) + 1)|0;
        $1187 = (($1183) + ($1186)|0);
        HEAP8[$1187>>0] = $1182;
        $1188 = $33;
        $1189 = $36;
        $1190 = ($1189*3)|0;
        $1191 = (($1190) + 0)|0;
        $1192 = (($1188) + ($1191)|0);
        $1193 = HEAP8[$1192>>0]|0;
        $1194 = $33;
        $1195 = $36;
        $1196 = $1195<<2;
        $1197 = (($1196) + 0)|0;
        $1198 = (($1194) + ($1197)|0);
        HEAP8[$1198>>0] = $1193;
        $1199 = $36;
        $1200 = (($1199) + -1)|0;
        $36 = $1200;
       }
      }
     } while(0);
     $1201 = $20;
     $1202 = (($1201) + 1)|0;
     $20 = $1202;
    }
    ___assert_fail((10931|0),(9662|0),5239,(10828|0));
    // unreachable;
   } else {
    $1203 = $15;
    $1204 = ($1203|0)==(16);
    if ($1204) {
     $1205 = $9;
     $1206 = ((($1205)) + 12|0);
     $1207 = HEAP32[$1206>>2]|0;
     $37 = $1207;
     $1208 = $37;
     $38 = $1208;
     $19 = 0;
     while(1) {
      $1209 = $19;
      $1210 = $13;
      $1211 = $14;
      $1212 = Math_imul($1210, $1211)|0;
      $1213 = $12;
      $1214 = Math_imul($1212, $1213)|0;
      $1215 = ($1209>>>0)<($1214>>>0);
      if (!($1215)) {
       break L152;
      }
      $1216 = $37;
      $1217 = HEAP8[$1216>>0]|0;
      $1218 = $1217&255;
      $1219 = $1218 << 8;
      $1220 = $37;
      $1221 = ((($1220)) + 1|0);
      $1222 = HEAP8[$1221>>0]|0;
      $1223 = $1222&255;
      $1224 = $1219 | $1223;
      $1225 = $1224&65535;
      $1226 = $38;
      HEAP16[$1226>>1] = $1225;
      $1227 = $19;
      $1228 = (($1227) + 1)|0;
      $19 = $1228;
      $1229 = $38;
      $1230 = ((($1229)) + 2|0);
      $38 = $1230;
      $1231 = $37;
      $1232 = ((($1231)) + 2|0);
      $37 = $1232;
     }
    }
   }
  } while(0);
  $8 = 1;
  $1233 = $8;
  STACKTOP = sp;return ($1233|0);
 }
 return (0)|0;
}
function __ZL11stbi__paethiii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $11 = $4;
 $12 = $5;
 $13 = (($11) + ($12))|0;
 $14 = $6;
 $15 = (($13) - ($14))|0;
 $7 = $15;
 $16 = $7;
 $17 = $4;
 $18 = (($16) - ($17))|0;
 $19 = (Math_abs(($18|0))|0);
 $8 = $19;
 $20 = $7;
 $21 = $5;
 $22 = (($20) - ($21))|0;
 $23 = (Math_abs(($22|0))|0);
 $9 = $23;
 $24 = $7;
 $25 = $6;
 $26 = (($24) - ($25))|0;
 $27 = (Math_abs(($26|0))|0);
 $10 = $27;
 $28 = $8;
 $29 = $9;
 $30 = ($28|0)<=($29|0);
 if ($30) {
  $31 = $8;
  $32 = $10;
  $33 = ($31|0)<=($32|0);
  if ($33) {
   $34 = $4;
   $3 = $34;
   $40 = $3;
   STACKTOP = sp;return ($40|0);
  }
 }
 $35 = $9;
 $36 = $10;
 $37 = ($35|0)<=($36|0);
 if ($37) {
  $38 = $5;
  $3 = $38;
  $40 = $3;
  STACKTOP = sp;return ($40|0);
 } else {
  $39 = $6;
  $3 = $39;
  $40 = $3;
  STACKTOP = sp;return ($40|0);
 }
 return (0)|0;
}
function __ZL13stbi__do_zlibP10stbi__zbufPciii($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $6;
 $11 = $5;
 $12 = ((($11)) + 20|0);
 HEAP32[$12>>2] = $10;
 $13 = $6;
 $14 = $5;
 $15 = ((($14)) + 16|0);
 HEAP32[$15>>2] = $13;
 $16 = $6;
 $17 = $7;
 $18 = (($16) + ($17)|0);
 $19 = $5;
 $20 = ((($19)) + 24|0);
 HEAP32[$20>>2] = $18;
 $21 = $8;
 $22 = $5;
 $23 = ((($22)) + 28|0);
 HEAP32[$23>>2] = $21;
 $24 = $5;
 $25 = $9;
 $26 = (__ZL16stbi__parse_zlibP10stbi__zbufi($24,$25)|0);
 STACKTOP = sp;return ($26|0);
}
function __ZL16stbi__parse_zlibP10stbi__zbufi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $4;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $3;
  $10 = (__ZL23stbi__parse_zlib_headerP10stbi__zbuf($9)|0);
  $11 = ($10|0)!=(0);
  if ($11) {
   label = 4;
  } else {
   $2 = 0;
  }
 } else {
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $12 = $3;
   $13 = ((($12)) + 8|0);
   HEAP32[$13>>2] = 0;
   $14 = $3;
   $15 = ((($14)) + 12|0);
   HEAP32[$15>>2] = 0;
   while(1) {
    $16 = $3;
    $17 = (__ZL14stbi__zreceiveP10stbi__zbufi($16,1)|0);
    $5 = $17;
    $18 = $3;
    $19 = (__ZL14stbi__zreceiveP10stbi__zbufi($18,2)|0);
    $6 = $19;
    $20 = $6;
    $21 = ($20|0)==(0);
    if ($21) {
     $22 = $3;
     $23 = (__ZL30stbi__parse_uncompressed_blockP10stbi__zbuf($22)|0);
     $24 = ($23|0)!=(0);
     if (!($24)) {
      label = 7;
      break;
     }
    } else {
     $25 = $6;
     $26 = ($25|0)==(3);
     if ($26) {
      label = 9;
      break;
     }
     $27 = $6;
     $28 = ($27|0)==(1);
     $29 = $3;
     if ($28) {
      $30 = ((($29)) + 32|0);
      $31 = (__ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi($30,464,288)|0);
      $32 = ($31|0)!=(0);
      if (!($32)) {
       label = 12;
       break;
      }
      $33 = $3;
      $34 = ((($33)) + 2052|0);
      $35 = (__ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi($34,752,32)|0);
      $36 = ($35|0)!=(0);
      if (!($36)) {
       label = 14;
       break;
      }
     } else {
      $37 = (__ZL27stbi__compute_huffman_codesP10stbi__zbuf($29)|0);
      $38 = ($37|0)!=(0);
      if (!($38)) {
       label = 16;
       break;
      }
     }
     $39 = $3;
     $40 = (__ZL25stbi__parse_huffman_blockP10stbi__zbuf($39)|0);
     $41 = ($40|0)!=(0);
     if (!($41)) {
      label = 18;
      break;
     }
    }
    $42 = $5;
    $43 = ($42|0)!=(0);
    $44 = $43 ^ 1;
    if (!($44)) {
     label = 20;
     break;
    }
   }
   if ((label|0) == 7) {
    $2 = 0;
    break;
   }
   else if ((label|0) == 9) {
    $2 = 0;
    break;
   }
   else if ((label|0) == 12) {
    $2 = 0;
    break;
   }
   else if ((label|0) == 14) {
    $2 = 0;
    break;
   }
   else if ((label|0) == 16) {
    $2 = 0;
    break;
   }
   else if ((label|0) == 18) {
    $2 = 0;
    break;
   }
   else if ((label|0) == 20) {
    $2 = 1;
    break;
   }
  }
 } while(0);
 $45 = $2;
 STACKTOP = sp;return ($45|0);
}
function __ZL23stbi__parse_zlib_headerP10stbi__zbuf($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $6 = $2;
 $7 = (__ZL11stbi__zget8P10stbi__zbuf($6)|0);
 $8 = $7&255;
 $3 = $8;
 $9 = $3;
 $10 = $9 & 15;
 $4 = $10;
 $11 = $2;
 $12 = (__ZL11stbi__zget8P10stbi__zbuf($11)|0);
 $13 = $12&255;
 $5 = $13;
 $14 = $3;
 $15 = $14<<8;
 $16 = $5;
 $17 = (($15) + ($16))|0;
 $18 = (($17|0) % 31)&-1;
 $19 = ($18|0)!=(0);
 do {
  if ($19) {
   $20 = (__ZL9stbi__errPKc(11257)|0);
   $1 = $20;
  } else {
   $21 = $5;
   $22 = $21 & 32;
   $23 = ($22|0)!=(0);
   if ($23) {
    $24 = (__ZL9stbi__errPKc(11273)|0);
    $1 = $24;
    break;
   }
   $25 = $4;
   $26 = ($25|0)!=(8);
   if ($26) {
    $27 = (__ZL9stbi__errPKc(10152)|0);
    $1 = $27;
    break;
   } else {
    $1 = 1;
    break;
   }
  }
 } while(0);
 $28 = $1;
 STACKTOP = sp;return ($28|0);
}
function __ZL14stbi__zreceiveP10stbi__zbufi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = ($7|0)<($8|0);
 if ($9) {
  $10 = $2;
  __ZL15stbi__fill_bitsP10stbi__zbuf($10);
 }
 $11 = $2;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $3;
 $15 = 1 << $14;
 $16 = (($15) - 1)|0;
 $17 = $13 & $16;
 $4 = $17;
 $18 = $3;
 $19 = $2;
 $20 = ((($19)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21 >>> $18;
 HEAP32[$20>>2] = $22;
 $23 = $3;
 $24 = $2;
 $25 = ((($24)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) - ($23))|0;
 HEAP32[$25>>2] = $27;
 $28 = $4;
 STACKTOP = sp;return ($28|0);
}
function __ZL30stbi__parse_uncompressed_blockP10stbi__zbuf($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 20|0;
 $2 = $0;
 $7 = $2;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 7;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $2;
  $13 = $2;
  $14 = ((($13)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15 & 7;
  (__ZL14stbi__zreceiveP10stbi__zbufi($12,$16)|0);
 }
 $6 = 0;
 while(1) {
  $17 = $2;
  $18 = ((($17)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)>(0);
  $21 = $2;
  if (!($20)) {
   break;
  }
  $22 = ((($21)) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 & 255;
  $25 = $24&255;
  $26 = $6;
  $27 = (($26) + 1)|0;
  $6 = $27;
  $28 = (($3) + ($26)|0);
  HEAP8[$28>>0] = $25;
  $29 = $2;
  $30 = ((($29)) + 12|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $31 >>> 8;
  HEAP32[$30>>2] = $32;
  $33 = $2;
  $34 = ((($33)) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($35) - 8)|0;
  HEAP32[$34>>2] = $36;
 }
 $37 = ((($21)) + 8|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)==(0);
 if (!($39)) {
  ___assert_fail((11179|0),(9662|0),4683,(11196|0));
  // unreachable;
 }
 while(1) {
  $40 = $6;
  $41 = ($40|0)<(4);
  if (!($41)) {
   break;
  }
  $42 = $2;
  $43 = (__ZL11stbi__zget8P10stbi__zbuf($42)|0);
  $44 = $6;
  $45 = (($44) + 1)|0;
  $6 = $45;
  $46 = (($3) + ($44)|0);
  HEAP8[$46>>0] = $43;
 }
 $47 = ((($3)) + 1|0);
 $48 = HEAP8[$47>>0]|0;
 $49 = $48&255;
 $50 = $49<<8;
 $51 = HEAP8[$3>>0]|0;
 $52 = $51&255;
 $53 = (($50) + ($52))|0;
 $4 = $53;
 $54 = ((($3)) + 3|0);
 $55 = HEAP8[$54>>0]|0;
 $56 = $55&255;
 $57 = $56<<8;
 $58 = ((($3)) + 2|0);
 $59 = HEAP8[$58>>0]|0;
 $60 = $59&255;
 $61 = (($57) + ($60))|0;
 $5 = $61;
 $62 = $5;
 $63 = $4;
 $64 = $63 ^ 65535;
 $65 = ($62|0)!=($64|0);
 if ($65) {
  $66 = (__ZL9stbi__errPKc(11227)|0);
  $1 = $66;
  $107 = $1;
  STACKTOP = sp;return ($107|0);
 }
 $67 = $2;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 $70 = (($68) + ($69)|0);
 $71 = $2;
 $72 = ((($71)) + 4|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = ($70>>>0)>($73>>>0);
 if ($74) {
  $75 = (__ZL9stbi__errPKc(11240)|0);
  $1 = $75;
  $107 = $1;
  STACKTOP = sp;return ($107|0);
 }
 $76 = $2;
 $77 = ((($76)) + 16|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = $4;
 $80 = (($78) + ($79)|0);
 $81 = $2;
 $82 = ((($81)) + 24|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = ($80>>>0)>($83>>>0);
 if ($84) {
  $85 = $2;
  $86 = $2;
  $87 = ((($86)) + 16|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = $4;
  $90 = (__ZL13stbi__zexpandP10stbi__zbufPci($85,$88,$89)|0);
  $91 = ($90|0)!=(0);
  if (!($91)) {
   $1 = 0;
   $107 = $1;
   STACKTOP = sp;return ($107|0);
  }
 }
 $92 = $2;
 $93 = ((($92)) + 16|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = $2;
 $96 = HEAP32[$95>>2]|0;
 $97 = $4;
 _memcpy(($94|0),($96|0),($97|0))|0;
 $98 = $4;
 $99 = $2;
 $100 = HEAP32[$99>>2]|0;
 $101 = (($100) + ($98)|0);
 HEAP32[$99>>2] = $101;
 $102 = $4;
 $103 = $2;
 $104 = ((($103)) + 16|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = (($105) + ($102)|0);
 HEAP32[$104>>2] = $106;
 $1 = 1;
 $107 = $1;
 STACKTOP = sp;return ($107|0);
}
function __ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $10 = sp + 80|0;
 $11 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = 0;
 dest=$11; stop=dest+68|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $16 = $4;
 _memset(($16|0),0,1024)|0;
 $7 = 0;
 while(1) {
  $17 = $7;
  $18 = $6;
  $19 = ($17|0)<($18|0);
  if (!($19)) {
   break;
  }
  $20 = $5;
  $21 = $7;
  $22 = (($20) + ($21)|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = (($11) + ($24<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + 1)|0;
  HEAP32[$25>>2] = $27;
  $28 = $7;
  $29 = (($28) + 1)|0;
  $7 = $29;
 }
 HEAP32[$11>>2] = 0;
 $7 = 1;
 while(1) {
  $30 = $7;
  $31 = ($30|0)<(16);
  if (!($31)) {
   break;
  }
  $32 = $7;
  $33 = (($11) + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $7;
  $36 = 1 << $35;
  $37 = ($34|0)>($36|0);
  if ($37) {
   label = 7;
   break;
  }
  $39 = $7;
  $40 = (($39) + 1)|0;
  $7 = $40;
 }
 if ((label|0) == 7) {
  $38 = (__ZL9stbi__errPKc(11169)|0);
  $3 = $38;
  $160 = $3;
  STACKTOP = sp;return ($160|0);
 }
 $9 = 0;
 $7 = 1;
 while(1) {
  $41 = $7;
  $42 = ($41|0)<(16);
  if (!($42)) {
   break;
  }
  $43 = $9;
  $44 = $7;
  $45 = (($10) + ($44<<2)|0);
  HEAP32[$45>>2] = $43;
  $46 = $9;
  $47 = $46&65535;
  $48 = $4;
  $49 = ((($48)) + 1024|0);
  $50 = $7;
  $51 = (($49) + ($50<<1)|0);
  HEAP16[$51>>1] = $47;
  $52 = $8;
  $53 = $52&65535;
  $54 = $4;
  $55 = ((($54)) + 1124|0);
  $56 = $7;
  $57 = (($55) + ($56<<1)|0);
  HEAP16[$57>>1] = $53;
  $58 = $9;
  $59 = $7;
  $60 = (($11) + ($59<<2)|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (($58) + ($61))|0;
  $9 = $62;
  $63 = $7;
  $64 = (($11) + ($63<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = ($65|0)!=(0);
  if ($66) {
   $67 = $9;
   $68 = (($67) - 1)|0;
   $69 = $7;
   $70 = 1 << $69;
   $71 = ($68|0)>=($70|0);
   if ($71) {
    label = 13;
    break;
   }
  }
  $73 = $9;
  $74 = $7;
  $75 = (16 - ($74))|0;
  $76 = $73 << $75;
  $77 = $4;
  $78 = ((($77)) + 1056|0);
  $79 = $7;
  $80 = (($78) + ($79<<2)|0);
  HEAP32[$80>>2] = $76;
  $81 = $9;
  $82 = $81 << 1;
  $9 = $82;
  $83 = $7;
  $84 = (($11) + ($83<<2)|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = $8;
  $87 = (($86) + ($85))|0;
  $8 = $87;
  $88 = $7;
  $89 = (($88) + 1)|0;
  $7 = $89;
 }
 if ((label|0) == 13) {
  $72 = (__ZL9stbi__errPKc(11117)|0);
  $3 = $72;
  $160 = $3;
  STACKTOP = sp;return ($160|0);
 }
 $90 = $4;
 $91 = ((($90)) + 1056|0);
 $92 = ((($91)) + 64|0);
 HEAP32[$92>>2] = 65536;
 $7 = 0;
 while(1) {
  $93 = $7;
  $94 = $6;
  $95 = ($93|0)<($94|0);
  if (!($95)) {
   break;
  }
  $96 = $5;
  $97 = $7;
  $98 = (($96) + ($97)|0);
  $99 = HEAP8[$98>>0]|0;
  $100 = $99&255;
  $12 = $100;
  $101 = $12;
  $102 = ($101|0)!=(0);
  if ($102) {
   $103 = $12;
   $104 = (($10) + ($103<<2)|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = $4;
   $107 = ((($106)) + 1024|0);
   $108 = $12;
   $109 = (($107) + ($108<<1)|0);
   $110 = HEAP16[$109>>1]|0;
   $111 = $110&65535;
   $112 = (($105) - ($111))|0;
   $113 = $4;
   $114 = ((($113)) + 1124|0);
   $115 = $12;
   $116 = (($114) + ($115<<1)|0);
   $117 = HEAP16[$116>>1]|0;
   $118 = $117&65535;
   $119 = (($112) + ($118))|0;
   $13 = $119;
   $120 = $12;
   $121 = $120 << 9;
   $122 = $7;
   $123 = $121 | $122;
   $124 = $123&65535;
   $14 = $124;
   $125 = $12;
   $126 = $125&255;
   $127 = $4;
   $128 = ((($127)) + 1156|0);
   $129 = $13;
   $130 = (($128) + ($129)|0);
   HEAP8[$130>>0] = $126;
   $131 = $7;
   $132 = $131&65535;
   $133 = $4;
   $134 = ((($133)) + 1444|0);
   $135 = $13;
   $136 = (($134) + ($135<<1)|0);
   HEAP16[$136>>1] = $132;
   $137 = $12;
   $138 = ($137|0)<=(9);
   L28: do {
    if ($138) {
     $139 = $12;
     $140 = (($10) + ($139<<2)|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = $12;
     $143 = (__ZL17stbi__bit_reverseii($141,$142)|0);
     $15 = $143;
     while(1) {
      $144 = $15;
      $145 = ($144|0)<(512);
      if (!($145)) {
       break L28;
      }
      $146 = $14;
      $147 = $4;
      $148 = $15;
      $149 = (($147) + ($148<<1)|0);
      HEAP16[$149>>1] = $146;
      $150 = $12;
      $151 = 1 << $150;
      $152 = $15;
      $153 = (($152) + ($151))|0;
      $15 = $153;
     }
    }
   } while(0);
   $154 = $12;
   $155 = (($10) + ($154<<2)|0);
   $156 = HEAP32[$155>>2]|0;
   $157 = (($156) + 1)|0;
   HEAP32[$155>>2] = $157;
  }
  $158 = $7;
  $159 = (($158) + 1)|0;
  $7 = $159;
 }
 $3 = 1;
 $160 = $3;
 STACKTOP = sp;return ($160|0);
}
function __ZL27stbi__compute_huffman_codesP10stbi__zbuf($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2560|0);
 $3 = sp + 520|0;
 $4 = sp + 32|0;
 $5 = sp;
 $2 = $0;
 $15 = $2;
 $16 = (__ZL14stbi__zreceiveP10stbi__zbufi($15,5)|0);
 $17 = (($16) + 257)|0;
 $8 = $17;
 $18 = $2;
 $19 = (__ZL14stbi__zreceiveP10stbi__zbufi($18,5)|0);
 $20 = (($19) + 1)|0;
 $9 = $20;
 $21 = $2;
 $22 = (__ZL14stbi__zreceiveP10stbi__zbufi($21,4)|0);
 $23 = (($22) + 4)|0;
 $10 = $23;
 $24 = $8;
 $25 = $9;
 $26 = (($24) + ($25))|0;
 $11 = $26;
 ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;HEAP32[$5+12>>2]=0|0;HEAP16[$5+16>>1]=0|0;HEAP8[$5+18>>0]=0|0;
 $6 = 0;
 while(1) {
  $27 = $6;
  $28 = $10;
  $29 = ($27|0)<($28|0);
  if (!($29)) {
   break;
  }
  $30 = $2;
  $31 = (__ZL14stbi__zreceiveP10stbi__zbufi($30,3)|0);
  $12 = $31;
  $32 = $12;
  $33 = $32&255;
  $34 = $6;
  $35 = (1296 + ($34)|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36&255;
  $38 = (($5) + ($37)|0);
  HEAP8[$38>>0] = $33;
  $39 = $6;
  $40 = (($39) + 1)|0;
  $6 = $40;
 }
 $41 = (__ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi($3,$5,19)|0);
 $42 = ($41|0)!=(0);
 if (!($42)) {
  $1 = 0;
  $113 = $1;
  STACKTOP = sp;return ($113|0);
 }
 $7 = 0;
 L9: while(1) {
  $43 = $7;
  $44 = $11;
  $45 = ($43|0)<($44|0);
  if (!($45)) {
   label = 25;
   break;
  }
  $46 = $2;
  $47 = (__ZL21stbi__zhuffman_decodeP10stbi__zbufP14stbi__zhuffman($46,$3)|0);
  $13 = $47;
  $48 = $13;
  $49 = ($48|0)<(0);
  $50 = $13;
  $51 = ($50|0)>=(19);
  $or$cond = $49 | $51;
  if ($or$cond) {
   label = 9;
   break;
  }
  $53 = $13;
  $54 = ($53|0)<(16);
  if ($54) {
   $55 = $13;
   $56 = $55&255;
   $57 = $7;
   $58 = (($57) + 1)|0;
   $7 = $58;
   $59 = (($4) + ($57)|0);
   HEAP8[$59>>0] = $56;
  } else {
   $14 = 0;
   $60 = $13;
   $61 = ($60|0)==(16);
   do {
    if ($61) {
     $62 = $2;
     $63 = (__ZL14stbi__zreceiveP10stbi__zbufi($62,2)|0);
     $64 = (($63) + 3)|0;
     $13 = $64;
     $65 = $7;
     $66 = ($65|0)==(0);
     if ($66) {
      label = 14;
      break L9;
     }
     $68 = $7;
     $69 = (($68) - 1)|0;
     $70 = (($4) + ($69)|0);
     $71 = HEAP8[$70>>0]|0;
     $14 = $71;
    } else {
     $72 = $13;
     $73 = ($72|0)==(17);
     if ($73) {
      $74 = $2;
      $75 = (__ZL14stbi__zreceiveP10stbi__zbufi($74,3)|0);
      $76 = (($75) + 3)|0;
      $13 = $76;
      break;
     }
     $77 = $13;
     $78 = ($77|0)==(18);
     if (!($78)) {
      label = 19;
      break L9;
     }
     $79 = $2;
     $80 = (__ZL14stbi__zreceiveP10stbi__zbufi($79,7)|0);
     $81 = (($80) + 11)|0;
     $13 = $81;
    }
   } while(0);
   $82 = $11;
   $83 = $7;
   $84 = (($82) - ($83))|0;
   $85 = $13;
   $86 = ($84|0)<($85|0);
   if ($86) {
    label = 22;
    break;
   }
   $88 = $7;
   $89 = (($4) + ($88)|0);
   $90 = $14;
   $91 = $90&255;
   $92 = $91&255;
   $93 = $13;
   _memset(($89|0),($92|0),($93|0))|0;
   $94 = $13;
   $95 = $7;
   $96 = (($95) + ($94))|0;
   $7 = $96;
  }
 }
 if ((label|0) == 9) {
  $52 = (__ZL9stbi__errPKc(11117)|0);
  $1 = $52;
  $113 = $1;
  STACKTOP = sp;return ($113|0);
 }
 else if ((label|0) == 14) {
  $67 = (__ZL9stbi__errPKc(11117)|0);
  $1 = $67;
  $113 = $1;
  STACKTOP = sp;return ($113|0);
 }
 else if ((label|0) == 19) {
  ___assert_fail((11133|0),(9662|0),4651,(11141|0));
  // unreachable;
 }
 else if ((label|0) == 22) {
  $87 = (__ZL9stbi__errPKc(11117)|0);
  $1 = $87;
  $113 = $1;
  STACKTOP = sp;return ($113|0);
 }
 else if ((label|0) == 25) {
  $97 = $7;
  $98 = $11;
  $99 = ($97|0)!=($98|0);
  if ($99) {
   $100 = (__ZL9stbi__errPKc(11117)|0);
   $1 = $100;
   $113 = $1;
   STACKTOP = sp;return ($113|0);
  }
  $101 = $2;
  $102 = ((($101)) + 32|0);
  $103 = $8;
  $104 = (__ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi($102,$4,$103)|0);
  $105 = ($104|0)!=(0);
  if (!($105)) {
   $1 = 0;
   $113 = $1;
   STACKTOP = sp;return ($113|0);
  }
  $106 = $2;
  $107 = ((($106)) + 2052|0);
  $108 = $8;
  $109 = (($4) + ($108)|0);
  $110 = $9;
  $111 = (__ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi($107,$109,$110)|0);
  $112 = ($111|0)!=(0);
  if ($112) {
   $1 = 1;
   $113 = $1;
   STACKTOP = sp;return ($113|0);
  } else {
   $1 = 0;
   $113 = $1;
   STACKTOP = sp;return ($113|0);
  }
 }
 return (0)|0;
}
function __ZL25stbi__parse_huffman_blockP10stbi__zbuf($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $9 = $2;
 $10 = ((($9)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $3 = $11;
 L1: while(1) {
  $12 = $2;
  $13 = $2;
  $14 = ((($13)) + 32|0);
  $15 = (__ZL21stbi__zhuffman_decodeP10stbi__zbufP14stbi__zhuffman($12,$14)|0);
  $4 = $15;
  $16 = $4;
  $17 = ($16|0)<(256);
  $18 = $4;
  do {
   if ($17) {
    $19 = ($18|0)<(0);
    if ($19) {
     label = 4;
     break L1;
    }
    $21 = $3;
    $22 = $2;
    $23 = ((($22)) + 24|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($21>>>0)>=($24>>>0);
    if ($25) {
     $26 = $2;
     $27 = $3;
     $28 = (__ZL13stbi__zexpandP10stbi__zbufPci($26,$27,1)|0);
     $29 = ($28|0)!=(0);
     if (!($29)) {
      label = 7;
      break L1;
     }
     $30 = $2;
     $31 = ((($30)) + 16|0);
     $32 = HEAP32[$31>>2]|0;
     $3 = $32;
    }
    $33 = $4;
    $34 = $33&255;
    $35 = $3;
    $36 = ((($35)) + 1|0);
    $3 = $36;
    HEAP8[$35>>0] = $34;
   } else {
    $37 = ($18|0)==(256);
    if ($37) {
     label = 11;
     break L1;
    }
    $41 = $4;
    $42 = (($41) - 257)|0;
    $4 = $42;
    $43 = $4;
    $44 = (784 + ($43<<2)|0);
    $45 = HEAP32[$44>>2]|0;
    $6 = $45;
    $46 = $4;
    $47 = (912 + ($46<<2)|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($48|0)!=(0);
    if ($49) {
     $50 = $2;
     $51 = $4;
     $52 = (912 + ($51<<2)|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = (__ZL14stbi__zreceiveP10stbi__zbufi($50,$53)|0);
     $55 = $6;
     $56 = (($55) + ($54))|0;
     $6 = $56;
    }
    $57 = $2;
    $58 = $2;
    $59 = ((($58)) + 2052|0);
    $60 = (__ZL21stbi__zhuffman_decodeP10stbi__zbufP14stbi__zhuffman($57,$59)|0);
    $4 = $60;
    $61 = $4;
    $62 = ($61|0)<(0);
    if ($62) {
     label = 15;
     break L1;
    }
    $64 = $4;
    $65 = (1040 + ($64<<2)|0);
    $66 = HEAP32[$65>>2]|0;
    $7 = $66;
    $67 = $4;
    $68 = (1168 + ($67<<2)|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ($69|0)!=(0);
    if ($70) {
     $71 = $2;
     $72 = $4;
     $73 = (1168 + ($72<<2)|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = (__ZL14stbi__zreceiveP10stbi__zbufi($71,$74)|0);
     $76 = $7;
     $77 = (($76) + ($75))|0;
     $7 = $77;
    }
    $78 = $3;
    $79 = $2;
    $80 = ((($79)) + 20|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = $78;
    $83 = $81;
    $84 = (($82) - ($83))|0;
    $85 = $7;
    $86 = ($84|0)<($85|0);
    if ($86) {
     label = 19;
     break L1;
    }
    $88 = $3;
    $89 = $6;
    $90 = (($88) + ($89)|0);
    $91 = $2;
    $92 = ((($91)) + 24|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($90>>>0)>($93>>>0);
    if ($94) {
     $95 = $2;
     $96 = $3;
     $97 = $6;
     $98 = (__ZL13stbi__zexpandP10stbi__zbufPci($95,$96,$97)|0);
     $99 = ($98|0)!=(0);
     if (!($99)) {
      label = 22;
      break L1;
     }
     $100 = $2;
     $101 = ((($100)) + 16|0);
     $102 = HEAP32[$101>>2]|0;
     $3 = $102;
    }
    $103 = $3;
    $104 = $7;
    $105 = (0 - ($104))|0;
    $106 = (($103) + ($105)|0);
    $5 = $106;
    $107 = $7;
    $108 = ($107|0)==(1);
    if ($108) {
     $109 = $5;
     $110 = HEAP8[$109>>0]|0;
     $8 = $110;
     $111 = $6;
     $112 = ($111|0)!=(0);
     if (!($112)) {
      break;
     }
     while(1) {
      $113 = $8;
      $114 = $3;
      $115 = ((($114)) + 1|0);
      $3 = $115;
      HEAP8[$114>>0] = $113;
      $116 = $6;
      $117 = (($116) + -1)|0;
      $6 = $117;
      $118 = ($117|0)!=(0);
      if (!($118)) {
       break;
      }
     }
    } else {
     $119 = $6;
     $120 = ($119|0)!=(0);
     if (!($120)) {
      break;
     }
     while(1) {
      $121 = $5;
      $122 = ((($121)) + 1|0);
      $5 = $122;
      $123 = HEAP8[$121>>0]|0;
      $124 = $3;
      $125 = ((($124)) + 1|0);
      $3 = $125;
      HEAP8[$124>>0] = $123;
      $126 = $6;
      $127 = (($126) + -1)|0;
      $6 = $127;
      $128 = ($127|0)!=(0);
      if (!($128)) {
       break;
      }
     }
    }
   }
  } while(0);
 }
 if ((label|0) == 4) {
  $20 = (__ZL9stbi__errPKc(10942)|0);
  $1 = $20;
  $129 = $1;
  STACKTOP = sp;return ($129|0);
 }
 else if ((label|0) == 7) {
  $1 = 0;
  $129 = $1;
  STACKTOP = sp;return ($129|0);
 }
 else if ((label|0) == 11) {
  $38 = $3;
  $39 = $2;
  $40 = ((($39)) + 16|0);
  HEAP32[$40>>2] = $38;
  $1 = 1;
  $129 = $1;
  STACKTOP = sp;return ($129|0);
 }
 else if ((label|0) == 15) {
  $63 = (__ZL9stbi__errPKc(10942)|0);
  $1 = $63;
  $129 = $1;
  STACKTOP = sp;return ($129|0);
 }
 else if ((label|0) == 19) {
  $87 = (__ZL9stbi__errPKc(10959)|0);
  $1 = $87;
  $129 = $1;
  STACKTOP = sp;return ($129|0);
 }
 else if ((label|0) == 22) {
  $1 = 0;
  $129 = $1;
  STACKTOP = sp;return ($129|0);
 }
 return (0)|0;
}
function __ZL21stbi__zhuffman_decodeP10stbi__zbufP14stbi__zhuffman($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)<(16);
 if ($10) {
  $11 = $3;
  __ZL15stbi__fill_bitsP10stbi__zbuf($11);
 }
 $12 = $4;
 $13 = $3;
 $14 = ((($13)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & 511;
 $17 = (($12) + ($16<<1)|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $18&65535;
 $5 = $19;
 $20 = $5;
 $21 = ($20|0)!=(0);
 if ($21) {
  $22 = $5;
  $23 = $22 >> 9;
  $6 = $23;
  $24 = $6;
  $25 = $3;
  $26 = ((($25)) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $27 >>> $24;
  HEAP32[$26>>2] = $28;
  $29 = $6;
  $30 = $3;
  $31 = ((($30)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) - ($29))|0;
  HEAP32[$31>>2] = $33;
  $34 = $5;
  $35 = $34 & 511;
  $2 = $35;
  $39 = $2;
  STACKTOP = sp;return ($39|0);
 } else {
  $36 = $3;
  $37 = $4;
  $38 = (__ZL30stbi__zhuffman_decode_slowpathP10stbi__zbufP14stbi__zhuffman($36,$37)|0);
  $2 = $38;
  $39 = $2;
  STACKTOP = sp;return ($39|0);
 }
 return (0)|0;
}
function __ZL13stbi__zexpandP10stbi__zbufPci($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $11 = $5;
 $12 = $4;
 $13 = ((($12)) + 16|0);
 HEAP32[$13>>2] = $11;
 $14 = $4;
 $15 = ((($14)) + 28|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0);
 if (!($17)) {
  $18 = (__ZL9stbi__errPKc(10968)|0);
  $3 = $18;
  $65 = $3;
  STACKTOP = sp;return ($65|0);
 }
 $19 = $4;
 $20 = ((($19)) + 16|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $4;
 $23 = ((($22)) + 20|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $21;
 $26 = $24;
 $27 = (($25) - ($26))|0;
 $8 = $27;
 $28 = $4;
 $29 = ((($28)) + 24|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $4;
 $32 = ((($31)) + 20|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $30;
 $35 = $33;
 $36 = (($34) - ($35))|0;
 $10 = $36;
 $9 = $36;
 while(1) {
  $37 = $8;
  $38 = $6;
  $39 = (($37) + ($38))|0;
  $40 = $9;
  $41 = ($39|0)>($40|0);
  if (!($41)) {
   break;
  }
  $42 = $9;
  $43 = $42<<1;
  $9 = $43;
 }
 $44 = $4;
 $45 = ((($44)) + 20|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $9;
 $48 = (_realloc($46,$47)|0);
 $7 = $48;
 $49 = $7;
 $50 = ($49|0)==(0|0);
 if ($50) {
  $51 = (__ZL9stbi__errPKc(9723)|0);
  $3 = $51;
  $65 = $3;
  STACKTOP = sp;return ($65|0);
 } else {
  $52 = $7;
  $53 = $4;
  $54 = ((($53)) + 20|0);
  HEAP32[$54>>2] = $52;
  $55 = $7;
  $56 = $8;
  $57 = (($55) + ($56)|0);
  $58 = $4;
  $59 = ((($58)) + 16|0);
  HEAP32[$59>>2] = $57;
  $60 = $7;
  $61 = $9;
  $62 = (($60) + ($61)|0);
  $63 = $4;
  $64 = ((($63)) + 24|0);
  HEAP32[$64>>2] = $62;
  $3 = 1;
  $65 = $3;
  STACKTOP = sp;return ($65|0);
 }
 return (0)|0;
}
function __ZL15stbi__fill_bitsP10stbi__zbuf($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 while(1) {
  $2 = $1;
  $3 = ((($2)) + 12|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = $1;
  $6 = ((($5)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = 1 << $7;
  $9 = ($4>>>0)<($8>>>0);
  if (!($9)) {
   label = 3;
   break;
  }
  $10 = $1;
  $11 = (__ZL11stbi__zget8P10stbi__zbuf($10)|0);
  $12 = $11&255;
  $13 = $1;
  $14 = ((($13)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $12 << $15;
  $17 = $1;
  $18 = ((($17)) + 12|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $19 | $16;
  HEAP32[$18>>2] = $20;
  $21 = $1;
  $22 = ((($21)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + 8)|0;
  HEAP32[$22>>2] = $24;
  $25 = $1;
  $26 = ((($25)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)<=(24);
  if (!($28)) {
   label = 5;
   break;
  }
 }
 if ((label|0) == 3) {
  ___assert_fail((11064|0),(9662|0),4445,(11101|0));
  // unreachable;
 }
 else if ((label|0) == 5) {
  STACKTOP = sp;return;
 }
}
function __ZL30stbi__zhuffman_decode_slowpathP10stbi__zbufP14stbi__zhuffman($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (__ZL17stbi__bit_reverseii($10,16)|0);
 $7 = $11;
 $6 = 10;
 while(1) {
  $12 = $7;
  $13 = $4;
  $14 = ((($13)) + 1056|0);
  $15 = $6;
  $16 = (($14) + ($15<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($12|0)<($17|0);
  $19 = $6;
  if ($18) {
   break;
  }
  $20 = (($19) + 1)|0;
  $6 = $20;
 }
 $21 = ($19|0)==(16);
 if ($21) {
  $2 = -1;
  $64 = $2;
  STACKTOP = sp;return ($64|0);
 }
 $22 = $7;
 $23 = $6;
 $24 = (16 - ($23))|0;
 $25 = $22 >> $24;
 $26 = $4;
 $27 = ((($26)) + 1024|0);
 $28 = $6;
 $29 = (($27) + ($28<<1)|0);
 $30 = HEAP16[$29>>1]|0;
 $31 = $30&65535;
 $32 = (($25) - ($31))|0;
 $33 = $4;
 $34 = ((($33)) + 1124|0);
 $35 = $6;
 $36 = (($34) + ($35<<1)|0);
 $37 = HEAP16[$36>>1]|0;
 $38 = $37&65535;
 $39 = (($32) + ($38))|0;
 $5 = $39;
 $40 = $4;
 $41 = ((($40)) + 1156|0);
 $42 = $5;
 $43 = (($41) + ($42)|0);
 $44 = HEAP8[$43>>0]|0;
 $45 = $44&255;
 $46 = $6;
 $47 = ($45|0)==($46|0);
 if (!($47)) {
  ___assert_fail((10988|0),(9662|0),4476,(11004|0));
  // unreachable;
 }
 $48 = $6;
 $49 = $3;
 $50 = ((($49)) + 12|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = $51 >>> $48;
 HEAP32[$50>>2] = $52;
 $53 = $6;
 $54 = $3;
 $55 = ((($54)) + 8|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (($56) - ($53))|0;
 HEAP32[$55>>2] = $57;
 $58 = $4;
 $59 = ((($58)) + 1444|0);
 $60 = $5;
 $61 = (($59) + ($60<<1)|0);
 $62 = HEAP16[$61>>1]|0;
 $63 = $62&65535;
 $2 = $63;
 $64 = $2;
 STACKTOP = sp;return ($64|0);
}
function __ZL17stbi__bit_reverseii($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = ($4|0)<=(16);
 if ($5) {
  $6 = $2;
  $7 = (__ZL18stbi__bitreverse16i($6)|0);
  $8 = $3;
  $9 = (16 - ($8))|0;
  $10 = $7 >> $9;
  STACKTOP = sp;return ($10|0);
 } else {
  ___assert_fail((11035|0),(9662|0),4355,(11046|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZL18stbi__bitreverse16i($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 & 43690;
 $4 = $3 >> 1;
 $5 = $1;
 $6 = $5 & 21845;
 $7 = $6 << 1;
 $8 = $4 | $7;
 $1 = $8;
 $9 = $1;
 $10 = $9 & 52428;
 $11 = $10 >> 2;
 $12 = $1;
 $13 = $12 & 13107;
 $14 = $13 << 2;
 $15 = $11 | $14;
 $1 = $15;
 $16 = $1;
 $17 = $16 & 61680;
 $18 = $17 >> 4;
 $19 = $1;
 $20 = $19 & 3855;
 $21 = $20 << 4;
 $22 = $18 | $21;
 $1 = $22;
 $23 = $1;
 $24 = $23 & 65280;
 $25 = $24 >> 8;
 $26 = $1;
 $27 = $26 & 255;
 $28 = $27 << 8;
 $29 = $25 | $28;
 $1 = $29;
 $30 = $1;
 STACKTOP = sp;return ($30|0);
}
function __ZL11stbi__zget8P10stbi__zbuf($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4>>>0)>=($7>>>0);
 if ($8) {
  $1 = 0;
  $13 = $1;
  STACKTOP = sp;return ($13|0);
 } else {
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 1|0);
  HEAP32[$9>>2] = $11;
  $12 = HEAP8[$10>>0]|0;
  $1 = $12;
  $13 = $1;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function __ZL16stbi__setup_jpegP10stbi__jpeg($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 18444|0);
 HEAP32[$3>>2] = 269;
 $4 = $1;
 $5 = ((($4)) + 18448|0);
 HEAP32[$5>>2] = 270;
 $6 = $1;
 $7 = ((($6)) + 18452|0);
 HEAP32[$7>>2] = 271;
 STACKTOP = sp;return;
}
function __ZL15load_jpeg_imageP10stbi__jpegPiS1_S1_i($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond3$not = 0, $or$cond5 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $18 = sp + 128|0;
 $19 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $32 = $6;
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($33)) + 8|0);
 HEAP32[$34>>2] = 0;
 $35 = $10;
 $36 = ($35|0)<(0);
 $37 = $10;
 $38 = ($37|0)>(4);
 $or$cond = $36 | $38;
 if ($or$cond) {
  $39 = (__ZL9stbi__errPKc(10408)|0);
  $40 = ($39|0)!=(0);
  $41 = $40 ? 0 : 0;
  $42 = $41;
  $5 = $42;
  $720 = $5;
  STACKTOP = sp;return ($720|0);
 }
 $43 = $6;
 $44 = (__ZL23stbi__decode_jpeg_imageP10stbi__jpeg($43)|0);
 $45 = ($44|0)!=(0);
 if (!($45)) {
  $46 = $6;
  __ZL18stbi__cleanup_jpegP10stbi__jpeg($46);
  $5 = 0;
  $720 = $5;
  STACKTOP = sp;return ($720|0);
 }
 $47 = $10;
 $48 = ($47|0)!=(0);
 if ($48) {
  $49 = $10;
  $56 = $49;
 } else {
  $50 = $6;
  $51 = HEAP32[$50>>2]|0;
  $52 = ((($51)) + 8|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ($53|0)>=(3);
  $55 = $54 ? 3 : 1;
  $56 = $55;
 }
 $11 = $56;
 $57 = $6;
 $58 = HEAP32[$57>>2]|0;
 $59 = ((($58)) + 8|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ($60|0)==(3);
 if ($61) {
  $62 = $6;
  $63 = ((($62)) + 18412|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ($64|0)==(3);
  if ($65) {
   $76 = 1;
  } else {
   $66 = $6;
   $67 = ((($66)) + 18408|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ($68|0)==(0);
   if ($69) {
    $70 = $6;
    $71 = ((($70)) + 18404|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($72|0)!=(0);
    $74 = $73 ^ 1;
    $76 = $74;
   } else {
    $76 = 0;
   }
  }
 } else {
  $76 = 0;
 }
 $75 = $76&1;
 $13 = $75;
 $77 = $6;
 $78 = HEAP32[$77>>2]|0;
 $79 = ((($78)) + 8|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = ($80|0)==(3);
 $82 = $11;
 $83 = ($82|0)<(3);
 $or$cond3 = $81 & $83;
 $or$cond3$not = $or$cond3 ^ 1;
 $84 = $13;
 $85 = ($84|0)!=(0);
 $or$cond5 = $or$cond3$not | $85;
 if ($or$cond5) {
  $86 = $6;
  $87 = HEAP32[$86>>2]|0;
  $88 = ((($87)) + 8|0);
  $89 = HEAP32[$88>>2]|0;
  $12 = $89;
 } else {
  $12 = 1;
 }
 ;HEAP32[$18>>2]=0|0;HEAP32[$18+4>>2]=0|0;HEAP32[$18+8>>2]=0|0;HEAP32[$18+12>>2]=0|0;
 $14 = 0;
 while(1) {
  $90 = $14;
  $91 = $12;
  $92 = ($90|0)<($91|0);
  if (!($92)) {
   break;
  }
  $93 = $14;
  $94 = (($19) + ($93<<5)|0);
  $20 = $94;
  $95 = $6;
  $96 = HEAP32[$95>>2]|0;
  $97 = HEAP32[$96>>2]|0;
  $98 = (($97) + 3)|0;
  $99 = (__ZL12stbi__mallocm($98)|0);
  $100 = $6;
  $101 = ((($100)) + 18076|0);
  $102 = $14;
  $103 = (($101) + (($102*72)|0)|0);
  $104 = ((($103)) + 56|0);
  HEAP32[$104>>2] = $99;
  $105 = $6;
  $106 = ((($105)) + 18076|0);
  $107 = $14;
  $108 = (($106) + (($107*72)|0)|0);
  $109 = ((($108)) + 56|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = ($110|0)!=(0|0);
  $112 = $6;
  if (!($111)) {
   label = 18;
   break;
  }
  $117 = ((($112)) + 18052|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = $6;
  $120 = ((($119)) + 18076|0);
  $121 = $14;
  $122 = (($120) + (($121*72)|0)|0);
  $123 = ((($122)) + 4|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = (($118|0) / ($124|0))&-1;
  $126 = $20;
  $127 = ((($126)) + 12|0);
  HEAP32[$127>>2] = $125;
  $128 = $6;
  $129 = ((($128)) + 18056|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = $6;
  $132 = ((($131)) + 18076|0);
  $133 = $14;
  $134 = (($132) + (($133*72)|0)|0);
  $135 = ((($134)) + 8|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = (($130|0) / ($136|0))&-1;
  $138 = $20;
  $139 = ((($138)) + 16|0);
  HEAP32[$139>>2] = $137;
  $140 = $20;
  $141 = ((($140)) + 16|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = $142 >> 1;
  $144 = $20;
  $145 = ((($144)) + 24|0);
  HEAP32[$145>>2] = $143;
  $146 = $6;
  $147 = HEAP32[$146>>2]|0;
  $148 = HEAP32[$147>>2]|0;
  $149 = $20;
  $150 = ((($149)) + 12|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = (($148) + ($151))|0;
  $153 = (($152) - 1)|0;
  $154 = $20;
  $155 = ((($154)) + 12|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = (($153>>>0) / ($156>>>0))&-1;
  $158 = $20;
  $159 = ((($158)) + 20|0);
  HEAP32[$159>>2] = $157;
  $160 = $20;
  $161 = ((($160)) + 28|0);
  HEAP32[$161>>2] = 0;
  $162 = $6;
  $163 = ((($162)) + 18076|0);
  $164 = $14;
  $165 = (($163) + (($164*72)|0)|0);
  $166 = ((($165)) + 44|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = $20;
  $169 = ((($168)) + 8|0);
  HEAP32[$169>>2] = $167;
  $170 = $20;
  $171 = ((($170)) + 4|0);
  HEAP32[$171>>2] = $167;
  $172 = $20;
  $173 = ((($172)) + 12|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = ($174|0)==(1);
  if ($175) {
   $176 = $20;
   $177 = ((($176)) + 16|0);
   $178 = HEAP32[$177>>2]|0;
   $179 = ($178|0)==(1);
   if ($179) {
    $180 = $20;
    HEAP32[$180>>2] = 272;
   } else {
    label = 22;
   }
  } else {
   label = 22;
  }
  do {
   if ((label|0) == 22) {
    label = 0;
    $181 = $20;
    $182 = ((($181)) + 12|0);
    $183 = HEAP32[$182>>2]|0;
    $184 = ($183|0)==(1);
    if ($184) {
     $185 = $20;
     $186 = ((($185)) + 16|0);
     $187 = HEAP32[$186>>2]|0;
     $188 = ($187|0)==(2);
     if ($188) {
      $189 = $20;
      HEAP32[$189>>2] = 273;
      break;
     }
    }
    $190 = $20;
    $191 = ((($190)) + 12|0);
    $192 = HEAP32[$191>>2]|0;
    $193 = ($192|0)==(2);
    if ($193) {
     $194 = $20;
     $195 = ((($194)) + 16|0);
     $196 = HEAP32[$195>>2]|0;
     $197 = ($196|0)==(1);
     if ($197) {
      $198 = $20;
      HEAP32[$198>>2] = 274;
      break;
     }
    }
    $199 = $20;
    $200 = ((($199)) + 12|0);
    $201 = HEAP32[$200>>2]|0;
    $202 = ($201|0)==(2);
    if ($202) {
     $203 = $20;
     $204 = ((($203)) + 16|0);
     $205 = HEAP32[$204>>2]|0;
     $206 = ($205|0)==(2);
     if ($206) {
      $207 = $6;
      $208 = ((($207)) + 18452|0);
      $209 = HEAP32[$208>>2]|0;
      $210 = $20;
      HEAP32[$210>>2] = $209;
      break;
     }
    }
    $211 = $20;
    HEAP32[$211>>2] = 275;
   }
  } while(0);
  $212 = $14;
  $213 = (($212) + 1)|0;
  $14 = $213;
 }
 if ((label|0) == 18) {
  __ZL18stbi__cleanup_jpegP10stbi__jpeg($112);
  $113 = (__ZL9stbi__errPKc(9723)|0);
  $114 = ($113|0)!=(0);
  $115 = $114 ? 0 : 0;
  $116 = $115;
  $5 = $116;
  $720 = $5;
  STACKTOP = sp;return ($720|0);
 }
 $214 = $11;
 $215 = $6;
 $216 = HEAP32[$215>>2]|0;
 $217 = HEAP32[$216>>2]|0;
 $218 = $6;
 $219 = HEAP32[$218>>2]|0;
 $220 = ((($219)) + 4|0);
 $221 = HEAP32[$220>>2]|0;
 $222 = (__ZL17stbi__malloc_mad3iiii($214,$217,$221,1)|0);
 $17 = $222;
 $223 = $17;
 $224 = ($223|0)!=(0|0);
 if (!($224)) {
  $225 = $6;
  __ZL18stbi__cleanup_jpegP10stbi__jpeg($225);
  $226 = (__ZL9stbi__errPKc(9723)|0);
  $227 = ($226|0)!=(0);
  $228 = $227 ? 0 : 0;
  $229 = $228;
  $5 = $229;
  $720 = $5;
  STACKTOP = sp;return ($720|0);
 }
 $16 = 0;
 while(1) {
  $230 = $16;
  $231 = $6;
  $232 = HEAP32[$231>>2]|0;
  $233 = ((($232)) + 4|0);
  $234 = HEAP32[$233>>2]|0;
  $235 = ($230>>>0)<($234>>>0);
  if (!($235)) {
   break;
  }
  $236 = $17;
  $237 = $11;
  $238 = $6;
  $239 = HEAP32[$238>>2]|0;
  $240 = HEAP32[$239>>2]|0;
  $241 = Math_imul($237, $240)|0;
  $242 = $16;
  $243 = Math_imul($241, $242)|0;
  $244 = (($236) + ($243)|0);
  $21 = $244;
  $14 = 0;
  while(1) {
   $245 = $14;
   $246 = $12;
   $247 = ($245|0)<($246|0);
   if (!($247)) {
    break;
   }
   $248 = $14;
   $249 = (($19) + ($248<<5)|0);
   $22 = $249;
   $250 = $22;
   $251 = ((($250)) + 24|0);
   $252 = HEAP32[$251>>2]|0;
   $253 = $22;
   $254 = ((($253)) + 16|0);
   $255 = HEAP32[$254>>2]|0;
   $256 = $255 >> 1;
   $257 = ($252|0)>=($256|0);
   $258 = $257&1;
   $23 = $258;
   $259 = $22;
   $260 = HEAP32[$259>>2]|0;
   $261 = $6;
   $262 = ((($261)) + 18076|0);
   $263 = $14;
   $264 = (($262) + (($263*72)|0)|0);
   $265 = ((($264)) + 56|0);
   $266 = HEAP32[$265>>2]|0;
   $267 = $23;
   $268 = ($267|0)!=(0);
   $269 = $22;
   if ($268) {
    $270 = ((($269)) + 8|0);
    $271 = HEAP32[$270>>2]|0;
    $287 = $271;
   } else {
    $272 = ((($269)) + 4|0);
    $273 = HEAP32[$272>>2]|0;
    $287 = $273;
   }
   $274 = $23;
   $275 = ($274|0)!=(0);
   $276 = $22;
   if ($275) {
    $277 = ((($276)) + 4|0);
    $278 = HEAP32[$277>>2]|0;
    $288 = $278;
   } else {
    $279 = ((($276)) + 8|0);
    $280 = HEAP32[$279>>2]|0;
    $288 = $280;
   }
   $281 = $22;
   $282 = ((($281)) + 20|0);
   $283 = HEAP32[$282>>2]|0;
   $284 = $22;
   $285 = ((($284)) + 12|0);
   $286 = HEAP32[$285>>2]|0;
   $289 = (FUNCTION_TABLE_iiiiii[$260 & 511]($266,$287,$288,$283,$286)|0);
   $290 = $14;
   $291 = (($18) + ($290<<2)|0);
   HEAP32[$291>>2] = $289;
   $292 = $22;
   $293 = ((($292)) + 24|0);
   $294 = HEAP32[$293>>2]|0;
   $295 = (($294) + 1)|0;
   HEAP32[$293>>2] = $295;
   $296 = $22;
   $297 = ((($296)) + 16|0);
   $298 = HEAP32[$297>>2]|0;
   $299 = ($295|0)>=($298|0);
   if ($299) {
    $300 = $22;
    $301 = ((($300)) + 24|0);
    HEAP32[$301>>2] = 0;
    $302 = $22;
    $303 = ((($302)) + 8|0);
    $304 = HEAP32[$303>>2]|0;
    $305 = $22;
    $306 = ((($305)) + 4|0);
    HEAP32[$306>>2] = $304;
    $307 = $22;
    $308 = ((($307)) + 28|0);
    $309 = HEAP32[$308>>2]|0;
    $310 = (($309) + 1)|0;
    HEAP32[$308>>2] = $310;
    $311 = $6;
    $312 = ((($311)) + 18076|0);
    $313 = $14;
    $314 = (($312) + (($313*72)|0)|0);
    $315 = ((($314)) + 32|0);
    $316 = HEAP32[$315>>2]|0;
    $317 = ($310|0)<($316|0);
    if ($317) {
     $318 = $6;
     $319 = ((($318)) + 18076|0);
     $320 = $14;
     $321 = (($319) + (($320*72)|0)|0);
     $322 = ((($321)) + 36|0);
     $323 = HEAP32[$322>>2]|0;
     $324 = $22;
     $325 = ((($324)) + 8|0);
     $326 = HEAP32[$325>>2]|0;
     $327 = (($326) + ($323)|0);
     HEAP32[$325>>2] = $327;
    }
   }
   $328 = $14;
   $329 = (($328) + 1)|0;
   $14 = $329;
  }
  $330 = $11;
  $331 = ($330|0)>=(3);
  L71: do {
   if ($331) {
    $332 = HEAP32[$18>>2]|0;
    $24 = $332;
    $333 = $6;
    $334 = HEAP32[$333>>2]|0;
    $335 = ((($334)) + 8|0);
    $336 = HEAP32[$335>>2]|0;
    $337 = ($336|0)==(3);
    if ($337) {
     $338 = $13;
     $339 = ($338|0)!=(0);
     if (!($339)) {
      $371 = $6;
      $372 = ((($371)) + 18448|0);
      $373 = HEAP32[$372>>2]|0;
      $374 = $21;
      $375 = $24;
      $376 = ((($18)) + 4|0);
      $377 = HEAP32[$376>>2]|0;
      $378 = ((($18)) + 8|0);
      $379 = HEAP32[$378>>2]|0;
      $380 = $6;
      $381 = HEAP32[$380>>2]|0;
      $382 = HEAP32[$381>>2]|0;
      $383 = $11;
      FUNCTION_TABLE_viiiiii[$373 & 511]($374,$375,$377,$379,$382,$383);
      break;
     }
     $15 = 0;
     while(1) {
      $340 = $15;
      $341 = $6;
      $342 = HEAP32[$341>>2]|0;
      $343 = HEAP32[$342>>2]|0;
      $344 = ($340>>>0)<($343>>>0);
      if (!($344)) {
       break L71;
      }
      $345 = $24;
      $346 = $15;
      $347 = (($345) + ($346)|0);
      $348 = HEAP8[$347>>0]|0;
      $349 = $21;
      HEAP8[$349>>0] = $348;
      $350 = ((($18)) + 4|0);
      $351 = HEAP32[$350>>2]|0;
      $352 = $15;
      $353 = (($351) + ($352)|0);
      $354 = HEAP8[$353>>0]|0;
      $355 = $21;
      $356 = ((($355)) + 1|0);
      HEAP8[$356>>0] = $354;
      $357 = ((($18)) + 8|0);
      $358 = HEAP32[$357>>2]|0;
      $359 = $15;
      $360 = (($358) + ($359)|0);
      $361 = HEAP8[$360>>0]|0;
      $362 = $21;
      $363 = ((($362)) + 2|0);
      HEAP8[$363>>0] = $361;
      $364 = $21;
      $365 = ((($364)) + 3|0);
      HEAP8[$365>>0] = -1;
      $366 = $11;
      $367 = $21;
      $368 = (($367) + ($366)|0);
      $21 = $368;
      $369 = $15;
      $370 = (($369) + 1)|0;
      $15 = $370;
     }
    }
    $384 = $6;
    $385 = HEAP32[$384>>2]|0;
    $386 = ((($385)) + 8|0);
    $387 = HEAP32[$386>>2]|0;
    $388 = ($387|0)==(4);
    if (!($388)) {
     $15 = 0;
     while(1) {
      $495 = $15;
      $496 = $6;
      $497 = HEAP32[$496>>2]|0;
      $498 = HEAP32[$497>>2]|0;
      $499 = ($495>>>0)<($498>>>0);
      if (!($499)) {
       break L71;
      }
      $500 = $24;
      $501 = $15;
      $502 = (($500) + ($501)|0);
      $503 = HEAP8[$502>>0]|0;
      $504 = $21;
      $505 = ((($504)) + 2|0);
      HEAP8[$505>>0] = $503;
      $506 = $21;
      $507 = ((($506)) + 1|0);
      HEAP8[$507>>0] = $503;
      $508 = $21;
      HEAP8[$508>>0] = $503;
      $509 = $21;
      $510 = ((($509)) + 3|0);
      HEAP8[$510>>0] = -1;
      $511 = $11;
      $512 = $21;
      $513 = (($512) + ($511)|0);
      $21 = $513;
      $514 = $15;
      $515 = (($514) + 1)|0;
      $15 = $515;
     }
    }
    $389 = $6;
    $390 = ((($389)) + 18408|0);
    $391 = HEAP32[$390>>2]|0;
    $392 = ($391|0)==(0);
    if ($392) {
     $15 = 0;
     while(1) {
      $393 = $15;
      $394 = $6;
      $395 = HEAP32[$394>>2]|0;
      $396 = HEAP32[$395>>2]|0;
      $397 = ($393>>>0)<($396>>>0);
      if (!($397)) {
       break L71;
      }
      $398 = ((($18)) + 12|0);
      $399 = HEAP32[$398>>2]|0;
      $400 = $15;
      $401 = (($399) + ($400)|0);
      $402 = HEAP8[$401>>0]|0;
      $25 = $402;
      $403 = HEAP32[$18>>2]|0;
      $404 = $15;
      $405 = (($403) + ($404)|0);
      $406 = HEAP8[$405>>0]|0;
      $407 = $25;
      $408 = (__ZL15stbi__blinn_8x8hh($406,$407)|0);
      $409 = $21;
      HEAP8[$409>>0] = $408;
      $410 = ((($18)) + 4|0);
      $411 = HEAP32[$410>>2]|0;
      $412 = $15;
      $413 = (($411) + ($412)|0);
      $414 = HEAP8[$413>>0]|0;
      $415 = $25;
      $416 = (__ZL15stbi__blinn_8x8hh($414,$415)|0);
      $417 = $21;
      $418 = ((($417)) + 1|0);
      HEAP8[$418>>0] = $416;
      $419 = ((($18)) + 8|0);
      $420 = HEAP32[$419>>2]|0;
      $421 = $15;
      $422 = (($420) + ($421)|0);
      $423 = HEAP8[$422>>0]|0;
      $424 = $25;
      $425 = (__ZL15stbi__blinn_8x8hh($423,$424)|0);
      $426 = $21;
      $427 = ((($426)) + 2|0);
      HEAP8[$427>>0] = $425;
      $428 = $21;
      $429 = ((($428)) + 3|0);
      HEAP8[$429>>0] = -1;
      $430 = $11;
      $431 = $21;
      $432 = (($431) + ($430)|0);
      $21 = $432;
      $433 = $15;
      $434 = (($433) + 1)|0;
      $15 = $434;
     }
    }
    $435 = $6;
    $436 = ((($435)) + 18408|0);
    $437 = HEAP32[$436>>2]|0;
    $438 = ($437|0)==(2);
    $439 = $6;
    $440 = ((($439)) + 18448|0);
    $441 = HEAP32[$440>>2]|0;
    $442 = $21;
    $443 = $24;
    $444 = ((($18)) + 4|0);
    $445 = HEAP32[$444>>2]|0;
    $446 = ((($18)) + 8|0);
    $447 = HEAP32[$446>>2]|0;
    $448 = $6;
    $449 = HEAP32[$448>>2]|0;
    $450 = HEAP32[$449>>2]|0;
    $451 = $11;
    FUNCTION_TABLE_viiiiii[$441 & 511]($442,$443,$445,$447,$450,$451);
    if ($438) {
     $15 = 0;
     while(1) {
      $452 = $15;
      $453 = $6;
      $454 = HEAP32[$453>>2]|0;
      $455 = HEAP32[$454>>2]|0;
      $456 = ($452>>>0)<($455>>>0);
      if (!($456)) {
       break L71;
      }
      $457 = ((($18)) + 12|0);
      $458 = HEAP32[$457>>2]|0;
      $459 = $15;
      $460 = (($458) + ($459)|0);
      $461 = HEAP8[$460>>0]|0;
      $26 = $461;
      $462 = $21;
      $463 = HEAP8[$462>>0]|0;
      $464 = $463&255;
      $465 = (255 - ($464))|0;
      $466 = $465&255;
      $467 = $26;
      $468 = (__ZL15stbi__blinn_8x8hh($466,$467)|0);
      $469 = $21;
      HEAP8[$469>>0] = $468;
      $470 = $21;
      $471 = ((($470)) + 1|0);
      $472 = HEAP8[$471>>0]|0;
      $473 = $472&255;
      $474 = (255 - ($473))|0;
      $475 = $474&255;
      $476 = $26;
      $477 = (__ZL15stbi__blinn_8x8hh($475,$476)|0);
      $478 = $21;
      $479 = ((($478)) + 1|0);
      HEAP8[$479>>0] = $477;
      $480 = $21;
      $481 = ((($480)) + 2|0);
      $482 = HEAP8[$481>>0]|0;
      $483 = $482&255;
      $484 = (255 - ($483))|0;
      $485 = $484&255;
      $486 = $26;
      $487 = (__ZL15stbi__blinn_8x8hh($485,$486)|0);
      $488 = $21;
      $489 = ((($488)) + 2|0);
      HEAP8[$489>>0] = $487;
      $490 = $11;
      $491 = $21;
      $492 = (($491) + ($490)|0);
      $21 = $492;
      $493 = $15;
      $494 = (($493) + 1)|0;
      $15 = $494;
     }
    }
   } else {
    $516 = $13;
    $517 = ($516|0)!=(0);
    if ($517) {
     $518 = $11;
     $519 = ($518|0)==(1);
     $15 = 0;
     if ($519) {
      while(1) {
       $520 = $15;
       $521 = $6;
       $522 = HEAP32[$521>>2]|0;
       $523 = HEAP32[$522>>2]|0;
       $524 = ($520>>>0)<($523>>>0);
       if (!($524)) {
        break L71;
       }
       $525 = HEAP32[$18>>2]|0;
       $526 = $15;
       $527 = (($525) + ($526)|0);
       $528 = HEAP8[$527>>0]|0;
       $529 = $528&255;
       $530 = ((($18)) + 4|0);
       $531 = HEAP32[$530>>2]|0;
       $532 = $15;
       $533 = (($531) + ($532)|0);
       $534 = HEAP8[$533>>0]|0;
       $535 = $534&255;
       $536 = ((($18)) + 8|0);
       $537 = HEAP32[$536>>2]|0;
       $538 = $15;
       $539 = (($537) + ($538)|0);
       $540 = HEAP8[$539>>0]|0;
       $541 = $540&255;
       $542 = (__ZL15stbi__compute_yiii($529,$535,$541)|0);
       $543 = $21;
       $544 = ((($543)) + 1|0);
       $21 = $544;
       HEAP8[$543>>0] = $542;
       $545 = $15;
       $546 = (($545) + 1)|0;
       $15 = $546;
      }
     } else {
      while(1) {
       $547 = $15;
       $548 = $6;
       $549 = HEAP32[$548>>2]|0;
       $550 = HEAP32[$549>>2]|0;
       $551 = ($547>>>0)<($550>>>0);
       if (!($551)) {
        break L71;
       }
       $552 = HEAP32[$18>>2]|0;
       $553 = $15;
       $554 = (($552) + ($553)|0);
       $555 = HEAP8[$554>>0]|0;
       $556 = $555&255;
       $557 = ((($18)) + 4|0);
       $558 = HEAP32[$557>>2]|0;
       $559 = $15;
       $560 = (($558) + ($559)|0);
       $561 = HEAP8[$560>>0]|0;
       $562 = $561&255;
       $563 = ((($18)) + 8|0);
       $564 = HEAP32[$563>>2]|0;
       $565 = $15;
       $566 = (($564) + ($565)|0);
       $567 = HEAP8[$566>>0]|0;
       $568 = $567&255;
       $569 = (__ZL15stbi__compute_yiii($556,$562,$568)|0);
       $570 = $21;
       HEAP8[$570>>0] = $569;
       $571 = $21;
       $572 = ((($571)) + 1|0);
       HEAP8[$572>>0] = -1;
       $573 = $15;
       $574 = (($573) + 1)|0;
       $15 = $574;
       $575 = $21;
       $576 = ((($575)) + 2|0);
       $21 = $576;
      }
     }
    }
    $577 = $6;
    $578 = HEAP32[$577>>2]|0;
    $579 = ((($578)) + 8|0);
    $580 = HEAP32[$579>>2]|0;
    $581 = ($580|0)==(4);
    if ($581) {
     $582 = $6;
     $583 = ((($582)) + 18408|0);
     $584 = HEAP32[$583>>2]|0;
     $585 = ($584|0)==(0);
     if ($585) {
      $15 = 0;
      while(1) {
       $586 = $15;
       $587 = $6;
       $588 = HEAP32[$587>>2]|0;
       $589 = HEAP32[$588>>2]|0;
       $590 = ($586>>>0)<($589>>>0);
       if (!($590)) {
        break L71;
       }
       $591 = ((($18)) + 12|0);
       $592 = HEAP32[$591>>2]|0;
       $593 = $15;
       $594 = (($592) + ($593)|0);
       $595 = HEAP8[$594>>0]|0;
       $27 = $595;
       $596 = HEAP32[$18>>2]|0;
       $597 = $15;
       $598 = (($596) + ($597)|0);
       $599 = HEAP8[$598>>0]|0;
       $600 = $27;
       $601 = (__ZL15stbi__blinn_8x8hh($599,$600)|0);
       $28 = $601;
       $602 = ((($18)) + 4|0);
       $603 = HEAP32[$602>>2]|0;
       $604 = $15;
       $605 = (($603) + ($604)|0);
       $606 = HEAP8[$605>>0]|0;
       $607 = $27;
       $608 = (__ZL15stbi__blinn_8x8hh($606,$607)|0);
       $29 = $608;
       $609 = ((($18)) + 8|0);
       $610 = HEAP32[$609>>2]|0;
       $611 = $15;
       $612 = (($610) + ($611)|0);
       $613 = HEAP8[$612>>0]|0;
       $614 = $27;
       $615 = (__ZL15stbi__blinn_8x8hh($613,$614)|0);
       $30 = $615;
       $616 = $28;
       $617 = $616&255;
       $618 = $29;
       $619 = $618&255;
       $620 = $30;
       $621 = $620&255;
       $622 = (__ZL15stbi__compute_yiii($617,$619,$621)|0);
       $623 = $21;
       HEAP8[$623>>0] = $622;
       $624 = $21;
       $625 = ((($624)) + 1|0);
       HEAP8[$625>>0] = -1;
       $626 = $11;
       $627 = $21;
       $628 = (($627) + ($626)|0);
       $21 = $628;
       $629 = $15;
       $630 = (($629) + 1)|0;
       $15 = $630;
      }
     }
    }
    $631 = $6;
    $632 = HEAP32[$631>>2]|0;
    $633 = ((($632)) + 8|0);
    $634 = HEAP32[$633>>2]|0;
    $635 = ($634|0)==(4);
    if ($635) {
     $636 = $6;
     $637 = ((($636)) + 18408|0);
     $638 = HEAP32[$637>>2]|0;
     $639 = ($638|0)==(2);
     if ($639) {
      $15 = 0;
      while(1) {
       $640 = $15;
       $641 = $6;
       $642 = HEAP32[$641>>2]|0;
       $643 = HEAP32[$642>>2]|0;
       $644 = ($640>>>0)<($643>>>0);
       if (!($644)) {
        break L71;
       }
       $645 = HEAP32[$18>>2]|0;
       $646 = $15;
       $647 = (($645) + ($646)|0);
       $648 = HEAP8[$647>>0]|0;
       $649 = $648&255;
       $650 = (255 - ($649))|0;
       $651 = $650&255;
       $652 = ((($18)) + 12|0);
       $653 = HEAP32[$652>>2]|0;
       $654 = $15;
       $655 = (($653) + ($654)|0);
       $656 = HEAP8[$655>>0]|0;
       $657 = (__ZL15stbi__blinn_8x8hh($651,$656)|0);
       $658 = $21;
       HEAP8[$658>>0] = $657;
       $659 = $21;
       $660 = ((($659)) + 1|0);
       HEAP8[$660>>0] = -1;
       $661 = $11;
       $662 = $21;
       $663 = (($662) + ($661)|0);
       $21 = $663;
       $664 = $15;
       $665 = (($664) + 1)|0;
       $15 = $665;
      }
     }
    }
    $666 = HEAP32[$18>>2]|0;
    $31 = $666;
    $667 = $11;
    $668 = ($667|0)==(1);
    $15 = 0;
    if ($668) {
     while(1) {
      $669 = $15;
      $670 = $6;
      $671 = HEAP32[$670>>2]|0;
      $672 = HEAP32[$671>>2]|0;
      $673 = ($669>>>0)<($672>>>0);
      if (!($673)) {
       break L71;
      }
      $674 = $31;
      $675 = $15;
      $676 = (($674) + ($675)|0);
      $677 = HEAP8[$676>>0]|0;
      $678 = $21;
      $679 = $15;
      $680 = (($678) + ($679)|0);
      HEAP8[$680>>0] = $677;
      $681 = $15;
      $682 = (($681) + 1)|0;
      $15 = $682;
     }
    } else {
     while(1) {
      $683 = $15;
      $684 = $6;
      $685 = HEAP32[$684>>2]|0;
      $686 = HEAP32[$685>>2]|0;
      $687 = ($683>>>0)<($686>>>0);
      if (!($687)) {
       break L71;
      }
      $688 = $31;
      $689 = $15;
      $690 = (($688) + ($689)|0);
      $691 = HEAP8[$690>>0]|0;
      $692 = $21;
      $693 = ((($692)) + 1|0);
      $21 = $693;
      HEAP8[$692>>0] = $691;
      $694 = $21;
      $695 = ((($694)) + 1|0);
      $21 = $695;
      HEAP8[$694>>0] = -1;
      $696 = $15;
      $697 = (($696) + 1)|0;
      $15 = $697;
     }
    }
   }
  } while(0);
  $698 = $16;
  $699 = (($698) + 1)|0;
  $16 = $699;
 }
 $700 = $6;
 __ZL18stbi__cleanup_jpegP10stbi__jpeg($700);
 $701 = $6;
 $702 = HEAP32[$701>>2]|0;
 $703 = HEAP32[$702>>2]|0;
 $704 = $7;
 HEAP32[$704>>2] = $703;
 $705 = $6;
 $706 = HEAP32[$705>>2]|0;
 $707 = ((($706)) + 4|0);
 $708 = HEAP32[$707>>2]|0;
 $709 = $8;
 HEAP32[$709>>2] = $708;
 $710 = $9;
 $711 = ($710|0)!=(0|0);
 if ($711) {
  $712 = $6;
  $713 = HEAP32[$712>>2]|0;
  $714 = ((($713)) + 8|0);
  $715 = HEAP32[$714>>2]|0;
  $716 = ($715|0)>=(3);
  $717 = $716 ? 3 : 1;
  $718 = $9;
  HEAP32[$718>>2] = $717;
 }
 $719 = $17;
 $5 = $719;
 $720 = $5;
 STACKTOP = sp;return ($720|0);
}
function __ZL23stbi__decode_jpeg_imageP10stbi__jpeg($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = 0;
 while(1) {
  $7 = $3;
  $8 = ($7|0)<(4);
  $9 = $2;
  if (!($8)) {
   break;
  }
  $10 = ((($9)) + 18076|0);
  $11 = $3;
  $12 = (($10) + (($11*72)|0)|0);
  $13 = ((($12)) + 48|0);
  HEAP32[$13>>2] = 0;
  $14 = $2;
  $15 = ((($14)) + 18076|0);
  $16 = $3;
  $17 = (($15) + (($16*72)|0)|0);
  $18 = ((($17)) + 52|0);
  HEAP32[$18>>2] = 0;
  $19 = $3;
  $20 = (($19) + 1)|0;
  $3 = $20;
 }
 $21 = ((($9)) + 18436|0);
 HEAP32[$21>>2] = 0;
 $22 = $2;
 $23 = (__ZL24stbi__decode_jpeg_headerP10stbi__jpegi($22,0)|0);
 $24 = ($23|0)!=(0);
 if (!($24)) {
  $1 = 0;
  $89 = $1;
  STACKTOP = sp;return ($89|0);
 }
 $25 = $2;
 $26 = (__ZL16stbi__get_markerP10stbi__jpeg($25)|0);
 $27 = $26&255;
 $3 = $27;
 L9: while(1) {
  $28 = $3;
  $29 = ($28|0)==(217);
  $30 = $29 ^ 1;
  if (!($30)) {
   label = 27;
   break;
  }
  $31 = $3;
  $32 = ($31|0)==(218);
  L12: do {
   if ($32) {
    $33 = $2;
    $34 = (__ZL25stbi__process_scan_headerP10stbi__jpeg($33)|0);
    $35 = ($34|0)!=(0);
    if (!($35)) {
     label = 10;
     break L9;
    }
    $36 = $2;
    $37 = (__ZL30stbi__parse_entropy_coded_dataP10stbi__jpeg($36)|0);
    $38 = ($37|0)!=(0);
    if (!($38)) {
     label = 12;
     break L9;
    }
    $39 = $2;
    $40 = ((($39)) + 18372|0);
    $41 = HEAP8[$40>>0]|0;
    $42 = $41&255;
    $43 = ($42|0)==(255);
    if ($43) {
     while(1) {
      $44 = $2;
      $45 = HEAP32[$44>>2]|0;
      $46 = (__ZL12stbi__at_eofP13stbi__context($45)|0);
      $47 = ($46|0)!=(0);
      $48 = $47 ^ 1;
      if (!($48)) {
       break L12;
      }
      $49 = $2;
      $50 = HEAP32[$49>>2]|0;
      $51 = (__ZL10stbi__get8P13stbi__context($50)|0);
      $52 = $51&255;
      $4 = $52;
      $53 = $4;
      $54 = ($53|0)==(255);
      if ($54) {
       break;
      }
     }
     $55 = $2;
     $56 = HEAP32[$55>>2]|0;
     $57 = (__ZL10stbi__get8P13stbi__context($56)|0);
     $58 = $2;
     $59 = ((($58)) + 18372|0);
     HEAP8[$59>>0] = $57;
    }
   } else {
    $60 = $3;
    $61 = ($60|0)==(220);
    $62 = $2;
    if (!($61)) {
     $78 = $3;
     $79 = (__ZL20stbi__process_markerP10stbi__jpegi($62,$78)|0);
     $80 = ($79|0)!=(0);
     if ($80) {
      break;
     } else {
      label = 25;
      break L9;
     }
    }
    $63 = HEAP32[$62>>2]|0;
    $64 = (__ZL13stbi__get16beP13stbi__context($63)|0);
    $5 = $64;
    $65 = $2;
    $66 = HEAP32[$65>>2]|0;
    $67 = (__ZL13stbi__get16beP13stbi__context($66)|0);
    $6 = $67;
    $68 = $5;
    $69 = ($68|0)!=(4);
    if ($69) {
     label = 21;
     break L9;
    }
    $71 = $6;
    $72 = $2;
    $73 = HEAP32[$72>>2]|0;
    $74 = ((($73)) + 4|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($71|0)!=($75|0);
    if ($76) {
     label = 23;
     break L9;
    }
   }
  } while(0);
  $81 = $2;
  $82 = (__ZL16stbi__get_markerP10stbi__jpeg($81)|0);
  $83 = $82&255;
  $3 = $83;
 }
 if ((label|0) == 10) {
  $1 = 0;
  $89 = $1;
  STACKTOP = sp;return ($89|0);
 }
 else if ((label|0) == 12) {
  $1 = 0;
  $89 = $1;
  STACKTOP = sp;return ($89|0);
 }
 else if ((label|0) == 21) {
  $70 = (__ZL9stbi__errPKc(11308)|0);
  $1 = $70;
  $89 = $1;
  STACKTOP = sp;return ($89|0);
 }
 else if ((label|0) == 23) {
  $77 = (__ZL9stbi__errPKc(11320)|0);
  $1 = $77;
  $89 = $1;
  STACKTOP = sp;return ($89|0);
 }
 else if ((label|0) == 25) {
  $1 = 0;
  $89 = $1;
  STACKTOP = sp;return ($89|0);
 }
 else if ((label|0) == 27) {
  $84 = $2;
  $85 = ((($84)) + 18380|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = ($86|0)!=(0);
  if ($87) {
   $88 = $2;
   __ZL17stbi__jpeg_finishP10stbi__jpeg($88);
  }
  $1 = 1;
  $89 = $1;
  STACKTOP = sp;return ($89|0);
 }
 return (0)|0;
}
function __ZL18stbi__cleanup_jpegP10stbi__jpeg($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 (__ZL26stbi__free_jpeg_componentsP10stbi__jpegii($2,$6,0)|0);
 STACKTOP = sp;return;
}
function __ZL14resample_row_1PhS_S_ii($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $6;
 STACKTOP = sp;return ($10|0);
}
function __ZL22stbi__resample_row_v_2PhS_S_ii($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = 0;
 while(1) {
  $11 = $10;
  $12 = $8;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $6;
  $15 = $10;
  $16 = (($14) + ($15)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = ($18*3)|0;
  $20 = $7;
  $21 = $10;
  $22 = (($20) + ($21)|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = (($19) + ($24))|0;
  $26 = (($25) + 2)|0;
  $27 = $26 >> 2;
  $28 = $27&255;
  $29 = $5;
  $30 = $10;
  $31 = (($29) + ($30)|0);
  HEAP8[$31>>0] = $28;
  $32 = $10;
  $33 = (($32) + 1)|0;
  $10 = $33;
 }
 $34 = $5;
 STACKTOP = sp;return ($34|0);
}
function __ZL22stbi__resample_row_h_2PhS_S_ii($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $14 = $7;
 $12 = $14;
 $15 = $9;
 $16 = ($15|0)==(1);
 $17 = $12;
 $18 = HEAP8[$17>>0]|0;
 $19 = $6;
 if ($16) {
  $20 = ((($19)) + 1|0);
  HEAP8[$20>>0] = $18;
  $21 = $6;
  HEAP8[$21>>0] = $18;
  $22 = $6;
  $5 = $22;
  $112 = $5;
  STACKTOP = sp;return ($112|0);
 }
 HEAP8[$19>>0] = $18;
 $23 = $12;
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = ($25*3)|0;
 $27 = $12;
 $28 = ((($27)) + 1|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $31 = (($26) + ($30))|0;
 $32 = (($31) + 2)|0;
 $33 = $32 >> 2;
 $34 = $33&255;
 $35 = $6;
 $36 = ((($35)) + 1|0);
 HEAP8[$36>>0] = $34;
 $11 = 1;
 while(1) {
  $37 = $11;
  $38 = $9;
  $39 = (($38) - 1)|0;
  $40 = ($37|0)<($39|0);
  $41 = $12;
  if (!($40)) {
   break;
  }
  $42 = $11;
  $43 = (($41) + ($42)|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44&255;
  $46 = ($45*3)|0;
  $47 = (($46) + 2)|0;
  $13 = $47;
  $48 = $13;
  $49 = $12;
  $50 = $11;
  $51 = (($50) - 1)|0;
  $52 = (($49) + ($51)|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53&255;
  $55 = (($48) + ($54))|0;
  $56 = $55 >> 2;
  $57 = $56&255;
  $58 = $6;
  $59 = $11;
  $60 = $59<<1;
  $61 = (($60) + 0)|0;
  $62 = (($58) + ($61)|0);
  HEAP8[$62>>0] = $57;
  $63 = $13;
  $64 = $12;
  $65 = $11;
  $66 = (($65) + 1)|0;
  $67 = (($64) + ($66)|0);
  $68 = HEAP8[$67>>0]|0;
  $69 = $68&255;
  $70 = (($63) + ($69))|0;
  $71 = $70 >> 2;
  $72 = $71&255;
  $73 = $6;
  $74 = $11;
  $75 = $74<<1;
  $76 = (($75) + 1)|0;
  $77 = (($73) + ($76)|0);
  HEAP8[$77>>0] = $72;
  $78 = $11;
  $79 = (($78) + 1)|0;
  $11 = $79;
 }
 $80 = $9;
 $81 = (($80) - 2)|0;
 $82 = (($41) + ($81)|0);
 $83 = HEAP8[$82>>0]|0;
 $84 = $83&255;
 $85 = ($84*3)|0;
 $86 = $12;
 $87 = $9;
 $88 = (($87) - 1)|0;
 $89 = (($86) + ($88)|0);
 $90 = HEAP8[$89>>0]|0;
 $91 = $90&255;
 $92 = (($85) + ($91))|0;
 $93 = (($92) + 2)|0;
 $94 = $93 >> 2;
 $95 = $94&255;
 $96 = $6;
 $97 = $11;
 $98 = $97<<1;
 $99 = (($98) + 0)|0;
 $100 = (($96) + ($99)|0);
 HEAP8[$100>>0] = $95;
 $101 = $12;
 $102 = $9;
 $103 = (($102) - 1)|0;
 $104 = (($101) + ($103)|0);
 $105 = HEAP8[$104>>0]|0;
 $106 = $6;
 $107 = $11;
 $108 = $107<<1;
 $109 = (($108) + 1)|0;
 $110 = (($106) + ($109)|0);
 HEAP8[$110>>0] = $105;
 $111 = $6;
 $5 = $111;
 $112 = $5;
 STACKTOP = sp;return ($112|0);
}
function __ZL26stbi__resample_row_genericPhS_S_ii($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = 0;
 while(1) {
  $12 = $10;
  $13 = $8;
  $14 = ($12|0)<($13|0);
  if (!($14)) {
   break;
  }
  $11 = 0;
  while(1) {
   $15 = $11;
   $16 = $9;
   $17 = ($15|0)<($16|0);
   if (!($17)) {
    break;
   }
   $18 = $6;
   $19 = $10;
   $20 = (($18) + ($19)|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $5;
   $23 = $10;
   $24 = $9;
   $25 = Math_imul($23, $24)|0;
   $26 = $11;
   $27 = (($25) + ($26))|0;
   $28 = (($22) + ($27)|0);
   HEAP8[$28>>0] = $21;
   $29 = $11;
   $30 = (($29) + 1)|0;
   $11 = $30;
  }
  $31 = $10;
  $32 = (($31) + 1)|0;
  $10 = $32;
 }
 $33 = $5;
 STACKTOP = sp;return ($33|0);
}
function __ZL15stbi__blinn_8x8hh($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $5&255;
 $7 = $3;
 $8 = $7&255;
 $9 = Math_imul($6, $8)|0;
 $10 = (($9) + 128)|0;
 $4 = $10;
 $11 = $4;
 $12 = $4;
 $13 = $12 >>> 8;
 $14 = (($11) + ($13))|0;
 $15 = $14 >>> 8;
 $16 = $15&255;
 STACKTOP = sp;return ($16|0);
}
function __ZL26stbi__free_jpeg_componentsP10stbi__jpegii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $7 = $6;
  $8 = $4;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $3;
  $11 = ((($10)) + 18076|0);
  $12 = $6;
  $13 = (($11) + (($12*72)|0)|0);
  $14 = ((($13)) + 48|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)!=(0|0);
  if ($16) {
   $17 = $3;
   $18 = ((($17)) + 18076|0);
   $19 = $6;
   $20 = (($18) + (($19*72)|0)|0);
   $21 = ((($20)) + 48|0);
   $22 = HEAP32[$21>>2]|0;
   _free($22);
   $23 = $3;
   $24 = ((($23)) + 18076|0);
   $25 = $6;
   $26 = (($24) + (($25*72)|0)|0);
   $27 = ((($26)) + 48|0);
   HEAP32[$27>>2] = 0;
   $28 = $3;
   $29 = ((($28)) + 18076|0);
   $30 = $6;
   $31 = (($29) + (($30*72)|0)|0);
   $32 = ((($31)) + 44|0);
   HEAP32[$32>>2] = 0;
  }
  $33 = $3;
  $34 = ((($33)) + 18076|0);
  $35 = $6;
  $36 = (($34) + (($35*72)|0)|0);
  $37 = ((($36)) + 52|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)!=(0|0);
  if ($39) {
   $40 = $3;
   $41 = ((($40)) + 18076|0);
   $42 = $6;
   $43 = (($41) + (($42*72)|0)|0);
   $44 = ((($43)) + 52|0);
   $45 = HEAP32[$44>>2]|0;
   _free($45);
   $46 = $3;
   $47 = ((($46)) + 18076|0);
   $48 = $6;
   $49 = (($47) + (($48*72)|0)|0);
   $50 = ((($49)) + 52|0);
   HEAP32[$50>>2] = 0;
   $51 = $3;
   $52 = ((($51)) + 18076|0);
   $53 = $6;
   $54 = (($52) + (($53*72)|0)|0);
   $55 = ((($54)) + 60|0);
   HEAP32[$55>>2] = 0;
  }
  $56 = $3;
  $57 = ((($56)) + 18076|0);
  $58 = $6;
  $59 = (($57) + (($58*72)|0)|0);
  $60 = ((($59)) + 56|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ($61|0)!=(0|0);
  if ($62) {
   $63 = $3;
   $64 = ((($63)) + 18076|0);
   $65 = $6;
   $66 = (($64) + (($65*72)|0)|0);
   $67 = ((($66)) + 56|0);
   $68 = HEAP32[$67>>2]|0;
   _free($68);
   $69 = $3;
   $70 = ((($69)) + 18076|0);
   $71 = $6;
   $72 = (($70) + (($71*72)|0)|0);
   $73 = ((($72)) + 56|0);
   HEAP32[$73>>2] = 0;
  }
  $74 = $6;
  $75 = (($74) + 1)|0;
  $6 = $75;
 }
 $76 = $5;
 STACKTOP = sp;return ($76|0);
}
function __ZL24stbi__decode_jpeg_headerP10stbi__jpegi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = ((($6)) + 18404|0);
 HEAP32[$7>>2] = 0;
 $8 = $3;
 $9 = ((($8)) + 18408|0);
 HEAP32[$9>>2] = -1;
 $10 = $3;
 $11 = ((($10)) + 18372|0);
 HEAP8[$11>>0] = -1;
 $12 = $3;
 $13 = (__ZL16stbi__get_markerP10stbi__jpeg($12)|0);
 $14 = $13&255;
 $5 = $14;
 $15 = $5;
 $16 = ($15|0)==(216);
 if (!($16)) {
  $17 = (__ZL9stbi__errPKc(11751)|0);
  $2 = $17;
  $57 = $2;
  STACKTOP = sp;return ($57|0);
 }
 $18 = $4;
 $19 = ($18|0)==(1);
 if ($19) {
  $2 = 1;
  $57 = $2;
  STACKTOP = sp;return ($57|0);
 }
 $20 = $3;
 $21 = (__ZL16stbi__get_markerP10stbi__jpeg($20)|0);
 $22 = $21&255;
 $5 = $22;
 L9: while(1) {
  $23 = $5;
  $24 = ($23|0)==(192);
  $25 = $5;
  $26 = ($25|0)==(193);
  $or$cond = $24 | $26;
  if ($or$cond) {
   $30 = 1;
  } else {
   $27 = $5;
   $28 = ($27|0)==(194);
   $30 = $28;
  }
  $29 = $30 ^ 1;
  if (!($29)) {
   label = 17;
   break;
  }
  $31 = $3;
  $32 = $5;
  $33 = (__ZL20stbi__process_markerP10stbi__jpegi($31,$32)|0);
  $34 = ($33|0)!=(0);
  if (!($34)) {
   label = 10;
   break;
  }
  $35 = $3;
  $36 = (__ZL16stbi__get_markerP10stbi__jpeg($35)|0);
  $37 = $36&255;
  $5 = $37;
  while(1) {
   $38 = $5;
   $39 = ($38|0)==(255);
   if (!($39)) {
    break;
   }
   $40 = $3;
   $41 = HEAP32[$40>>2]|0;
   $42 = (__ZL12stbi__at_eofP13stbi__context($41)|0);
   $43 = ($42|0)!=(0);
   if ($43) {
    label = 14;
    break L9;
   }
   $45 = $3;
   $46 = (__ZL16stbi__get_markerP10stbi__jpeg($45)|0);
   $47 = $46&255;
   $5 = $47;
  }
 }
 if ((label|0) == 10) {
  $2 = 0;
  $57 = $2;
  STACKTOP = sp;return ($57|0);
 }
 else if ((label|0) == 14) {
  $44 = (__ZL9stbi__errPKc(11758)|0);
  $2 = $44;
  $57 = $2;
  STACKTOP = sp;return ($57|0);
 }
 else if ((label|0) == 17) {
  $48 = $5;
  $49 = ($48|0)==(194);
  $50 = $49&1;
  $51 = $3;
  $52 = ((($51)) + 18380|0);
  HEAP32[$52>>2] = $50;
  $53 = $3;
  $54 = $4;
  $55 = (__ZL26stbi__process_frame_headerP10stbi__jpegi($53,$54)|0);
  $56 = ($55|0)!=(0);
  if ($56) {
   $2 = 1;
   $57 = $2;
   STACKTOP = sp;return ($57|0);
  } else {
   $2 = 0;
   $57 = $2;
   STACKTOP = sp;return ($57|0);
  }
 }
 return (0)|0;
}
function __ZL16stbi__get_markerP10stbi__jpeg($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ((($4)) + 18372|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = ($7|0)!=(255);
 $9 = $2;
 if ($8) {
  $10 = ((($9)) + 18372|0);
  $11 = HEAP8[$10>>0]|0;
  $3 = $11;
  $12 = $2;
  $13 = ((($12)) + 18372|0);
  HEAP8[$13>>0] = -1;
  $14 = $3;
  $1 = $14;
  $27 = $1;
  STACKTOP = sp;return ($27|0);
 }
 $15 = HEAP32[$9>>2]|0;
 $16 = (__ZL10stbi__get8P13stbi__context($15)|0);
 $3 = $16;
 $17 = $3;
 $18 = $17&255;
 $19 = ($18|0)!=(255);
 if ($19) {
  $1 = -1;
  $27 = $1;
  STACKTOP = sp;return ($27|0);
 }
 while(1) {
  $20 = $3;
  $21 = $20&255;
  $22 = ($21|0)==(255);
  if (!($22)) {
   break;
  }
  $23 = $2;
  $24 = HEAP32[$23>>2]|0;
  $25 = (__ZL10stbi__get8P13stbi__context($24)|0);
  $3 = $25;
 }
 $26 = $3;
 $1 = $26;
 $27 = $1;
 STACKTOP = sp;return ($27|0);
}
function __ZL25stbi__process_scan_headerP10stbi__jpeg($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $9 = $2;
 $10 = HEAP32[$9>>2]|0;
 $11 = (__ZL13stbi__get16beP13stbi__context($10)|0);
 $4 = $11;
 $12 = $2;
 $13 = HEAP32[$12>>2]|0;
 $14 = (__ZL10stbi__get8P13stbi__context($13)|0);
 $15 = $14&255;
 $16 = $2;
 $17 = ((($16)) + 18416|0);
 HEAP32[$17>>2] = $15;
 $18 = $2;
 $19 = ((($18)) + 18416|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)<(1);
 if (!($21)) {
  $22 = $2;
  $23 = ((($22)) + 18416|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)>(4);
  if (!($25)) {
   $26 = $2;
   $27 = ((($26)) + 18416|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $2;
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($30)) + 8|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($28|0)>($32|0);
   if (!($33)) {
    $35 = $4;
    $36 = $2;
    $37 = ((($36)) + 18416|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = $38<<1;
    $40 = (6 + ($39))|0;
    $41 = ($35|0)!=($40|0);
    if ($41) {
     $42 = (__ZL9stbi__errPKc(11707)|0);
     $1 = $42;
     $175 = $1;
     STACKTOP = sp;return ($175|0);
    }
    $3 = 0;
    while(1) {
     $43 = $3;
     $44 = $2;
     $45 = ((($44)) + 18416|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = ($43|0)<($46|0);
     $48 = $2;
     $49 = HEAP32[$48>>2]|0;
     $50 = (__ZL10stbi__get8P13stbi__context($49)|0);
     $51 = $50&255;
     if (!($47)) {
      label = 20;
      break;
     }
     $5 = $51;
     $52 = $2;
     $53 = HEAP32[$52>>2]|0;
     $54 = (__ZL10stbi__get8P13stbi__context($53)|0);
     $55 = $54&255;
     $7 = $55;
     $6 = 0;
     while(1) {
      $56 = $6;
      $57 = $2;
      $58 = HEAP32[$57>>2]|0;
      $59 = ((($58)) + 8|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($56|0)<($60|0);
      if (!($61)) {
       break;
      }
      $62 = $2;
      $63 = ((($62)) + 18076|0);
      $64 = $6;
      $65 = (($63) + (($64*72)|0)|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = $5;
      $68 = ($66|0)==($67|0);
      if ($68) {
       break;
      }
      $69 = $6;
      $70 = (($69) + 1)|0;
      $6 = $70;
     }
     $71 = $6;
     $72 = $2;
     $73 = HEAP32[$72>>2]|0;
     $74 = ((($73)) + 8|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = ($71|0)==($75|0);
     if ($76) {
      label = 14;
      break;
     }
     $77 = $7;
     $78 = $77 >> 4;
     $79 = $2;
     $80 = ((($79)) + 18076|0);
     $81 = $6;
     $82 = (($80) + (($81*72)|0)|0);
     $83 = ((($82)) + 16|0);
     HEAP32[$83>>2] = $78;
     $84 = $2;
     $85 = ((($84)) + 18076|0);
     $86 = $6;
     $87 = (($85) + (($86*72)|0)|0);
     $88 = ((($87)) + 16|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = ($89|0)>(3);
     if ($90) {
      label = 16;
      break;
     }
     $92 = $7;
     $93 = $92 & 15;
     $94 = $2;
     $95 = ((($94)) + 18076|0);
     $96 = $6;
     $97 = (($95) + (($96*72)|0)|0);
     $98 = ((($97)) + 20|0);
     HEAP32[$98>>2] = $93;
     $99 = $2;
     $100 = ((($99)) + 18076|0);
     $101 = $6;
     $102 = (($100) + (($101*72)|0)|0);
     $103 = ((($102)) + 20|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)>(3);
     if ($105) {
      label = 18;
      break;
     }
     $107 = $6;
     $108 = $2;
     $109 = ((($108)) + 18420|0);
     $110 = $3;
     $111 = (($109) + ($110<<2)|0);
     HEAP32[$111>>2] = $107;
     $112 = $3;
     $113 = (($112) + 1)|0;
     $3 = $113;
    }
    if ((label|0) == 14) {
     $1 = 0;
     $175 = $1;
     STACKTOP = sp;return ($175|0);
    }
    else if ((label|0) == 16) {
     $91 = (__ZL9stbi__errPKc(11719)|0);
     $1 = $91;
     $175 = $1;
     STACKTOP = sp;return ($175|0);
    }
    else if ((label|0) == 18) {
     $106 = (__ZL9stbi__errPKc(11731)|0);
     $1 = $106;
     $175 = $1;
     STACKTOP = sp;return ($175|0);
    }
    else if ((label|0) == 20) {
     $114 = $2;
     $115 = ((($114)) + 18384|0);
     HEAP32[$115>>2] = $51;
     $116 = $2;
     $117 = HEAP32[$116>>2]|0;
     $118 = (__ZL10stbi__get8P13stbi__context($117)|0);
     $119 = $118&255;
     $120 = $2;
     $121 = ((($120)) + 18388|0);
     HEAP32[$121>>2] = $119;
     $122 = $2;
     $123 = HEAP32[$122>>2]|0;
     $124 = (__ZL10stbi__get8P13stbi__context($123)|0);
     $125 = $124&255;
     $8 = $125;
     $126 = $8;
     $127 = $126 >> 4;
     $128 = $2;
     $129 = ((($128)) + 18392|0);
     HEAP32[$129>>2] = $127;
     $130 = $8;
     $131 = $130 & 15;
     $132 = $2;
     $133 = ((($132)) + 18396|0);
     HEAP32[$133>>2] = $131;
     $134 = $2;
     $135 = ((($134)) + 18380|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = ($136|0)!=(0);
     $138 = $2;
     $139 = ((($138)) + 18384|0);
     $140 = HEAP32[$139>>2]|0;
     do {
      if ($137) {
       $141 = ($140|0)>(63);
       if (!($141)) {
        $142 = $2;
        $143 = ((($142)) + 18388|0);
        $144 = HEAP32[$143>>2]|0;
        $145 = ($144|0)>(63);
        if (!($145)) {
         $146 = $2;
         $147 = ((($146)) + 18384|0);
         $148 = HEAP32[$147>>2]|0;
         $149 = $2;
         $150 = ((($149)) + 18388|0);
         $151 = HEAP32[$150>>2]|0;
         $152 = ($148|0)>($151|0);
         if (!($152)) {
          $153 = $2;
          $154 = ((($153)) + 18392|0);
          $155 = HEAP32[$154>>2]|0;
          $156 = ($155|0)>(13);
          if (!($156)) {
           $157 = $2;
           $158 = ((($157)) + 18396|0);
           $159 = HEAP32[$158>>2]|0;
           $160 = ($159|0)>(13);
           if (!($160)) {
            break;
           }
          }
         }
        }
       }
       $161 = (__ZL9stbi__errPKc(11743)|0);
       $1 = $161;
       $175 = $1;
       STACKTOP = sp;return ($175|0);
      } else {
       $162 = ($140|0)!=(0);
       if ($162) {
        $163 = (__ZL9stbi__errPKc(11743)|0);
        $1 = $163;
        $175 = $1;
        STACKTOP = sp;return ($175|0);
       }
       $164 = $2;
       $165 = ((($164)) + 18392|0);
       $166 = HEAP32[$165>>2]|0;
       $167 = ($166|0)!=(0);
       if (!($167)) {
        $168 = $2;
        $169 = ((($168)) + 18396|0);
        $170 = HEAP32[$169>>2]|0;
        $171 = ($170|0)!=(0);
        if (!($171)) {
         $173 = $2;
         $174 = ((($173)) + 18388|0);
         HEAP32[$174>>2] = 63;
         break;
        }
       }
       $172 = (__ZL9stbi__errPKc(11743)|0);
       $1 = $172;
       $175 = $1;
       STACKTOP = sp;return ($175|0);
      }
     } while(0);
     $1 = 1;
     $175 = $1;
     STACKTOP = sp;return ($175|0);
    }
   }
  }
 }
 $34 = (__ZL9stbi__errPKc(11683)|0);
 $1 = $34;
 $175 = $1;
 STACKTOP = sp;return ($175|0);
}
function __ZL30stbi__parse_entropy_coded_dataP10stbi__jpeg($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(400|0);
 $5 = sp + 128|0;
 $15 = sp;
 $2 = $0;
 $36 = $2;
 __ZL16stbi__jpeg_resetP10stbi__jpeg($36);
 $37 = $2;
 $38 = ((($37)) + 18380|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)!=(0);
 $41 = $2;
 $42 = ((($41)) + 18416|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)==(1);
 if (!($40)) {
  if ($44) {
   $45 = $2;
   $46 = ((($45)) + 18420|0);
   $47 = HEAP32[$46>>2]|0;
   $6 = $47;
   $48 = $2;
   $49 = ((($48)) + 18076|0);
   $50 = $6;
   $51 = (($49) + (($50*72)|0)|0);
   $52 = ((($51)) + 28|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (($53) + 7)|0;
   $55 = $54 >> 3;
   $7 = $55;
   $56 = $2;
   $57 = ((($56)) + 18076|0);
   $58 = $6;
   $59 = (($57) + (($58*72)|0)|0);
   $60 = ((($59)) + 32|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = (($61) + 7)|0;
   $63 = $62 >> 3;
   $8 = $63;
   $4 = 0;
   L5: while(1) {
    $64 = $4;
    $65 = $8;
    $66 = ($64|0)<($65|0);
    if (!($66)) {
     label = 18;
     break;
    }
    $3 = 0;
    while(1) {
     $67 = $3;
     $68 = $7;
     $69 = ($67|0)<($68|0);
     if (!($69)) {
      break;
     }
     $70 = $2;
     $71 = ((($70)) + 18076|0);
     $72 = $6;
     $73 = (($71) + (($72*72)|0)|0);
     $74 = ((($73)) + 20|0);
     $75 = HEAP32[$74>>2]|0;
     $9 = $75;
     $76 = $2;
     $77 = $2;
     $78 = ((($77)) + 4|0);
     $79 = $2;
     $80 = ((($79)) + 18076|0);
     $81 = $6;
     $82 = (($80) + (($81*72)|0)|0);
     $83 = ((($82)) + 16|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = (($78) + (($84*1680)|0)|0);
     $86 = $2;
     $87 = ((($86)) + 6724|0);
     $88 = $9;
     $89 = (($87) + (($88*1680)|0)|0);
     $90 = $2;
     $91 = ((($90)) + 13956|0);
     $92 = $9;
     $93 = (($91) + ($92<<10)|0);
     $94 = $6;
     $95 = $2;
     $96 = ((($95)) + 13444|0);
     $97 = $2;
     $98 = ((($97)) + 18076|0);
     $99 = $6;
     $100 = (($98) + (($99*72)|0)|0);
     $101 = ((($100)) + 12|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = (($96) + ($102<<7)|0);
     $104 = (__ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt($76,$5,$85,$89,$93,$94,$103)|0);
     $105 = ($104|0)!=(0);
     if (!($105)) {
      label = 8;
      break L5;
     }
     $106 = $2;
     $107 = ((($106)) + 18444|0);
     $108 = HEAP32[$107>>2]|0;
     $109 = $2;
     $110 = ((($109)) + 18076|0);
     $111 = $6;
     $112 = (($110) + (($111*72)|0)|0);
     $113 = ((($112)) + 44|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = $2;
     $116 = ((($115)) + 18076|0);
     $117 = $6;
     $118 = (($116) + (($117*72)|0)|0);
     $119 = ((($118)) + 36|0);
     $120 = HEAP32[$119>>2]|0;
     $121 = $4;
     $122 = Math_imul($120, $121)|0;
     $123 = $122<<3;
     $124 = (($114) + ($123)|0);
     $125 = $3;
     $126 = $125<<3;
     $127 = (($124) + ($126)|0);
     $128 = $2;
     $129 = ((($128)) + 18076|0);
     $130 = $6;
     $131 = (($129) + (($130*72)|0)|0);
     $132 = ((($131)) + 36|0);
     $133 = HEAP32[$132>>2]|0;
     FUNCTION_TABLE_viii[$108 & 511]($127,$133,$5);
     $134 = $2;
     $135 = ((($134)) + 18440|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = (($136) + -1)|0;
     HEAP32[$135>>2] = $137;
     $138 = ($137|0)<=(0);
     if ($138) {
      $139 = $2;
      $140 = ((($139)) + 18368|0);
      $141 = HEAP32[$140>>2]|0;
      $142 = ($141|0)<(24);
      if ($142) {
       $143 = $2;
       __ZL24stbi__grow_buffer_unsafeP10stbi__jpeg($143);
      }
      $144 = $2;
      $145 = ((($144)) + 18372|0);
      $146 = HEAP8[$145>>0]|0;
      $147 = $146&255;
      $148 = ($147|0)>=(208);
      if (!($148)) {
       label = 14;
       break L5;
      }
      $149 = $2;
      $150 = ((($149)) + 18372|0);
      $151 = HEAP8[$150>>0]|0;
      $152 = $151&255;
      $153 = ($152|0)<=(215);
      if (!($153)) {
       label = 14;
       break L5;
      }
      $154 = $2;
      __ZL16stbi__jpeg_resetP10stbi__jpeg($154);
     }
     $155 = $3;
     $156 = (($155) + 1)|0;
     $3 = $156;
    }
    $157 = $4;
    $158 = (($157) + 1)|0;
    $4 = $158;
   }
   if ((label|0) == 8) {
    $1 = 0;
    $530 = $1;
    STACKTOP = sp;return ($530|0);
   }
   else if ((label|0) == 14) {
    $1 = 1;
    $530 = $1;
    STACKTOP = sp;return ($530|0);
   }
   else if ((label|0) == 18) {
    $1 = 1;
    $530 = $1;
    STACKTOP = sp;return ($530|0);
   }
  }
  $11 = 0;
  L29: while(1) {
   $159 = $11;
   $160 = $2;
   $161 = ((($160)) + 18064|0);
   $162 = HEAP32[$161>>2]|0;
   $163 = ($159|0)<($162|0);
   if (!($163)) {
    label = 43;
    break;
   }
   $10 = 0;
   while(1) {
    $164 = $10;
    $165 = $2;
    $166 = ((($165)) + 18060|0);
    $167 = HEAP32[$166>>2]|0;
    $168 = ($164|0)<($167|0);
    if (!($168)) {
     break;
    }
    $12 = 0;
    while(1) {
     $169 = $12;
     $170 = $2;
     $171 = ((($170)) + 18416|0);
     $172 = HEAP32[$171>>2]|0;
     $173 = ($169|0)<($172|0);
     $174 = $2;
     if (!($173)) {
      break;
     }
     $175 = ((($174)) + 18420|0);
     $176 = $12;
     $177 = (($175) + ($176<<2)|0);
     $178 = HEAP32[$177>>2]|0;
     $16 = $178;
     $14 = 0;
     while(1) {
      $179 = $14;
      $180 = $2;
      $181 = ((($180)) + 18076|0);
      $182 = $16;
      $183 = (($181) + (($182*72)|0)|0);
      $184 = ((($183)) + 8|0);
      $185 = HEAP32[$184>>2]|0;
      $186 = ($179|0)<($185|0);
      if (!($186)) {
       break;
      }
      $13 = 0;
      while(1) {
       $187 = $13;
       $188 = $2;
       $189 = ((($188)) + 18076|0);
       $190 = $16;
       $191 = (($189) + (($190*72)|0)|0);
       $192 = ((($191)) + 4|0);
       $193 = HEAP32[$192>>2]|0;
       $194 = ($187|0)<($193|0);
       if (!($194)) {
        break;
       }
       $195 = $10;
       $196 = $2;
       $197 = ((($196)) + 18076|0);
       $198 = $16;
       $199 = (($197) + (($198*72)|0)|0);
       $200 = ((($199)) + 4|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = Math_imul($195, $201)|0;
       $203 = $13;
       $204 = (($202) + ($203))|0;
       $205 = $204<<3;
       $17 = $205;
       $206 = $11;
       $207 = $2;
       $208 = ((($207)) + 18076|0);
       $209 = $16;
       $210 = (($208) + (($209*72)|0)|0);
       $211 = ((($210)) + 8|0);
       $212 = HEAP32[$211>>2]|0;
       $213 = Math_imul($206, $212)|0;
       $214 = $14;
       $215 = (($213) + ($214))|0;
       $216 = $215<<3;
       $18 = $216;
       $217 = $2;
       $218 = ((($217)) + 18076|0);
       $219 = $16;
       $220 = (($218) + (($219*72)|0)|0);
       $221 = ((($220)) + 20|0);
       $222 = HEAP32[$221>>2]|0;
       $19 = $222;
       $223 = $2;
       $224 = $2;
       $225 = ((($224)) + 4|0);
       $226 = $2;
       $227 = ((($226)) + 18076|0);
       $228 = $16;
       $229 = (($227) + (($228*72)|0)|0);
       $230 = ((($229)) + 16|0);
       $231 = HEAP32[$230>>2]|0;
       $232 = (($225) + (($231*1680)|0)|0);
       $233 = $2;
       $234 = ((($233)) + 6724|0);
       $235 = $19;
       $236 = (($234) + (($235*1680)|0)|0);
       $237 = $2;
       $238 = ((($237)) + 13956|0);
       $239 = $19;
       $240 = (($238) + ($239<<10)|0);
       $241 = $16;
       $242 = $2;
       $243 = ((($242)) + 13444|0);
       $244 = $2;
       $245 = ((($244)) + 18076|0);
       $246 = $16;
       $247 = (($245) + (($246*72)|0)|0);
       $248 = ((($247)) + 12|0);
       $249 = HEAP32[$248>>2]|0;
       $250 = (($243) + ($249<<7)|0);
       $251 = (__ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt($223,$15,$232,$236,$240,$241,$250)|0);
       $252 = ($251|0)!=(0);
       if (!($252)) {
        label = 30;
        break L29;
       }
       $253 = $2;
       $254 = ((($253)) + 18444|0);
       $255 = HEAP32[$254>>2]|0;
       $256 = $2;
       $257 = ((($256)) + 18076|0);
       $258 = $16;
       $259 = (($257) + (($258*72)|0)|0);
       $260 = ((($259)) + 44|0);
       $261 = HEAP32[$260>>2]|0;
       $262 = $2;
       $263 = ((($262)) + 18076|0);
       $264 = $16;
       $265 = (($263) + (($264*72)|0)|0);
       $266 = ((($265)) + 36|0);
       $267 = HEAP32[$266>>2]|0;
       $268 = $18;
       $269 = Math_imul($267, $268)|0;
       $270 = (($261) + ($269)|0);
       $271 = $17;
       $272 = (($270) + ($271)|0);
       $273 = $2;
       $274 = ((($273)) + 18076|0);
       $275 = $16;
       $276 = (($274) + (($275*72)|0)|0);
       $277 = ((($276)) + 36|0);
       $278 = HEAP32[$277>>2]|0;
       FUNCTION_TABLE_viii[$255 & 511]($272,$278,$15);
       $279 = $13;
       $280 = (($279) + 1)|0;
       $13 = $280;
      }
      $281 = $14;
      $282 = (($281) + 1)|0;
      $14 = $282;
     }
     $283 = $12;
     $284 = (($283) + 1)|0;
     $12 = $284;
    }
    $285 = ((($174)) + 18440|0);
    $286 = HEAP32[$285>>2]|0;
    $287 = (($286) + -1)|0;
    HEAP32[$285>>2] = $287;
    $288 = ($287|0)<=(0);
    if ($288) {
     $289 = $2;
     $290 = ((($289)) + 18368|0);
     $291 = HEAP32[$290>>2]|0;
     $292 = ($291|0)<(24);
     if ($292) {
      $293 = $2;
      __ZL24stbi__grow_buffer_unsafeP10stbi__jpeg($293);
     }
     $294 = $2;
     $295 = ((($294)) + 18372|0);
     $296 = HEAP8[$295>>0]|0;
     $297 = $296&255;
     $298 = ($297|0)>=(208);
     if (!($298)) {
      label = 39;
      break L29;
     }
     $299 = $2;
     $300 = ((($299)) + 18372|0);
     $301 = HEAP8[$300>>0]|0;
     $302 = $301&255;
     $303 = ($302|0)<=(215);
     if (!($303)) {
      label = 39;
      break L29;
     }
     $304 = $2;
     __ZL16stbi__jpeg_resetP10stbi__jpeg($304);
    }
    $305 = $10;
    $306 = (($305) + 1)|0;
    $10 = $306;
   }
   $307 = $11;
   $308 = (($307) + 1)|0;
   $11 = $308;
  }
  if ((label|0) == 30) {
   $1 = 0;
   $530 = $1;
   STACKTOP = sp;return ($530|0);
  }
  else if ((label|0) == 39) {
   $1 = 1;
   $530 = $1;
   STACKTOP = sp;return ($530|0);
  }
  else if ((label|0) == 43) {
   $1 = 1;
   $530 = $1;
   STACKTOP = sp;return ($530|0);
  }
 }
 if ($44) {
  $309 = $2;
  $310 = ((($309)) + 18420|0);
  $311 = HEAP32[$310>>2]|0;
  $22 = $311;
  $312 = $2;
  $313 = ((($312)) + 18076|0);
  $314 = $22;
  $315 = (($313) + (($314*72)|0)|0);
  $316 = ((($315)) + 28|0);
  $317 = HEAP32[$316>>2]|0;
  $318 = (($317) + 7)|0;
  $319 = $318 >> 3;
  $23 = $319;
  $320 = $2;
  $321 = ((($320)) + 18076|0);
  $322 = $22;
  $323 = (($321) + (($322*72)|0)|0);
  $324 = ((($323)) + 32|0);
  $325 = HEAP32[$324>>2]|0;
  $326 = (($325) + 7)|0;
  $327 = $326 >> 3;
  $24 = $327;
  $21 = 0;
  L67: while(1) {
   $328 = $21;
   $329 = $24;
   $330 = ($328|0)<($329|0);
   if (!($330)) {
    label = 63;
    break;
   }
   $20 = 0;
   while(1) {
    $331 = $20;
    $332 = $23;
    $333 = ($331|0)<($332|0);
    if (!($333)) {
     break;
    }
    $334 = $2;
    $335 = ((($334)) + 18076|0);
    $336 = $22;
    $337 = (($335) + (($336*72)|0)|0);
    $338 = ((($337)) + 60|0);
    $339 = HEAP32[$338>>2]|0;
    $340 = $20;
    $341 = $21;
    $342 = $2;
    $343 = ((($342)) + 18076|0);
    $344 = $22;
    $345 = (($343) + (($344*72)|0)|0);
    $346 = ((($345)) + 64|0);
    $347 = HEAP32[$346>>2]|0;
    $348 = Math_imul($341, $347)|0;
    $349 = (($340) + ($348))|0;
    $350 = $349<<6;
    $351 = (($339) + ($350<<1)|0);
    $25 = $351;
    $352 = $2;
    $353 = ((($352)) + 18384|0);
    $354 = HEAP32[$353>>2]|0;
    $355 = ($354|0)==(0);
    $356 = $2;
    if ($355) {
     $357 = $25;
     $358 = $2;
     $359 = ((($358)) + 4|0);
     $360 = $2;
     $361 = ((($360)) + 18076|0);
     $362 = $22;
     $363 = (($361) + (($362*72)|0)|0);
     $364 = ((($363)) + 16|0);
     $365 = HEAP32[$364>>2]|0;
     $366 = (($359) + (($365*1680)|0)|0);
     $367 = $22;
     $368 = (__ZL31stbi__jpeg_decode_block_prog_dcP10stbi__jpegPsP13stbi__huffmani($356,$357,$366,$367)|0);
     $369 = ($368|0)!=(0);
     if (!($369)) {
      label = 51;
      break L67;
     }
    } else {
     $370 = ((($356)) + 18076|0);
     $371 = $22;
     $372 = (($370) + (($371*72)|0)|0);
     $373 = ((($372)) + 20|0);
     $374 = HEAP32[$373>>2]|0;
     $26 = $374;
     $375 = $2;
     $376 = $25;
     $377 = $2;
     $378 = ((($377)) + 6724|0);
     $379 = $26;
     $380 = (($378) + (($379*1680)|0)|0);
     $381 = $2;
     $382 = ((($381)) + 13956|0);
     $383 = $26;
     $384 = (($382) + ($383<<10)|0);
     $385 = (__ZL31stbi__jpeg_decode_block_prog_acP10stbi__jpegPsP13stbi__huffmanS1_($375,$376,$380,$384)|0);
     $386 = ($385|0)!=(0);
     if (!($386)) {
      label = 53;
      break L67;
     }
    }
    $387 = $2;
    $388 = ((($387)) + 18440|0);
    $389 = HEAP32[$388>>2]|0;
    $390 = (($389) + -1)|0;
    HEAP32[$388>>2] = $390;
    $391 = ($390|0)<=(0);
    if ($391) {
     $392 = $2;
     $393 = ((($392)) + 18368|0);
     $394 = HEAP32[$393>>2]|0;
     $395 = ($394|0)<(24);
     if ($395) {
      $396 = $2;
      __ZL24stbi__grow_buffer_unsafeP10stbi__jpeg($396);
     }
     $397 = $2;
     $398 = ((($397)) + 18372|0);
     $399 = HEAP8[$398>>0]|0;
     $400 = $399&255;
     $401 = ($400|0)>=(208);
     if (!($401)) {
      label = 59;
      break L67;
     }
     $402 = $2;
     $403 = ((($402)) + 18372|0);
     $404 = HEAP8[$403>>0]|0;
     $405 = $404&255;
     $406 = ($405|0)<=(215);
     if (!($406)) {
      label = 59;
      break L67;
     }
     $407 = $2;
     __ZL16stbi__jpeg_resetP10stbi__jpeg($407);
    }
    $408 = $20;
    $409 = (($408) + 1)|0;
    $20 = $409;
   }
   $410 = $21;
   $411 = (($410) + 1)|0;
   $21 = $411;
  }
  if ((label|0) == 51) {
   $1 = 0;
   $530 = $1;
   STACKTOP = sp;return ($530|0);
  }
  else if ((label|0) == 53) {
   $1 = 0;
   $530 = $1;
   STACKTOP = sp;return ($530|0);
  }
  else if ((label|0) == 59) {
   $1 = 1;
   $530 = $1;
   STACKTOP = sp;return ($530|0);
  }
  else if ((label|0) == 63) {
   $1 = 1;
   $530 = $1;
   STACKTOP = sp;return ($530|0);
  }
 }
 $28 = 0;
 L96: while(1) {
  $412 = $28;
  $413 = $2;
  $414 = ((($413)) + 18064|0);
  $415 = HEAP32[$414>>2]|0;
  $416 = ($412|0)<($415|0);
  if (!($416)) {
   label = 88;
   break;
  }
  $27 = 0;
  while(1) {
   $417 = $27;
   $418 = $2;
   $419 = ((($418)) + 18060|0);
   $420 = HEAP32[$419>>2]|0;
   $421 = ($417|0)<($420|0);
   if (!($421)) {
    break;
   }
   $29 = 0;
   while(1) {
    $422 = $29;
    $423 = $2;
    $424 = ((($423)) + 18416|0);
    $425 = HEAP32[$424>>2]|0;
    $426 = ($422|0)<($425|0);
    $427 = $2;
    if (!($426)) {
     break;
    }
    $428 = ((($427)) + 18420|0);
    $429 = $29;
    $430 = (($428) + ($429<<2)|0);
    $431 = HEAP32[$430>>2]|0;
    $32 = $431;
    $31 = 0;
    while(1) {
     $432 = $31;
     $433 = $2;
     $434 = ((($433)) + 18076|0);
     $435 = $32;
     $436 = (($434) + (($435*72)|0)|0);
     $437 = ((($436)) + 8|0);
     $438 = HEAP32[$437>>2]|0;
     $439 = ($432|0)<($438|0);
     if (!($439)) {
      break;
     }
     $30 = 0;
     while(1) {
      $440 = $30;
      $441 = $2;
      $442 = ((($441)) + 18076|0);
      $443 = $32;
      $444 = (($442) + (($443*72)|0)|0);
      $445 = ((($444)) + 4|0);
      $446 = HEAP32[$445>>2]|0;
      $447 = ($440|0)<($446|0);
      if (!($447)) {
       break;
      }
      $448 = $27;
      $449 = $2;
      $450 = ((($449)) + 18076|0);
      $451 = $32;
      $452 = (($450) + (($451*72)|0)|0);
      $453 = ((($452)) + 4|0);
      $454 = HEAP32[$453>>2]|0;
      $455 = Math_imul($448, $454)|0;
      $456 = $30;
      $457 = (($455) + ($456))|0;
      $33 = $457;
      $458 = $28;
      $459 = $2;
      $460 = ((($459)) + 18076|0);
      $461 = $32;
      $462 = (($460) + (($461*72)|0)|0);
      $463 = ((($462)) + 8|0);
      $464 = HEAP32[$463>>2]|0;
      $465 = Math_imul($458, $464)|0;
      $466 = $31;
      $467 = (($465) + ($466))|0;
      $34 = $467;
      $468 = $2;
      $469 = ((($468)) + 18076|0);
      $470 = $32;
      $471 = (($469) + (($470*72)|0)|0);
      $472 = ((($471)) + 60|0);
      $473 = HEAP32[$472>>2]|0;
      $474 = $33;
      $475 = $34;
      $476 = $2;
      $477 = ((($476)) + 18076|0);
      $478 = $32;
      $479 = (($477) + (($478*72)|0)|0);
      $480 = ((($479)) + 64|0);
      $481 = HEAP32[$480>>2]|0;
      $482 = Math_imul($475, $481)|0;
      $483 = (($474) + ($482))|0;
      $484 = $483<<6;
      $485 = (($473) + ($484<<1)|0);
      $35 = $485;
      $486 = $2;
      $487 = $35;
      $488 = $2;
      $489 = ((($488)) + 4|0);
      $490 = $2;
      $491 = ((($490)) + 18076|0);
      $492 = $32;
      $493 = (($491) + (($492*72)|0)|0);
      $494 = ((($493)) + 16|0);
      $495 = HEAP32[$494>>2]|0;
      $496 = (($489) + (($495*1680)|0)|0);
      $497 = $32;
      $498 = (__ZL31stbi__jpeg_decode_block_prog_dcP10stbi__jpegPsP13stbi__huffmani($486,$487,$496,$497)|0);
      $499 = ($498|0)!=(0);
      if (!($499)) {
       label = 75;
       break L96;
      }
      $500 = $30;
      $501 = (($500) + 1)|0;
      $30 = $501;
     }
     $502 = $31;
     $503 = (($502) + 1)|0;
     $31 = $503;
    }
    $504 = $29;
    $505 = (($504) + 1)|0;
    $29 = $505;
   }
   $506 = ((($427)) + 18440|0);
   $507 = HEAP32[$506>>2]|0;
   $508 = (($507) + -1)|0;
   HEAP32[$506>>2] = $508;
   $509 = ($508|0)<=(0);
   if ($509) {
    $510 = $2;
    $511 = ((($510)) + 18368|0);
    $512 = HEAP32[$511>>2]|0;
    $513 = ($512|0)<(24);
    if ($513) {
     $514 = $2;
     __ZL24stbi__grow_buffer_unsafeP10stbi__jpeg($514);
    }
    $515 = $2;
    $516 = ((($515)) + 18372|0);
    $517 = HEAP8[$516>>0]|0;
    $518 = $517&255;
    $519 = ($518|0)>=(208);
    if (!($519)) {
     label = 84;
     break L96;
    }
    $520 = $2;
    $521 = ((($520)) + 18372|0);
    $522 = HEAP8[$521>>0]|0;
    $523 = $522&255;
    $524 = ($523|0)<=(215);
    if (!($524)) {
     label = 84;
     break L96;
    }
    $525 = $2;
    __ZL16stbi__jpeg_resetP10stbi__jpeg($525);
   }
   $526 = $27;
   $527 = (($526) + 1)|0;
   $27 = $527;
  }
  $528 = $28;
  $529 = (($528) + 1)|0;
  $28 = $529;
 }
 if ((label|0) == 75) {
  $1 = 0;
  $530 = $1;
  STACKTOP = sp;return ($530|0);
 }
 else if ((label|0) == 84) {
  $1 = 1;
  $530 = $1;
  STACKTOP = sp;return ($530|0);
 }
 else if ((label|0) == 88) {
  $1 = 1;
  $530 = $1;
  STACKTOP = sp;return ($530|0);
 }
 return (0)|0;
}
function __ZL20stbi__process_markerP10stbi__jpegi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $12 = sp;
 $3 = $0;
 $4 = $1;
 $22 = $4;
 switch ($22|0) {
 case 255:  {
  $23 = (__ZL9stbi__errPKc(11335)|0);
  $2 = $23;
  $252 = $2;
  STACKTOP = sp;return ($252|0);
  break;
 }
 case 221:  {
  $24 = $3;
  $25 = HEAP32[$24>>2]|0;
  $26 = (__ZL13stbi__get16beP13stbi__context($25)|0);
  $27 = ($26|0)!=(4);
  if ($27) {
   $28 = (__ZL9stbi__errPKc(11351)|0);
   $2 = $28;
   $252 = $2;
   STACKTOP = sp;return ($252|0);
  } else {
   $29 = $3;
   $30 = HEAP32[$29>>2]|0;
   $31 = (__ZL13stbi__get16beP13stbi__context($30)|0);
   $32 = $3;
   $33 = ((($32)) + 18436|0);
   HEAP32[$33>>2] = $31;
   $2 = 1;
   $252 = $2;
   STACKTOP = sp;return ($252|0);
  }
  break;
 }
 case 219:  {
  $34 = $3;
  $35 = HEAP32[$34>>2]|0;
  $36 = (__ZL13stbi__get16beP13stbi__context($35)|0);
  $37 = (($36) - 2)|0;
  $5 = $37;
  while(1) {
   $38 = $5;
   $39 = ($38|0)>(0);
   if (!($39)) {
    label = 19;
    break;
   }
   $40 = $3;
   $41 = HEAP32[$40>>2]|0;
   $42 = (__ZL10stbi__get8P13stbi__context($41)|0);
   $43 = $42&255;
   $6 = $43;
   $44 = $6;
   $45 = $44 >> 4;
   $7 = $45;
   $46 = $7;
   $47 = ($46|0)!=(0);
   $48 = $47&1;
   $8 = $48;
   $49 = $6;
   $50 = $49 & 15;
   $9 = $50;
   $51 = $7;
   $52 = ($51|0)!=(0);
   $53 = $7;
   $54 = ($53|0)!=(1);
   $or$cond = $52 & $54;
   if ($or$cond) {
    label = 9;
    break;
   }
   $56 = $9;
   $57 = ($56|0)>(3);
   if ($57) {
    label = 11;
    break;
   }
   $10 = 0;
   while(1) {
    $59 = $10;
    $60 = ($59|0)<(64);
    $61 = $8;
    $62 = ($61|0)!=(0);
    if (!($60)) {
     break;
    }
    $63 = $3;
    $64 = HEAP32[$63>>2]|0;
    if ($62) {
     $65 = (__ZL13stbi__get16beP13stbi__context($64)|0);
     $69 = $65;
    } else {
     $66 = (__ZL10stbi__get8P13stbi__context($64)|0);
     $67 = $66&255;
     $69 = $67;
    }
    $68 = $69&65535;
    $70 = $3;
    $71 = ((($70)) + 13444|0);
    $72 = $9;
    $73 = (($71) + ($72<<7)|0);
    $74 = $10;
    $75 = (1328 + ($74)|0);
    $76 = HEAP8[$75>>0]|0;
    $77 = $76&255;
    $78 = (($73) + ($77<<1)|0);
    HEAP16[$78>>1] = $68;
    $79 = $10;
    $80 = (($79) + 1)|0;
    $10 = $80;
   }
   $81 = $62 ? 129 : 65;
   $82 = $5;
   $83 = (($82) - ($81))|0;
   $5 = $83;
  }
  if ((label|0) == 9) {
   $55 = (__ZL9stbi__errPKc(11363)|0);
   $2 = $55;
   $252 = $2;
   STACKTOP = sp;return ($252|0);
  }
  else if ((label|0) == 11) {
   $58 = (__ZL9stbi__errPKc(11376)|0);
   $2 = $58;
   $252 = $2;
   STACKTOP = sp;return ($252|0);
  }
  else if ((label|0) == 19) {
   $84 = $5;
   $85 = ($84|0)==(0);
   $86 = $85&1;
   $2 = $86;
   $252 = $2;
   STACKTOP = sp;return ($252|0);
  }
  break;
 }
 case 196:  {
  $87 = $3;
  $88 = HEAP32[$87>>2]|0;
  $89 = (__ZL13stbi__get16beP13stbi__context($88)|0);
  $90 = (($89) - 2)|0;
  $5 = $90;
  while(1) {
   $91 = $5;
   $92 = ($91|0)>(0);
   if (!($92)) {
    label = 40;
    break;
   }
   $14 = 0;
   $93 = $3;
   $94 = HEAP32[$93>>2]|0;
   $95 = (__ZL10stbi__get8P13stbi__context($94)|0);
   $96 = $95&255;
   $15 = $96;
   $97 = $15;
   $98 = $97 >> 4;
   $16 = $98;
   $99 = $15;
   $100 = $99 & 15;
   $17 = $100;
   $101 = $16;
   $102 = ($101|0)>(1);
   $103 = $17;
   $104 = ($103|0)>(3);
   $or$cond3 = $102 | $104;
   if ($or$cond3) {
    label = 23;
    break;
   }
   $13 = 0;
   while(1) {
    $106 = $13;
    $107 = ($106|0)<(16);
    if (!($107)) {
     break;
    }
    $108 = $3;
    $109 = HEAP32[$108>>2]|0;
    $110 = (__ZL10stbi__get8P13stbi__context($109)|0);
    $111 = $110&255;
    $112 = $13;
    $113 = (($12) + ($112<<2)|0);
    HEAP32[$113>>2] = $111;
    $114 = $13;
    $115 = (($12) + ($114<<2)|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = $14;
    $118 = (($117) + ($116))|0;
    $14 = $118;
    $119 = $13;
    $120 = (($119) + 1)|0;
    $13 = $120;
   }
   $121 = $5;
   $122 = (($121) - 17)|0;
   $5 = $122;
   $123 = $16;
   $124 = ($123|0)==(0);
   $125 = $3;
   if ($124) {
    $126 = ((($125)) + 4|0);
    $127 = $17;
    $128 = (($126) + (($127*1680)|0)|0);
    $129 = (__ZL19stbi__build_huffmanP13stbi__huffmanPi($128,$12)|0);
    $130 = ($129|0)!=(0);
    if (!($130)) {
     label = 29;
     break;
    }
    $131 = $3;
    $132 = ((($131)) + 4|0);
    $133 = $17;
    $134 = (($132) + (($133*1680)|0)|0);
    $135 = ((($134)) + 1024|0);
    $11 = $135;
   } else {
    $136 = ((($125)) + 6724|0);
    $137 = $17;
    $138 = (($136) + (($137*1680)|0)|0);
    $139 = (__ZL19stbi__build_huffmanP13stbi__huffmanPi($138,$12)|0);
    $140 = ($139|0)!=(0);
    if (!($140)) {
     label = 32;
     break;
    }
    $141 = $3;
    $142 = ((($141)) + 6724|0);
    $143 = $17;
    $144 = (($142) + (($143*1680)|0)|0);
    $145 = ((($144)) + 1024|0);
    $11 = $145;
   }
   $13 = 0;
   while(1) {
    $146 = $13;
    $147 = $14;
    $148 = ($146|0)<($147|0);
    if (!($148)) {
     break;
    }
    $149 = $3;
    $150 = HEAP32[$149>>2]|0;
    $151 = (__ZL10stbi__get8P13stbi__context($150)|0);
    $152 = $11;
    $153 = $13;
    $154 = (($152) + ($153)|0);
    HEAP8[$154>>0] = $151;
    $155 = $13;
    $156 = (($155) + 1)|0;
    $13 = $156;
   }
   $157 = $16;
   $158 = ($157|0)!=(0);
   if ($158) {
    $159 = $3;
    $160 = ((($159)) + 13956|0);
    $161 = $17;
    $162 = (($160) + ($161<<10)|0);
    $163 = $3;
    $164 = ((($163)) + 6724|0);
    $165 = $17;
    $166 = (($164) + (($165*1680)|0)|0);
    __ZL19stbi__build_fast_acPsP13stbi__huffman($162,$166);
   }
   $167 = $14;
   $168 = $5;
   $169 = (($168) - ($167))|0;
   $5 = $169;
  }
  if ((label|0) == 23) {
   $105 = (__ZL9stbi__errPKc(11390)|0);
   $2 = $105;
   $252 = $2;
   STACKTOP = sp;return ($252|0);
  }
  else if ((label|0) == 29) {
   $2 = 0;
   $252 = $2;
   STACKTOP = sp;return ($252|0);
  }
  else if ((label|0) == 32) {
   $2 = 0;
   $252 = $2;
   STACKTOP = sp;return ($252|0);
  }
  else if ((label|0) == 40) {
   $170 = $5;
   $171 = ($170|0)==(0);
   $172 = $171&1;
   $2 = $172;
   $252 = $2;
   STACKTOP = sp;return ($252|0);
  }
  break;
 }
 default: {
  $173 = $4;
  $174 = ($173|0)>=(224);
  $175 = $4;
  $176 = ($175|0)<=(239);
  $or$cond5 = $174 & $176;
  $177 = $4;
  $178 = ($177|0)==(254);
  $or$cond7 = $or$cond5 | $178;
  if (!($or$cond7)) {
   $251 = (__ZL9stbi__errPKc(11440)|0);
   $2 = $251;
   $252 = $2;
   STACKTOP = sp;return ($252|0);
  }
  $179 = $3;
  $180 = HEAP32[$179>>2]|0;
  $181 = (__ZL13stbi__get16beP13stbi__context($180)|0);
  $5 = $181;
  $182 = $5;
  $183 = ($182|0)<(2);
  if ($183) {
   $184 = $4;
   $185 = ($184|0)==(254);
   if ($185) {
    $186 = (__ZL9stbi__errPKc(11405)|0);
    $2 = $186;
    $252 = $2;
    STACKTOP = sp;return ($252|0);
   } else {
    $187 = (__ZL9stbi__errPKc(11417)|0);
    $2 = $187;
    $252 = $2;
    STACKTOP = sp;return ($252|0);
   }
  }
  $188 = $5;
  $189 = (($188) - 2)|0;
  $5 = $189;
  $190 = $4;
  $191 = ($190|0)==(224);
  $192 = $5;
  $193 = ($192|0)>=(5);
  $or$cond9 = $191 & $193;
  if ($or$cond9) {
   $18 = 1;
   $19 = 0;
   while(1) {
    $194 = $19;
    $195 = ($194|0)<(5);
    if (!($195)) {
     break;
    }
    $196 = $3;
    $197 = HEAP32[$196>>2]|0;
    $198 = (__ZL10stbi__get8P13stbi__context($197)|0);
    $199 = $198&255;
    $200 = $19;
    $201 = (11429 + ($200)|0);
    $202 = HEAP8[$201>>0]|0;
    $203 = $202&255;
    $204 = ($199|0)!=($203|0);
    if ($204) {
     $18 = 0;
    }
    $205 = $19;
    $206 = (($205) + 1)|0;
    $19 = $206;
   }
   $207 = $5;
   $208 = (($207) - 5)|0;
   $5 = $208;
   $209 = $18;
   $210 = ($209|0)!=(0);
   if ($210) {
    $211 = $3;
    $212 = ((($211)) + 18404|0);
    HEAP32[$212>>2] = 1;
   }
  } else {
   $213 = $4;
   $214 = ($213|0)==(238);
   $215 = $5;
   $216 = ($215|0)>=(12);
   $or$cond11 = $214 & $216;
   if ($or$cond11) {
    $20 = 1;
    $21 = 0;
    while(1) {
     $217 = $21;
     $218 = ($217|0)<(6);
     if (!($218)) {
      break;
     }
     $219 = $3;
     $220 = HEAP32[$219>>2]|0;
     $221 = (__ZL10stbi__get8P13stbi__context($220)|0);
     $222 = $221&255;
     $223 = $21;
     $224 = (11434 + ($223)|0);
     $225 = HEAP8[$224>>0]|0;
     $226 = $225&255;
     $227 = ($222|0)!=($226|0);
     if ($227) {
      $20 = 0;
     }
     $228 = $21;
     $229 = (($228) + 1)|0;
     $21 = $229;
    }
    $230 = $5;
    $231 = (($230) - 6)|0;
    $5 = $231;
    $232 = $20;
    $233 = ($232|0)!=(0);
    if ($233) {
     $234 = $3;
     $235 = HEAP32[$234>>2]|0;
     (__ZL10stbi__get8P13stbi__context($235)|0);
     $236 = $3;
     $237 = HEAP32[$236>>2]|0;
     (__ZL13stbi__get16beP13stbi__context($237)|0);
     $238 = $3;
     $239 = HEAP32[$238>>2]|0;
     (__ZL13stbi__get16beP13stbi__context($239)|0);
     $240 = $3;
     $241 = HEAP32[$240>>2]|0;
     $242 = (__ZL10stbi__get8P13stbi__context($241)|0);
     $243 = $242&255;
     $244 = $3;
     $245 = ((($244)) + 18408|0);
     HEAP32[$245>>2] = $243;
     $246 = $5;
     $247 = (($246) - 6)|0;
     $5 = $247;
    }
   }
  }
  $248 = $3;
  $249 = HEAP32[$248>>2]|0;
  $250 = $5;
  __ZL10stbi__skipP13stbi__contexti($249,$250);
  $2 = 1;
  $252 = $2;
  STACKTOP = sp;return ($252|0);
 }
 }
 return (0)|0;
}
function __ZL17stbi__jpeg_finishP10stbi__jpeg($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $8 = $1;
 $9 = ((($8)) + 18380|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $4 = 0;
 while(1) {
  $12 = $4;
  $13 = $1;
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($12|0)<($16|0);
  if (!($17)) {
   break;
  }
  $18 = $1;
  $19 = ((($18)) + 18076|0);
  $20 = $4;
  $21 = (($19) + (($20*72)|0)|0);
  $22 = ((($21)) + 28|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + 7)|0;
  $25 = $24 >> 3;
  $5 = $25;
  $26 = $1;
  $27 = ((($26)) + 18076|0);
  $28 = $4;
  $29 = (($27) + (($28*72)|0)|0);
  $30 = ((($29)) + 32|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + 7)|0;
  $33 = $32 >> 3;
  $6 = $33;
  $3 = 0;
  while(1) {
   $34 = $3;
   $35 = $6;
   $36 = ($34|0)<($35|0);
   if (!($36)) {
    break;
   }
   $2 = 0;
   while(1) {
    $37 = $2;
    $38 = $5;
    $39 = ($37|0)<($38|0);
    if (!($39)) {
     break;
    }
    $40 = $1;
    $41 = ((($40)) + 18076|0);
    $42 = $4;
    $43 = (($41) + (($42*72)|0)|0);
    $44 = ((($43)) + 60|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = $2;
    $47 = $3;
    $48 = $1;
    $49 = ((($48)) + 18076|0);
    $50 = $4;
    $51 = (($49) + (($50*72)|0)|0);
    $52 = ((($51)) + 64|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = Math_imul($47, $53)|0;
    $55 = (($46) + ($54))|0;
    $56 = $55<<6;
    $57 = (($45) + ($56<<1)|0);
    $7 = $57;
    $58 = $7;
    $59 = $1;
    $60 = ((($59)) + 13444|0);
    $61 = $1;
    $62 = ((($61)) + 18076|0);
    $63 = $4;
    $64 = (($62) + (($63*72)|0)|0);
    $65 = ((($64)) + 12|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = (($60) + ($66<<7)|0);
    __ZL21stbi__jpeg_dequantizePsPt($58,$67);
    $68 = $1;
    $69 = ((($68)) + 18444|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = $1;
    $72 = ((($71)) + 18076|0);
    $73 = $4;
    $74 = (($72) + (($73*72)|0)|0);
    $75 = ((($74)) + 44|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = $1;
    $78 = ((($77)) + 18076|0);
    $79 = $4;
    $80 = (($78) + (($79*72)|0)|0);
    $81 = ((($80)) + 36|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = $3;
    $84 = Math_imul($82, $83)|0;
    $85 = $84<<3;
    $86 = (($76) + ($85)|0);
    $87 = $2;
    $88 = $87<<3;
    $89 = (($86) + ($88)|0);
    $90 = $1;
    $91 = ((($90)) + 18076|0);
    $92 = $4;
    $93 = (($91) + (($92*72)|0)|0);
    $94 = ((($93)) + 36|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = $7;
    FUNCTION_TABLE_viii[$70 & 511]($89,$95,$96);
    $97 = $2;
    $98 = (($97) + 1)|0;
    $2 = $98;
   }
   $99 = $3;
   $100 = (($99) + 1)|0;
   $3 = $100;
  }
  $101 = $4;
  $102 = (($101) + 1)|0;
  $4 = $102;
 }
 STACKTOP = sp;return;
}
function __ZL21stbi__jpeg_dequantizePsPt($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 while(1) {
  $5 = $4;
  $6 = ($5|0)<(64);
  if (!($6)) {
   break;
  }
  $7 = $3;
  $8 = $4;
  $9 = (($7) + ($8<<1)|0);
  $10 = HEAP16[$9>>1]|0;
  $11 = $10&65535;
  $12 = $2;
  $13 = $4;
  $14 = (($12) + ($13<<1)|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = $15 << 16 >> 16;
  $17 = Math_imul($16, $11)|0;
  $18 = $17&65535;
  HEAP16[$14>>1] = $18;
  $19 = $4;
  $20 = (($19) + 1)|0;
  $4 = $20;
 }
 STACKTOP = sp;return;
}
function __ZL19stbi__build_huffmanP13stbi__huffmanPi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $7 = 0;
 $5 = 0;
 while(1) {
  $12 = $5;
  $13 = ($12|0)<(16);
  if (!($13)) {
   break;
  }
  $6 = 0;
  while(1) {
   $14 = $6;
   $15 = $4;
   $16 = $5;
   $17 = (($15) + ($16<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($14|0)<($18|0);
   $20 = $5;
   $21 = (($20) + 1)|0;
   if (!($19)) {
    break;
   }
   $22 = $21&255;
   $23 = $3;
   $24 = ((($23)) + 1280|0);
   $25 = $7;
   $26 = (($25) + 1)|0;
   $7 = $26;
   $27 = (($24) + ($25)|0);
   HEAP8[$27>>0] = $22;
   $28 = $6;
   $29 = (($28) + 1)|0;
   $6 = $29;
  }
  $5 = $21;
 }
 $30 = $3;
 $31 = ((($30)) + 1280|0);
 $32 = $7;
 $33 = (($31) + ($32)|0);
 HEAP8[$33>>0] = 0;
 $8 = 0;
 $7 = 0;
 $6 = 1;
 while(1) {
  $34 = $6;
  $35 = ($34|0)<=(16);
  if (!($35)) {
   break;
  }
  $36 = $7;
  $37 = $8;
  $38 = (($36) - ($37))|0;
  $39 = $3;
  $40 = ((($39)) + 1612|0);
  $41 = $6;
  $42 = (($40) + ($41<<2)|0);
  HEAP32[$42>>2] = $38;
  $43 = $3;
  $44 = ((($43)) + 1280|0);
  $45 = $7;
  $46 = (($44) + ($45)|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $47&255;
  $49 = $6;
  $50 = ($48|0)==($49|0);
  if ($50) {
   while(1) {
    $51 = $3;
    $52 = ((($51)) + 1280|0);
    $53 = $7;
    $54 = (($52) + ($53)|0);
    $55 = HEAP8[$54>>0]|0;
    $56 = $55&255;
    $57 = $6;
    $58 = ($56|0)==($57|0);
    $59 = $8;
    if (!($58)) {
     break;
    }
    $60 = (($59) + 1)|0;
    $8 = $60;
    $61 = $59&65535;
    $62 = $3;
    $63 = ((($62)) + 512|0);
    $64 = $7;
    $65 = (($64) + 1)|0;
    $7 = $65;
    $66 = (($63) + ($64<<1)|0);
    HEAP16[$66>>1] = $61;
   }
   $67 = (($59) - 1)|0;
   $68 = $6;
   $69 = 1 << $68;
   $70 = ($67>>>0)>=($69>>>0);
   if ($70) {
    label = 14;
    break;
   }
  }
  $72 = $8;
  $73 = $6;
  $74 = (16 - ($73))|0;
  $75 = $72 << $74;
  $76 = $3;
  $77 = ((($76)) + 1540|0);
  $78 = $6;
  $79 = (($77) + ($78<<2)|0);
  HEAP32[$79>>2] = $75;
  $80 = $8;
  $81 = $80 << 1;
  $8 = $81;
  $82 = $6;
  $83 = (($82) + 1)|0;
  $6 = $83;
 }
 if ((label|0) == 14) {
  $71 = (__ZL9stbi__errPKc(11455)|0);
  $2 = $71;
  $126 = $2;
  STACKTOP = sp;return ($126|0);
 }
 $84 = $3;
 $85 = ((($84)) + 1540|0);
 $86 = $6;
 $87 = (($85) + ($86<<2)|0);
 HEAP32[$87>>2] = -1;
 $88 = $3;
 _memset(($88|0),-1,512)|0;
 $5 = 0;
 while(1) {
  $89 = $5;
  $90 = $7;
  $91 = ($89|0)<($90|0);
  if (!($91)) {
   break;
  }
  $92 = $3;
  $93 = ((($92)) + 1280|0);
  $94 = $5;
  $95 = (($93) + ($94)|0);
  $96 = HEAP8[$95>>0]|0;
  $97 = $96&255;
  $9 = $97;
  $98 = $9;
  $99 = ($98|0)<=(9);
  L26: do {
   if ($99) {
    $100 = $3;
    $101 = ((($100)) + 512|0);
    $102 = $5;
    $103 = (($101) + ($102<<1)|0);
    $104 = HEAP16[$103>>1]|0;
    $105 = $104&65535;
    $106 = $9;
    $107 = (9 - ($106))|0;
    $108 = $105 << $107;
    $10 = $108;
    $109 = $9;
    $110 = (9 - ($109))|0;
    $111 = 1 << $110;
    $11 = $111;
    $6 = 0;
    while(1) {
     $112 = $6;
     $113 = $11;
     $114 = ($112|0)<($113|0);
     if (!($114)) {
      break L26;
     }
     $115 = $5;
     $116 = $115&255;
     $117 = $3;
     $118 = $10;
     $119 = $6;
     $120 = (($118) + ($119))|0;
     $121 = (($117) + ($120)|0);
     HEAP8[$121>>0] = $116;
     $122 = $6;
     $123 = (($122) + 1)|0;
     $6 = $123;
    }
   }
  } while(0);
  $124 = $5;
  $125 = (($124) + 1)|0;
  $5 = $125;
 }
 $2 = 1;
 $126 = $2;
 STACKTOP = sp;return ($126|0);
}
function __ZL19stbi__build_fast_acPsP13stbi__huffman($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 while(1) {
  $12 = $4;
  $13 = ($12|0)<(512);
  if (!($13)) {
   break;
  }
  $14 = $3;
  $15 = $4;
  $16 = (($14) + ($15)|0);
  $17 = HEAP8[$16>>0]|0;
  $5 = $17;
  $18 = $2;
  $19 = $4;
  $20 = (($18) + ($19<<1)|0);
  HEAP16[$20>>1] = 0;
  $21 = $5;
  $22 = $21&255;
  $23 = ($22|0)<(255);
  if ($23) {
   $24 = $3;
   $25 = ((($24)) + 1024|0);
   $26 = $5;
   $27 = $26&255;
   $28 = (($25) + ($27)|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = $29&255;
   $6 = $30;
   $31 = $6;
   $32 = $31 >> 4;
   $33 = $32 & 15;
   $7 = $33;
   $34 = $6;
   $35 = $34 & 15;
   $8 = $35;
   $36 = $3;
   $37 = ((($36)) + 1280|0);
   $38 = $5;
   $39 = $38&255;
   $40 = (($37) + ($39)|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41&255;
   $9 = $42;
   $43 = $8;
   $44 = ($43|0)!=(0);
   if ($44) {
    $45 = $9;
    $46 = $8;
    $47 = (($45) + ($46))|0;
    $48 = ($47|0)<=(9);
    if ($48) {
     $49 = $4;
     $50 = $9;
     $51 = $49 << $50;
     $52 = $51 & 511;
     $53 = $8;
     $54 = (9 - ($53))|0;
     $55 = $52 >> $54;
     $10 = $55;
     $56 = $8;
     $57 = (($56) - 1)|0;
     $58 = 1 << $57;
     $11 = $58;
     $59 = $10;
     $60 = $11;
     $61 = ($59|0)<($60|0);
     if ($61) {
      $62 = $8;
      $63 = -1 << $62;
      $64 = (($63) + 1)|0;
      $65 = $10;
      $66 = (($65) + ($64))|0;
      $10 = $66;
     }
     $67 = $10;
     $68 = ($67|0)>=(-128);
     $69 = $10;
     $70 = ($69|0)<=(127);
     $or$cond = $68 & $70;
     if ($or$cond) {
      $71 = $10;
      $72 = $71<<8;
      $73 = $7;
      $74 = $73<<4;
      $75 = (($72) + ($74))|0;
      $76 = $9;
      $77 = $8;
      $78 = (($76) + ($77))|0;
      $79 = (($75) + ($78))|0;
      $80 = $79&65535;
      $81 = $2;
      $82 = $4;
      $83 = (($81) + ($82<<1)|0);
      HEAP16[$83>>1] = $80;
     }
    }
   }
  }
  $84 = $4;
  $85 = (($84) + 1)|0;
  $4 = $85;
 }
 STACKTOP = sp;return;
}
function __ZL16stbi__jpeg_resetP10stbi__jpeg($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 18368|0);
 HEAP32[$3>>2] = 0;
 $4 = $1;
 $5 = ((($4)) + 18364|0);
 HEAP32[$5>>2] = 0;
 $6 = $1;
 $7 = ((($6)) + 18376|0);
 HEAP32[$7>>2] = 0;
 $8 = $1;
 $9 = ((($8)) + 18076|0);
 $10 = ((($9)) + 216|0);
 $11 = ((($10)) + 24|0);
 HEAP32[$11>>2] = 0;
 $12 = $1;
 $13 = ((($12)) + 18076|0);
 $14 = ((($13)) + 144|0);
 $15 = ((($14)) + 24|0);
 HEAP32[$15>>2] = 0;
 $16 = $1;
 $17 = ((($16)) + 18076|0);
 $18 = ((($17)) + 72|0);
 $19 = ((($18)) + 24|0);
 HEAP32[$19>>2] = 0;
 $20 = $1;
 $21 = ((($20)) + 18076|0);
 $22 = ((($21)) + 24|0);
 HEAP32[$22>>2] = 0;
 $23 = $1;
 $24 = ((($23)) + 18372|0);
 HEAP8[$24>>0] = -1;
 $25 = $1;
 $26 = ((($25)) + 18436|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)!=(0);
 if (!($28)) {
  $34 = 2147483647;
  $32 = $1;
  $33 = ((($32)) + 18440|0);
  HEAP32[$33>>2] = $34;
  $35 = $1;
  $36 = ((($35)) + 18400|0);
  HEAP32[$36>>2] = 0;
  STACKTOP = sp;return;
 }
 $29 = $1;
 $30 = ((($29)) + 18436|0);
 $31 = HEAP32[$30>>2]|0;
 $34 = $31;
 $32 = $1;
 $33 = ((($32)) + 18440|0);
 HEAP32[$33>>2] = $34;
 $35 = $1;
 $36 = ((($35)) + 18400|0);
 HEAP32[$36>>2] = 0;
 STACKTOP = sp;return;
}
function __ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPt($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $24 = $8;
 $25 = ((($24)) + 18368|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)<(16);
 if ($27) {
  $28 = $8;
  __ZL24stbi__grow_buffer_unsafeP10stbi__jpeg($28);
 }
 $29 = $8;
 $30 = $10;
 $31 = (__ZL22stbi__jpeg_huff_decodeP10stbi__jpegP13stbi__huffman($29,$30)|0);
 $18 = $31;
 $32 = $18;
 $33 = ($32|0)<(0);
 if ($33) {
  $34 = (__ZL9stbi__errPKc(10942)|0);
  $7 = $34;
  $153 = $7;
  STACKTOP = sp;return ($153|0);
 }
 $35 = $9;
 dest=$35; stop=dest+128|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 $36 = $18;
 $37 = ($36|0)!=(0);
 if ($37) {
  $38 = $8;
  $39 = $18;
  $40 = (__ZL20stbi__extend_receiveP10stbi__jpegi($38,$39)|0);
  $41 = $40;
 } else {
  $41 = 0;
 }
 $15 = $41;
 $42 = $8;
 $43 = ((($42)) + 18076|0);
 $44 = $13;
 $45 = (($43) + (($44*72)|0)|0);
 $46 = ((($45)) + 24|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $15;
 $49 = (($47) + ($48))|0;
 $16 = $49;
 $50 = $16;
 $51 = $8;
 $52 = ((($51)) + 18076|0);
 $53 = $13;
 $54 = (($52) + (($53*72)|0)|0);
 $55 = ((($54)) + 24|0);
 HEAP32[$55>>2] = $50;
 $56 = $16;
 $57 = $14;
 $58 = HEAP16[$57>>1]|0;
 $59 = $58&65535;
 $60 = Math_imul($56, $59)|0;
 $61 = $60&65535;
 $62 = $9;
 HEAP16[$62>>1] = $61;
 $17 = 1;
 L11: while(1) {
  $63 = $8;
  $64 = ((($63)) + 18368|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = ($65|0)<(16);
  if ($66) {
   $67 = $8;
   __ZL24stbi__grow_buffer_unsafeP10stbi__jpeg($67);
  }
  $68 = $8;
  $69 = ((($68)) + 18364|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = $70 >>> 23;
  $72 = $71 & 511;
  $20 = $72;
  $73 = $12;
  $74 = $20;
  $75 = (($73) + ($74<<1)|0);
  $76 = HEAP16[$75>>1]|0;
  $77 = $76 << 16 >> 16;
  $21 = $77;
  $78 = $21;
  $79 = ($78|0)!=(0);
  do {
   if ($79) {
    $80 = $21;
    $81 = $80 >> 4;
    $82 = $81 & 15;
    $83 = $17;
    $84 = (($83) + ($82))|0;
    $17 = $84;
    $85 = $21;
    $86 = $85 & 15;
    $22 = $86;
    $87 = $22;
    $88 = $8;
    $89 = ((($88)) + 18364|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = $90 << $87;
    HEAP32[$89>>2] = $91;
    $92 = $22;
    $93 = $8;
    $94 = ((($93)) + 18368|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = (($95) - ($92))|0;
    HEAP32[$94>>2] = $96;
    $97 = $17;
    $98 = (($97) + 1)|0;
    $17 = $98;
    $99 = (1328 + ($97)|0);
    $100 = HEAP8[$99>>0]|0;
    $101 = $100&255;
    $19 = $101;
    $102 = $21;
    $103 = $102 >> 8;
    $104 = $14;
    $105 = $19;
    $106 = (($104) + ($105<<1)|0);
    $107 = HEAP16[$106>>1]|0;
    $108 = $107&65535;
    $109 = Math_imul($103, $108)|0;
    $110 = $109&65535;
    $111 = $9;
    $112 = $19;
    $113 = (($111) + ($112<<1)|0);
    HEAP16[$113>>1] = $110;
   } else {
    $114 = $8;
    $115 = $11;
    $116 = (__ZL22stbi__jpeg_huff_decodeP10stbi__jpegP13stbi__huffman($114,$115)|0);
    $23 = $116;
    $117 = $23;
    $118 = ($117|0)<(0);
    if ($118) {
     label = 13;
     break L11;
    }
    $120 = $23;
    $121 = $120 & 15;
    $22 = $121;
    $122 = $23;
    $123 = $122 >> 4;
    $21 = $123;
    $124 = $22;
    $125 = ($124|0)==(0);
    if (!($125)) {
     $130 = $21;
     $131 = $17;
     $132 = (($131) + ($130))|0;
     $17 = $132;
     $133 = $17;
     $134 = (($133) + 1)|0;
     $17 = $134;
     $135 = (1328 + ($133)|0);
     $136 = HEAP8[$135>>0]|0;
     $137 = $136&255;
     $19 = $137;
     $138 = $8;
     $139 = $22;
     $140 = (__ZL20stbi__extend_receiveP10stbi__jpegi($138,$139)|0);
     $141 = $14;
     $142 = $19;
     $143 = (($141) + ($142<<1)|0);
     $144 = HEAP16[$143>>1]|0;
     $145 = $144&65535;
     $146 = Math_imul($140, $145)|0;
     $147 = $146&65535;
     $148 = $9;
     $149 = $19;
     $150 = (($148) + ($149<<1)|0);
     HEAP16[$150>>1] = $147;
     break;
    }
    $126 = $23;
    $127 = ($126|0)!=(240);
    if ($127) {
     label = 19;
     break L11;
    }
    $128 = $17;
    $129 = (($128) + 16)|0;
    $17 = $129;
   }
  } while(0);
  $151 = $17;
  $152 = ($151|0)<(64);
  if (!($152)) {
   label = 19;
   break;
  }
 }
 if ((label|0) == 13) {
  $119 = (__ZL9stbi__errPKc(10942)|0);
  $7 = $119;
  $153 = $7;
  STACKTOP = sp;return ($153|0);
 }
 else if ((label|0) == 19) {
  $7 = 1;
  $153 = $7;
  STACKTOP = sp;return ($153|0);
 }
 return (0)|0;
}
function __ZL24stbi__grow_buffer_unsafeP10stbi__jpeg($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 while(1) {
  $4 = $1;
  $5 = ((($4)) + 18376|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)!=(0);
  if ($7) {
   $12 = 0;
  } else {
   $8 = $1;
   $9 = HEAP32[$8>>2]|0;
   $10 = (__ZL10stbi__get8P13stbi__context($9)|0);
   $11 = $10&255;
   $12 = $11;
  }
  $2 = $12;
  $13 = $2;
  $14 = ($13|0)==(255);
  if ($14) {
   $15 = $1;
   $16 = HEAP32[$15>>2]|0;
   $17 = (__ZL10stbi__get8P13stbi__context($16)|0);
   $18 = $17&255;
   $3 = $18;
   while(1) {
    $19 = $3;
    $20 = ($19|0)==(255);
    if (!($20)) {
     break;
    }
    $21 = $1;
    $22 = HEAP32[$21>>2]|0;
    $23 = (__ZL10stbi__get8P13stbi__context($22)|0);
    $24 = $23&255;
    $3 = $24;
   }
   $25 = $3;
   $26 = ($25|0)!=(0);
   if ($26) {
    break;
   }
  }
  $33 = $2;
  $34 = $1;
  $35 = ((($34)) + 18368|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (24 - ($36))|0;
  $38 = $33 << $37;
  $39 = $1;
  $40 = ((($39)) + 18364|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $41 | $38;
  HEAP32[$40>>2] = $42;
  $43 = $1;
  $44 = ((($43)) + 18368|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + 8)|0;
  HEAP32[$44>>2] = $46;
  $47 = $1;
  $48 = ((($47)) + 18368|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($49|0)<=(24);
  if (!($50)) {
   label = 11;
   break;
  }
 }
 if ((label|0) == 11) {
  STACKTOP = sp;return;
 }
 $27 = $3;
 $28 = $27&255;
 $29 = $1;
 $30 = ((($29)) + 18372|0);
 HEAP8[$30>>0] = $28;
 $31 = $1;
 $32 = ((($31)) + 18376|0);
 HEAP32[$32>>2] = 1;
 STACKTOP = sp;return;
}
function __ZL31stbi__jpeg_decode_block_prog_dcP10stbi__jpegPsP13stbi__huffmani($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $12 = $5;
 $13 = ((($12)) + 18388|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = (__ZL9stbi__errPKc(11472)|0);
  $4 = $16;
  $71 = $4;
  STACKTOP = sp;return ($71|0);
 }
 $17 = $5;
 $18 = ((($17)) + 18368|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)<(16);
 if ($20) {
  $21 = $5;
  __ZL24stbi__grow_buffer_unsafeP10stbi__jpeg($21);
 }
 $22 = $5;
 $23 = ((($22)) + 18392|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0);
 if ($25) {
  $26 = $6;
  dest=$26; stop=dest+128|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
  $27 = $5;
  $28 = $7;
  $29 = (__ZL22stbi__jpeg_huff_decodeP10stbi__jpegP13stbi__huffman($27,$28)|0);
  $11 = $29;
  $30 = $11;
  $31 = ($30|0)!=(0);
  if ($31) {
   $32 = $5;
   $33 = $11;
   $34 = (__ZL20stbi__extend_receiveP10stbi__jpegi($32,$33)|0);
   $35 = $34;
  } else {
   $35 = 0;
  }
  $9 = $35;
  $36 = $5;
  $37 = ((($36)) + 18076|0);
  $38 = $8;
  $39 = (($37) + (($38*72)|0)|0);
  $40 = ((($39)) + 24|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $9;
  $43 = (($41) + ($42))|0;
  $10 = $43;
  $44 = $10;
  $45 = $5;
  $46 = ((($45)) + 18076|0);
  $47 = $8;
  $48 = (($46) + (($47*72)|0)|0);
  $49 = ((($48)) + 24|0);
  HEAP32[$49>>2] = $44;
  $50 = $10;
  $51 = $5;
  $52 = ((($51)) + 18396|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $50 << $53;
  $55 = $54&65535;
  $56 = $6;
  HEAP16[$56>>1] = $55;
 } else {
  $57 = $5;
  $58 = (__ZL18stbi__jpeg_get_bitP10stbi__jpeg($57)|0);
  $59 = ($58|0)!=(0);
  if ($59) {
   $60 = $5;
   $61 = ((($60)) + 18396|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = 1 << $62;
   $64 = $63&65535;
   $65 = $64 << 16 >> 16;
   $66 = $6;
   $67 = HEAP16[$66>>1]|0;
   $68 = $67 << 16 >> 16;
   $69 = (($68) + ($65))|0;
   $70 = $69&65535;
   HEAP16[$66>>1] = $70;
  }
 }
 $4 = 1;
 $71 = $4;
 STACKTOP = sp;return ($71|0);
}
function __ZL31stbi__jpeg_decode_block_prog_acP10stbi__jpegPsP13stbi__huffmanS1_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $22 = $5;
 $23 = ((($22)) + 18384|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0);
 if ($25) {
  $26 = (__ZL9stbi__errPKc(11472)|0);
  $4 = $26;
  $288 = $4;
  STACKTOP = sp;return ($288|0);
 }
 $27 = $5;
 $28 = ((($27)) + 18392|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0);
 $31 = $5;
 $32 = ((($31)) + 18396|0);
 $33 = HEAP32[$32>>2]|0;
 L5: do {
  if ($30) {
   $10 = $33;
   $34 = $5;
   $35 = ((($34)) + 18400|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)!=(0);
   $38 = $5;
   if ($37) {
    $39 = ((($38)) + 18400|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (($40) + -1)|0;
    HEAP32[$39>>2] = $41;
    $4 = 1;
    $288 = $4;
    STACKTOP = sp;return ($288|0);
   }
   $42 = ((($38)) + 18384|0);
   $43 = HEAP32[$42>>2]|0;
   $9 = $43;
   L11: while(1) {
    $44 = $5;
    $45 = ((($44)) + 18368|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ($46|0)<(16);
    if ($47) {
     $48 = $5;
     __ZL24stbi__grow_buffer_unsafeP10stbi__jpeg($48);
    }
    $49 = $5;
    $50 = ((($49)) + 18364|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = $51 >>> 23;
    $53 = $52 & 511;
    $12 = $53;
    $54 = $8;
    $55 = $12;
    $56 = (($54) + ($55<<1)|0);
    $57 = HEAP16[$56>>1]|0;
    $58 = $57 << 16 >> 16;
    $13 = $58;
    $59 = $13;
    $60 = ($59|0)!=(0);
    do {
     if ($60) {
      $61 = $13;
      $62 = $61 >> 4;
      $63 = $62 & 15;
      $64 = $9;
      $65 = (($64) + ($63))|0;
      $9 = $65;
      $66 = $13;
      $67 = $66 & 15;
      $14 = $67;
      $68 = $14;
      $69 = $5;
      $70 = ((($69)) + 18364|0);
      $71 = HEAP32[$70>>2]|0;
      $72 = $71 << $68;
      HEAP32[$70>>2] = $72;
      $73 = $14;
      $74 = $5;
      $75 = ((($74)) + 18368|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = (($76) - ($73))|0;
      HEAP32[$75>>2] = $77;
      $78 = $9;
      $79 = (($78) + 1)|0;
      $9 = $79;
      $80 = (1328 + ($78)|0);
      $81 = HEAP8[$80>>0]|0;
      $82 = $81&255;
      $11 = $82;
      $83 = $13;
      $84 = $83 >> 8;
      $85 = $10;
      $86 = $84 << $85;
      $87 = $86&65535;
      $88 = $6;
      $89 = $11;
      $90 = (($88) + ($89<<1)|0);
      HEAP16[$90>>1] = $87;
     } else {
      $91 = $5;
      $92 = $7;
      $93 = (__ZL22stbi__jpeg_huff_decodeP10stbi__jpegP13stbi__huffman($91,$92)|0);
      $15 = $93;
      $94 = $15;
      $95 = ($94|0)<(0);
      if ($95) {
       label = 12;
       break L11;
      }
      $97 = $15;
      $98 = $97 & 15;
      $14 = $98;
      $99 = $15;
      $100 = $99 >> 4;
      $13 = $100;
      $101 = $14;
      $102 = ($101|0)==(0);
      $103 = $13;
      if (!($102)) {
       $124 = $9;
       $125 = (($124) + ($103))|0;
       $9 = $125;
       $126 = $9;
       $127 = (($126) + 1)|0;
       $9 = $127;
       $128 = (1328 + ($126)|0);
       $129 = HEAP8[$128>>0]|0;
       $130 = $129&255;
       $11 = $130;
       $131 = $5;
       $132 = $14;
       $133 = (__ZL20stbi__extend_receiveP10stbi__jpegi($131,$132)|0);
       $134 = $10;
       $135 = $133 << $134;
       $136 = $135&65535;
       $137 = $6;
       $138 = $11;
       $139 = (($137) + ($138<<1)|0);
       HEAP16[$139>>1] = $136;
       break;
      }
      $104 = ($103|0)<(15);
      if ($104) {
       break L11;
      }
      $122 = $9;
      $123 = (($122) + 16)|0;
      $9 = $123;
     }
    } while(0);
    $140 = $9;
    $141 = $5;
    $142 = ((($141)) + 18388|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($140|0)<=($143|0);
    if (!($144)) {
     break L5;
    }
   }
   if ((label|0) == 12) {
    $96 = (__ZL9stbi__errPKc(10942)|0);
    $4 = $96;
    $288 = $4;
    STACKTOP = sp;return ($288|0);
   }
   $105 = $13;
   $106 = 1 << $105;
   $107 = $5;
   $108 = ((($107)) + 18400|0);
   HEAP32[$108>>2] = $106;
   $109 = $13;
   $110 = ($109|0)!=(0);
   if ($110) {
    $111 = $5;
    $112 = $13;
    $113 = (__ZL19stbi__jpeg_get_bitsP10stbi__jpegi($111,$112)|0);
    $114 = $5;
    $115 = ((($114)) + 18400|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = (($116) + ($113))|0;
    HEAP32[$115>>2] = $117;
   }
   $118 = $5;
   $119 = ((($118)) + 18400|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = (($120) + -1)|0;
   HEAP32[$119>>2] = $121;
  } else {
   $145 = 1 << $33;
   $146 = $145&65535;
   $16 = $146;
   $147 = $5;
   $148 = ((($147)) + 18400|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = ($149|0)!=(0);
   $151 = $5;
   if ($150) {
    $152 = ((($151)) + 18400|0);
    $153 = HEAP32[$152>>2]|0;
    $154 = (($153) + -1)|0;
    HEAP32[$152>>2] = $154;
    $155 = $5;
    $156 = ((($155)) + 18384|0);
    $157 = HEAP32[$156>>2]|0;
    $9 = $157;
    while(1) {
     $158 = $9;
     $159 = $5;
     $160 = ((($159)) + 18388|0);
     $161 = HEAP32[$160>>2]|0;
     $162 = ($158|0)<=($161|0);
     if (!($162)) {
      break L5;
     }
     $163 = $6;
     $164 = $9;
     $165 = (1328 + ($164)|0);
     $166 = HEAP8[$165>>0]|0;
     $167 = $166&255;
     $168 = (($163) + ($167<<1)|0);
     $17 = $168;
     $169 = $17;
     $170 = HEAP16[$169>>1]|0;
     $171 = $170 << 16 >> 16;
     $172 = ($171|0)!=(0);
     do {
      if ($172) {
       $173 = $5;
       $174 = (__ZL18stbi__jpeg_get_bitP10stbi__jpeg($173)|0);
       $175 = ($174|0)!=(0);
       if ($175) {
        $176 = $17;
        $177 = HEAP16[$176>>1]|0;
        $178 = $177 << 16 >> 16;
        $179 = $16;
        $180 = $179 << 16 >> 16;
        $181 = $178 & $180;
        $182 = ($181|0)==(0);
        if ($182) {
         $183 = $17;
         $184 = HEAP16[$183>>1]|0;
         $185 = $184 << 16 >> 16;
         $186 = ($185|0)>(0);
         $187 = $16;
         $188 = $187 << 16 >> 16;
         $189 = $17;
         $190 = HEAP16[$189>>1]|0;
         $191 = $190 << 16 >> 16;
         if ($186) {
          $192 = (($191) + ($188))|0;
          $193 = $192&65535;
          HEAP16[$189>>1] = $193;
          break;
         } else {
          $194 = (($191) - ($188))|0;
          $195 = $194&65535;
          HEAP16[$189>>1] = $195;
          break;
         }
        }
       }
      }
     } while(0);
     $196 = $9;
     $197 = (($196) + 1)|0;
     $9 = $197;
    }
   }
   $198 = ((($151)) + 18384|0);
   $199 = HEAP32[$198>>2]|0;
   $9 = $199;
   L47: while(1) {
    $200 = $5;
    $201 = $7;
    $202 = (__ZL22stbi__jpeg_huff_decodeP10stbi__jpegP13stbi__huffman($200,$201)|0);
    $20 = $202;
    $203 = $20;
    $204 = ($203|0)<(0);
    if ($204) {
     label = 33;
     break;
    }
    $206 = $20;
    $207 = $206 & 15;
    $19 = $207;
    $208 = $20;
    $209 = $208 >> 4;
    $18 = $209;
    $210 = $19;
    $211 = ($210|0)==(0);
    do {
     if ($211) {
      $212 = $18;
      $213 = ($212|0)<(15);
      if ($213) {
       $214 = $18;
       $215 = 1 << $214;
       $216 = (($215) - 1)|0;
       $217 = $5;
       $218 = ((($217)) + 18400|0);
       HEAP32[$218>>2] = $216;
       $219 = $18;
       $220 = ($219|0)!=(0);
       if ($220) {
        $221 = $5;
        $222 = $18;
        $223 = (__ZL19stbi__jpeg_get_bitsP10stbi__jpegi($221,$222)|0);
        $224 = $5;
        $225 = ((($224)) + 18400|0);
        $226 = HEAP32[$225>>2]|0;
        $227 = (($226) + ($223))|0;
        HEAP32[$225>>2] = $227;
       }
       $18 = 64;
      }
     } else {
      $228 = $19;
      $229 = ($228|0)!=(1);
      if ($229) {
       label = 40;
       break L47;
      }
      $231 = $5;
      $232 = (__ZL18stbi__jpeg_get_bitP10stbi__jpeg($231)|0);
      $233 = ($232|0)!=(0);
      $234 = $16;
      $235 = $234 << 16 >> 16;
      if ($233) {
       $19 = $235;
       break;
      } else {
       $236 = (0 - ($235))|0;
       $19 = $236;
       break;
      }
     }
    } while(0);
    L62: while(1) {
     $237 = $9;
     $238 = $5;
     $239 = ((($238)) + 18388|0);
     $240 = HEAP32[$239>>2]|0;
     $241 = ($237|0)<=($240|0);
     if (!($241)) {
      break;
     }
     $242 = $6;
     $243 = $9;
     $244 = (($243) + 1)|0;
     $9 = $244;
     $245 = (1328 + ($243)|0);
     $246 = HEAP8[$245>>0]|0;
     $247 = $246&255;
     $248 = (($242) + ($247<<1)|0);
     $21 = $248;
     $249 = $21;
     $250 = HEAP16[$249>>1]|0;
     $251 = $250 << 16 >> 16;
     $252 = ($251|0)!=(0);
     do {
      if ($252) {
       $253 = $5;
       $254 = (__ZL18stbi__jpeg_get_bitP10stbi__jpeg($253)|0);
       $255 = ($254|0)!=(0);
       if ($255) {
        $256 = $21;
        $257 = HEAP16[$256>>1]|0;
        $258 = $257 << 16 >> 16;
        $259 = $16;
        $260 = $259 << 16 >> 16;
        $261 = $258 & $260;
        $262 = ($261|0)==(0);
        if ($262) {
         $263 = $21;
         $264 = HEAP16[$263>>1]|0;
         $265 = $264 << 16 >> 16;
         $266 = ($265|0)>(0);
         $267 = $16;
         $268 = $267 << 16 >> 16;
         $269 = $21;
         $270 = HEAP16[$269>>1]|0;
         $271 = $270 << 16 >> 16;
         if ($266) {
          $272 = (($271) + ($268))|0;
          $273 = $272&65535;
          HEAP16[$269>>1] = $273;
          break;
         } else {
          $274 = (($271) - ($268))|0;
          $275 = $274&65535;
          HEAP16[$269>>1] = $275;
          break;
         }
        }
       }
      } else {
       $276 = $18;
       $277 = ($276|0)==(0);
       if ($277) {
        label = 53;
        break L62;
       }
       $281 = $18;
       $282 = (($281) + -1)|0;
       $18 = $282;
      }
     } while(0);
    }
    if ((label|0) == 53) {
     label = 0;
     $278 = $19;
     $279 = $278&65535;
     $280 = $21;
     HEAP16[$280>>1] = $279;
    }
    $283 = $9;
    $284 = $5;
    $285 = ((($284)) + 18388|0);
    $286 = HEAP32[$285>>2]|0;
    $287 = ($283|0)<=($286|0);
    if (!($287)) {
     break L5;
    }
   }
   if ((label|0) == 33) {
    $205 = (__ZL9stbi__errPKc(10942)|0);
    $4 = $205;
    $288 = $4;
    STACKTOP = sp;return ($288|0);
   }
   else if ((label|0) == 40) {
    $230 = (__ZL9stbi__errPKc(10942)|0);
    $4 = $230;
    $288 = $4;
    STACKTOP = sp;return ($288|0);
   }
  }
 } while(0);
 $4 = 1;
 $288 = $4;
 STACKTOP = sp;return ($288|0);
}
function __ZL22stbi__jpeg_huff_decodeP10stbi__jpegP13stbi__huffman($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $9 = $3;
 $10 = ((($9)) + 18368|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)<(16);
 if ($12) {
  $13 = $3;
  __ZL24stbi__grow_buffer_unsafeP10stbi__jpeg($13);
 }
 $14 = $3;
 $15 = ((($14)) + 18364|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 >>> 23;
 $18 = $17 & 511;
 $6 = $18;
 $19 = $4;
 $20 = $6;
 $21 = (($19) + ($20)|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $7 = $23;
 $24 = $7;
 $25 = ($24|0)<(255);
 if ($25) {
  $26 = $4;
  $27 = ((($26)) + 1280|0);
  $28 = $7;
  $29 = (($27) + ($28)|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $8 = $31;
  $32 = $8;
  $33 = $3;
  $34 = ((($33)) + 18368|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($32|0)>($35|0);
  if ($36) {
   $2 = -1;
   $135 = $2;
   STACKTOP = sp;return ($135|0);
  } else {
   $37 = $8;
   $38 = $3;
   $39 = ((($38)) + 18364|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $40 << $37;
   HEAP32[$39>>2] = $41;
   $42 = $8;
   $43 = $3;
   $44 = ((($43)) + 18368|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($45) - ($42))|0;
   HEAP32[$44>>2] = $46;
   $47 = $4;
   $48 = ((($47)) + 1024|0);
   $49 = $7;
   $50 = (($48) + ($49)|0);
   $51 = HEAP8[$50>>0]|0;
   $52 = $51&255;
   $2 = $52;
   $135 = $2;
   STACKTOP = sp;return ($135|0);
  }
 }
 $53 = $3;
 $54 = ((($53)) + 18364|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $55 >>> 16;
 $5 = $56;
 $7 = 10;
 while(1) {
  $57 = $5;
  $58 = $4;
  $59 = ((($58)) + 1540|0);
  $60 = $7;
  $61 = (($59) + ($60<<2)|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ($57>>>0)<($62>>>0);
  $64 = $7;
  if ($63) {
   break;
  }
  $65 = (($64) + 1)|0;
  $7 = $65;
 }
 $66 = ($64|0)==(17);
 if ($66) {
  $67 = $3;
  $68 = ((($67)) + 18368|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (($69) - 16)|0;
  HEAP32[$68>>2] = $70;
  $2 = -1;
  $135 = $2;
  STACKTOP = sp;return ($135|0);
 }
 $71 = $7;
 $72 = $3;
 $73 = ((($72)) + 18368|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = ($71|0)>($74|0);
 if ($75) {
  $2 = -1;
  $135 = $2;
  STACKTOP = sp;return ($135|0);
 }
 $76 = $3;
 $77 = ((($76)) + 18364|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = $7;
 $80 = (32 - ($79))|0;
 $81 = $78 >>> $80;
 $82 = $7;
 $83 = (1408 + ($82<<2)|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = $81 & $84;
 $86 = $4;
 $87 = ((($86)) + 1612|0);
 $88 = $7;
 $89 = (($87) + ($88<<2)|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = (($85) + ($90))|0;
 $6 = $91;
 $92 = $3;
 $93 = ((($92)) + 18364|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = $4;
 $96 = ((($95)) + 1280|0);
 $97 = $6;
 $98 = (($96) + ($97)|0);
 $99 = HEAP8[$98>>0]|0;
 $100 = $99&255;
 $101 = (32 - ($100))|0;
 $102 = $94 >>> $101;
 $103 = $4;
 $104 = ((($103)) + 1280|0);
 $105 = $6;
 $106 = (($104) + ($105)|0);
 $107 = HEAP8[$106>>0]|0;
 $108 = $107&255;
 $109 = (1408 + ($108<<2)|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = $102 & $110;
 $112 = $4;
 $113 = ((($112)) + 512|0);
 $114 = $6;
 $115 = (($113) + ($114<<1)|0);
 $116 = HEAP16[$115>>1]|0;
 $117 = $116&65535;
 $118 = ($111|0)==($117|0);
 if (!($118)) {
  ___assert_fail((11578|0),(9662|0),2093,(11660|0));
  // unreachable;
 }
 $119 = $7;
 $120 = $3;
 $121 = ((($120)) + 18368|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = (($122) - ($119))|0;
 HEAP32[$121>>2] = $123;
 $124 = $7;
 $125 = $3;
 $126 = ((($125)) + 18364|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = $127 << $124;
 HEAP32[$126>>2] = $128;
 $129 = $4;
 $130 = ((($129)) + 1024|0);
 $131 = $6;
 $132 = (($130) + ($131)|0);
 $133 = HEAP8[$132>>0]|0;
 $134 = $133&255;
 $2 = $134;
 $135 = $2;
 STACKTOP = sp;return ($135|0);
}
function __ZL19stbi__jpeg_get_bitsP10stbi__jpegi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = ((($5)) + 18368|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = ($7|0)<($8|0);
 if ($9) {
  $10 = $2;
  __ZL24stbi__grow_buffer_unsafeP10stbi__jpeg($10);
 }
 $11 = $2;
 $12 = ((($11)) + 18364|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $3;
 $15 = $13 << $14;
 $16 = $2;
 $17 = ((($16)) + 18364|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $3;
 $20 = (32 - ($19))|0;
 $21 = $18 >>> $20;
 $22 = $15 | $21;
 $4 = $22;
 $23 = $4;
 $24 = $3;
 $25 = (1408 + ($24<<2)|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $26 ^ -1;
 $28 = $23 & $27;
 $29 = $2;
 $30 = ((($29)) + 18364|0);
 HEAP32[$30>>2] = $28;
 $31 = $3;
 $32 = (1408 + ($31<<2)|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $4;
 $35 = $34 & $33;
 $4 = $35;
 $36 = $3;
 $37 = $2;
 $38 = ((($37)) + 18368|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (($39) - ($36))|0;
 HEAP32[$38>>2] = $40;
 $41 = $4;
 STACKTOP = sp;return ($41|0);
}
function __ZL20stbi__extend_receiveP10stbi__jpegi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = ((($6)) + 18368|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $3;
 $10 = ($8|0)<($9|0);
 if ($10) {
  $11 = $2;
  __ZL24stbi__grow_buffer_unsafeP10stbi__jpeg($11);
 }
 $12 = $2;
 $13 = ((($12)) + 18364|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 >> 31;
 $5 = $15;
 $16 = $2;
 $17 = ((($16)) + 18364|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $3;
 $20 = $18 << $19;
 $21 = $2;
 $22 = ((($21)) + 18364|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $3;
 $25 = (32 - ($24))|0;
 $26 = $23 >>> $25;
 $27 = $20 | $26;
 $4 = $27;
 $28 = $3;
 $29 = ($28|0)>=(0);
 $30 = $3;
 $31 = ($30|0)<(17);
 $or$cond = $29 & $31;
 if ($or$cond) {
  $32 = $4;
  $33 = $3;
  $34 = (1408 + ($33<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35 ^ -1;
  $37 = $32 & $36;
  $38 = $2;
  $39 = ((($38)) + 18364|0);
  HEAP32[$39>>2] = $37;
  $40 = $3;
  $41 = (1408 + ($40<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $4;
  $44 = $43 & $42;
  $4 = $44;
  $45 = $3;
  $46 = $2;
  $47 = ((($46)) + 18368|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($48) - ($45))|0;
  HEAP32[$47>>2] = $49;
  $50 = $4;
  $51 = $3;
  $52 = (1488 + ($51<<2)|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $5;
  $55 = $54 ^ -1;
  $56 = $53 & $55;
  $57 = (($50) + ($56))|0;
  STACKTOP = sp;return ($57|0);
 } else {
  ___assert_fail((11494|0),(9662|0),2115,(11557|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZL18stbi__jpeg_get_bitP10stbi__jpeg($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ((($3)) + 18368|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)<(1);
 if ($6) {
  $7 = $1;
  __ZL24stbi__grow_buffer_unsafeP10stbi__jpeg($7);
 }
 $8 = $1;
 $9 = ((($8)) + 18364|0);
 $10 = HEAP32[$9>>2]|0;
 $2 = $10;
 $11 = $1;
 $12 = ((($11)) + 18364|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 << 1;
 HEAP32[$12>>2] = $14;
 $15 = $1;
 $16 = ((($15)) + 18368|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + -1)|0;
 HEAP32[$16>>2] = $18;
 $19 = $2;
 $20 = $19 & -2147483648;
 STACKTOP = sp;return ($20|0);
}
function __ZL26stbi__process_frame_headerP10stbi__jpegi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $13 = $3;
 $14 = HEAP32[$13>>2]|0;
 $5 = $14;
 $10 = 1;
 $11 = 1;
 $15 = $5;
 $16 = (__ZL13stbi__get16beP13stbi__context($15)|0);
 $6 = $16;
 $17 = $6;
 $18 = ($17|0)<(11);
 if ($18) {
  $19 = (__ZL9stbi__errPKc(11765)|0);
  $2 = $19;
  $473 = $2;
  STACKTOP = sp;return ($473|0);
 }
 $20 = $5;
 $21 = (__ZL10stbi__get8P13stbi__context($20)|0);
 $22 = $21&255;
 $7 = $22;
 $23 = $7;
 $24 = ($23|0)!=(8);
 if ($24) {
  $25 = (__ZL9stbi__errPKc(11777)|0);
  $2 = $25;
  $473 = $2;
  STACKTOP = sp;return ($473|0);
 }
 $26 = $5;
 $27 = (__ZL13stbi__get16beP13stbi__context($26)|0);
 $28 = $5;
 $29 = ((($28)) + 4|0);
 HEAP32[$29>>2] = $27;
 $30 = $5;
 $31 = ((($30)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)==(0);
 if ($33) {
  $34 = (__ZL9stbi__errPKc(11788)|0);
  $2 = $34;
  $473 = $2;
  STACKTOP = sp;return ($473|0);
 }
 $35 = $5;
 $36 = (__ZL13stbi__get16beP13stbi__context($35)|0);
 $37 = $5;
 HEAP32[$37>>2] = $36;
 $38 = $5;
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)==(0);
 if ($40) {
  $41 = (__ZL9stbi__errPKc(11805)|0);
  $2 = $41;
  $473 = $2;
  STACKTOP = sp;return ($473|0);
 }
 $42 = $5;
 $43 = (__ZL10stbi__get8P13stbi__context($42)|0);
 $44 = $43&255;
 $12 = $44;
 $45 = $12;
 $46 = ($45|0)!=(3);
 $47 = $12;
 $48 = ($47|0)!=(1);
 $or$cond = $46 & $48;
 $49 = $12;
 $50 = ($49|0)!=(4);
 $or$cond3 = $or$cond & $50;
 if ($or$cond3) {
  $51 = (__ZL9stbi__errPKc(11813)|0);
  $2 = $51;
  $473 = $2;
  STACKTOP = sp;return ($473|0);
 }
 $52 = $12;
 $53 = $5;
 $54 = ((($53)) + 8|0);
 HEAP32[$54>>2] = $52;
 $8 = 0;
 while(1) {
  $55 = $8;
  $56 = $12;
  $57 = ($55|0)<($56|0);
  if (!($57)) {
   break;
  }
  $58 = $3;
  $59 = ((($58)) + 18076|0);
  $60 = $8;
  $61 = (($59) + (($60*72)|0)|0);
  $62 = ((($61)) + 44|0);
  HEAP32[$62>>2] = 0;
  $63 = $3;
  $64 = ((($63)) + 18076|0);
  $65 = $8;
  $66 = (($64) + (($65*72)|0)|0);
  $67 = ((($66)) + 56|0);
  HEAP32[$67>>2] = 0;
  $68 = $8;
  $69 = (($68) + 1)|0;
  $8 = $69;
 }
 $70 = $6;
 $71 = $5;
 $72 = ((($71)) + 8|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = ($73*3)|0;
 $75 = (8 + ($74))|0;
 $76 = ($70|0)!=($75|0);
 if ($76) {
  $77 = (__ZL9stbi__errPKc(11765)|0);
  $2 = $77;
  $473 = $2;
  STACKTOP = sp;return ($473|0);
 }
 $78 = $3;
 $79 = ((($78)) + 18412|0);
 HEAP32[$79>>2] = 0;
 $8 = 0;
 while(1) {
  $80 = $8;
  $81 = $5;
  $82 = ((($81)) + 8|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ($80|0)<($83|0);
  if (!($84)) {
   label = 30;
   break;
  }
  $85 = $5;
  $86 = (__ZL10stbi__get8P13stbi__context($85)|0);
  $87 = $86&255;
  $88 = $3;
  $89 = ((($88)) + 18076|0);
  $90 = $8;
  $91 = (($89) + (($90*72)|0)|0);
  HEAP32[$91>>2] = $87;
  $92 = $5;
  $93 = ((($92)) + 8|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = ($94|0)==(3);
  if ($95) {
   $96 = $3;
   $97 = ((($96)) + 18076|0);
   $98 = $8;
   $99 = (($97) + (($98*72)|0)|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = $8;
   $102 = (11833 + ($101)|0);
   $103 = HEAP8[$102>>0]|0;
   $104 = $103&255;
   $105 = ($100|0)==($104|0);
   if ($105) {
    $106 = $3;
    $107 = ((($106)) + 18412|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = (($108) + 1)|0;
    HEAP32[$107>>2] = $109;
   }
  }
  $110 = $5;
  $111 = (__ZL10stbi__get8P13stbi__context($110)|0);
  $112 = $111&255;
  $9 = $112;
  $113 = $9;
  $114 = $113 >> 4;
  $115 = $3;
  $116 = ((($115)) + 18076|0);
  $117 = $8;
  $118 = (($116) + (($117*72)|0)|0);
  $119 = ((($118)) + 4|0);
  HEAP32[$119>>2] = $114;
  $120 = $3;
  $121 = ((($120)) + 18076|0);
  $122 = $8;
  $123 = (($121) + (($122*72)|0)|0);
  $124 = ((($123)) + 4|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = ($125|0)!=(0);
  if (!($126)) {
   label = 23;
   break;
  }
  $127 = $3;
  $128 = ((($127)) + 18076|0);
  $129 = $8;
  $130 = (($128) + (($129*72)|0)|0);
  $131 = ((($130)) + 4|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = ($132|0)>(4);
  if ($133) {
   label = 23;
   break;
  }
  $135 = $9;
  $136 = $135 & 15;
  $137 = $3;
  $138 = ((($137)) + 18076|0);
  $139 = $8;
  $140 = (($138) + (($139*72)|0)|0);
  $141 = ((($140)) + 8|0);
  HEAP32[$141>>2] = $136;
  $142 = $3;
  $143 = ((($142)) + 18076|0);
  $144 = $8;
  $145 = (($143) + (($144*72)|0)|0);
  $146 = ((($145)) + 8|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = ($147|0)!=(0);
  if (!($148)) {
   label = 26;
   break;
  }
  $149 = $3;
  $150 = ((($149)) + 18076|0);
  $151 = $8;
  $152 = (($150) + (($151*72)|0)|0);
  $153 = ((($152)) + 8|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = ($154|0)>(4);
  if ($155) {
   label = 26;
   break;
  }
  $157 = $5;
  $158 = (__ZL10stbi__get8P13stbi__context($157)|0);
  $159 = $158&255;
  $160 = $3;
  $161 = ((($160)) + 18076|0);
  $162 = $8;
  $163 = (($161) + (($162*72)|0)|0);
  $164 = ((($163)) + 12|0);
  HEAP32[$164>>2] = $159;
  $165 = $3;
  $166 = ((($165)) + 18076|0);
  $167 = $8;
  $168 = (($166) + (($167*72)|0)|0);
  $169 = ((($168)) + 12|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = ($170|0)>(3);
  if ($171) {
   label = 28;
   break;
  }
  $173 = $8;
  $174 = (($173) + 1)|0;
  $8 = $174;
 }
 if ((label|0) == 23) {
  $134 = (__ZL9stbi__errPKc(11836)|0);
  $2 = $134;
  $473 = $2;
  STACKTOP = sp;return ($473|0);
 }
 else if ((label|0) == 26) {
  $156 = (__ZL9stbi__errPKc(11842)|0);
  $2 = $156;
  $473 = $2;
  STACKTOP = sp;return ($473|0);
 }
 else if ((label|0) == 28) {
  $172 = (__ZL9stbi__errPKc(11848)|0);
  $2 = $172;
  $473 = $2;
  STACKTOP = sp;return ($473|0);
 }
 else if ((label|0) == 30) {
  $175 = $4;
  $176 = ($175|0)!=(0);
  if ($176) {
   $2 = 1;
   $473 = $2;
   STACKTOP = sp;return ($473|0);
  }
  $177 = $5;
  $178 = HEAP32[$177>>2]|0;
  $179 = $5;
  $180 = ((($179)) + 4|0);
  $181 = HEAP32[$180>>2]|0;
  $182 = $5;
  $183 = ((($182)) + 8|0);
  $184 = HEAP32[$183>>2]|0;
  $185 = (__ZL21stbi__mad3sizes_validiiii($178,$181,$184,0)|0);
  $186 = ($185|0)!=(0);
  if (!($186)) {
   $187 = (__ZL9stbi__errPKc(9762)|0);
   $2 = $187;
   $473 = $2;
   STACKTOP = sp;return ($473|0);
  }
  $8 = 0;
  while(1) {
   $188 = $8;
   $189 = $5;
   $190 = ((($189)) + 8|0);
   $191 = HEAP32[$190>>2]|0;
   $192 = ($188|0)<($191|0);
   if (!($192)) {
    break;
   }
   $193 = $3;
   $194 = ((($193)) + 18076|0);
   $195 = $8;
   $196 = (($194) + (($195*72)|0)|0);
   $197 = ((($196)) + 4|0);
   $198 = HEAP32[$197>>2]|0;
   $199 = $10;
   $200 = ($198|0)>($199|0);
   if ($200) {
    $201 = $3;
    $202 = ((($201)) + 18076|0);
    $203 = $8;
    $204 = (($202) + (($203*72)|0)|0);
    $205 = ((($204)) + 4|0);
    $206 = HEAP32[$205>>2]|0;
    $10 = $206;
   }
   $207 = $3;
   $208 = ((($207)) + 18076|0);
   $209 = $8;
   $210 = (($208) + (($209*72)|0)|0);
   $211 = ((($210)) + 8|0);
   $212 = HEAP32[$211>>2]|0;
   $213 = $11;
   $214 = ($212|0)>($213|0);
   if ($214) {
    $215 = $3;
    $216 = ((($215)) + 18076|0);
    $217 = $8;
    $218 = (($216) + (($217*72)|0)|0);
    $219 = ((($218)) + 8|0);
    $220 = HEAP32[$219>>2]|0;
    $11 = $220;
   }
   $221 = $8;
   $222 = (($221) + 1)|0;
   $8 = $222;
  }
  $223 = $10;
  $224 = $3;
  $225 = ((($224)) + 18052|0);
  HEAP32[$225>>2] = $223;
  $226 = $11;
  $227 = $3;
  $228 = ((($227)) + 18056|0);
  HEAP32[$228>>2] = $226;
  $229 = $10;
  $230 = $229<<3;
  $231 = $3;
  $232 = ((($231)) + 18068|0);
  HEAP32[$232>>2] = $230;
  $233 = $11;
  $234 = $233<<3;
  $235 = $3;
  $236 = ((($235)) + 18072|0);
  HEAP32[$236>>2] = $234;
  $237 = $5;
  $238 = HEAP32[$237>>2]|0;
  $239 = $3;
  $240 = ((($239)) + 18068|0);
  $241 = HEAP32[$240>>2]|0;
  $242 = (($238) + ($241))|0;
  $243 = (($242) - 1)|0;
  $244 = $3;
  $245 = ((($244)) + 18068|0);
  $246 = HEAP32[$245>>2]|0;
  $247 = (($243>>>0) / ($246>>>0))&-1;
  $248 = $3;
  $249 = ((($248)) + 18060|0);
  HEAP32[$249>>2] = $247;
  $250 = $5;
  $251 = ((($250)) + 4|0);
  $252 = HEAP32[$251>>2]|0;
  $253 = $3;
  $254 = ((($253)) + 18072|0);
  $255 = HEAP32[$254>>2]|0;
  $256 = (($252) + ($255))|0;
  $257 = (($256) - 1)|0;
  $258 = $3;
  $259 = ((($258)) + 18072|0);
  $260 = HEAP32[$259>>2]|0;
  $261 = (($257>>>0) / ($260>>>0))&-1;
  $262 = $3;
  $263 = ((($262)) + 18064|0);
  HEAP32[$263>>2] = $261;
  $8 = 0;
  while(1) {
   $264 = $8;
   $265 = $5;
   $266 = ((($265)) + 8|0);
   $267 = HEAP32[$266>>2]|0;
   $268 = ($264|0)<($267|0);
   if (!($268)) {
    label = 50;
    break;
   }
   $269 = $5;
   $270 = HEAP32[$269>>2]|0;
   $271 = $3;
   $272 = ((($271)) + 18076|0);
   $273 = $8;
   $274 = (($272) + (($273*72)|0)|0);
   $275 = ((($274)) + 4|0);
   $276 = HEAP32[$275>>2]|0;
   $277 = Math_imul($270, $276)|0;
   $278 = $10;
   $279 = (($277) + ($278))|0;
   $280 = (($279) - 1)|0;
   $281 = $10;
   $282 = (($280>>>0) / ($281>>>0))&-1;
   $283 = $3;
   $284 = ((($283)) + 18076|0);
   $285 = $8;
   $286 = (($284) + (($285*72)|0)|0);
   $287 = ((($286)) + 28|0);
   HEAP32[$287>>2] = $282;
   $288 = $5;
   $289 = ((($288)) + 4|0);
   $290 = HEAP32[$289>>2]|0;
   $291 = $3;
   $292 = ((($291)) + 18076|0);
   $293 = $8;
   $294 = (($292) + (($293*72)|0)|0);
   $295 = ((($294)) + 8|0);
   $296 = HEAP32[$295>>2]|0;
   $297 = Math_imul($290, $296)|0;
   $298 = $11;
   $299 = (($297) + ($298))|0;
   $300 = (($299) - 1)|0;
   $301 = $11;
   $302 = (($300>>>0) / ($301>>>0))&-1;
   $303 = $3;
   $304 = ((($303)) + 18076|0);
   $305 = $8;
   $306 = (($304) + (($305*72)|0)|0);
   $307 = ((($306)) + 32|0);
   HEAP32[$307>>2] = $302;
   $308 = $3;
   $309 = ((($308)) + 18060|0);
   $310 = HEAP32[$309>>2]|0;
   $311 = $3;
   $312 = ((($311)) + 18076|0);
   $313 = $8;
   $314 = (($312) + (($313*72)|0)|0);
   $315 = ((($314)) + 4|0);
   $316 = HEAP32[$315>>2]|0;
   $317 = Math_imul($310, $316)|0;
   $318 = $317<<3;
   $319 = $3;
   $320 = ((($319)) + 18076|0);
   $321 = $8;
   $322 = (($320) + (($321*72)|0)|0);
   $323 = ((($322)) + 36|0);
   HEAP32[$323>>2] = $318;
   $324 = $3;
   $325 = ((($324)) + 18064|0);
   $326 = HEAP32[$325>>2]|0;
   $327 = $3;
   $328 = ((($327)) + 18076|0);
   $329 = $8;
   $330 = (($328) + (($329*72)|0)|0);
   $331 = ((($330)) + 8|0);
   $332 = HEAP32[$331>>2]|0;
   $333 = Math_imul($326, $332)|0;
   $334 = $333<<3;
   $335 = $3;
   $336 = ((($335)) + 18076|0);
   $337 = $8;
   $338 = (($336) + (($337*72)|0)|0);
   $339 = ((($338)) + 40|0);
   HEAP32[$339>>2] = $334;
   $340 = $3;
   $341 = ((($340)) + 18076|0);
   $342 = $8;
   $343 = (($341) + (($342*72)|0)|0);
   $344 = ((($343)) + 60|0);
   HEAP32[$344>>2] = 0;
   $345 = $3;
   $346 = ((($345)) + 18076|0);
   $347 = $8;
   $348 = (($346) + (($347*72)|0)|0);
   $349 = ((($348)) + 52|0);
   HEAP32[$349>>2] = 0;
   $350 = $3;
   $351 = ((($350)) + 18076|0);
   $352 = $8;
   $353 = (($351) + (($352*72)|0)|0);
   $354 = ((($353)) + 56|0);
   HEAP32[$354>>2] = 0;
   $355 = $3;
   $356 = ((($355)) + 18076|0);
   $357 = $8;
   $358 = (($356) + (($357*72)|0)|0);
   $359 = ((($358)) + 36|0);
   $360 = HEAP32[$359>>2]|0;
   $361 = $3;
   $362 = ((($361)) + 18076|0);
   $363 = $8;
   $364 = (($362) + (($363*72)|0)|0);
   $365 = ((($364)) + 40|0);
   $366 = HEAP32[$365>>2]|0;
   $367 = (__ZL17stbi__malloc_mad2iii($360,$366,15)|0);
   $368 = $3;
   $369 = ((($368)) + 18076|0);
   $370 = $8;
   $371 = (($369) + (($370*72)|0)|0);
   $372 = ((($371)) + 48|0);
   HEAP32[$372>>2] = $367;
   $373 = $3;
   $374 = ((($373)) + 18076|0);
   $375 = $8;
   $376 = (($374) + (($375*72)|0)|0);
   $377 = ((($376)) + 48|0);
   $378 = HEAP32[$377>>2]|0;
   $379 = ($378|0)==(0|0);
   $380 = $3;
   if ($379) {
    label = 44;
    break;
   }
   $385 = ((($380)) + 18076|0);
   $386 = $8;
   $387 = (($385) + (($386*72)|0)|0);
   $388 = ((($387)) + 48|0);
   $389 = HEAP32[$388>>2]|0;
   $390 = $389;
   $391 = (($390) + 15)|0;
   $392 = $391 & -16;
   $393 = $392;
   $394 = $3;
   $395 = ((($394)) + 18076|0);
   $396 = $8;
   $397 = (($395) + (($396*72)|0)|0);
   $398 = ((($397)) + 44|0);
   HEAP32[$398>>2] = $393;
   $399 = $3;
   $400 = ((($399)) + 18380|0);
   $401 = HEAP32[$400>>2]|0;
   $402 = ($401|0)!=(0);
   if ($402) {
    $403 = $3;
    $404 = ((($403)) + 18076|0);
    $405 = $8;
    $406 = (($404) + (($405*72)|0)|0);
    $407 = ((($406)) + 36|0);
    $408 = HEAP32[$407>>2]|0;
    $409 = (($408|0) / 8)&-1;
    $410 = $3;
    $411 = ((($410)) + 18076|0);
    $412 = $8;
    $413 = (($411) + (($412*72)|0)|0);
    $414 = ((($413)) + 64|0);
    HEAP32[$414>>2] = $409;
    $415 = $3;
    $416 = ((($415)) + 18076|0);
    $417 = $8;
    $418 = (($416) + (($417*72)|0)|0);
    $419 = ((($418)) + 40|0);
    $420 = HEAP32[$419>>2]|0;
    $421 = (($420|0) / 8)&-1;
    $422 = $3;
    $423 = ((($422)) + 18076|0);
    $424 = $8;
    $425 = (($423) + (($424*72)|0)|0);
    $426 = ((($425)) + 68|0);
    HEAP32[$426>>2] = $421;
    $427 = $3;
    $428 = ((($427)) + 18076|0);
    $429 = $8;
    $430 = (($428) + (($429*72)|0)|0);
    $431 = ((($430)) + 36|0);
    $432 = HEAP32[$431>>2]|0;
    $433 = $3;
    $434 = ((($433)) + 18076|0);
    $435 = $8;
    $436 = (($434) + (($435*72)|0)|0);
    $437 = ((($436)) + 40|0);
    $438 = HEAP32[$437>>2]|0;
    $439 = (__ZL17stbi__malloc_mad3iiii($432,$438,2,15)|0);
    $440 = $3;
    $441 = ((($440)) + 18076|0);
    $442 = $8;
    $443 = (($441) + (($442*72)|0)|0);
    $444 = ((($443)) + 52|0);
    HEAP32[$444>>2] = $439;
    $445 = $3;
    $446 = ((($445)) + 18076|0);
    $447 = $8;
    $448 = (($446) + (($447*72)|0)|0);
    $449 = ((($448)) + 52|0);
    $450 = HEAP32[$449>>2]|0;
    $451 = ($450|0)==(0|0);
    $452 = $3;
    if ($451) {
     label = 47;
     break;
    }
    $457 = ((($452)) + 18076|0);
    $458 = $8;
    $459 = (($457) + (($458*72)|0)|0);
    $460 = ((($459)) + 52|0);
    $461 = HEAP32[$460>>2]|0;
    $462 = $461;
    $463 = (($462) + 15)|0;
    $464 = $463 & -16;
    $465 = $464;
    $466 = $3;
    $467 = ((($466)) + 18076|0);
    $468 = $8;
    $469 = (($467) + (($468*72)|0)|0);
    $470 = ((($469)) + 60|0);
    HEAP32[$470>>2] = $465;
   }
   $471 = $8;
   $472 = (($471) + 1)|0;
   $8 = $472;
  }
  if ((label|0) == 44) {
   $381 = $8;
   $382 = (($381) + 1)|0;
   $383 = (__ZL9stbi__errPKc(9723)|0);
   $384 = (__ZL26stbi__free_jpeg_componentsP10stbi__jpegii($380,$382,$383)|0);
   $2 = $384;
   $473 = $2;
   STACKTOP = sp;return ($473|0);
  }
  else if ((label|0) == 47) {
   $453 = $8;
   $454 = (($453) + 1)|0;
   $455 = (__ZL9stbi__errPKc(9723)|0);
   $456 = (__ZL26stbi__free_jpeg_componentsP10stbi__jpegii($452,$454,$455)|0);
   $2 = $456;
   $473 = $2;
   STACKTOP = sp;return ($473|0);
  }
  else if ((label|0) == 50) {
   $2 = 1;
   $473 = $2;
   STACKTOP = sp;return ($473|0);
  }
 }
 return (0)|0;
}
function __ZL16stbi__idct_blockPhiPs($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(400|0);
 $7 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $7;
 $38 = $5;
 $10 = $38;
 $6 = 0;
 while(1) {
  $39 = $6;
  $40 = ($39|0)<(8);
  if (!($40)) {
   break;
  }
  $41 = $10;
  $42 = ((($41)) + 16|0);
  $43 = HEAP16[$42>>1]|0;
  $44 = $43 << 16 >> 16;
  $45 = ($44|0)==(0);
  if ($45) {
   $46 = $10;
   $47 = ((($46)) + 32|0);
   $48 = HEAP16[$47>>1]|0;
   $49 = $48 << 16 >> 16;
   $50 = ($49|0)==(0);
   if ($50) {
    $51 = $10;
    $52 = ((($51)) + 48|0);
    $53 = HEAP16[$52>>1]|0;
    $54 = $53 << 16 >> 16;
    $55 = ($54|0)==(0);
    if ($55) {
     $56 = $10;
     $57 = ((($56)) + 64|0);
     $58 = HEAP16[$57>>1]|0;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)==(0);
     if ($60) {
      $61 = $10;
      $62 = ((($61)) + 80|0);
      $63 = HEAP16[$62>>1]|0;
      $64 = $63 << 16 >> 16;
      $65 = ($64|0)==(0);
      if ($65) {
       $66 = $10;
       $67 = ((($66)) + 96|0);
       $68 = HEAP16[$67>>1]|0;
       $69 = $68 << 16 >> 16;
       $70 = ($69|0)==(0);
       if ($70) {
        $71 = $10;
        $72 = ((($71)) + 112|0);
        $73 = HEAP16[$72>>1]|0;
        $74 = $73 << 16 >> 16;
        $75 = ($74|0)==(0);
        if ($75) {
         $76 = $10;
         $77 = HEAP16[$76>>1]|0;
         $78 = $77 << 16 >> 16;
         $79 = $78<<2;
         $11 = $79;
         $80 = $11;
         $81 = $8;
         $82 = ((($81)) + 224|0);
         HEAP32[$82>>2] = $80;
         $83 = $8;
         $84 = ((($83)) + 192|0);
         HEAP32[$84>>2] = $80;
         $85 = $8;
         $86 = ((($85)) + 160|0);
         HEAP32[$86>>2] = $80;
         $87 = $8;
         $88 = ((($87)) + 128|0);
         HEAP32[$88>>2] = $80;
         $89 = $8;
         $90 = ((($89)) + 96|0);
         HEAP32[$90>>2] = $80;
         $91 = $8;
         $92 = ((($91)) + 64|0);
         HEAP32[$92>>2] = $80;
         $93 = $8;
         $94 = ((($93)) + 32|0);
         HEAP32[$94>>2] = $80;
         $95 = $8;
         HEAP32[$95>>2] = $80;
        } else {
         label = 11;
        }
       } else {
        label = 11;
       }
      } else {
       label = 11;
      }
     } else {
      label = 11;
     }
    } else {
     label = 11;
    }
   } else {
    label = 11;
   }
  } else {
   label = 11;
  }
  if ((label|0) == 11) {
   label = 0;
   $96 = $10;
   $97 = ((($96)) + 32|0);
   $98 = HEAP16[$97>>1]|0;
   $99 = $98 << 16 >> 16;
   $17 = $99;
   $100 = $10;
   $101 = ((($100)) + 96|0);
   $102 = HEAP16[$101>>1]|0;
   $103 = $102 << 16 >> 16;
   $18 = $103;
   $104 = $17;
   $105 = $18;
   $106 = (($104) + ($105))|0;
   $107 = ($106*2217)|0;
   $16 = $107;
   $108 = $16;
   $109 = $18;
   $110 = Math_imul($109, -7567)|0;
   $111 = (($108) + ($110))|0;
   $14 = $111;
   $112 = $16;
   $113 = $17;
   $114 = ($113*3135)|0;
   $115 = (($112) + ($114))|0;
   $15 = $115;
   $116 = $10;
   $117 = HEAP16[$116>>1]|0;
   $118 = $117 << 16 >> 16;
   $17 = $118;
   $119 = $10;
   $120 = ((($119)) + 64|0);
   $121 = HEAP16[$120>>1]|0;
   $122 = $121 << 16 >> 16;
   $18 = $122;
   $123 = $17;
   $124 = $18;
   $125 = (($123) + ($124))|0;
   $126 = $125<<12;
   $12 = $126;
   $127 = $17;
   $128 = $18;
   $129 = (($127) - ($128))|0;
   $130 = $129<<12;
   $13 = $130;
   $131 = $12;
   $132 = $15;
   $133 = (($131) + ($132))|0;
   $21 = $133;
   $134 = $12;
   $135 = $15;
   $136 = (($134) - ($135))|0;
   $24 = $136;
   $137 = $13;
   $138 = $14;
   $139 = (($137) + ($138))|0;
   $22 = $139;
   $140 = $13;
   $141 = $14;
   $142 = (($140) - ($141))|0;
   $23 = $142;
   $143 = $10;
   $144 = ((($143)) + 112|0);
   $145 = HEAP16[$144>>1]|0;
   $146 = $145 << 16 >> 16;
   $12 = $146;
   $147 = $10;
   $148 = ((($147)) + 80|0);
   $149 = HEAP16[$148>>1]|0;
   $150 = $149 << 16 >> 16;
   $13 = $150;
   $151 = $10;
   $152 = ((($151)) + 48|0);
   $153 = HEAP16[$152>>1]|0;
   $154 = $153 << 16 >> 16;
   $14 = $154;
   $155 = $10;
   $156 = ((($155)) + 16|0);
   $157 = HEAP16[$156>>1]|0;
   $158 = $157 << 16 >> 16;
   $15 = $158;
   $159 = $12;
   $160 = $14;
   $161 = (($159) + ($160))|0;
   $18 = $161;
   $162 = $13;
   $163 = $15;
   $164 = (($162) + ($163))|0;
   $19 = $164;
   $165 = $12;
   $166 = $15;
   $167 = (($165) + ($166))|0;
   $16 = $167;
   $168 = $13;
   $169 = $14;
   $170 = (($168) + ($169))|0;
   $17 = $170;
   $171 = $18;
   $172 = $19;
   $173 = (($171) + ($172))|0;
   $174 = ($173*4816)|0;
   $20 = $174;
   $175 = $12;
   $176 = ($175*1223)|0;
   $12 = $176;
   $177 = $13;
   $178 = ($177*8410)|0;
   $13 = $178;
   $179 = $14;
   $180 = ($179*12586)|0;
   $14 = $180;
   $181 = $15;
   $182 = ($181*6149)|0;
   $15 = $182;
   $183 = $20;
   $184 = $16;
   $185 = Math_imul($184, -3685)|0;
   $186 = (($183) + ($185))|0;
   $16 = $186;
   $187 = $20;
   $188 = $17;
   $189 = Math_imul($188, -10497)|0;
   $190 = (($187) + ($189))|0;
   $17 = $190;
   $191 = $18;
   $192 = Math_imul($191, -8034)|0;
   $18 = $192;
   $193 = $19;
   $194 = Math_imul($193, -1597)|0;
   $19 = $194;
   $195 = $16;
   $196 = $19;
   $197 = (($195) + ($196))|0;
   $198 = $15;
   $199 = (($198) + ($197))|0;
   $15 = $199;
   $200 = $17;
   $201 = $18;
   $202 = (($200) + ($201))|0;
   $203 = $14;
   $204 = (($203) + ($202))|0;
   $14 = $204;
   $205 = $17;
   $206 = $19;
   $207 = (($205) + ($206))|0;
   $208 = $13;
   $209 = (($208) + ($207))|0;
   $13 = $209;
   $210 = $16;
   $211 = $18;
   $212 = (($210) + ($211))|0;
   $213 = $12;
   $214 = (($213) + ($212))|0;
   $12 = $214;
   $215 = $21;
   $216 = (($215) + 512)|0;
   $21 = $216;
   $217 = $22;
   $218 = (($217) + 512)|0;
   $22 = $218;
   $219 = $23;
   $220 = (($219) + 512)|0;
   $23 = $220;
   $221 = $24;
   $222 = (($221) + 512)|0;
   $24 = $222;
   $223 = $21;
   $224 = $15;
   $225 = (($223) + ($224))|0;
   $226 = $225 >> 10;
   $227 = $8;
   HEAP32[$227>>2] = $226;
   $228 = $21;
   $229 = $15;
   $230 = (($228) - ($229))|0;
   $231 = $230 >> 10;
   $232 = $8;
   $233 = ((($232)) + 224|0);
   HEAP32[$233>>2] = $231;
   $234 = $22;
   $235 = $14;
   $236 = (($234) + ($235))|0;
   $237 = $236 >> 10;
   $238 = $8;
   $239 = ((($238)) + 32|0);
   HEAP32[$239>>2] = $237;
   $240 = $22;
   $241 = $14;
   $242 = (($240) - ($241))|0;
   $243 = $242 >> 10;
   $244 = $8;
   $245 = ((($244)) + 192|0);
   HEAP32[$245>>2] = $243;
   $246 = $23;
   $247 = $13;
   $248 = (($246) + ($247))|0;
   $249 = $248 >> 10;
   $250 = $8;
   $251 = ((($250)) + 64|0);
   HEAP32[$251>>2] = $249;
   $252 = $23;
   $253 = $13;
   $254 = (($252) - ($253))|0;
   $255 = $254 >> 10;
   $256 = $8;
   $257 = ((($256)) + 160|0);
   HEAP32[$257>>2] = $255;
   $258 = $24;
   $259 = $12;
   $260 = (($258) + ($259))|0;
   $261 = $260 >> 10;
   $262 = $8;
   $263 = ((($262)) + 96|0);
   HEAP32[$263>>2] = $261;
   $264 = $24;
   $265 = $12;
   $266 = (($264) - ($265))|0;
   $267 = $266 >> 10;
   $268 = $8;
   $269 = ((($268)) + 128|0);
   HEAP32[$269>>2] = $267;
  }
  $270 = $6;
  $271 = (($270) + 1)|0;
  $6 = $271;
  $272 = $10;
  $273 = ((($272)) + 2|0);
  $10 = $273;
  $274 = $8;
  $275 = ((($274)) + 4|0);
  $8 = $275;
 }
 $6 = 0;
 $8 = $7;
 $276 = $3;
 $9 = $276;
 while(1) {
  $277 = $6;
  $278 = ($277|0)<(8);
  if (!($278)) {
   break;
  }
  $279 = $8;
  $280 = ((($279)) + 8|0);
  $281 = HEAP32[$280>>2]|0;
  $30 = $281;
  $282 = $8;
  $283 = ((($282)) + 24|0);
  $284 = HEAP32[$283>>2]|0;
  $31 = $284;
  $285 = $30;
  $286 = $31;
  $287 = (($285) + ($286))|0;
  $288 = ($287*2217)|0;
  $29 = $288;
  $289 = $29;
  $290 = $31;
  $291 = Math_imul($290, -7567)|0;
  $292 = (($289) + ($291))|0;
  $27 = $292;
  $293 = $29;
  $294 = $30;
  $295 = ($294*3135)|0;
  $296 = (($293) + ($295))|0;
  $28 = $296;
  $297 = $8;
  $298 = HEAP32[$297>>2]|0;
  $30 = $298;
  $299 = $8;
  $300 = ((($299)) + 16|0);
  $301 = HEAP32[$300>>2]|0;
  $31 = $301;
  $302 = $30;
  $303 = $31;
  $304 = (($302) + ($303))|0;
  $305 = $304<<12;
  $25 = $305;
  $306 = $30;
  $307 = $31;
  $308 = (($306) - ($307))|0;
  $309 = $308<<12;
  $26 = $309;
  $310 = $25;
  $311 = $28;
  $312 = (($310) + ($311))|0;
  $34 = $312;
  $313 = $25;
  $314 = $28;
  $315 = (($313) - ($314))|0;
  $37 = $315;
  $316 = $26;
  $317 = $27;
  $318 = (($316) + ($317))|0;
  $35 = $318;
  $319 = $26;
  $320 = $27;
  $321 = (($319) - ($320))|0;
  $36 = $321;
  $322 = $8;
  $323 = ((($322)) + 28|0);
  $324 = HEAP32[$323>>2]|0;
  $25 = $324;
  $325 = $8;
  $326 = ((($325)) + 20|0);
  $327 = HEAP32[$326>>2]|0;
  $26 = $327;
  $328 = $8;
  $329 = ((($328)) + 12|0);
  $330 = HEAP32[$329>>2]|0;
  $27 = $330;
  $331 = $8;
  $332 = ((($331)) + 4|0);
  $333 = HEAP32[$332>>2]|0;
  $28 = $333;
  $334 = $25;
  $335 = $27;
  $336 = (($334) + ($335))|0;
  $31 = $336;
  $337 = $26;
  $338 = $28;
  $339 = (($337) + ($338))|0;
  $32 = $339;
  $340 = $25;
  $341 = $28;
  $342 = (($340) + ($341))|0;
  $29 = $342;
  $343 = $26;
  $344 = $27;
  $345 = (($343) + ($344))|0;
  $30 = $345;
  $346 = $31;
  $347 = $32;
  $348 = (($346) + ($347))|0;
  $349 = ($348*4816)|0;
  $33 = $349;
  $350 = $25;
  $351 = ($350*1223)|0;
  $25 = $351;
  $352 = $26;
  $353 = ($352*8410)|0;
  $26 = $353;
  $354 = $27;
  $355 = ($354*12586)|0;
  $27 = $355;
  $356 = $28;
  $357 = ($356*6149)|0;
  $28 = $357;
  $358 = $33;
  $359 = $29;
  $360 = Math_imul($359, -3685)|0;
  $361 = (($358) + ($360))|0;
  $29 = $361;
  $362 = $33;
  $363 = $30;
  $364 = Math_imul($363, -10497)|0;
  $365 = (($362) + ($364))|0;
  $30 = $365;
  $366 = $31;
  $367 = Math_imul($366, -8034)|0;
  $31 = $367;
  $368 = $32;
  $369 = Math_imul($368, -1597)|0;
  $32 = $369;
  $370 = $29;
  $371 = $32;
  $372 = (($370) + ($371))|0;
  $373 = $28;
  $374 = (($373) + ($372))|0;
  $28 = $374;
  $375 = $30;
  $376 = $31;
  $377 = (($375) + ($376))|0;
  $378 = $27;
  $379 = (($378) + ($377))|0;
  $27 = $379;
  $380 = $30;
  $381 = $32;
  $382 = (($380) + ($381))|0;
  $383 = $26;
  $384 = (($383) + ($382))|0;
  $26 = $384;
  $385 = $29;
  $386 = $31;
  $387 = (($385) + ($386))|0;
  $388 = $25;
  $389 = (($388) + ($387))|0;
  $25 = $389;
  $390 = $34;
  $391 = (($390) + 16842752)|0;
  $34 = $391;
  $392 = $35;
  $393 = (($392) + 16842752)|0;
  $35 = $393;
  $394 = $36;
  $395 = (($394) + 16842752)|0;
  $36 = $395;
  $396 = $37;
  $397 = (($396) + 16842752)|0;
  $37 = $397;
  $398 = $34;
  $399 = $28;
  $400 = (($398) + ($399))|0;
  $401 = $400 >> 17;
  $402 = (__ZL11stbi__clampi($401)|0);
  $403 = $9;
  HEAP8[$403>>0] = $402;
  $404 = $34;
  $405 = $28;
  $406 = (($404) - ($405))|0;
  $407 = $406 >> 17;
  $408 = (__ZL11stbi__clampi($407)|0);
  $409 = $9;
  $410 = ((($409)) + 7|0);
  HEAP8[$410>>0] = $408;
  $411 = $35;
  $412 = $27;
  $413 = (($411) + ($412))|0;
  $414 = $413 >> 17;
  $415 = (__ZL11stbi__clampi($414)|0);
  $416 = $9;
  $417 = ((($416)) + 1|0);
  HEAP8[$417>>0] = $415;
  $418 = $35;
  $419 = $27;
  $420 = (($418) - ($419))|0;
  $421 = $420 >> 17;
  $422 = (__ZL11stbi__clampi($421)|0);
  $423 = $9;
  $424 = ((($423)) + 6|0);
  HEAP8[$424>>0] = $422;
  $425 = $36;
  $426 = $26;
  $427 = (($425) + ($426))|0;
  $428 = $427 >> 17;
  $429 = (__ZL11stbi__clampi($428)|0);
  $430 = $9;
  $431 = ((($430)) + 2|0);
  HEAP8[$431>>0] = $429;
  $432 = $36;
  $433 = $26;
  $434 = (($432) - ($433))|0;
  $435 = $434 >> 17;
  $436 = (__ZL11stbi__clampi($435)|0);
  $437 = $9;
  $438 = ((($437)) + 5|0);
  HEAP8[$438>>0] = $436;
  $439 = $37;
  $440 = $25;
  $441 = (($439) + ($440))|0;
  $442 = $441 >> 17;
  $443 = (__ZL11stbi__clampi($442)|0);
  $444 = $9;
  $445 = ((($444)) + 3|0);
  HEAP8[$445>>0] = $443;
  $446 = $37;
  $447 = $25;
  $448 = (($446) - ($447))|0;
  $449 = $448 >> 17;
  $450 = (__ZL11stbi__clampi($449)|0);
  $451 = $9;
  $452 = ((($451)) + 4|0);
  HEAP8[$452>>0] = $450;
  $453 = $6;
  $454 = (($453) + 1)|0;
  $6 = $454;
  $455 = $8;
  $456 = ((($455)) + 32|0);
  $8 = $456;
  $457 = $4;
  $458 = $9;
  $459 = (($458) + ($457)|0);
  $9 = $459;
 }
 STACKTOP = sp;return;
}
function __ZL22stbi__YCbCr_to_RGB_rowPhPKhS1_S1_ii($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 0;
 while(1) {
  $19 = $12;
  $20 = $10;
  $21 = ($19|0)<($20|0);
  if (!($21)) {
   break;
  }
  $22 = $7;
  $23 = $12;
  $24 = (($22) + ($23)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = $26 << 20;
  $28 = (($27) + 524288)|0;
  $13 = $28;
  $29 = $9;
  $30 = $12;
  $31 = (($29) + ($30)|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32&255;
  $34 = (($33) - 128)|0;
  $17 = $34;
  $35 = $8;
  $36 = $12;
  $37 = (($35) + ($36)|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = (($39) - 128)|0;
  $18 = $40;
  $41 = $13;
  $42 = $17;
  $43 = Math_imul($42, 1470208)|0;
  $44 = (($41) + ($43))|0;
  $14 = $44;
  $45 = $13;
  $46 = $17;
  $47 = Math_imul($46, -748800)|0;
  $48 = (($45) + ($47))|0;
  $49 = $18;
  $50 = Math_imul($49, -360960)|0;
  $51 = $50 & -65536;
  $52 = (($48) + ($51))|0;
  $15 = $52;
  $53 = $13;
  $54 = $18;
  $55 = Math_imul($54, 1858048)|0;
  $56 = (($53) + ($55))|0;
  $16 = $56;
  $57 = $14;
  $58 = $57 >> 20;
  $14 = $58;
  $59 = $15;
  $60 = $59 >> 20;
  $15 = $60;
  $61 = $16;
  $62 = $61 >> 20;
  $16 = $62;
  $63 = $14;
  $64 = ($63>>>0)>(255);
  do {
   if ($64) {
    $65 = $14;
    $66 = ($65|0)<(0);
    if ($66) {
     $14 = 0;
     break;
    } else {
     $14 = 255;
     break;
    }
   }
  } while(0);
  $67 = $15;
  $68 = ($67>>>0)>(255);
  do {
   if ($68) {
    $69 = $15;
    $70 = ($69|0)<(0);
    if ($70) {
     $15 = 0;
     break;
    } else {
     $15 = 255;
     break;
    }
   }
  } while(0);
  $71 = $16;
  $72 = ($71>>>0)>(255);
  do {
   if ($72) {
    $73 = $16;
    $74 = ($73|0)<(0);
    if ($74) {
     $16 = 0;
     break;
    } else {
     $16 = 255;
     break;
    }
   }
  } while(0);
  $75 = $14;
  $76 = $75&255;
  $77 = $6;
  HEAP8[$77>>0] = $76;
  $78 = $15;
  $79 = $78&255;
  $80 = $6;
  $81 = ((($80)) + 1|0);
  HEAP8[$81>>0] = $79;
  $82 = $16;
  $83 = $82&255;
  $84 = $6;
  $85 = ((($84)) + 2|0);
  HEAP8[$85>>0] = $83;
  $86 = $6;
  $87 = ((($86)) + 3|0);
  HEAP8[$87>>0] = -1;
  $88 = $11;
  $89 = $6;
  $90 = (($89) + ($88)|0);
  $6 = $90;
  $91 = $12;
  $92 = (($91) + 1)|0;
  $12 = $92;
 }
 STACKTOP = sp;return;
}
function __ZL23stbi__resample_row_hv_2PhS_S_ii($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $14 = $9;
 $15 = ($14|0)==(1);
 $16 = $7;
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = ($18*3)|0;
 $20 = $8;
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = (($19) + ($22))|0;
 if ($15) {
  $24 = (($23) + 2)|0;
  $25 = $24 >> 2;
  $26 = $25&255;
  $27 = $6;
  $28 = ((($27)) + 1|0);
  HEAP8[$28>>0] = $26;
  $29 = $6;
  HEAP8[$29>>0] = $26;
  $30 = $6;
  $5 = $30;
  $86 = $5;
  STACKTOP = sp;return ($86|0);
 }
 $13 = $23;
 $31 = $13;
 $32 = (($31) + 2)|0;
 $33 = $32 >> 2;
 $34 = $33&255;
 $35 = $6;
 HEAP8[$35>>0] = $34;
 $11 = 1;
 while(1) {
  $36 = $11;
  $37 = $9;
  $38 = ($36|0)<($37|0);
  $39 = $13;
  if (!($38)) {
   break;
  }
  $12 = $39;
  $40 = $7;
  $41 = $11;
  $42 = (($40) + ($41)|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = $43&255;
  $45 = ($44*3)|0;
  $46 = $8;
  $47 = $11;
  $48 = (($46) + ($47)|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49&255;
  $51 = (($45) + ($50))|0;
  $13 = $51;
  $52 = $12;
  $53 = ($52*3)|0;
  $54 = $13;
  $55 = (($53) + ($54))|0;
  $56 = (($55) + 8)|0;
  $57 = $56 >> 4;
  $58 = $57&255;
  $59 = $6;
  $60 = $11;
  $61 = $60<<1;
  $62 = (($61) - 1)|0;
  $63 = (($59) + ($62)|0);
  HEAP8[$63>>0] = $58;
  $64 = $13;
  $65 = ($64*3)|0;
  $66 = $12;
  $67 = (($65) + ($66))|0;
  $68 = (($67) + 8)|0;
  $69 = $68 >> 4;
  $70 = $69&255;
  $71 = $6;
  $72 = $11;
  $73 = $72<<1;
  $74 = (($71) + ($73)|0);
  HEAP8[$74>>0] = $70;
  $75 = $11;
  $76 = (($75) + 1)|0;
  $11 = $76;
 }
 $77 = (($39) + 2)|0;
 $78 = $77 >> 2;
 $79 = $78&255;
 $80 = $6;
 $81 = $9;
 $82 = $81<<1;
 $83 = (($82) - 1)|0;
 $84 = (($80) + ($83)|0);
 HEAP8[$84>>0] = $79;
 $85 = $6;
 $5 = $85;
 $86 = $5;
 STACKTOP = sp;return ($86|0);
}
function __ZL11stbi__clampi($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3>>>0)>(255);
 do {
  if ($4) {
   $5 = $2;
   $6 = ($5|0)<(0);
   if ($6) {
    $1 = 0;
    break;
   }
   $7 = $2;
   $8 = ($7|0)>(255);
   if ($8) {
    $1 = -1;
   } else {
    label = 6;
   }
  } else {
   label = 6;
  }
 } while(0);
 if ((label|0) == 6) {
  $9 = $2;
  $10 = $9&255;
  $1 = $10;
 }
 $11 = $1;
 STACKTOP = sp;return ($11|0);
}
function __ZL21stbi__start_callbacksP13stbi__contextP17stbi_io_callbacksPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = $3;
 $8 = ((($7)) + 16|0);
 ;HEAP32[$8>>2]=HEAP32[$6>>2]|0;HEAP32[$8+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$6+8>>2]|0;
 $9 = $5;
 $10 = $3;
 $11 = ((($10)) + 28|0);
 HEAP32[$11>>2] = $9;
 $12 = $3;
 $13 = ((($12)) + 36|0);
 HEAP32[$13>>2] = 128;
 $14 = $3;
 $15 = ((($14)) + 32|0);
 HEAP32[$15>>2] = 1;
 $16 = $3;
 $17 = ((($16)) + 40|0);
 $18 = $3;
 $19 = ((($18)) + 176|0);
 HEAP32[$19>>2] = $17;
 $20 = $3;
 __ZL19stbi__refill_bufferP13stbi__context($20);
 $21 = $3;
 $22 = ((($21)) + 172|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $3;
 $25 = ((($24)) + 180|0);
 HEAP32[$25>>2] = $23;
 STACKTOP = sp;return;
}
function __ZL16stbi__stdio_readPvPci($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = $5;
 $8 = $3;
 $9 = (_fread($6,1,$7,$8)|0);
 STACKTOP = sp;return ($9|0);
}
function __ZL16stbi__stdio_skipPvi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 (_fseek($4,$5,1)|0);
 STACKTOP = sp;return;
}
function __ZL15stbi__stdio_eofPv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_feof($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN7TextureC2Ejiiia($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = $6;
 $13 = $7;
 HEAP32[$12>>2] = $13;
 $14 = ((($12)) + 4|0);
 $15 = $8;
 HEAP32[$14>>2] = $15;
 $16 = ((($12)) + 8|0);
 $17 = $9;
 HEAP32[$16>>2] = $17;
 $18 = ((($12)) + 12|0);
 $19 = $10;
 $20 = $19&255;
 HEAP8[$18>>0] = $20;
 $21 = ((($12)) + 13|0);
 $22 = $11;
 HEAP8[$21>>0] = $22;
 STACKTOP = sp;return;
}
function __ZN7TextureD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _glDeleteTextures(1,($2|0));
 STACKTOP = sp;return;
}
function __ZNK7Texture4BindEa($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = $5 << 24 >> 24;
 $7 = (33984 + ($6))|0;
 _glActiveTexture(($7|0));
 $8 = HEAP32[$4>>2]|0;
 _glBindTexture(3553,($8|0));
 STACKTOP = sp;return;
}
function __ZNK7Texture6UnbindEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 _glBindTexture(3553,0);
 STACKTOP = sp;return;
}
function __ZN14TextureManagerC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZNK14TextureManager13CreateTextureEPKca($2,$2,11855,1);
 $3 = ((($2)) + 16|0);
 __ZNK14TextureManager13CreateTextureEPKca($3,$2,11863,1);
 $4 = ((($2)) + 32|0);
 __ZNK14TextureManager13CreateTextureEPKca($4,$2,11877,1);
 $5 = ((($2)) + 48|0);
 __ZNK14TextureManager13CreateTextureEPKca($5,$2,11894,16);
 STACKTOP = sp;return;
}
function __ZNK14TextureManager13CreateTextureEPKca($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $vararg_buffer = sp + 128|0;
 $7 = sp;
 $8 = sp + 148|0;
 $9 = sp + 144|0;
 $10 = sp + 140|0;
 $11 = sp + 136|0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $13 = $5;
 (__ZN11StringUtils13string_formatIJPKcS2_S2_EEES2_PctS2_DpT_($7,128,11909,11918,$13,11931)|0);
 _glGenTextures(1,($8|0));
 $14 = HEAP32[$8>>2]|0;
 _glBindTexture(3553,($14|0));
 _glTexParameteri(3553,10242,10497);
 _glTexParameteri(3553,10243,10497);
 _glTexParameteri(3553,10241,9729);
 _glTexParameteri(3553,10240,9729);
 $15 = (_stbi_load($7,$9,$10,$11,0)|0);
 $12 = $15;
 $16 = $12;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = HEAP32[$9>>2]|0;
  $19 = HEAP32[$10>>2]|0;
  $20 = $12;
  _glTexImage2D(3553,0,6408,($18|0),($19|0),0,6408,5121,($20|0));
  _glBindTexture(3553,0);
  $21 = $12;
  _stbi_image_free($21);
  _glBindTexture(3553,0);
  $22 = HEAP32[$8>>2]|0;
  $23 = HEAP32[$9>>2]|0;
  $24 = HEAP32[$10>>2]|0;
  $25 = HEAP32[$11>>2]|0;
  $26 = $6;
  __ZN7TextureC2Ejiiia($0,$22,$23,$24,$25,$26);
  STACKTOP = sp;return;
 } else {
  HEAP32[$vararg_buffer>>2] = $7;
  (_printf(11935,$vararg_buffer)|0);
  __ZN7TextureC2Ejiiia($0,0,-1,-1,-1,-1);
  STACKTOP = sp;return;
 }
}
function __ZN6WindowC2EttbPKc($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $10 = $3&1;
 $8 = $10;
 $9 = $4;
 $11 = $5;
 HEAP32[$11>>2] = 0;
 $12 = ((($11)) + 4|0);
 $13 = (__ZN6Engine11GetInstanceEv()|0);
 $14 = (__ZN6Engine11GetInstanceEv()|0);
 $15 = ((($14)) + 2|0);
 $16 = $8;
 $17 = $16&1;
 $18 = $9;
 __ZN11WindowPropsC2ERtS0_bPKc($12,$13,$15,$17,$18);
 $19 = $6;
 $20 = ((($11)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 HEAP16[$21>>1] = $19;
 $22 = $7;
 $23 = ((($11)) + 4|0);
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 HEAP16[$25>>1] = $22;
 STACKTOP = sp;return;
}
function __ZN11WindowPropsC2ERtS0_bPKc($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $10 = $3&1;
 $8 = $10;
 $9 = $4;
 $11 = $5;
 $12 = $6;
 HEAP32[$11>>2] = $12;
 $13 = ((($11)) + 4|0);
 $14 = $7;
 HEAP32[$13>>2] = $14;
 $15 = ((($11)) + 8|0);
 $16 = $8;
 $17 = $16&1;
 $18 = $17&1;
 HEAP8[$15>>0] = $18;
 $19 = ((($11)) + 12|0);
 $20 = $9;
 HEAP32[$19>>2] = $20;
 STACKTOP = sp;return;
}
function __ZN6WindowD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZN6Window4InitEv($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 8|0;
 $2 = $0;
 $4 = $2;
 $5 = HEAP8[14485]|0;
 $6 = $5&1;
 if (!($6)) {
  HEAP8[14485] = 1;
  $7 = (_glfwInit()|0);
  $8 = ($7|0)!=(0);
  if (!($8)) {
   $$expand_i1_val = 0;
   HEAP8[$1>>0] = $$expand_i1_val;
   $$pre_trunc = HEAP8[$1>>0]|0;
   $52 = $$pre_trunc&1;
   STACKTOP = sp;return ($52|0);
  }
 }
 _glfwWindowHint(131078,1);
 _glfwWindowHint(135182,1);
 $9 = ((($4)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $13 = ((($4)) + 4|0);
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP16[$15>>1]|0;
 $17 = $16&65535;
 $18 = ((($4)) + 4|0);
 $19 = ((($18)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($4)) + 4|0);
 $22 = ((($21)) + 8|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&1;
 if ($24) {
  $25 = (_glfwGetPrimaryMonitor()|0);
  $26 = $25;
 } else {
  $26 = 0;
 }
 $27 = (_glfwCreateWindow(($12|0),($17|0),($20|0),($26|0),(0|0))|0);
 HEAP32[$4>>2] = $27;
 $28 = HEAP32[$4>>2]|0;
 $3 = $28;
 $29 = $3;
 $30 = ($29|0)!=(0|0);
 if ($30) {
  HEAP32[3470] = $4;
  (_glfwSetErrorCallback((276|0))|0);
  $31 = $3;
  (_glfwSetWindowCloseCallback(($31|0),(277|0))|0);
  $32 = $3;
  (_glfwSetWindowSizeCallback(($32|0),(278|0))|0);
  $33 = $3;
  (_glfwSetWindowPosCallback(($33|0),(279|0))|0);
  $34 = $3;
  _glfwSetWindowSizeLimits(($34|0),480,360,-1,-1);
  $35 = $3;
  (_glfwSetFramebufferSizeCallback(($35|0),(280|0))|0);
  $36 = $3;
  (_glfwSetKeyCallback(($36|0),(281|0))|0);
  $37 = $3;
  (_glfwSetCharCallback(($37|0),(282|0))|0);
  $38 = $3;
  (_glfwSetCursorPosCallback(($38|0),(283|0))|0);
  $39 = $3;
  (_glfwSetCursorEnterCallback(($39|0),(284|0))|0);
  $40 = $3;
  (_glfwSetMouseButtonCallback(($40|0),(285|0))|0);
  $41 = $3;
  (_glfwSetScrollCallback(($41|0),(286|0))|0);
  $42 = HEAP32[$4>>2]|0;
  _glfwMakeContextCurrent(($42|0));
  $43 = ((($4)) + 4|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = HEAP16[$44>>1]|0;
  $46 = $45&65535;
  $47 = ((($4)) + 4|0);
  $48 = ((($47)) + 4|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = HEAP16[$49>>1]|0;
  $51 = $50&65535;
  _glViewport(0,0,($46|0),($51|0));
  $$expand_i1_val4 = 1;
  HEAP8[$1>>0] = $$expand_i1_val4;
  $$pre_trunc = HEAP8[$1>>0]|0;
  $52 = $$pre_trunc&1;
  STACKTOP = sp;return ($52|0);
 } else {
  _glfwTerminate();
  $$expand_i1_val2 = 0;
  HEAP8[$1>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$1>>0]|0;
  $52 = $$pre_trunc&1;
  STACKTOP = sp;return ($52|0);
 }
 return (0)|0;
}
function __ZL14error_callbackiPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[1292]|0;
 $5 = $3;
 HEAP32[$vararg_buffer>>2] = $5;
 (_fprintf($4,12073,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function __ZL21window_close_callbackP10GLFWwindow($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = sp + 12|0;
 $1 = $0;
 HEAP8[$3>>0] = 1;
 __ZN17WindowClosedEventC2ERKb($2,$3);
 $4 = (__ZN12StateManager11GetInstanceEv()|0);
 __ZN12StateManager7OnEventERK5Event($4,$2);
 $5 = $1;
 _glfwSetWindowShouldClose(($5|0),1);
 STACKTOP = sp;return;
}
function __ZL20window_size_callbackP10GLFWwindowii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 20|0;
 $5 = sp + 16|0;
 $6 = sp;
 $3 = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 __ZN17WindowResizeEventC2ERKiS1_($6,$4,$5);
 $7 = (__ZN12StateManager11GetInstanceEv()|0);
 __ZN12StateManager7OnEventERK5Event($7,$6);
 STACKTOP = sp;return;
}
function __ZL19window_pos_callbackP10GLFWwindowii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 20|0;
 $5 = sp + 16|0;
 $6 = sp;
 $3 = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 __ZN16WindowMovedEventC2ERKiS1_($6,$4,$5);
 $7 = (__ZN12StateManager11GetInstanceEv()|0);
 __ZN12StateManager7OnEventERK5Event($7,$6);
 STACKTOP = sp;return;
}
function __ZL25framebuffer_size_callbackP10GLFWwindowii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 36|0;
 $5 = sp + 32|0;
 $6 = sp + 28|0;
 $7 = sp + 24|0;
 $8 = sp;
 $3 = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 $9 = (__ZN6Engine11GetInstanceEv()|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 HEAP32[$6>>2] = $11;
 $12 = (__ZN6Engine11GetInstanceEv()|0);
 $13 = ((($12)) + 2|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14&65535;
 HEAP32[$7>>2] = $15;
 $16 = HEAP32[$4>>2]|0;
 $17 = $16&65535;
 $18 = (__ZN6Engine11GetInstanceEv()|0);
 HEAP16[$18>>1] = $17;
 $19 = HEAP32[$5>>2]|0;
 $20 = $19&65535;
 $21 = (__ZN6Engine11GetInstanceEv()|0);
 $22 = ((($21)) + 2|0);
 HEAP16[$22>>1] = $20;
 $23 = HEAP32[$4>>2]|0;
 $24 = HEAP32[$5>>2]|0;
 _glViewport(0,0,($23|0),($24|0));
 __ZN22FrameBufferResizeEventC2ERKiS1_S1_S1_($8,$6,$7,$4,$5);
 $25 = (__ZN12StateManager11GetInstanceEv()|0);
 __ZN12StateManager7OnEventERK5Event($25,$8);
 STACKTOP = sp;return;
}
function __ZL12key_callbackP10GLFWwindowiiii($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer = sp;
 $6 = sp + 76|0;
 $7 = sp + 72|0;
 $9 = sp + 64|0;
 $10 = sp + 44|0;
 $11 = sp + 24|0;
 $12 = sp + 4|0;
 $5 = $0;
 HEAP32[$6>>2] = $1;
 HEAP32[$7>>2] = $2;
 $8 = $3;
 HEAP32[$9>>2] = $4;
 $13 = $8;
 switch ($13|0) {
 case 1:  {
  $14 = HEAP32[$6>>2]|0;
  $15 = ($14|0)==(256);
  if ($15) {
   $16 = $5;
   _glfwSetInputMode(($16|0),208897,212993);
  }
  __ZN15KeyPressedEventC2ERKiS1_S1_($10,$6,$7,$9);
  $17 = (__ZN12StateManager11GetInstanceEv()|0);
  __ZN12StateManager7OnEventERK5Event($17,$10);
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  __ZN16KeyRepeatedEventC2ERKiS1_S1_($11,$6,$7,$9);
  $18 = (__ZN12StateManager11GetInstanceEv()|0);
  __ZN12StateManager7OnEventERK5Event($18,$11);
  STACKTOP = sp;return;
  break;
 }
 case 0:  {
  __ZN16KeyReleasedEventC2ERKiS1_S1_($12,$6,$7,$9);
  $19 = (__ZN12StateManager11GetInstanceEv()|0);
  __ZN12StateManager7OnEventERK5Event($19,$12);
  STACKTOP = sp;return;
  break;
 }
 default: {
  (_printf(12026,$vararg_buffer)|0);
  STACKTOP = sp;return;
 }
 }
}
function __ZL18character_callbackP10GLFWwindowj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 12|0;
 $4 = sp;
 $2 = $0;
 HEAP32[$3>>2] = $1;
 __ZN13KeyTypedEventC2ERKj($4,$3);
 $5 = (__ZN12StateManager11GetInstanceEv()|0);
 __ZN12StateManager7OnEventERK5Event($5,$4);
 STACKTOP = sp;return;
}
function __ZL24cursor_position_callbackP10GLFWwindowdd($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $3 = 0, $4 = 0.0;
 var $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = sp + 32|0;
 $7 = sp + 28|0;
 $8 = sp + 24|0;
 $9 = sp + 20|0;
 $10 = sp + 16|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $11 = $4;
 $12 = (~~(($11)));
 HEAP32[$7>>2] = $12;
 $13 = $5;
 $14 = (~~(($13)));
 HEAP32[$8>>2] = $14;
 $15 = $4;
 $16 = (~~(($15)));
 $17 = HEAP32[3471]|0;
 $18 = (($16) - ($17))|0;
 HEAP32[$9>>2] = $18;
 $19 = $5;
 $20 = (~~(($19)));
 $21 = HEAP32[3472]|0;
 $22 = (($20) - ($21))|0;
 HEAP32[$10>>2] = $22;
 __ZN15MouseMovedEventC2ERKiS1_S1_S1_b($6,$7,$8,$9,$10,0);
 $23 = $4;
 $24 = (~~(($23)));
 HEAP32[3471] = $24;
 $25 = $5;
 $26 = (~~(($25)));
 HEAP32[3472] = $26;
 $27 = (__ZN12StateManager11GetInstanceEv()|0);
 __ZN12StateManager7OnEventERK5Event($27,$6);
 STACKTOP = sp;return;
}
function __ZL21cursor_enter_callbackP10GLFWwindowi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 8|0;
 $5 = sp;
 $2 = $0;
 $3 = $1;
 $6 = $3;
 $7 = ($6|0)!=(0);
 if ($7) {
  __ZN21FrameBufferEnterEventC2Ev($4);
  $8 = (__ZN12StateManager11GetInstanceEv()|0);
  __ZN12StateManager7OnEventERK5Event($8,$4);
  STACKTOP = sp;return;
 } else {
  __ZN20FrameBufferExitEventC2Ev($5);
  $9 = (__ZN12StateManager11GetInstanceEv()|0);
  __ZN12StateManager7OnEventERK5Event($9,$5);
  STACKTOP = sp;return;
 }
}
function __ZL21mouse_button_callbackP10GLFWwindowiii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer = sp + 16|0;
 $8 = sp + 8|0;
 $9 = sp;
 $11 = sp + 56|0;
 $12 = sp + 52|0;
 $13 = sp + 48|0;
 $14 = sp + 28|0;
 $15 = sp + 24|0;
 $16 = sp + 20|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $17 = $4;
 _glfwGetCursorPos(($17|0),($8|0),($9|0));
 $10 = 0;
 $18 = $6;
 switch ($18|0) {
 case 1:  {
  $19 = $10;
  $20 = $19&1;
  if ($20) {
   $21 = $4;
   _glfwSetInputMode(($21|0),208897,212995);
  }
  $22 = $5;
  $23 = +HEAPF64[$8>>3];
  $24 = (~~(($23)));
  HEAP32[$12>>2] = $24;
  $25 = +HEAPF64[$9>>3];
  $26 = (~~(($25)));
  HEAP32[$13>>2] = $26;
  __ZN17MousePressedEventC2EiRKiS1_($11,$22,$12,$13);
  $27 = (__ZN12StateManager11GetInstanceEv()|0);
  __ZN12StateManager7OnEventERK5Event($27,$11);
  STACKTOP = sp;return;
  break;
 }
 case 0:  {
  $28 = $5;
  $29 = +HEAPF64[$8>>3];
  $30 = (~~(($29)));
  HEAP32[$15>>2] = $30;
  $31 = +HEAPF64[$9>>3];
  $32 = (~~(($31)));
  HEAP32[$16>>2] = $32;
  __ZN18MouseReleasedEventC2EiRKiS1_($14,$28,$15,$16);
  $33 = (__ZN12StateManager11GetInstanceEv()|0);
  __ZN12StateManager7OnEventERK5Event($33,$14);
  STACKTOP = sp;return;
  break;
 }
 default: {
  (_printf(11970,$vararg_buffer)|0);
  STACKTOP = sp;return;
 }
 }
}
function __ZL15scroll_callbackP10GLFWwindowdd($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = sp + 24|0;
 $7 = sp + 20|0;
 $8 = sp + 16|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $4;
 $10 = (~~(($9)));
 HEAP32[$7>>2] = $10;
 $11 = $5;
 $12 = (~~(($11)));
 HEAP32[$8>>2] = $12;
 __ZN16MouseScrollEventC2ERKiS1_($6,$7,$8);
 $13 = (__ZN12StateManager11GetInstanceEv()|0);
 __ZN12StateManager7OnEventERK5Event($13,$6);
 STACKTOP = sp;return;
}
function __ZN16MouseScrollEventC2ERKiS1_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 __ZN5EventC2E9EventType($6,17);
 $7 = ((($6)) + 8|0);
 $8 = $4;
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$7>>2] = $9;
 $10 = ((($6)) + 12|0);
 $11 = $5;
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$10>>2] = $12;
 STACKTOP = sp;return;
}
function __ZN17MousePressedEventC2EiRKiS1_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp + 8|0;
 $4 = $0;
 HEAP32[$5>>2] = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $6;
 $10 = $7;
 __ZN16MouseButtonEventC2E9EventTypeRKiS2_S2_($8,14,$5,$9,$10);
 STACKTOP = sp;return;
}
function __ZN18MouseReleasedEventC2EiRKiS1_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp + 8|0;
 $4 = $0;
 HEAP32[$5>>2] = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $6;
 $10 = $7;
 __ZN16MouseButtonEventC2E9EventTypeRKiS2_S2_($8,15,$5,$9,$10);
 STACKTOP = sp;return;
}
function __ZN16MouseButtonEventC2E9EventTypeRKiS2_S2_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 $11 = $6;
 __ZN5EventC2E9EventType($10,$11);
 $12 = ((($10)) + 8|0);
 $13 = $7;
 $14 = HEAP32[$13>>2]|0;
 HEAP32[$12>>2] = $14;
 $15 = ((($10)) + 12|0);
 $16 = $8;
 $17 = HEAP32[$16>>2]|0;
 HEAP32[$15>>2] = $17;
 $18 = ((($10)) + 16|0);
 $19 = $9;
 $20 = HEAP32[$19>>2]|0;
 HEAP32[$18>>2] = $20;
 STACKTOP = sp;return;
}
function __ZN21FrameBufferEnterEventC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZN5EventC2E9EventType($2,8);
 $3 = ((($2)) + 5|0);
 HEAP8[$3>>0] = 1;
 STACKTOP = sp;return;
}
function __ZN20FrameBufferExitEventC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZN5EventC2E9EventType($2,9);
 $3 = ((($2)) + 5|0);
 HEAP8[$3>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN15MouseMovedEventC2ERKiS1_S1_S1_b($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $12 = $5&1;
 $11 = $12;
 $13 = $6;
 __ZN5EventC2E9EventType($13,16);
 $14 = ((($13)) + 8|0);
 $15 = $7;
 $16 = HEAP32[$15>>2]|0;
 HEAP32[$14>>2] = $16;
 $17 = ((($13)) + 12|0);
 $18 = $8;
 $19 = HEAP32[$18>>2]|0;
 HEAP32[$17>>2] = $19;
 $20 = ((($13)) + 16|0);
 $21 = $9;
 $22 = HEAP32[$21>>2]|0;
 HEAP32[$20>>2] = $22;
 $23 = ((($13)) + 20|0);
 $24 = $10;
 $25 = HEAP32[$24>>2]|0;
 HEAP32[$23>>2] = $25;
 $26 = ((($13)) + 24|0);
 $27 = $11;
 $28 = $27&1;
 $29 = $28&1;
 HEAP8[$26>>0] = $29;
 STACKTOP = sp;return;
}
function __ZN13KeyTypedEventC2ERKj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN5EventC2E9EventType($4,13);
 $5 = ((($4)) + 8|0);
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$5>>2] = $7;
 STACKTOP = sp;return;
}
function __ZN15KeyPressedEventC2ERKiS1_S1_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 $10 = $6;
 $11 = $7;
 __ZN13KeyboardEventC2E9EventTypeRKiS2_S2_($8,10,$9,$10,$11);
 STACKTOP = sp;return;
}
function __ZN16KeyRepeatedEventC2ERKiS1_S1_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 $10 = $6;
 $11 = $7;
 __ZN13KeyboardEventC2E9EventTypeRKiS2_S2_($8,12,$9,$10,$11);
 STACKTOP = sp;return;
}
function __ZN16KeyReleasedEventC2ERKiS1_S1_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 $10 = $6;
 $11 = $7;
 __ZN13KeyboardEventC2E9EventTypeRKiS2_S2_($8,11,$9,$10,$11);
 STACKTOP = sp;return;
}
function __ZN13KeyboardEventC2E9EventTypeRKiS2_S2_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 $11 = $6;
 __ZN5EventC2E9EventType($10,$11);
 $12 = ((($10)) + 8|0);
 $13 = $7;
 $14 = HEAP32[$13>>2]|0;
 HEAP32[$12>>2] = $14;
 $15 = ((($10)) + 12|0);
 $16 = $8;
 $17 = HEAP32[$16>>2]|0;
 HEAP32[$15>>2] = $17;
 $18 = ((($10)) + 16|0);
 $19 = $9;
 $20 = HEAP32[$19>>2]|0;
 HEAP32[$18>>2] = $20;
 STACKTOP = sp;return;
}
function __ZN22FrameBufferResizeEventC2ERKiS1_S1_S1_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 __ZN5EventC2E9EventType($10,7);
 $11 = ((($10)) + 8|0);
 $12 = $6;
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$11>>2] = $13;
 $14 = ((($10)) + 12|0);
 $15 = $7;
 $16 = HEAP32[$15>>2]|0;
 HEAP32[$14>>2] = $16;
 $17 = ((($10)) + 16|0);
 $18 = $8;
 $19 = HEAP32[$18>>2]|0;
 HEAP32[$17>>2] = $19;
 $20 = ((($10)) + 20|0);
 $21 = $9;
 $22 = HEAP32[$21>>2]|0;
 HEAP32[$20>>2] = $22;
 STACKTOP = sp;return;
}
function __ZN16WindowMovedEventC2ERKiS1_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 __ZN5EventC2E9EventType($6,4);
 $7 = ((($6)) + 8|0);
 $8 = $4;
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$7>>2] = $9;
 $10 = ((($6)) + 12|0);
 $11 = $5;
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$10>>2] = $12;
 STACKTOP = sp;return;
}
function __ZN17WindowResizeEventC2ERKiS1_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 __ZN5EventC2E9EventType($6,1);
 $7 = ((($6)) + 8|0);
 $8 = $4;
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$7>>2] = $9;
 $10 = ((($6)) + 12|0);
 $11 = $5;
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$10>>2] = $12;
 STACKTOP = sp;return;
}
function __ZN17WindowClosedEventC2ERKb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN5EventC2E9EventType($4,0);
 $5 = ((($4)) + 5|0);
 $6 = $3;
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&1;
 $9 = $8&1;
 HEAP8[$5>>0] = $9;
 STACKTOP = sp;return;
}
function __ZN6Window4DestEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 _glfwSetWindowShouldClose(($3|0),1);
 $4 = HEAP8[14486]|0;
 $5 = $4&1;
 if ($5) {
  STACKTOP = sp;return;
 }
 HEAP8[14486] = 1;
 _glfwTerminate();
 STACKTOP = sp;return;
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy_192($2)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $4 = (___syscall6(6,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 32|0;
 $vararg_buffer = sp + 16|0;
 $3 = sp;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $16 = (___syscall146(146,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 $18 = ($12|0)==($17|0);
 L1: do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;$$04855 = $12;$$04954 = $3;$27 = $17;
   while(1) {
    $26 = ($27|0)<(0);
    if ($26) {
     break;
    }
    $35 = (($$04855) - ($27))|0;
    $36 = ((($$04954)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($27>>>0)>($37>>>0);
    $39 = ((($$04954)) + 8|0);
    $$150 = $38 ? $39 : $$04954;
    $40 = $38 << 31 >> 31;
    $$1 = (($$04756) + ($40))|0;
    $41 = $38 ? $37 : 0;
    $$0 = (($27) - ($41))|0;
    $42 = HEAP32[$$150>>2]|0;
    $43 = (($42) + ($$0)|0);
    HEAP32[$$150>>2] = $43;
    $44 = ((($$150)) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) - ($$0))|0;
    HEAP32[$44>>2] = $46;
    $47 = HEAP32[$13>>2]|0;
    $48 = $$150;
    HEAP32[$vararg_buffer3>>2] = $47;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $48;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $$1;
    $49 = (___syscall146(146,($vararg_buffer3|0))|0);
    $50 = (___syscall_ret($49)|0);
    $51 = ($35|0)==($50|0);
    if ($51) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;$$04855 = $35;$$04954 = $$150;$27 = $50;
    }
   }
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$7>>2] = 0;
   $29 = HEAP32[$0>>2]|0;
   $30 = $29 | 32;
   HEAP32[$0>>2] = $30;
   $31 = ($$04756|0)==(2);
   if ($31) {
    $$051 = 0;
   } else {
    $32 = ((($$04954)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($2) - ($33))|0;
    $$051 = $34;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 16|0);
  HEAP32[$24>>2] = $23;
  $25 = $20;
  HEAP32[$4>>2] = $25;
  HEAP32[$7>>2] = $25;
  $$051 = $2;
 }
 STACKTOP = sp;return ($$051|0);
}
function ___stdio_seek($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 8|0;
 $4 = sp;
 $5 = ((($0)) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $4;
 HEAP32[$vararg_buffer>>2] = $6;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $2;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $7;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $3;
 $8 = (___syscall140(140,($vararg_buffer|0))|0);
 $9 = (___syscall_ret($8)|0);
 $10 = ($9|0)<(0);
 if ($10) {
  $17 = $4;
  $18 = $17;
  HEAP32[$18>>2] = -1;
  $19 = (($17) + 4)|0;
  $20 = $19;
  HEAP32[$20>>2] = -1;
  $21 = -1;$22 = -1;
 } else {
  $11 = $4;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($11) + 4)|0;
  $15 = $14;
  $16 = HEAP32[$15>>2]|0;
  $21 = $16;$22 = $13;
 }
 setTempRet0(($21) | 0);
 STACKTOP = sp;return ($22|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (13892|0);
}
function _dummy_192($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 205;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $10;
  $11 = (___syscall54(54,($vararg_buffer|0))|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($0)) + 75|0);
   HEAP8[$13>>0] = -1;
  }
 }
 $14 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($14|0);
}
function ___stdio_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 16|0;
 $3 = sp;
 HEAP32[$3>>2] = $1;
 $4 = ((($3)) + 4|0);
 $5 = ((($0)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = $7&1;
 $9 = (($2) - ($8))|0;
 HEAP32[$4>>2] = $9;
 $10 = ((($3)) + 8|0);
 $11 = ((($0)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$10>>2] = $12;
 $13 = ((($3)) + 12|0);
 HEAP32[$13>>2] = $6;
 $14 = ((($0)) + 60|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $3;
 HEAP32[$vararg_buffer>>2] = $15;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $16;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $17 = (___syscall145(145,($vararg_buffer|0))|0);
 $18 = (___syscall_ret($17)|0);
 $19 = ($18|0)<(1);
 if ($19) {
  $20 = $18 & 48;
  $21 = $20 ^ 16;
  $22 = HEAP32[$0>>2]|0;
  $23 = $22 | $21;
  HEAP32[$0>>2] = $23;
  $$0 = $18;
 } else {
  $24 = HEAP32[$4>>2]|0;
  $25 = ($18>>>0)>($24>>>0);
  if ($25) {
   $26 = (($18) - ($24))|0;
   $27 = HEAP32[$11>>2]|0;
   $28 = ((($0)) + 4|0);
   HEAP32[$28>>2] = $27;
   $$cast = $27;
   $29 = (($$cast) + ($26)|0);
   $30 = ((($0)) + 8|0);
   HEAP32[$30>>2] = $29;
   $31 = HEAP32[$5>>2]|0;
   $32 = ($31|0)==(0);
   if ($32) {
    $$0 = $2;
   } else {
    $33 = ((($$cast)) + 1|0);
    HEAP32[$28>>2] = $33;
    $34 = HEAP8[$$cast>>0]|0;
    $35 = (($2) + -1)|0;
    $36 = (($1) + ($35)|0);
    HEAP8[$36>>0] = $34;
    $$0 = $2;
   }
  } else {
   $$0 = $18;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _fmodl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_fmod($0,$1));
 return (+$2);
}
function _fmod($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$070 = 0.0, $$071$lcssa = 0, $$07194 = 0, $$073$lcssa = 0, $$073100 = 0, $$172 = 0, $$174 = 0, $$275$lcssa = 0, $$27585 = 0, $$376$lcssa = 0, $$37682 = 0, $$lcssa = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $spec$select = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $7 = (getTempRet0() | 0);
 $8 = $6 & 2047;
 $9 = (_bitshift64Lshr(($4|0),($5|0),52)|0);
 $10 = (getTempRet0() | 0);
 $11 = $9 & 2047;
 $12 = $3 & -2147483648;
 $13 = (_bitshift64Shl(($4|0),($5|0),1)|0);
 $14 = (getTempRet0() | 0);
 $15 = ($13|0)==(0);
 $16 = ($14|0)==(0);
 $17 = $15 & $16;
 L1: do {
  if ($17) {
   label = 3;
  } else {
   $18 = (___DOUBLE_BITS_29($1)|0);
   $19 = (getTempRet0() | 0);
   $20 = $19 & 2147483647;
   $21 = ($20>>>0)>(2146435072);
   $22 = ($18>>>0)>(0);
   $23 = ($20|0)==(2146435072);
   $24 = $23 & $22;
   $25 = $21 | $24;
   $26 = ($8|0)==(2047);
   $or$cond = $26 | $25;
   if ($or$cond) {
    label = 3;
   } else {
    $29 = (_bitshift64Shl(($2|0),($3|0),1)|0);
    $30 = (getTempRet0() | 0);
    $31 = ($30>>>0)>($14>>>0);
    $32 = ($29>>>0)>($13>>>0);
    $33 = ($30|0)==($14|0);
    $34 = $33 & $32;
    $35 = $31 | $34;
    if (!($35)) {
     $36 = ($29|0)==($13|0);
     $37 = ($30|0)==($14|0);
     $38 = $36 & $37;
     $39 = $0 * 0.0;
     $spec$select = $38 ? $39 : $0;
     return (+$spec$select);
    }
    $40 = ($8|0)==(0);
    if ($40) {
     $41 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $42 = (getTempRet0() | 0);
     $43 = ($42|0)>(-1);
     $44 = ($41>>>0)>(4294967295);
     $45 = ($42|0)==(-1);
     $46 = $45 & $44;
     $47 = $43 | $46;
     if ($47) {
      $$073100 = 0;$49 = $41;$50 = $42;
      while(1) {
       $48 = (($$073100) + -1)|0;
       $51 = (_bitshift64Shl(($49|0),($50|0),1)|0);
       $52 = (getTempRet0() | 0);
       $53 = ($52|0)>(-1);
       $54 = ($51>>>0)>(4294967295);
       $55 = ($52|0)==(-1);
       $56 = $55 & $54;
       $57 = $53 | $56;
       if ($57) {
        $$073100 = $48;$49 = $51;$50 = $52;
       } else {
        $$073$lcssa = $48;
        break;
       }
      }
     } else {
      $$073$lcssa = 0;
     }
     $58 = (1 - ($$073$lcssa))|0;
     $59 = (_bitshift64Shl(($2|0),($3|0),($58|0))|0);
     $60 = (getTempRet0() | 0);
     $$174 = $$073$lcssa;$87 = $59;$88 = $60;
    } else {
     $61 = $3 & 1048575;
     $62 = $61 | 1048576;
     $$174 = $8;$87 = $2;$88 = $62;
    }
    $63 = ($11|0)==(0);
    if ($63) {
     $64 = (_bitshift64Shl(($4|0),($5|0),12)|0);
     $65 = (getTempRet0() | 0);
     $66 = ($65|0)>(-1);
     $67 = ($64>>>0)>(4294967295);
     $68 = ($65|0)==(-1);
     $69 = $68 & $67;
     $70 = $66 | $69;
     if ($70) {
      $$07194 = 0;$72 = $64;$73 = $65;
      while(1) {
       $71 = (($$07194) + -1)|0;
       $74 = (_bitshift64Shl(($72|0),($73|0),1)|0);
       $75 = (getTempRet0() | 0);
       $76 = ($75|0)>(-1);
       $77 = ($74>>>0)>(4294967295);
       $78 = ($75|0)==(-1);
       $79 = $78 & $77;
       $80 = $76 | $79;
       if ($80) {
        $$07194 = $71;$72 = $74;$73 = $75;
       } else {
        $$071$lcssa = $71;
        break;
       }
      }
     } else {
      $$071$lcssa = 0;
     }
     $81 = (1 - ($$071$lcssa))|0;
     $82 = (_bitshift64Shl(($4|0),($5|0),($81|0))|0);
     $83 = (getTempRet0() | 0);
     $$172 = $$071$lcssa;$89 = $82;$90 = $83;
    } else {
     $84 = $5 & 1048575;
     $85 = $84 | 1048576;
     $$172 = $11;$89 = $4;$90 = $85;
    }
    $86 = ($$174|0)>($$172|0);
    $91 = (_i64Subtract(($87|0),($88|0),($89|0),($90|0))|0);
    $92 = (getTempRet0() | 0);
    $93 = ($92|0)>(-1);
    $94 = ($91>>>0)>(4294967295);
    $95 = ($92|0)==(-1);
    $96 = $95 & $94;
    $97 = $93 | $96;
    L25: do {
     if ($86) {
      $$27585 = $$174;$101 = $92;$158 = $97;$159 = $87;$160 = $88;$99 = $91;
      while(1) {
       if ($158) {
        $98 = ($99|0)==(0);
        $100 = ($101|0)==(0);
        $102 = $98 & $100;
        if ($102) {
         break;
        } else {
         $104 = $99;$105 = $101;
        }
       } else {
        $104 = $159;$105 = $160;
       }
       $106 = (_bitshift64Shl(($104|0),($105|0),1)|0);
       $107 = (getTempRet0() | 0);
       $108 = (($$27585) + -1)|0;
       $109 = ($108|0)>($$172|0);
       $110 = (_i64Subtract(($106|0),($107|0),($89|0),($90|0))|0);
       $111 = (getTempRet0() | 0);
       $112 = ($111|0)>(-1);
       $113 = ($110>>>0)>(4294967295);
       $114 = ($111|0)==(-1);
       $115 = $114 & $113;
       $116 = $112 | $115;
       if ($109) {
        $$27585 = $108;$101 = $111;$158 = $116;$159 = $106;$160 = $107;$99 = $110;
       } else {
        $$275$lcssa = $108;$$lcssa = $116;$118 = $110;$120 = $111;$156 = $106;$157 = $107;
        break L25;
       }
      }
      $103 = $0 * 0.0;
      $$070 = $103;
      break L1;
     } else {
      $$275$lcssa = $$174;$$lcssa = $97;$118 = $91;$120 = $92;$156 = $87;$157 = $88;
     }
    } while(0);
    if ($$lcssa) {
     $117 = ($118|0)==(0);
     $119 = ($120|0)==(0);
     $121 = $117 & $119;
     if ($121) {
      $122 = $0 * 0.0;
      $$070 = $122;
      break;
     } else {
      $124 = $120;$126 = $118;
     }
    } else {
     $124 = $157;$126 = $156;
    }
    $123 = ($124>>>0)<(1048576);
    $125 = ($126>>>0)<(0);
    $127 = ($124|0)==(1048576);
    $128 = $127 & $125;
    $129 = $123 | $128;
    if ($129) {
     $$37682 = $$275$lcssa;$130 = $126;$131 = $124;
     while(1) {
      $132 = (_bitshift64Shl(($130|0),($131|0),1)|0);
      $133 = (getTempRet0() | 0);
      $134 = (($$37682) + -1)|0;
      $135 = ($133>>>0)<(1048576);
      $136 = ($132>>>0)<(0);
      $137 = ($133|0)==(1048576);
      $138 = $137 & $136;
      $139 = $135 | $138;
      if ($139) {
       $$37682 = $134;$130 = $132;$131 = $133;
      } else {
       $$376$lcssa = $134;$141 = $132;$142 = $133;
       break;
      }
     }
    } else {
     $$376$lcssa = $$275$lcssa;$141 = $126;$142 = $124;
    }
    $140 = ($$376$lcssa|0)>(0);
    if ($140) {
     $143 = (_i64Add(($141|0),($142|0),0,-1048576)|0);
     $144 = (getTempRet0() | 0);
     $145 = (_bitshift64Shl(($$376$lcssa|0),0,52)|0);
     $146 = (getTempRet0() | 0);
     $147 = $143 | $145;
     $148 = $144 | $146;
     $153 = $148;$155 = $147;
    } else {
     $149 = (1 - ($$376$lcssa))|0;
     $150 = (_bitshift64Lshr(($141|0),($142|0),($149|0))|0);
     $151 = (getTempRet0() | 0);
     $153 = $151;$155 = $150;
    }
    $152 = $153 | $12;
    HEAP32[tempDoublePtr>>2] = $155;HEAP32[tempDoublePtr+4>>2] = $152;$154 = +HEAPF64[tempDoublePtr>>3];
    $$070 = $154;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $27 = $0 * $1;
  $28 = $27 / $27;
  $$070 = $28;
 }
 return (+$$070);
}
function ___DOUBLE_BITS_29($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 setTempRet0(($2) | 0);
 return ($1|0);
}
function _scalbn($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$020 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0;
 var $9 = 0, $spec$select = 0, $spec$select21 = 0.0, $spec$select22 = 0, $spec$select23 = 0.0, $spec$store$select = 0, $spec$store$select1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(1023);
 if ($2) {
  $3 = $0 * 8.9884656743115795E+307;
  $4 = (($1) + -1023)|0;
  $5 = ($1|0)>(2046);
  $6 = $3 * 8.9884656743115795E+307;
  $7 = (($1) + -2046)|0;
  $8 = ($7|0)<(1023);
  $spec$store$select = $8 ? $7 : 1023;
  $spec$select = $5 ? $spec$store$select : $4;
  $spec$select21 = $5 ? $6 : $3;
  $$0 = $spec$select21;$$020 = $spec$select;
 } else {
  $9 = ($1|0)<(-1022);
  if ($9) {
   $10 = $0 * 2.2250738585072014E-308;
   $11 = (($1) + 1022)|0;
   $12 = ($1|0)<(-2044);
   $13 = $10 * 2.2250738585072014E-308;
   $14 = (($1) + 2044)|0;
   $15 = ($14|0)>(-1022);
   $spec$store$select1 = $15 ? $14 : -1022;
   $spec$select22 = $12 ? $spec$store$select1 : $11;
   $spec$select23 = $12 ? $13 : $10;
   $$0 = $spec$select23;$$020 = $spec$select22;
  } else {
   $$0 = $0;$$020 = $1;
  }
 }
 $16 = (($$020) + 1023)|0;
 $17 = (_bitshift64Shl(($16|0),0,52)|0);
 $18 = (getTempRet0() | 0);
 HEAP32[tempDoublePtr>>2] = $17;HEAP32[tempDoublePtr+4>>2] = $18;$19 = +HEAPF64[tempDoublePtr>>3];
 $20 = $$0 * $19;
 return (+$20);
}
function _ldexpf($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_scalbnf($0,$1));
 return (+$2);
}
function _scalbnf($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$020 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0;
 var $spec$select = 0, $spec$select21 = 0.0, $spec$select22 = 0, $spec$select23 = 0.0, $spec$store$select = 0, $spec$store$select1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(127);
 if ($2) {
  $3 = $0 * 1.7014118346046923E+38;
  $4 = (($1) + -127)|0;
  $5 = ($1|0)>(254);
  $6 = $3 * 1.7014118346046923E+38;
  $7 = (($1) + -254)|0;
  $8 = ($7|0)<(127);
  $spec$store$select = $8 ? $7 : 127;
  $spec$select = $5 ? $spec$store$select : $4;
  $spec$select21 = $5 ? $6 : $3;
  $$0 = $spec$select21;$$020 = $spec$select;
 } else {
  $9 = ($1|0)<(-126);
  if ($9) {
   $10 = $0 * 1.1754943508222875E-38;
   $11 = (($1) + 126)|0;
   $12 = ($1|0)<(-252);
   $13 = $10 * 1.1754943508222875E-38;
   $14 = (($1) + 252)|0;
   $15 = ($14|0)>(-126);
   $spec$store$select1 = $15 ? $14 : -126;
   $spec$select22 = $12 ? $spec$store$select1 : $11;
   $spec$select23 = $12 ? $13 : $10;
   $$0 = $spec$select23;$$020 = $spec$select22;
  } else {
   $$0 = $0;$$020 = $1;
  }
 }
 $16 = $$020 << 23;
 $17 = (($16) + 1065353216)|0;
 $18 = (HEAP32[tempDoublePtr>>2]=$17,+HEAPF32[tempDoublePtr>>2]);
 $19 = $$0 * $18;
 return (+$19);
}
function _copysignl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_copysign($0,$1));
 return (+$2);
}
function _copysign($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = $3 & 2147483647;
 $7 = $5 & -2147483648;
 $8 = $7 | $6;
 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $8;$9 = +HEAPF64[tempDoublePtr>>3];
 return (+$9);
}
function _scalbnl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_scalbn($0,$1));
 return (+$2);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = (getTempRet0() | 0);
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$014 = 0, $$015$lcssa = 0, $$01518 = 0, $$1$lcssa = 0, $$pn = 0, $$pn29 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 5;
  } else {
   $$01518 = $0;$22 = $1;
   while(1) {
    $4 = HEAP8[$$01518>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$pn = $22;
     break L1;
    }
    $6 = ((($$01518)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 5;
     break;
    } else {
     $$01518 = $6;$22 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn29 = $$0;
   while(1) {
    $19 = ((($$pn29)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn29 = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$pn = $21;
 }
 $$014 = (($$pn) - ($1))|0;
 return ($$014|0);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _strchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___strchrnul($0,$1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $1&255;
 $5 = ($3<<24>>24)==($4<<24>>24);
 $6 = $5 ? $2 : 0;
 return ($6|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5180|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$137$lcssa66 = 0, $$13745 = 0, $$140 = 0, $$23839 = 0, $$in = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   label = 16;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $38 = ($$036$lcssa64|0)==(0);
    if ($38) {
     label = 16;
     break;
    } else {
     $39 = $$035$lcssa65;
     break;
    }
   }
   $20 = Math_imul($3, 16843009)|0;
   $21 = ($$036$lcssa64>>>0)>(3);
   L13: do {
    if ($21) {
     $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
     while(1) {
      $22 = HEAP32[$$046>>2]|0;
      $23 = $22 ^ $20;
      $24 = (($23) + -16843009)|0;
      $25 = $23 & -2139062144;
      $26 = $25 ^ -2139062144;
      $27 = $26 & $24;
      $28 = ($27|0)==(0);
      if (!($28)) {
       $$137$lcssa66 = $$13745;$$in = $$046;
       break L13;
      }
      $29 = ((($$046)) + 4|0);
      $30 = (($$13745) + -4)|0;
      $31 = ($30>>>0)>(3);
      if ($31) {
       $$046 = $29;$$13745 = $30;
      } else {
       $$0$lcssa = $29;$$137$lcssa = $30;
       label = 11;
       break;
      }
     }
    } else {
     $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
     label = 11;
    }
   } while(0);
   if ((label|0) == 11) {
    $32 = ($$137$lcssa|0)==(0);
    if ($32) {
     label = 16;
     break;
    } else {
     $$137$lcssa66 = $$137$lcssa;$$in = $$0$lcssa;
    }
   }
   $$140 = $$in;$$23839 = $$137$lcssa66;
   while(1) {
    $33 = HEAP8[$$140>>0]|0;
    $34 = ($33<<24>>24)==($18<<24>>24);
    if ($34) {
     $39 = $$140;
     break L8;
    }
    $35 = ((($$140)) + 1|0);
    $36 = (($$23839) + -1)|0;
    $37 = ($36|0)==(0);
    if ($37) {
     label = 16;
     break;
    } else {
     $$140 = $35;$$23839 = $36;
    }
   }
  }
 } while(0);
 if ((label|0) == 16) {
  $39 = 0;
 }
 return ($39|0);
}
function ___strchrnul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 255;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $4 = (_strlen($0)|0);
   $5 = (($0) + ($4)|0);
   $$0 = $5;
  } else {
   $6 = $0;
   $7 = $6 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$030$lcssa = $0;
   } else {
    $9 = $1&255;
    $$03039 = $0;
    while(1) {
     $10 = HEAP8[$$03039>>0]|0;
     $11 = ($10<<24>>24)==(0);
     $12 = ($10<<24>>24)==($9<<24>>24);
     $or$cond = $11 | $12;
     if ($or$cond) {
      $$0 = $$03039;
      break L1;
     }
     $13 = ((($$03039)) + 1|0);
     $14 = $13;
     $15 = $14 & 3;
     $16 = ($15|0)==(0);
     if ($16) {
      $$030$lcssa = $13;
      break;
     } else {
      $$03039 = $13;
     }
    }
   }
   $17 = Math_imul($2, 16843009)|0;
   $18 = HEAP32[$$030$lcssa>>2]|0;
   $19 = (($18) + -16843009)|0;
   $20 = $18 & -2139062144;
   $21 = $20 ^ -2139062144;
   $22 = $21 & $19;
   $23 = ($22|0)==(0);
   L10: do {
    if ($23) {
     $$02936 = $$030$lcssa;$25 = $18;
     while(1) {
      $24 = $25 ^ $17;
      $26 = (($24) + -16843009)|0;
      $27 = $24 & -2139062144;
      $28 = $27 ^ -2139062144;
      $29 = $28 & $26;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $$029$lcssa = $$02936;
       break L10;
      }
      $31 = ((($$02936)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + -16843009)|0;
      $34 = $32 & -2139062144;
      $35 = $34 ^ -2139062144;
      $36 = $35 & $33;
      $37 = ($36|0)==(0);
      if ($37) {
       $$02936 = $31;$25 = $32;
      } else {
       $$029$lcssa = $31;
       break;
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa;
    }
   } while(0);
   $38 = $1&255;
   $$1 = $$029$lcssa;
   while(1) {
    $39 = HEAP8[$$1>>0]|0;
    $40 = ($39<<24>>24)==(0);
    $41 = ($39<<24>>24)==($38<<24>>24);
    $or$cond33 = $40 | $41;
    $42 = ((($$1)) + 1|0);
    if ($or$cond33) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $42;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _snprintf($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 HEAP32[$3>>2] = $varargs;
 $4 = (_vsnprintf($0,$1,$2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _vsnprintf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$014 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $4 = sp + 144|0;
 $5 = sp;
 _memcpy(($5|0),(3416|0),144)|0;
 $6 = (($1) + -1)|0;
 $7 = ($6>>>0)>(2147483646);
 if ($7) {
  $8 = ($1|0)==(0);
  if ($8) {
   $$014 = $4;$$015 = 1;
   label = 4;
  } else {
   $9 = (___errno_location()|0);
   HEAP32[$9>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$014 = $0;$$015 = $1;
  label = 4;
 }
 if ((label|0) == 4) {
  $10 = $$014;
  $11 = (-2 - ($10))|0;
  $12 = ($$015>>>0)>($11>>>0);
  $spec$select = $12 ? $11 : $$015;
  $13 = ((($5)) + 48|0);
  HEAP32[$13>>2] = $spec$select;
  $14 = ((($5)) + 20|0);
  HEAP32[$14>>2] = $$014;
  $15 = ((($5)) + 44|0);
  HEAP32[$15>>2] = $$014;
  $16 = (($$014) + ($spec$select)|0);
  $17 = ((($5)) + 16|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($5)) + 28|0);
  HEAP32[$18>>2] = $16;
  $19 = (_vfprintf($5,$2,$3)|0);
  $20 = ($spec$select|0)==(0);
  if ($20) {
   $$0 = $19;
  } else {
   $21 = HEAP32[$14>>2]|0;
   $22 = HEAP32[$17>>2]|0;
   $23 = ($21|0)==($22|0);
   $24 = $23 << 31 >> 31;
   $25 = (($21) + ($24)|0);
   HEAP8[$25>>0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___vfprintf_internal($0,$1,$2,287,288)|0);
 return ($3|0);
}
function _fmt_fp($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$0 = 0, $$0463$lcssa = 0, $$0463588 = 0, $$0464599 = 0, $$0471 = 0.0, $$0479 = 0, $$0487657 = 0, $$0488 = 0, $$0488669 = 0, $$0488671 = 0, $$0497670 = 0, $$0498 = 0, $$0511586 = 0.0, $$0512 = 0, $$0513 = 0, $$0516652 = 0, $$0522 = 0, $$0523 = 0, $$0525 = 0;
 var $$0527 = 0, $$0529 = 0, $$0529$in646 = 0, $$0532651 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482683 = 0, $$1489656 = 0, $$1499 = 0, $$1510587 = 0, $$1514$lcssa = 0, $$1514614 = 0, $$1517 = 0, $$1526 = 0, $$1528 = 0, $$1530621 = 0;
 var $$1533$lcssa = 0, $$1533645 = 0, $$1604 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483 = 0, $$2490$lcssa = 0, $$2490638 = 0, $$2500$lcssa = 0, $$2500682 = 0, $$2515 = 0, $$2518634 = 0, $$2531 = 0, $$2534633 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484663 = 0, $$3501$lcssa = 0;
 var $$3501676 = 0, $$3535620 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478594 = 0, $$4492 = 0, $$4502$lcssa = 0, $$4502662 = 0, $$4520 = 0, $$5$lcssa = 0, $$5486$lcssa = 0, $$5486639 = 0, $$5493603 = 0, $$5503 = 0, $$5521 = 0, $$560 = 0, $$5609 = 0, $$6 = 0, $$6494593 = 0, $$7495608 = 0;
 var $$8 = 0, $$8506 = 0, $$9 = 0, $$9507$lcssa = 0, $$9507625 = 0, $$lcssa583 = 0, $$lobit = 0, $$neg = 0, $$neg571 = 0, $$not = 0, $$pn = 0, $$pr = 0, $$pr564 = 0, $$pre = 0, $$pre$phi717Z2D = 0, $$pre$phi718Z2D = 0, $$pre720 = 0, $$sink757 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0.0;
 var $247 = 0.0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0.0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0.0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0;
 var $410 = 0, $411 = 0, $412 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0;
 var $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $or$cond = 0, $or$cond3$not = 0, $or$cond543 = 0, $or$cond546 = 0, $or$cond556 = 0, $or$cond559 = 0, $or$cond6 = 0, $scevgep711 = 0, $scevgep711712 = 0, $spec$select = 0, $spec$select539 = 0, $spec$select540 = 0, $spec$select540722 = 0, $spec$select540723 = 0;
 var $spec$select541 = 0, $spec$select544 = 0.0, $spec$select547 = 0, $spec$select548 = 0, $spec$select549 = 0, $spec$select551 = 0, $spec$select554 = 0, $spec$select557 = 0, $spec$select561 = 0.0, $spec$select562 = 0, $spec$select563 = 0, $spec$select565 = 0, $spec$select566 = 0, $spec$select567 = 0.0, $spec$select568 = 0.0, $spec$select569 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $6 = sp + 32|0;
 $7 = sp + 536|0;
 $8 = sp;
 $9 = $8;
 $10 = sp + 540|0;
 HEAP32[$7>>2] = 0;
 $11 = ((($10)) + 12|0);
 $12 = (___DOUBLE_BITS_181($1)|0);
 $13 = (getTempRet0() | 0);
 $14 = ($13|0)<(0);
 if ($14) {
  $15 = - $1;
  $16 = (___DOUBLE_BITS_181($15)|0);
  $17 = (getTempRet0() | 0);
  $$0471 = $15;$$0522 = 1;$$0523 = 12101;$25 = $17;$412 = $16;
 } else {
  $18 = $4 & 2048;
  $19 = ($18|0)==(0);
  $20 = $4 & 1;
  $21 = ($20|0)==(0);
  $$ = $21 ? (12102) : (12107);
  $spec$select565 = $19 ? $$ : (12104);
  $22 = $4 & 2049;
  $23 = ($22|0)!=(0);
  $spec$select566 = $23&1;
  $$0471 = $1;$$0522 = $spec$select566;$$0523 = $spec$select565;$25 = $13;$412 = $12;
 }
 $24 = $25 & 2146435072;
 $26 = (0)==(0);
 $27 = ($24|0)==(2146435072);
 $28 = $26 & $27;
 do {
  if ($28) {
   $29 = $5 & 32;
   $30 = ($29|0)!=(0);
   $31 = $30 ? 12120 : 12124;
   $32 = ($$0471 != $$0471) | (0.0 != 0.0);
   $33 = $30 ? 12143 : 12128;
   $$0512 = $32 ? $33 : $31;
   $34 = (($$0522) + 3)|0;
   $35 = $4 & -65537;
   _pad($0,32,$2,$34,$35);
   _out($0,$$0523,$$0522);
   _out($0,$$0512,3);
   $36 = $4 ^ 8192;
   _pad($0,32,$2,$34,$36);
   $$sink757 = $34;
  } else {
   $37 = (+_frexp($$0471,$7));
   $38 = $37 * 2.0;
   $39 = $38 != 0.0;
   if ($39) {
    $40 = HEAP32[$7>>2]|0;
    $41 = (($40) + -1)|0;
    HEAP32[$7>>2] = $41;
   }
   $42 = $5 | 32;
   $43 = ($42|0)==(97);
   if ($43) {
    $44 = $5 & 32;
    $45 = ($44|0)==(0);
    $46 = ((($$0523)) + 9|0);
    $spec$select = $45 ? $$0523 : $46;
    $47 = $$0522 | 2;
    $48 = ($3>>>0)>(11);
    $49 = (12 - ($3))|0;
    $50 = ($49|0)==(0);
    $51 = $48 | $50;
    do {
     if ($51) {
      $$1472 = $38;
     } else {
      $$0511586 = 8.0;$$1510587 = $49;
      while(1) {
       $52 = (($$1510587) + -1)|0;
       $53 = $$0511586 * 16.0;
       $54 = ($52|0)==(0);
       if ($54) {
        break;
       } else {
        $$0511586 = $53;$$1510587 = $52;
       }
      }
      $55 = HEAP8[$spec$select>>0]|0;
      $56 = ($55<<24>>24)==(45);
      if ($56) {
       $57 = - $38;
       $58 = $57 - $53;
       $59 = $53 + $58;
       $60 = - $59;
       $$1472 = $60;
       break;
      } else {
       $61 = $38 + $53;
       $62 = $61 - $53;
       $$1472 = $62;
       break;
      }
     }
    } while(0);
    $63 = HEAP32[$7>>2]|0;
    $64 = ($63|0)<(0);
    $65 = (0 - ($63))|0;
    $66 = $64 ? $65 : $63;
    $67 = ($66|0)<(0);
    $68 = $67 << 31 >> 31;
    $69 = (_fmt_u($66,$68,$11)|0);
    $70 = ($69|0)==($11|0);
    if ($70) {
     $71 = ((($10)) + 11|0);
     HEAP8[$71>>0] = 48;
     $$0513 = $71;
    } else {
     $$0513 = $69;
    }
    $72 = $63 >> 31;
    $73 = $72 & 2;
    $74 = (($73) + 43)|0;
    $75 = $74&255;
    $76 = ((($$0513)) + -1|0);
    HEAP8[$76>>0] = $75;
    $77 = (($5) + 15)|0;
    $78 = $77&255;
    $79 = ((($$0513)) + -2|0);
    HEAP8[$79>>0] = $78;
    $80 = ($3|0)<(1);
    $81 = $4 & 8;
    $82 = ($81|0)==(0);
    $$0525 = $8;$$2473 = $$1472;
    while(1) {
     $83 = (~~(($$2473)));
     $84 = (2224 + ($83)|0);
     $85 = HEAP8[$84>>0]|0;
     $86 = $85&255;
     $87 = $44 | $86;
     $88 = $87&255;
     $89 = ((($$0525)) + 1|0);
     HEAP8[$$0525>>0] = $88;
     $90 = (+($83|0));
     $91 = $$2473 - $90;
     $92 = $91 * 16.0;
     $93 = $89;
     $94 = (($93) - ($9))|0;
     $95 = ($94|0)==(1);
     if ($95) {
      $96 = $92 == 0.0;
      $or$cond3$not = $80 & $96;
      $or$cond = $82 & $or$cond3$not;
      if ($or$cond) {
       $$1526 = $89;
      } else {
       $97 = ((($$0525)) + 2|0);
       HEAP8[$89>>0] = 46;
       $$1526 = $97;
      }
     } else {
      $$1526 = $89;
     }
     $98 = $92 != 0.0;
     if ($98) {
      $$0525 = $$1526;$$2473 = $92;
     } else {
      break;
     }
    }
    $99 = ($3|0)==(0);
    $$pre720 = $$1526;
    if ($99) {
     label = 25;
    } else {
     $100 = (-2 - ($9))|0;
     $101 = (($100) + ($$pre720))|0;
     $102 = ($101|0)<($3|0);
     if ($102) {
      $103 = $11;
      $104 = $79;
      $105 = (($3) + 2)|0;
      $106 = (($105) + ($103))|0;
      $107 = (($106) - ($104))|0;
      $$0527 = $107;$$pre$phi717Z2D = $103;$$pre$phi718Z2D = $104;
     } else {
      label = 25;
     }
    }
    if ((label|0) == 25) {
     $108 = $11;
     $109 = $79;
     $110 = (($108) - ($9))|0;
     $111 = (($110) - ($109))|0;
     $112 = (($111) + ($$pre720))|0;
     $$0527 = $112;$$pre$phi717Z2D = $108;$$pre$phi718Z2D = $109;
    }
    $113 = (($$0527) + ($47))|0;
    _pad($0,32,$2,$113,$4);
    _out($0,$spec$select,$47);
    $114 = $4 ^ 65536;
    _pad($0,48,$2,$113,$114);
    $115 = (($$pre720) - ($9))|0;
    _out($0,$8,$115);
    $116 = (($$pre$phi717Z2D) - ($$pre$phi718Z2D))|0;
    $117 = (($115) + ($116))|0;
    $118 = (($$0527) - ($117))|0;
    _pad($0,48,$118,0,0);
    _out($0,$79,$116);
    $119 = $4 ^ 8192;
    _pad($0,32,$2,$113,$119);
    $$sink757 = $113;
    break;
   }
   $120 = ($3|0)<(0);
   $spec$select539 = $120 ? 6 : $3;
   if ($39) {
    $121 = $38 * 268435456.0;
    $122 = HEAP32[$7>>2]|0;
    $123 = (($122) + -28)|0;
    HEAP32[$7>>2] = $123;
    $$3 = $121;$$pr = $123;
   } else {
    $$pre = HEAP32[$7>>2]|0;
    $$3 = $38;$$pr = $$pre;
   }
   $124 = ($$pr|0)<(0);
   $125 = ((($6)) + 288|0);
   $$0498 = $124 ? $6 : $125;
   $$1499 = $$0498;$$4 = $$3;
   while(1) {
    $126 = (~~(($$4))>>>0);
    HEAP32[$$1499>>2] = $126;
    $127 = ((($$1499)) + 4|0);
    $128 = (+($126>>>0));
    $129 = $$4 - $128;
    $130 = $129 * 1.0E+9;
    $131 = $130 != 0.0;
    if ($131) {
     $$1499 = $127;$$4 = $130;
    } else {
     break;
    }
   }
   $132 = $$0498;
   $133 = ($$pr|0)>(0);
   if ($133) {
    $$1482683 = $$0498;$$2500682 = $127;$135 = $$pr;
    while(1) {
     $134 = ($135|0)<(29);
     $136 = $134 ? $135 : 29;
     $$0488669 = ((($$2500682)) + -4|0);
     $137 = ($$0488669>>>0)<($$1482683>>>0);
     if ($137) {
      $$2483 = $$1482683;
     } else {
      $$0488671 = $$0488669;$$0497670 = 0;
      while(1) {
       $138 = HEAP32[$$0488671>>2]|0;
       $139 = (_bitshift64Shl(($138|0),0,($136|0))|0);
       $140 = (getTempRet0() | 0);
       $141 = (_i64Add(($139|0),($140|0),($$0497670|0),0)|0);
       $142 = (getTempRet0() | 0);
       $143 = (___udivdi3(($141|0),($142|0),1000000000,0)|0);
       $144 = (getTempRet0() | 0);
       $145 = (___muldi3(($143|0),($144|0),1000000000,0)|0);
       $146 = (getTempRet0() | 0);
       $147 = (_i64Subtract(($141|0),($142|0),($145|0),($146|0))|0);
       $148 = (getTempRet0() | 0);
       HEAP32[$$0488671>>2] = $147;
       $$0488 = ((($$0488671)) + -4|0);
       $149 = ($$0488>>>0)<($$1482683>>>0);
       if ($149) {
        break;
       } else {
        $$0488671 = $$0488;$$0497670 = $143;
       }
      }
      $150 = ($143|0)==(0);
      if ($150) {
       $$2483 = $$1482683;
      } else {
       $151 = ((($$1482683)) + -4|0);
       HEAP32[$151>>2] = $143;
       $$2483 = $151;
      }
     }
     $152 = ($$2500682>>>0)>($$2483>>>0);
     L57: do {
      if ($152) {
       $$3501676 = $$2500682;
       while(1) {
        $154 = ((($$3501676)) + -4|0);
        $155 = HEAP32[$154>>2]|0;
        $156 = ($155|0)==(0);
        if (!($156)) {
         $$3501$lcssa = $$3501676;
         break L57;
        }
        $153 = ($154>>>0)>($$2483>>>0);
        if ($153) {
         $$3501676 = $154;
        } else {
         $$3501$lcssa = $154;
         break;
        }
       }
      } else {
       $$3501$lcssa = $$2500682;
      }
     } while(0);
     $157 = HEAP32[$7>>2]|0;
     $158 = (($157) - ($136))|0;
     HEAP32[$7>>2] = $158;
     $159 = ($158|0)>(0);
     if ($159) {
      $$1482683 = $$2483;$$2500682 = $$3501$lcssa;$135 = $158;
     } else {
      $$1482$lcssa = $$2483;$$2500$lcssa = $$3501$lcssa;$$pr564 = $158;
      break;
     }
    }
   } else {
    $$1482$lcssa = $$0498;$$2500$lcssa = $127;$$pr564 = $$pr;
   }
   $160 = ($$pr564|0)<(0);
   if ($160) {
    $161 = (($spec$select539) + 25)|0;
    $162 = (($161|0) / 9)&-1;
    $163 = (($162) + 1)|0;
    $164 = ($42|0)==(102);
    $$3484663 = $$1482$lcssa;$$4502662 = $$2500$lcssa;$166 = $$pr564;
    while(1) {
     $165 = (0 - ($166))|0;
     $167 = ($165|0)<(9);
     $168 = $167 ? $165 : 9;
     $169 = ($$3484663>>>0)<($$4502662>>>0);
     if ($169) {
      $173 = 1 << $168;
      $174 = (($173) + -1)|0;
      $175 = 1000000000 >>> $168;
      $$0487657 = 0;$$1489656 = $$3484663;
      while(1) {
       $176 = HEAP32[$$1489656>>2]|0;
       $177 = $176 & $174;
       $178 = $176 >>> $168;
       $179 = (($178) + ($$0487657))|0;
       HEAP32[$$1489656>>2] = $179;
       $180 = Math_imul($177, $175)|0;
       $181 = ((($$1489656)) + 4|0);
       $182 = ($181>>>0)<($$4502662>>>0);
       if ($182) {
        $$0487657 = $180;$$1489656 = $181;
       } else {
        break;
       }
      }
      $183 = HEAP32[$$3484663>>2]|0;
      $184 = ($183|0)==(0);
      $185 = ((($$3484663)) + 4|0);
      $spec$select540 = $184 ? $185 : $$3484663;
      $186 = ($180|0)==(0);
      if ($186) {
       $$5503 = $$4502662;$spec$select540723 = $spec$select540;
      } else {
       $187 = ((($$4502662)) + 4|0);
       HEAP32[$$4502662>>2] = $180;
       $$5503 = $187;$spec$select540723 = $spec$select540;
      }
     } else {
      $170 = HEAP32[$$3484663>>2]|0;
      $171 = ($170|0)==(0);
      $172 = ((($$3484663)) + 4|0);
      $spec$select540722 = $171 ? $172 : $$3484663;
      $$5503 = $$4502662;$spec$select540723 = $spec$select540722;
     }
     $188 = $164 ? $$0498 : $spec$select540723;
     $189 = $$5503;
     $190 = $188;
     $191 = (($189) - ($190))|0;
     $192 = $191 >> 2;
     $193 = ($192|0)>($163|0);
     $194 = (($188) + ($163<<2)|0);
     $spec$select541 = $193 ? $194 : $$5503;
     $195 = HEAP32[$7>>2]|0;
     $196 = (($195) + ($168))|0;
     HEAP32[$7>>2] = $196;
     $197 = ($196|0)<(0);
     if ($197) {
      $$3484663 = $spec$select540723;$$4502662 = $spec$select541;$166 = $196;
     } else {
      $$3484$lcssa = $spec$select540723;$$4502$lcssa = $spec$select541;
      break;
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa;$$4502$lcssa = $$2500$lcssa;
   }
   $198 = ($$3484$lcssa>>>0)<($$4502$lcssa>>>0);
   if ($198) {
    $199 = $$3484$lcssa;
    $200 = (($132) - ($199))|0;
    $201 = $200 >> 2;
    $202 = ($201*9)|0;
    $203 = HEAP32[$$3484$lcssa>>2]|0;
    $204 = ($203>>>0)<(10);
    if ($204) {
     $$1517 = $202;
    } else {
     $$0516652 = $202;$$0532651 = 10;
     while(1) {
      $205 = ($$0532651*10)|0;
      $206 = (($$0516652) + 1)|0;
      $207 = ($203>>>0)<($205>>>0);
      if ($207) {
       $$1517 = $206;
       break;
      } else {
       $$0516652 = $206;$$0532651 = $205;
      }
     }
    }
   } else {
    $$1517 = 0;
   }
   $208 = ($42|0)==(102);
   $209 = $208 ? 0 : $$1517;
   $210 = (($spec$select539) - ($209))|0;
   $211 = ($42|0)==(103);
   $212 = ($spec$select539|0)!=(0);
   $213 = $212 & $211;
   $$neg = $213 << 31 >> 31;
   $214 = (($210) + ($$neg))|0;
   $215 = $$4502$lcssa;
   $216 = (($215) - ($132))|0;
   $217 = $216 >> 2;
   $218 = ($217*9)|0;
   $219 = (($218) + -9)|0;
   $220 = ($214|0)<($219|0);
   if ($220) {
    $221 = ((($$0498)) + 4|0);
    $222 = (($214) + 9216)|0;
    $223 = (($222|0) / 9)&-1;
    $224 = (($223) + -1024)|0;
    $225 = (($221) + ($224<<2)|0);
    $226 = ($223*9)|0;
    $227 = (($222) - ($226))|0;
    $228 = ($227|0)<(8);
    if ($228) {
     $$0529$in646 = $227;$$1533645 = 10;
     while(1) {
      $$0529 = (($$0529$in646) + 1)|0;
      $229 = ($$1533645*10)|0;
      $230 = ($$0529$in646|0)<(7);
      if ($230) {
       $$0529$in646 = $$0529;$$1533645 = $229;
      } else {
       $$1533$lcssa = $229;
       break;
      }
     }
    } else {
     $$1533$lcssa = 10;
    }
    $231 = HEAP32[$225>>2]|0;
    $232 = (($231>>>0) / ($$1533$lcssa>>>0))&-1;
    $233 = Math_imul($232, $$1533$lcssa)|0;
    $234 = (($231) - ($233))|0;
    $235 = ($234|0)==(0);
    $236 = ((($225)) + 4|0);
    $237 = ($236|0)==($$4502$lcssa|0);
    $or$cond543 = $237 & $235;
    if ($or$cond543) {
     $$4492 = $225;$$4520 = $$1517;$$8 = $$3484$lcssa;
    } else {
     $238 = $232 & 1;
     $239 = ($238|0)==(0);
     $spec$select544 = $239 ? 9007199254740992.0 : 9007199254740994.0;
     $240 = $$1533$lcssa >>> 1;
     $241 = ($234>>>0)<($240>>>0);
     $242 = ($234|0)==($240|0);
     $or$cond546 = $237 & $242;
     $spec$select561 = $or$cond546 ? 1.0 : 1.5;
     $spec$select567 = $241 ? 0.5 : $spec$select561;
     $243 = ($$0522|0)==(0);
     if ($243) {
      $$1467 = $spec$select567;$$1469 = $spec$select544;
     } else {
      $244 = HEAP8[$$0523>>0]|0;
      $245 = ($244<<24>>24)==(45);
      $246 = - $spec$select544;
      $247 = - $spec$select567;
      $spec$select568 = $245 ? $246 : $spec$select544;
      $spec$select569 = $245 ? $247 : $spec$select567;
      $$1467 = $spec$select569;$$1469 = $spec$select568;
     }
     $248 = (($231) - ($234))|0;
     HEAP32[$225>>2] = $248;
     $249 = $$1469 + $$1467;
     $250 = $249 != $$1469;
     if ($250) {
      $251 = (($248) + ($$1533$lcssa))|0;
      HEAP32[$225>>2] = $251;
      $252 = ($251>>>0)>(999999999);
      if ($252) {
       $$2490638 = $225;$$5486639 = $$3484$lcssa;
       while(1) {
        $253 = ((($$2490638)) + -4|0);
        HEAP32[$$2490638>>2] = 0;
        $254 = ($253>>>0)<($$5486639>>>0);
        if ($254) {
         $255 = ((($$5486639)) + -4|0);
         HEAP32[$255>>2] = 0;
         $$6 = $255;
        } else {
         $$6 = $$5486639;
        }
        $256 = HEAP32[$253>>2]|0;
        $257 = (($256) + 1)|0;
        HEAP32[$253>>2] = $257;
        $258 = ($257>>>0)>(999999999);
        if ($258) {
         $$2490638 = $253;$$5486639 = $$6;
        } else {
         $$2490$lcssa = $253;$$5486$lcssa = $$6;
         break;
        }
       }
      } else {
       $$2490$lcssa = $225;$$5486$lcssa = $$3484$lcssa;
      }
      $259 = $$5486$lcssa;
      $260 = (($132) - ($259))|0;
      $261 = $260 >> 2;
      $262 = ($261*9)|0;
      $263 = HEAP32[$$5486$lcssa>>2]|0;
      $264 = ($263>>>0)<(10);
      if ($264) {
       $$4492 = $$2490$lcssa;$$4520 = $262;$$8 = $$5486$lcssa;
      } else {
       $$2518634 = $262;$$2534633 = 10;
       while(1) {
        $265 = ($$2534633*10)|0;
        $266 = (($$2518634) + 1)|0;
        $267 = ($263>>>0)<($265>>>0);
        if ($267) {
         $$4492 = $$2490$lcssa;$$4520 = $266;$$8 = $$5486$lcssa;
         break;
        } else {
         $$2518634 = $266;$$2534633 = $265;
        }
       }
      }
     } else {
      $$4492 = $225;$$4520 = $$1517;$$8 = $$3484$lcssa;
     }
    }
    $268 = ((($$4492)) + 4|0);
    $269 = ($$4502$lcssa>>>0)>($268>>>0);
    $spec$select547 = $269 ? $268 : $$4502$lcssa;
    $$5521 = $$4520;$$8506 = $spec$select547;$$9 = $$8;
   } else {
    $$5521 = $$1517;$$8506 = $$4502$lcssa;$$9 = $$3484$lcssa;
   }
   $270 = (0 - ($$5521))|0;
   $271 = ($$8506>>>0)>($$9>>>0);
   L109: do {
    if ($271) {
     $$9507625 = $$8506;
     while(1) {
      $273 = ((($$9507625)) + -4|0);
      $274 = HEAP32[$273>>2]|0;
      $275 = ($274|0)==(0);
      if (!($275)) {
       $$9507$lcssa = $$9507625;$$lcssa583 = 1;
       break L109;
      }
      $272 = ($273>>>0)>($$9>>>0);
      if ($272) {
       $$9507625 = $273;
      } else {
       $$9507$lcssa = $273;$$lcssa583 = 0;
       break;
      }
     }
    } else {
     $$9507$lcssa = $$8506;$$lcssa583 = 0;
    }
   } while(0);
   do {
    if ($211) {
     $not$ = $212 ^ 1;
     $276 = $not$&1;
     $spec$select548 = (($spec$select539) + ($276))|0;
     $277 = ($spec$select548|0)>($$5521|0);
     $278 = ($$5521|0)>(-5);
     $or$cond6 = $277 & $278;
     if ($or$cond6) {
      $279 = (($5) + -1)|0;
      $$neg571 = (($spec$select548) + -1)|0;
      $280 = (($$neg571) - ($$5521))|0;
      $$0479 = $279;$$2476 = $280;
     } else {
      $281 = (($5) + -2)|0;
      $282 = (($spec$select548) + -1)|0;
      $$0479 = $281;$$2476 = $282;
     }
     $283 = $4 & 8;
     $284 = ($283|0)==(0);
     if ($284) {
      if ($$lcssa583) {
       $285 = ((($$9507$lcssa)) + -4|0);
       $286 = HEAP32[$285>>2]|0;
       $287 = ($286|0)==(0);
       if ($287) {
        $$2531 = 9;
       } else {
        $288 = (($286>>>0) % 10)&-1;
        $289 = ($288|0)==(0);
        if ($289) {
         $$1530621 = 0;$$3535620 = 10;
         while(1) {
          $290 = ($$3535620*10)|0;
          $291 = (($$1530621) + 1)|0;
          $292 = (($286>>>0) % ($290>>>0))&-1;
          $293 = ($292|0)==(0);
          if ($293) {
           $$1530621 = $291;$$3535620 = $290;
          } else {
           $$2531 = $291;
           break;
          }
         }
        } else {
         $$2531 = 0;
        }
       }
      } else {
       $$2531 = 9;
      }
      $294 = $$0479 | 32;
      $295 = ($294|0)==(102);
      $296 = $$9507$lcssa;
      $297 = (($296) - ($132))|0;
      $298 = $297 >> 2;
      $299 = ($298*9)|0;
      $300 = (($299) + -9)|0;
      if ($295) {
       $301 = (($300) - ($$2531))|0;
       $302 = ($301|0)>(0);
       $spec$select549 = $302 ? $301 : 0;
       $303 = ($$2476|0)<($spec$select549|0);
       $spec$select562 = $303 ? $$2476 : $spec$select549;
       $$1480 = $$0479;$$3477 = $spec$select562;
       break;
      } else {
       $304 = (($300) + ($$5521))|0;
       $305 = (($304) - ($$2531))|0;
       $306 = ($305|0)>(0);
       $spec$select551 = $306 ? $305 : 0;
       $307 = ($$2476|0)<($spec$select551|0);
       $spec$select563 = $307 ? $$2476 : $spec$select551;
       $$1480 = $$0479;$$3477 = $spec$select563;
       break;
      }
     } else {
      $$1480 = $$0479;$$3477 = $$2476;
     }
    } else {
     $$1480 = $5;$$3477 = $spec$select539;
    }
   } while(0);
   $308 = ($$3477|0)!=(0);
   $309 = $4 >>> 3;
   $$lobit = $309 & 1;
   $310 = $308 ? 1 : $$lobit;
   $311 = $$1480 | 32;
   $312 = ($311|0)==(102);
   if ($312) {
    $313 = ($$5521|0)>(0);
    $314 = $313 ? $$5521 : 0;
    $$2515 = 0;$$pn = $314;
   } else {
    $315 = ($$5521|0)<(0);
    $316 = $315 ? $270 : $$5521;
    $317 = ($316|0)<(0);
    $318 = $317 << 31 >> 31;
    $319 = (_fmt_u($316,$318,$11)|0);
    $320 = $11;
    $321 = $319;
    $322 = (($320) - ($321))|0;
    $323 = ($322|0)<(2);
    if ($323) {
     $$1514614 = $319;
     while(1) {
      $324 = ((($$1514614)) + -1|0);
      HEAP8[$324>>0] = 48;
      $325 = $324;
      $326 = (($320) - ($325))|0;
      $327 = ($326|0)<(2);
      if ($327) {
       $$1514614 = $324;
      } else {
       $$1514$lcssa = $324;
       break;
      }
     }
    } else {
     $$1514$lcssa = $319;
    }
    $328 = $$5521 >> 31;
    $329 = $328 & 2;
    $330 = (($329) + 43)|0;
    $331 = $330&255;
    $332 = ((($$1514$lcssa)) + -1|0);
    HEAP8[$332>>0] = $331;
    $333 = $$1480&255;
    $334 = ((($$1514$lcssa)) + -2|0);
    HEAP8[$334>>0] = $333;
    $335 = $334;
    $336 = (($320) - ($335))|0;
    $$2515 = $334;$$pn = $336;
   }
   $337 = (($$0522) + 1)|0;
   $338 = (($337) + ($$3477))|0;
   $$1528 = (($338) + ($310))|0;
   $339 = (($$1528) + ($$pn))|0;
   _pad($0,32,$2,$339,$4);
   _out($0,$$0523,$$0522);
   $340 = $4 ^ 65536;
   _pad($0,48,$2,$339,$340);
   if ($312) {
    $341 = ($$9>>>0)>($$0498>>>0);
    $spec$select554 = $341 ? $$0498 : $$9;
    $342 = ((($8)) + 9|0);
    $343 = $342;
    $344 = ((($8)) + 8|0);
    $$5493603 = $spec$select554;
    while(1) {
     $345 = HEAP32[$$5493603>>2]|0;
     $346 = (_fmt_u($345,0,$342)|0);
     $347 = ($$5493603|0)==($spec$select554|0);
     if ($347) {
      $353 = ($346|0)==($342|0);
      if ($353) {
       HEAP8[$344>>0] = 48;
       $$1465 = $344;
      } else {
       $$1465 = $346;
      }
     } else {
      $348 = ($346>>>0)>($8>>>0);
      if ($348) {
       $349 = $346;
       $350 = (($349) - ($9))|0;
       _memset(($8|0),48,($350|0))|0;
       $$0464599 = $346;
       while(1) {
        $351 = ((($$0464599)) + -1|0);
        $352 = ($351>>>0)>($8>>>0);
        if ($352) {
         $$0464599 = $351;
        } else {
         $$1465 = $351;
         break;
        }
       }
      } else {
       $$1465 = $346;
      }
     }
     $354 = $$1465;
     $355 = (($343) - ($354))|0;
     _out($0,$$1465,$355);
     $356 = ((($$5493603)) + 4|0);
     $357 = ($356>>>0)>($$0498>>>0);
     if ($357) {
      break;
     } else {
      $$5493603 = $356;
     }
    }
    $$not = $308 ^ 1;
    $358 = $4 & 8;
    $359 = ($358|0)==(0);
    $or$cond556 = $359 & $$not;
    if (!($or$cond556)) {
     _out($0,12132,1);
    }
    $360 = ($356>>>0)<($$9507$lcssa>>>0);
    $361 = ($$3477|0)>(0);
    $362 = $360 & $361;
    if ($362) {
     $$4478594 = $$3477;$$6494593 = $356;
     while(1) {
      $363 = HEAP32[$$6494593>>2]|0;
      $364 = (_fmt_u($363,0,$342)|0);
      $365 = ($364>>>0)>($8>>>0);
      if ($365) {
       $366 = $364;
       $367 = (($366) - ($9))|0;
       _memset(($8|0),48,($367|0))|0;
       $$0463588 = $364;
       while(1) {
        $368 = ((($$0463588)) + -1|0);
        $369 = ($368>>>0)>($8>>>0);
        if ($369) {
         $$0463588 = $368;
        } else {
         $$0463$lcssa = $368;
         break;
        }
       }
      } else {
       $$0463$lcssa = $364;
      }
      $370 = ($$4478594|0)<(9);
      $371 = $370 ? $$4478594 : 9;
      _out($0,$$0463$lcssa,$371);
      $372 = ((($$6494593)) + 4|0);
      $373 = (($$4478594) + -9)|0;
      $374 = ($372>>>0)<($$9507$lcssa>>>0);
      $375 = ($$4478594|0)>(9);
      $376 = $374 & $375;
      if ($376) {
       $$4478594 = $373;$$6494593 = $372;
      } else {
       $$4478$lcssa = $373;
       break;
      }
     }
    } else {
     $$4478$lcssa = $$3477;
    }
    $377 = (($$4478$lcssa) + 9)|0;
    _pad($0,48,$377,9,0);
   } else {
    $378 = ((($$9)) + 4|0);
    $spec$select557 = $$lcssa583 ? $$9507$lcssa : $378;
    $379 = ($$9>>>0)<($spec$select557>>>0);
    $380 = ($$3477|0)>(-1);
    $381 = $379 & $380;
    if ($381) {
     $382 = ((($8)) + 9|0);
     $383 = $4 & 8;
     $384 = ($383|0)==(0);
     $385 = $382;
     $386 = (0 - ($9))|0;
     $387 = ((($8)) + 8|0);
     $$5609 = $$3477;$$7495608 = $$9;
     while(1) {
      $388 = HEAP32[$$7495608>>2]|0;
      $389 = (_fmt_u($388,0,$382)|0);
      $390 = ($389|0)==($382|0);
      if ($390) {
       HEAP8[$387>>0] = 48;
       $$0 = $387;
      } else {
       $$0 = $389;
      }
      $391 = ($$7495608|0)==($$9|0);
      do {
       if ($391) {
        $395 = ((($$0)) + 1|0);
        _out($0,$$0,1);
        $396 = ($$5609|0)<(1);
        $or$cond559 = $384 & $396;
        if ($or$cond559) {
         $$2 = $395;
         break;
        }
        _out($0,12132,1);
        $$2 = $395;
       } else {
        $392 = ($$0>>>0)>($8>>>0);
        if (!($392)) {
         $$2 = $$0;
         break;
        }
        $scevgep711 = (($$0) + ($386)|0);
        $scevgep711712 = $scevgep711;
        _memset(($8|0),48,($scevgep711712|0))|0;
        $$1604 = $$0;
        while(1) {
         $393 = ((($$1604)) + -1|0);
         $394 = ($393>>>0)>($8>>>0);
         if ($394) {
          $$1604 = $393;
         } else {
          $$2 = $393;
          break;
         }
        }
       }
      } while(0);
      $397 = $$2;
      $398 = (($385) - ($397))|0;
      $399 = ($$5609|0)>($398|0);
      $400 = $399 ? $398 : $$5609;
      _out($0,$$2,$400);
      $401 = (($$5609) - ($398))|0;
      $402 = ((($$7495608)) + 4|0);
      $403 = ($402>>>0)<($spec$select557>>>0);
      $404 = ($401|0)>(-1);
      $405 = $403 & $404;
      if ($405) {
       $$5609 = $401;$$7495608 = $402;
      } else {
       $$5$lcssa = $401;
       break;
      }
     }
    } else {
     $$5$lcssa = $$3477;
    }
    $406 = (($$5$lcssa) + 18)|0;
    _pad($0,48,$406,18,0);
    $407 = $11;
    $408 = $$2515;
    $409 = (($407) - ($408))|0;
    _out($0,$$2515,$409);
   }
   $410 = $4 ^ 8192;
   _pad($0,32,$2,$339,$410);
   $$sink757 = $339;
  }
 } while(0);
 $411 = ($$sink757|0)<($2|0);
 $$560 = $411 ? $2 : $$sink757;
 STACKTOP = sp;return ($$560|0);
}
function _pop_arg_long_double($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arglist_current = HEAP32[$1>>2]|0;
 $2 = $arglist_current;
 $3 = ((0) + 8|0);
 $expanded1 = $3;
 $expanded = (($expanded1) - 1)|0;
 $4 = (($2) + ($expanded))|0;
 $5 = ((0) + 8|0);
 $expanded5 = $5;
 $expanded4 = (($expanded5) - 1)|0;
 $expanded3 = $expanded4 ^ -1;
 $6 = $4 & $expanded3;
 $7 = $6;
 $8 = +HEAPF64[$7>>3];
 $arglist_next = ((($7)) + 8|0);
 HEAP32[$1>>2] = $arglist_next;
 HEAPF64[$0>>3] = $8;
 return;
}
function ___vfprintf_internal($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $spec$select = 0, $spec$select45 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $5 = sp + 208|0;
 $6 = sp + 160|0;
 $7 = sp + 80|0;
 $8 = sp;
 dest=$6; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$5>>2] = $vacopy_currentptr;
 $9 = (_printf_core(0,$1,$5,$7,$6,$3,$4)|0);
 $10 = ($9|0)<(0);
 if ($10) {
  $$0 = -1;
 } else {
  $11 = ((($0)) + 76|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)>(-1);
  if ($13) {
   $14 = (___lockfile($0)|0);
   $42 = $14;
  } else {
   $42 = 0;
  }
  $15 = HEAP32[$0>>2]|0;
  $16 = $15 & 32;
  $17 = ((($0)) + 74|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = ($18<<24>>24)<(1);
  if ($19) {
   $20 = $15 & -33;
   HEAP32[$0>>2] = $20;
  }
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)==(0);
  if ($23) {
   $25 = ((($0)) + 44|0);
   $26 = HEAP32[$25>>2]|0;
   HEAP32[$25>>2] = $8;
   $27 = ((($0)) + 28|0);
   HEAP32[$27>>2] = $8;
   $28 = ((($0)) + 20|0);
   HEAP32[$28>>2] = $8;
   HEAP32[$21>>2] = 80;
   $29 = ((($8)) + 80|0);
   $30 = ((($0)) + 16|0);
   HEAP32[$30>>2] = $29;
   $31 = (_printf_core($0,$1,$5,$7,$6,$3,$4)|0);
   $32 = ($26|0)==(0|0);
   if ($32) {
    $$1 = $31;
   } else {
    $33 = ((($0)) + 36|0);
    $34 = HEAP32[$33>>2]|0;
    (FUNCTION_TABLE_iiii[$34 & 511]($0,0,0)|0);
    $35 = HEAP32[$28>>2]|0;
    $36 = ($35|0)==(0|0);
    $spec$select = $36 ? -1 : $31;
    HEAP32[$25>>2] = $26;
    HEAP32[$21>>2] = 0;
    HEAP32[$30>>2] = 0;
    HEAP32[$27>>2] = 0;
    HEAP32[$28>>2] = 0;
    $$1 = $spec$select;
   }
  } else {
   $24 = (_printf_core($0,$1,$5,$7,$6,$3,$4)|0);
   $$1 = $24;
  }
  $37 = HEAP32[$0>>2]|0;
  $38 = $37 & 32;
  $39 = ($38|0)==(0);
  $spec$select45 = $39 ? $$1 : -1;
  $40 = $37 | $16;
  HEAP32[$0>>2] = $40;
  $41 = ($42|0)==(0);
  if (!($41)) {
   ___unlockfile($0);
  }
  $$0 = $spec$select45;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$ = 0, $$0 = 0, $$0231 = 0, $$0232336 = 0, $$0234 = 0, $$0237 = 0, $$0239 = 0, $$0242315 = 0, $$0242315373 = 0, $$0242335 = 0, $$0245 = 0, $$0245$ph = 0, $$0245$ph$be = 0, $$0249 = 0, $$0249$ph = 0, $$0251$lcssa = 0, $$0251323 = 0, $$0254 = 0, $$0255 = 0, $$0256 = 0;
 var $$0261 = 0, $$0264$lcssa = 0, $$0264330 = 0, $$0271$ph = 0, $$1 = 0, $$1233342 = 0, $$1235 = 0, $$1238 = 0, $$1240 = 0, $$1243341 = 0, $$1250 = 0, $$1252 = 0, $$1257 = 0, $$1262 = 0, $$1265 = 0, $$1272 = 0, $$2236 = 0, $$2241 = 0, $$2244322 = 0, $$2258 = 0;
 var $$2258$ = 0, $$2263 = 0, $$2273 = 0, $$3259 = 0, $$3267 = 0, $$3274 = 0, $$3319 = 0, $$4260372 = 0, $$4268 = 0, $$5 = 0, $$6270 = 0, $$lcssa310 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre362 = 0, $$pre364 = 0, $$pre365 = 0, $$pre365$pre = 0, $$pre366 = 0, $$pre370 = 0;
 var $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0.0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $brmerge = 0, $brmerge328 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $or$cond = 0;
 var $or$cond278 = 0, $or$cond280 = 0, $or$cond285 = 0, $spec$select = 0, $spec$select283 = 0, $spec$select286 = 0, $spec$select293 = 0, $spec$select294 = 0, $spec$select295 = 0, $spec$select296 = 0, $spec$select297 = 0, $spec$select298 = 0, $spec$select299 = 0, $spec$select300 = 0, $spec$select301 = 0, $storemerge275$lcssa = 0, $storemerge275329 = 0, $storemerge276 = 0, $trunc = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $7 = sp + 56|0;
 $8 = sp + 40|0;
 $9 = sp;
 $10 = sp + 48|0;
 $11 = sp + 60|0;
 HEAP32[$7>>2] = $1;
 $12 = ($0|0)!=(0|0);
 $13 = ((($9)) + 40|0);
 $14 = $13;
 $15 = ((($9)) + 39|0);
 $16 = ((($10)) + 4|0);
 $$0245$ph = 0;$$0249$ph = 0;$$0271$ph = 0;
 L1: while(1) {
  $$0245 = $$0245$ph;$$0249 = $$0249$ph;
  while(1) {
   $17 = ($$0249|0)>(-1);
   do {
    if ($17) {
     $18 = (2147483647 - ($$0249))|0;
     $19 = ($$0245|0)>($18|0);
     if ($19) {
      $20 = (___errno_location()|0);
      HEAP32[$20>>2] = 75;
      $$1250 = -1;
      break;
     } else {
      $21 = (($$0245) + ($$0249))|0;
      $$1250 = $21;
      break;
     }
    } else {
     $$1250 = $$0249;
    }
   } while(0);
   $22 = HEAP32[$7>>2]|0;
   $23 = HEAP8[$22>>0]|0;
   $24 = ($23<<24>>24)==(0);
   if ($24) {
    label = 92;
    break L1;
   }
   $25 = $23;$27 = $22;
   L12: while(1) {
    switch ($25<<24>>24) {
    case 37:  {
     label = 10;
     break L12;
     break;
    }
    case 0:  {
     $$0251$lcssa = $27;
     break L12;
     break;
    }
    default: {
    }
    }
    $26 = ((($27)) + 1|0);
    HEAP32[$7>>2] = $26;
    $$pre = HEAP8[$26>>0]|0;
    $25 = $$pre;$27 = $26;
   }
   L15: do {
    if ((label|0) == 10) {
     label = 0;
     $$0251323 = $27;$29 = $27;
     while(1) {
      $28 = ((($29)) + 1|0);
      $30 = HEAP8[$28>>0]|0;
      $31 = ($30<<24>>24)==(37);
      if (!($31)) {
       $$0251$lcssa = $$0251323;
       break L15;
      }
      $32 = ((($$0251323)) + 1|0);
      $33 = ((($29)) + 2|0);
      HEAP32[$7>>2] = $33;
      $34 = HEAP8[$33>>0]|0;
      $35 = ($34<<24>>24)==(37);
      if ($35) {
       $$0251323 = $32;$29 = $33;
      } else {
       $$0251$lcssa = $32;
       break;
      }
     }
    }
   } while(0);
   $36 = $$0251$lcssa;
   $37 = $22;
   $38 = (($36) - ($37))|0;
   if ($12) {
    _out($0,$22,$38);
   }
   $39 = ($38|0)==(0);
   if ($39) {
    break;
   } else {
    $$0245 = $38;$$0249 = $$1250;
   }
  }
  $40 = HEAP32[$7>>2]|0;
  $41 = ((($40)) + 1|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42 << 24 >> 24;
  $44 = (_isdigit($43)|0);
  $45 = ($44|0)==(0);
  $$pre362 = HEAP32[$7>>2]|0;
  if ($45) {
   $$0255 = -1;$$1272 = $$0271$ph;$$sink = 1;
  } else {
   $46 = ((($$pre362)) + 2|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = ($47<<24>>24)==(36);
   if ($48) {
    $49 = ((($$pre362)) + 1|0);
    $50 = HEAP8[$49>>0]|0;
    $51 = $50 << 24 >> 24;
    $52 = (($51) + -48)|0;
    $$0255 = $52;$$1272 = 1;$$sink = 3;
   } else {
    $$0255 = -1;$$1272 = $$0271$ph;$$sink = 1;
   }
  }
  $53 = (($$pre362) + ($$sink)|0);
  HEAP32[$7>>2] = $53;
  $54 = HEAP8[$53>>0]|0;
  $55 = $54 << 24 >> 24;
  $56 = (($55) + -32)|0;
  $57 = ($56>>>0)>(31);
  $58 = 1 << $56;
  $59 = $58 & 75913;
  $60 = ($59|0)==(0);
  $brmerge328 = $57 | $60;
  if ($brmerge328) {
   $$0264$lcssa = 0;$$lcssa310 = $54;$storemerge275$lcssa = $53;
  } else {
   $$0264330 = 0;$62 = $56;$storemerge275329 = $53;
   while(1) {
    $61 = 1 << $62;
    $63 = $61 | $$0264330;
    $64 = ((($storemerge275329)) + 1|0);
    HEAP32[$7>>2] = $64;
    $65 = HEAP8[$64>>0]|0;
    $66 = $65 << 24 >> 24;
    $67 = (($66) + -32)|0;
    $68 = ($67>>>0)>(31);
    $69 = 1 << $67;
    $70 = $69 & 75913;
    $71 = ($70|0)==(0);
    $brmerge = $68 | $71;
    if ($brmerge) {
     $$0264$lcssa = $63;$$lcssa310 = $65;$storemerge275$lcssa = $64;
     break;
    } else {
     $$0264330 = $63;$62 = $67;$storemerge275329 = $64;
    }
   }
  }
  $72 = ($$lcssa310<<24>>24)==(42);
  if ($72) {
   $73 = ((($storemerge275$lcssa)) + 1|0);
   $74 = HEAP8[$73>>0]|0;
   $75 = $74 << 24 >> 24;
   $76 = (_isdigit($75)|0);
   $77 = ($76|0)==(0);
   if ($77) {
    label = 27;
   } else {
    $78 = HEAP32[$7>>2]|0;
    $79 = ((($78)) + 2|0);
    $80 = HEAP8[$79>>0]|0;
    $81 = ($80<<24>>24)==(36);
    if ($81) {
     $82 = ((($78)) + 1|0);
     $83 = HEAP8[$82>>0]|0;
     $84 = $83 << 24 >> 24;
     $85 = (($84) + -48)|0;
     $86 = (($4) + ($85<<2)|0);
     HEAP32[$86>>2] = 10;
     $87 = HEAP8[$82>>0]|0;
     $88 = $87 << 24 >> 24;
     $89 = (($88) + -48)|0;
     $90 = (($3) + ($89<<3)|0);
     $91 = $90;
     $92 = $91;
     $93 = HEAP32[$92>>2]|0;
     $94 = (($91) + 4)|0;
     $95 = $94;
     $96 = HEAP32[$95>>2]|0;
     $97 = ((($78)) + 3|0);
     $$0261 = $93;$$2273 = 1;$storemerge276 = $97;
    } else {
     label = 27;
    }
   }
   if ((label|0) == 27) {
    label = 0;
    $98 = ($$1272|0)==(0);
    if (!($98)) {
     $$0 = -1;
     break;
    }
    if ($12) {
     $arglist_current = HEAP32[$2>>2]|0;
     $99 = $arglist_current;
     $100 = ((0) + 4|0);
     $expanded4 = $100;
     $expanded = (($expanded4) - 1)|0;
     $101 = (($99) + ($expanded))|0;
     $102 = ((0) + 4|0);
     $expanded8 = $102;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $103 = $101 & $expanded6;
     $104 = $103;
     $105 = HEAP32[$104>>2]|0;
     $arglist_next = ((($104)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $367 = $105;
    } else {
     $367 = 0;
    }
    $106 = HEAP32[$7>>2]|0;
    $107 = ((($106)) + 1|0);
    $$0261 = $367;$$2273 = 0;$storemerge276 = $107;
   }
   HEAP32[$7>>2] = $storemerge276;
   $108 = ($$0261|0)<(0);
   $109 = $$0264$lcssa | 8192;
   $110 = (0 - ($$0261))|0;
   $spec$select293 = $108 ? $109 : $$0264$lcssa;
   $spec$select294 = $108 ? $110 : $$0261;
   $$1262 = $spec$select294;$$1265 = $spec$select293;$$3274 = $$2273;$114 = $storemerge276;
  } else {
   $111 = (_getint($7)|0);
   $112 = ($111|0)<(0);
   if ($112) {
    $$0 = -1;
    break;
   }
   $$pre364 = HEAP32[$7>>2]|0;
   $$1262 = $111;$$1265 = $$0264$lcssa;$$3274 = $$1272;$114 = $$pre364;
  }
  $113 = HEAP8[$114>>0]|0;
  $115 = ($113<<24>>24)==(46);
  do {
   if ($115) {
    $116 = ((($114)) + 1|0);
    $117 = HEAP8[$116>>0]|0;
    $118 = ($117<<24>>24)==(42);
    if (!($118)) {
     HEAP32[$7>>2] = $116;
     $154 = (_getint($7)|0);
     $$pre365$pre = HEAP32[$7>>2]|0;
     $$0256 = $154;$$pre365 = $$pre365$pre;
     break;
    }
    $119 = ((($114)) + 2|0);
    $120 = HEAP8[$119>>0]|0;
    $121 = $120 << 24 >> 24;
    $122 = (_isdigit($121)|0);
    $123 = ($122|0)==(0);
    if (!($123)) {
     $124 = HEAP32[$7>>2]|0;
     $125 = ((($124)) + 3|0);
     $126 = HEAP8[$125>>0]|0;
     $127 = ($126<<24>>24)==(36);
     if ($127) {
      $128 = ((($124)) + 2|0);
      $129 = HEAP8[$128>>0]|0;
      $130 = $129 << 24 >> 24;
      $131 = (($130) + -48)|0;
      $132 = (($4) + ($131<<2)|0);
      HEAP32[$132>>2] = 10;
      $133 = HEAP8[$128>>0]|0;
      $134 = $133 << 24 >> 24;
      $135 = (($134) + -48)|0;
      $136 = (($3) + ($135<<3)|0);
      $137 = $136;
      $138 = $137;
      $139 = HEAP32[$138>>2]|0;
      $140 = (($137) + 4)|0;
      $141 = $140;
      $142 = HEAP32[$141>>2]|0;
      $143 = ((($124)) + 4|0);
      HEAP32[$7>>2] = $143;
      $$0256 = $139;$$pre365 = $143;
      break;
     }
    }
    $144 = ($$3274|0)==(0);
    if (!($144)) {
     $$0 = -1;
     break L1;
    }
    if ($12) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $145 = $arglist_current2;
     $146 = ((0) + 4|0);
     $expanded11 = $146;
     $expanded10 = (($expanded11) - 1)|0;
     $147 = (($145) + ($expanded10))|0;
     $148 = ((0) + 4|0);
     $expanded15 = $148;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $149 = $147 & $expanded13;
     $150 = $149;
     $151 = HEAP32[$150>>2]|0;
     $arglist_next3 = ((($150)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $368 = $151;
    } else {
     $368 = 0;
    }
    $152 = HEAP32[$7>>2]|0;
    $153 = ((($152)) + 2|0);
    HEAP32[$7>>2] = $153;
    $$0256 = $368;$$pre365 = $153;
   } else {
    $$0256 = -1;$$pre365 = $114;
   }
  } while(0);
  $$0254 = 0;$156 = $$pre365;
  while(1) {
   $155 = HEAP8[$156>>0]|0;
   $157 = $155 << 24 >> 24;
   $158 = (($157) + -65)|0;
   $159 = ($158>>>0)>(57);
   if ($159) {
    $$0 = -1;
    break L1;
   }
   $160 = ((($156)) + 1|0);
   HEAP32[$7>>2] = $160;
   $161 = HEAP8[$156>>0]|0;
   $162 = $161 << 24 >> 24;
   $163 = (($162) + -65)|0;
   $164 = ((1760 + (($$0254*58)|0)|0) + ($163)|0);
   $165 = HEAP8[$164>>0]|0;
   $166 = $165&255;
   $167 = (($166) + -1)|0;
   $168 = ($167>>>0)<(8);
   if ($168) {
    $$0254 = $166;$156 = $160;
   } else {
    break;
   }
  }
  $169 = ($165<<24>>24)==(0);
  if ($169) {
   $$0 = -1;
   break;
  }
  $170 = ($165<<24>>24)==(19);
  $171 = ($$0255|0)>(-1);
  do {
   if ($170) {
    if ($171) {
     $$0 = -1;
     break L1;
    } else {
     label = 54;
    }
   } else {
    if ($171) {
     $172 = (($4) + ($$0255<<2)|0);
     HEAP32[$172>>2] = $166;
     $173 = (($3) + ($$0255<<3)|0);
     $174 = $173;
     $175 = $174;
     $176 = HEAP32[$175>>2]|0;
     $177 = (($174) + 4)|0;
     $178 = $177;
     $179 = HEAP32[$178>>2]|0;
     $180 = $8;
     $181 = $180;
     HEAP32[$181>>2] = $176;
     $182 = (($180) + 4)|0;
     $183 = $182;
     HEAP32[$183>>2] = $179;
     label = 54;
     break;
    }
    if (!($12)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($8,$166,$2,$6);
    $$pre366 = HEAP32[$7>>2]|0;
    $185 = $$pre366;
    label = 55;
   }
  } while(0);
  if ((label|0) == 54) {
   label = 0;
   if ($12) {
    $185 = $160;
    label = 55;
   } else {
    $$0245$ph$be = 0;
   }
  }
  L77: do {
   if ((label|0) == 55) {
    label = 0;
    $184 = ((($185)) + -1|0);
    $186 = HEAP8[$184>>0]|0;
    $187 = $186 << 24 >> 24;
    $188 = ($$0254|0)!=(0);
    $189 = $187 & 15;
    $190 = ($189|0)==(3);
    $or$cond278 = $188 & $190;
    $191 = $187 & -33;
    $$0237 = $or$cond278 ? $191 : $187;
    $192 = $$1265 & 8192;
    $193 = ($192|0)==(0);
    $194 = $$1265 & -65537;
    $spec$select = $193 ? $$1265 : $194;
    L79: do {
     switch ($$0237|0) {
     case 110:  {
      $trunc = $$0254&255;
      switch ($trunc<<24>>24) {
      case 0:  {
       $201 = HEAP32[$8>>2]|0;
       HEAP32[$201>>2] = $$1250;
       $$0245$ph$be = 0;
       break L77;
       break;
      }
      case 1:  {
       $202 = HEAP32[$8>>2]|0;
       HEAP32[$202>>2] = $$1250;
       $$0245$ph$be = 0;
       break L77;
       break;
      }
      case 2:  {
       $203 = ($$1250|0)<(0);
       $204 = $203 << 31 >> 31;
       $205 = HEAP32[$8>>2]|0;
       $206 = $205;
       $207 = $206;
       HEAP32[$207>>2] = $$1250;
       $208 = (($206) + 4)|0;
       $209 = $208;
       HEAP32[$209>>2] = $204;
       $$0245$ph$be = 0;
       break L77;
       break;
      }
      case 3:  {
       $210 = $$1250&65535;
       $211 = HEAP32[$8>>2]|0;
       HEAP16[$211>>1] = $210;
       $$0245$ph$be = 0;
       break L77;
       break;
      }
      case 4:  {
       $212 = $$1250&255;
       $213 = HEAP32[$8>>2]|0;
       HEAP8[$213>>0] = $212;
       $$0245$ph$be = 0;
       break L77;
       break;
      }
      case 6:  {
       $214 = HEAP32[$8>>2]|0;
       HEAP32[$214>>2] = $$1250;
       $$0245$ph$be = 0;
       break L77;
       break;
      }
      case 7:  {
       $215 = ($$1250|0)<(0);
       $216 = $215 << 31 >> 31;
       $217 = HEAP32[$8>>2]|0;
       $218 = $217;
       $219 = $218;
       HEAP32[$219>>2] = $$1250;
       $220 = (($218) + 4)|0;
       $221 = $220;
       HEAP32[$221>>2] = $216;
       $$0245$ph$be = 0;
       break L77;
       break;
      }
      default: {
       $$0245$ph$be = 0;
       break L77;
      }
      }
      break;
     }
     case 112:  {
      $222 = ($$0256>>>0)>(8);
      $223 = $222 ? $$0256 : 8;
      $224 = $spec$select | 8;
      $$1238 = 120;$$1257 = $223;$$3267 = $224;
      label = 67;
      break;
     }
     case 88: case 120:  {
      $$1238 = $$0237;$$1257 = $$0256;$$3267 = $spec$select;
      label = 67;
      break;
     }
     case 111:  {
      $246 = $8;
      $247 = $246;
      $248 = HEAP32[$247>>2]|0;
      $249 = (($246) + 4)|0;
      $250 = $249;
      $251 = HEAP32[$250>>2]|0;
      $252 = (_fmt_o($248,$251,$13)|0);
      $253 = $spec$select & 8;
      $254 = ($253|0)==(0);
      $255 = $252;
      $256 = (($14) - ($255))|0;
      $257 = ($$0256|0)>($256|0);
      $258 = (($256) + 1)|0;
      $259 = $254 | $257;
      $spec$select297 = $259 ? $$0256 : $258;
      $$0231 = $252;$$1235 = 0;$$1240 = 12084;$$2258 = $spec$select297;$$4268 = $spec$select;
      label = 73;
      break;
     }
     case 105: case 100:  {
      $260 = $8;
      $261 = $260;
      $262 = HEAP32[$261>>2]|0;
      $263 = (($260) + 4)|0;
      $264 = $263;
      $265 = HEAP32[$264>>2]|0;
      $266 = ($265|0)<(0);
      if ($266) {
       $267 = (_i64Subtract(0,0,($262|0),($265|0))|0);
       $268 = (getTempRet0() | 0);
       $269 = $8;
       $270 = $269;
       HEAP32[$270>>2] = $267;
       $271 = (($269) + 4)|0;
       $272 = $271;
       HEAP32[$272>>2] = $268;
       $$0234 = 1;$$0239 = 12084;$279 = $267;$280 = $268;
       label = 72;
       break L79;
      } else {
       $273 = $spec$select & 2048;
       $274 = ($273|0)==(0);
       $275 = $spec$select & 1;
       $276 = ($275|0)==(0);
       $$ = $276 ? 12084 : (12086);
       $spec$select298 = $274 ? $$ : (12085);
       $277 = $spec$select & 2049;
       $278 = ($277|0)!=(0);
       $spec$select299 = $278&1;
       $$0234 = $spec$select299;$$0239 = $spec$select298;$279 = $262;$280 = $265;
       label = 72;
       break L79;
      }
      break;
     }
     case 117:  {
      $195 = $8;
      $196 = $195;
      $197 = HEAP32[$196>>2]|0;
      $198 = (($195) + 4)|0;
      $199 = $198;
      $200 = HEAP32[$199>>2]|0;
      $$0234 = 0;$$0239 = 12084;$279 = $197;$280 = $200;
      label = 72;
      break;
     }
     case 99:  {
      $300 = $8;
      $301 = $300;
      $302 = HEAP32[$301>>2]|0;
      $303 = (($300) + 4)|0;
      $304 = $303;
      $305 = HEAP32[$304>>2]|0;
      $306 = $302&255;
      HEAP8[$15>>0] = $306;
      $$1 = $15;$$2236 = 0;$$2241 = 12084;$$5 = 1;$$6270 = $194;$$pre$phiZ2D = $14;
      break;
     }
     case 115:  {
      $307 = HEAP32[$8>>2]|0;
      $308 = ($307|0)==(0|0);
      $309 = $308 ? 12094 : $307;
      $310 = (_memchr($309,0,$$0256)|0);
      $311 = ($310|0)==(0|0);
      $312 = $310;
      $313 = $309;
      $314 = (($312) - ($313))|0;
      $315 = (($309) + ($$0256)|0);
      $$3259 = $311 ? $$0256 : $314;
      $$1252 = $311 ? $315 : $310;
      $$pre370 = $$1252;
      $$1 = $309;$$2236 = 0;$$2241 = 12084;$$5 = $$3259;$$6270 = $194;$$pre$phiZ2D = $$pre370;
      break;
     }
     case 67:  {
      $316 = $8;
      $317 = $316;
      $318 = HEAP32[$317>>2]|0;
      $319 = (($316) + 4)|0;
      $320 = $319;
      $321 = HEAP32[$320>>2]|0;
      HEAP32[$10>>2] = $318;
      HEAP32[$16>>2] = 0;
      HEAP32[$8>>2] = $10;
      $$4260372 = -1;
      label = 79;
      break;
     }
     case 83:  {
      $322 = ($$0256|0)==(0);
      if ($322) {
       _pad($0,32,$$1262,0,$spec$select);
       $$0242315373 = 0;
       label = 89;
      } else {
       $$4260372 = $$0256;
       label = 79;
      }
      break;
     }
     case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
      $345 = +HEAPF64[$8>>3];
      $346 = (FUNCTION_TABLE_iidiiii[$5 & 511]($0,$345,$$1262,$$0256,$spec$select,$$0237)|0);
      $$0245$ph$be = $346;
      break L77;
      break;
     }
     default: {
      $$1 = $22;$$2236 = 0;$$2241 = 12084;$$5 = $$0256;$$6270 = $spec$select;$$pre$phiZ2D = $14;
     }
     }
    } while(0);
    L102: do {
     if ((label|0) == 67) {
      label = 0;
      $225 = $8;
      $226 = $225;
      $227 = HEAP32[$226>>2]|0;
      $228 = (($225) + 4)|0;
      $229 = $228;
      $230 = HEAP32[$229>>2]|0;
      $231 = $$1238 & 32;
      $232 = (_fmt_x($227,$230,$13,$231)|0);
      $233 = $8;
      $234 = $233;
      $235 = HEAP32[$234>>2]|0;
      $236 = (($233) + 4)|0;
      $237 = $236;
      $238 = HEAP32[$237>>2]|0;
      $239 = ($235|0)==(0);
      $240 = ($238|0)==(0);
      $241 = $239 & $240;
      $242 = $$3267 & 8;
      $243 = ($242|0)==(0);
      $or$cond280 = $243 | $241;
      $244 = $$1238 >>> 4;
      $245 = (12084 + ($244)|0);
      $spec$select295 = $or$cond280 ? 12084 : $245;
      $spec$select296 = $or$cond280 ? 0 : 2;
      $$0231 = $232;$$1235 = $spec$select296;$$1240 = $spec$select295;$$2258 = $$1257;$$4268 = $$3267;
      label = 73;
     }
     else if ((label|0) == 72) {
      label = 0;
      $281 = (_fmt_u($279,$280,$13)|0);
      $$0231 = $281;$$1235 = $$0234;$$1240 = $$0239;$$2258 = $$0256;$$4268 = $spec$select;
      label = 73;
     }
     else if ((label|0) == 79) {
      label = 0;
      $323 = HEAP32[$8>>2]|0;
      $$0232336 = $323;$$0242335 = 0;
      while(1) {
       $324 = HEAP32[$$0232336>>2]|0;
       $325 = ($324|0)==(0);
       if ($325) {
        $$0242315 = $$0242335;
        break;
       }
       $326 = (_wctomb($11,$324)|0);
       $327 = ($326|0)<(0);
       $328 = (($$4260372) - ($$0242335))|0;
       $329 = ($326>>>0)>($328>>>0);
       $or$cond285 = $327 | $329;
       if ($or$cond285) {
        label = 83;
        break;
       }
       $330 = ((($$0232336)) + 4|0);
       $331 = (($326) + ($$0242335))|0;
       $332 = ($$4260372>>>0)>($331>>>0);
       if ($332) {
        $$0232336 = $330;$$0242335 = $331;
       } else {
        $$0242315 = $331;
        break;
       }
      }
      if ((label|0) == 83) {
       label = 0;
       if ($327) {
        $$0 = -1;
        break L1;
       } else {
        $$0242315 = $$0242335;
       }
      }
      _pad($0,32,$$1262,$$0242315,$spec$select);
      $333 = ($$0242315|0)==(0);
      if ($333) {
       $$0242315373 = 0;
       label = 89;
      } else {
       $334 = HEAP32[$8>>2]|0;
       $$1233342 = $334;$$1243341 = 0;
       while(1) {
        $335 = HEAP32[$$1233342>>2]|0;
        $336 = ($335|0)==(0);
        if ($336) {
         $$0242315373 = $$0242315;
         label = 89;
         break L102;
        }
        $337 = (_wctomb($11,$335)|0);
        $338 = (($337) + ($$1243341))|0;
        $339 = ($338|0)>($$0242315|0);
        if ($339) {
         $$0242315373 = $$0242315;
         label = 89;
         break L102;
        }
        $340 = ((($$1233342)) + 4|0);
        _out($0,$11,$337);
        $341 = ($338>>>0)<($$0242315>>>0);
        if ($341) {
         $$1233342 = $340;$$1243341 = $338;
        } else {
         $$0242315373 = $$0242315;
         label = 89;
         break;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 73) {
     label = 0;
     $282 = ($$2258|0)>(-1);
     $283 = $$4268 & -65537;
     $spec$select283 = $282 ? $283 : $$4268;
     $284 = $8;
     $285 = $284;
     $286 = HEAP32[$285>>2]|0;
     $287 = (($284) + 4)|0;
     $288 = $287;
     $289 = HEAP32[$288>>2]|0;
     $290 = ($286|0)!=(0);
     $291 = ($289|0)!=(0);
     $292 = $290 | $291;
     $293 = ($$2258|0)!=(0);
     $or$cond = $293 | $292;
     $294 = $$0231;
     $295 = (($14) - ($294))|0;
     $296 = $292 ^ 1;
     $297 = $296&1;
     $298 = (($295) + ($297))|0;
     $299 = ($$2258|0)>($298|0);
     $$2258$ = $299 ? $$2258 : $298;
     $spec$select300 = $or$cond ? $$2258$ : 0;
     $spec$select301 = $or$cond ? $$0231 : $13;
     $$1 = $spec$select301;$$2236 = $$1235;$$2241 = $$1240;$$5 = $spec$select300;$$6270 = $spec$select283;$$pre$phiZ2D = $14;
    }
    else if ((label|0) == 89) {
     label = 0;
     $342 = $spec$select ^ 8192;
     _pad($0,32,$$1262,$$0242315373,$342);
     $343 = ($$1262|0)>($$0242315373|0);
     $344 = $343 ? $$1262 : $$0242315373;
     $$0245$ph$be = $344;
     break;
    }
    $347 = $$1;
    $348 = (($$pre$phiZ2D) - ($347))|0;
    $349 = ($$5|0)<($348|0);
    $spec$select286 = $349 ? $348 : $$5;
    $350 = (($spec$select286) + ($$2236))|0;
    $351 = ($$1262|0)<($350|0);
    $$2263 = $351 ? $350 : $$1262;
    _pad($0,32,$$2263,$350,$$6270);
    _out($0,$$2241,$$2236);
    $352 = $$6270 ^ 65536;
    _pad($0,48,$$2263,$350,$352);
    _pad($0,48,$spec$select286,$348,0);
    _out($0,$$1,$348);
    $353 = $$6270 ^ 8192;
    _pad($0,32,$$2263,$350,$353);
    $$0245$ph$be = $$2263;
   }
  } while(0);
  $$0245$ph = $$0245$ph$be;$$0249$ph = $$1250;$$0271$ph = $$3274;
 }
 L123: do {
  if ((label|0) == 92) {
   $354 = ($0|0)==(0|0);
   if ($354) {
    $355 = ($$0271$ph|0)==(0);
    if ($355) {
     $$0 = 0;
    } else {
     $$2244322 = 1;
     while(1) {
      $356 = (($4) + ($$2244322<<2)|0);
      $357 = HEAP32[$356>>2]|0;
      $358 = ($357|0)==(0);
      if ($358) {
       break;
      }
      $359 = (($3) + ($$2244322<<3)|0);
      _pop_arg($359,$357,$2,$6);
      $360 = (($$2244322) + 1)|0;
      $361 = ($360>>>0)<(10);
      if ($361) {
       $$2244322 = $360;
      } else {
       $$0 = 1;
       break L123;
      }
     }
     $$3319 = $$2244322;
     while(1) {
      $364 = (($4) + ($$3319<<2)|0);
      $365 = HEAP32[$364>>2]|0;
      $366 = ($365|0)==(0);
      $363 = (($$3319) + 1)|0;
      if (!($366)) {
       $$0 = -1;
       break L123;
      }
      $362 = ($363>>>0)<(10);
      if ($362) {
       $$3319 = $363;
      } else {
       $$0 = 1;
       break;
      }
     }
    }
   } else {
    $$0 = $$1250;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _out($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 32;
 $5 = ($4|0)==(0);
 if ($5) {
  (___fwritex($1,$2,$0)|0);
 }
 return;
}
function _isdigit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -48)|0;
 $2 = ($1>>>0)<(10);
 $3 = $2&1;
 return ($3|0);
}
function _getint($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$04 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (_isdigit($3)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $$0$lcssa = 0;
 } else {
  $$04 = 0;
  while(1) {
   $6 = ($$04*10)|0;
   $7 = HEAP32[$0>>2]|0;
   $8 = HEAP8[$7>>0]|0;
   $9 = $8 << 24 >> 24;
   $10 = (($6) + -48)|0;
   $11 = (($10) + ($9))|0;
   $12 = ((($7)) + 1|0);
   HEAP32[$0>>2] = $12;
   $13 = HEAP8[$12>>0]|0;
   $14 = $13 << 24 >> 24;
   $15 = (_isdigit($14)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $$0$lcssa = $11;
    break;
   } else {
    $$04 = $11;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _pop_arg($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0;
 var $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded25 = 0, $expanded27 = 0, $expanded28 = 0, $expanded29 = 0, $expanded31 = 0, $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded36 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0;
 var $expanded42 = 0, $expanded43 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded50 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded57 = 0, $expanded59 = 0, $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded64 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0;
 var $expanded70 = 0, $expanded71 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded78 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded85 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($1>>>0)>(20);
 L1: do {
  if (!($4)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $5 = $arglist_current;
     $6 = ((0) + 4|0);
     $expanded25 = $6;
     $expanded = (($expanded25) - 1)|0;
     $7 = (($5) + ($expanded))|0;
     $8 = ((0) + 4|0);
     $expanded29 = $8;
     $expanded28 = (($expanded29) - 1)|0;
     $expanded27 = $expanded28 ^ -1;
     $9 = $7 & $expanded27;
     $10 = $9;
     $11 = HEAP32[$10>>2]|0;
     $arglist_next = ((($10)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $11;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $12 = $arglist_current2;
     $13 = ((0) + 4|0);
     $expanded32 = $13;
     $expanded31 = (($expanded32) - 1)|0;
     $14 = (($12) + ($expanded31))|0;
     $15 = ((0) + 4|0);
     $expanded36 = $15;
     $expanded35 = (($expanded36) - 1)|0;
     $expanded34 = $expanded35 ^ -1;
     $16 = $14 & $expanded34;
     $17 = $16;
     $18 = HEAP32[$17>>2]|0;
     $arglist_next3 = ((($17)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $19 = ($18|0)<(0);
     $20 = $19 << 31 >> 31;
     $21 = $0;
     $22 = $21;
     HEAP32[$22>>2] = $18;
     $23 = (($21) + 4)|0;
     $24 = $23;
     HEAP32[$24>>2] = $20;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $25 = $arglist_current5;
     $26 = ((0) + 4|0);
     $expanded39 = $26;
     $expanded38 = (($expanded39) - 1)|0;
     $27 = (($25) + ($expanded38))|0;
     $28 = ((0) + 4|0);
     $expanded43 = $28;
     $expanded42 = (($expanded43) - 1)|0;
     $expanded41 = $expanded42 ^ -1;
     $29 = $27 & $expanded41;
     $30 = $29;
     $31 = HEAP32[$30>>2]|0;
     $arglist_next6 = ((($30)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $32 = $0;
     $33 = $32;
     HEAP32[$33>>2] = $31;
     $34 = (($32) + 4)|0;
     $35 = $34;
     HEAP32[$35>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $36 = $arglist_current8;
     $37 = ((0) + 8|0);
     $expanded46 = $37;
     $expanded45 = (($expanded46) - 1)|0;
     $38 = (($36) + ($expanded45))|0;
     $39 = ((0) + 8|0);
     $expanded50 = $39;
     $expanded49 = (($expanded50) - 1)|0;
     $expanded48 = $expanded49 ^ -1;
     $40 = $38 & $expanded48;
     $41 = $40;
     $42 = $41;
     $43 = $42;
     $44 = HEAP32[$43>>2]|0;
     $45 = (($42) + 4)|0;
     $46 = $45;
     $47 = HEAP32[$46>>2]|0;
     $arglist_next9 = ((($41)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $48 = $0;
     $49 = $48;
     HEAP32[$49>>2] = $44;
     $50 = (($48) + 4)|0;
     $51 = $50;
     HEAP32[$51>>2] = $47;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $52 = $arglist_current11;
     $53 = ((0) + 4|0);
     $expanded53 = $53;
     $expanded52 = (($expanded53) - 1)|0;
     $54 = (($52) + ($expanded52))|0;
     $55 = ((0) + 4|0);
     $expanded57 = $55;
     $expanded56 = (($expanded57) - 1)|0;
     $expanded55 = $expanded56 ^ -1;
     $56 = $54 & $expanded55;
     $57 = $56;
     $58 = HEAP32[$57>>2]|0;
     $arglist_next12 = ((($57)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $59 = $58&65535;
     $60 = $59 << 16 >> 16;
     $61 = ($60|0)<(0);
     $62 = $61 << 31 >> 31;
     $63 = $0;
     $64 = $63;
     HEAP32[$64>>2] = $60;
     $65 = (($63) + 4)|0;
     $66 = $65;
     HEAP32[$66>>2] = $62;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $67 = $arglist_current14;
     $68 = ((0) + 4|0);
     $expanded60 = $68;
     $expanded59 = (($expanded60) - 1)|0;
     $69 = (($67) + ($expanded59))|0;
     $70 = ((0) + 4|0);
     $expanded64 = $70;
     $expanded63 = (($expanded64) - 1)|0;
     $expanded62 = $expanded63 ^ -1;
     $71 = $69 & $expanded62;
     $72 = $71;
     $73 = HEAP32[$72>>2]|0;
     $arglist_next15 = ((($72)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $73 & 65535;
     $74 = $0;
     $75 = $74;
     HEAP32[$75>>2] = $$mask31;
     $76 = (($74) + 4)|0;
     $77 = $76;
     HEAP32[$77>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $78 = $arglist_current17;
     $79 = ((0) + 4|0);
     $expanded67 = $79;
     $expanded66 = (($expanded67) - 1)|0;
     $80 = (($78) + ($expanded66))|0;
     $81 = ((0) + 4|0);
     $expanded71 = $81;
     $expanded70 = (($expanded71) - 1)|0;
     $expanded69 = $expanded70 ^ -1;
     $82 = $80 & $expanded69;
     $83 = $82;
     $84 = HEAP32[$83>>2]|0;
     $arglist_next18 = ((($83)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $85 = $84&255;
     $86 = $85 << 24 >> 24;
     $87 = ($86|0)<(0);
     $88 = $87 << 31 >> 31;
     $89 = $0;
     $90 = $89;
     HEAP32[$90>>2] = $86;
     $91 = (($89) + 4)|0;
     $92 = $91;
     HEAP32[$92>>2] = $88;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $93 = $arglist_current20;
     $94 = ((0) + 4|0);
     $expanded74 = $94;
     $expanded73 = (($expanded74) - 1)|0;
     $95 = (($93) + ($expanded73))|0;
     $96 = ((0) + 4|0);
     $expanded78 = $96;
     $expanded77 = (($expanded78) - 1)|0;
     $expanded76 = $expanded77 ^ -1;
     $97 = $95 & $expanded76;
     $98 = $97;
     $99 = HEAP32[$98>>2]|0;
     $arglist_next21 = ((($98)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $99 & 255;
     $100 = $0;
     $101 = $100;
     HEAP32[$101>>2] = $$mask;
     $102 = (($100) + 4)|0;
     $103 = $102;
     HEAP32[$103>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $104 = $arglist_current23;
     $105 = ((0) + 8|0);
     $expanded81 = $105;
     $expanded80 = (($expanded81) - 1)|0;
     $106 = (($104) + ($expanded80))|0;
     $107 = ((0) + 8|0);
     $expanded85 = $107;
     $expanded84 = (($expanded85) - 1)|0;
     $expanded83 = $expanded84 ^ -1;
     $108 = $106 & $expanded83;
     $109 = $108;
     $110 = +HEAPF64[$109>>3];
     $arglist_next24 = ((($109)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $110;
     break L1;
     break;
    }
    case 18:  {
     FUNCTION_TABLE_vii[$3 & 511]($0,$2);
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$05$lcssa = 0, $$056 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0);
 $5 = ($1|0)==(0);
 $6 = $4 & $5;
 if ($6) {
  $$05$lcssa = $2;
 } else {
  $$056 = $2;$15 = $1;$8 = $0;
  while(1) {
   $7 = $8 & 15;
   $9 = (2224 + ($7)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = $11 | $3;
   $13 = $12&255;
   $14 = ((($$056)) + -1|0);
   HEAP8[$14>>0] = $13;
   $16 = (_bitshift64Lshr(($8|0),($15|0),4)|0);
   $17 = (getTempRet0() | 0);
   $18 = ($16|0)==(0);
   $19 = ($17|0)==(0);
   $20 = $18 & $19;
   if ($20) {
    $$05$lcssa = $14;
    break;
   } else {
    $$056 = $14;$15 = $17;$8 = $16;
   }
  }
 }
 return ($$05$lcssa|0);
}
function _fmt_o($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0);
 $4 = ($1|0)==(0);
 $5 = $3 & $4;
 if ($5) {
  $$0$lcssa = $2;
 } else {
  $$06 = $2;$11 = $1;$7 = $0;
  while(1) {
   $6 = $7&255;
   $8 = $6 & 7;
   $9 = $8 | 48;
   $10 = ((($$06)) + -1|0);
   HEAP8[$10>>0] = $9;
   $12 = (_bitshift64Lshr(($7|0),($11|0),3)|0);
   $13 = (getTempRet0() | 0);
   $14 = ($12|0)==(0);
   $15 = ($13|0)==(0);
   $16 = $14 & $15;
   if ($16) {
    $$0$lcssa = $10;
    break;
   } else {
    $$06 = $10;$11 = $13;$7 = $12;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $11 = (getTempRet0() | 0);
   $12 = (___muldi3(($10|0),($11|0),10,0)|0);
   $13 = (getTempRet0() | 0);
   $14 = (_i64Subtract(($8|0),($9|0),($12|0),($13|0))|0);
   $15 = (getTempRet0() | 0);
   $16 = $14&255;
   $17 = $16 | 48;
   $18 = ((($$0914)) + -1|0);
   HEAP8[$18>>0] = $17;
   $19 = ($9>>>0)>(9);
   $20 = ($8>>>0)>(4294967295);
   $21 = ($9|0)==(9);
   $22 = $21 & $20;
   $23 = $19 | $22;
   if ($23) {
    $$0914 = $18;$8 = $10;$9 = $11;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $10;$$09$lcssa = $18;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $24 = ($$010$lcssa$off0|0)==(0);
 if ($24) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $25 = (($$012>>>0) / 10)&-1;
   $26 = ($25*10)|0;
   $27 = (($$012) - ($26))|0;
   $28 = $27 | 48;
   $29 = $28&255;
   $30 = ((($$111)) + -1|0);
   HEAP8[$30>>0] = $29;
   $31 = ($$012>>>0)<(10);
   if ($31) {
    $$1$lcssa = $30;
    break;
   } else {
    $$012 = $25;$$111 = $30;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _pad($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 if ($or$cond) {
  $9 = (($2) - ($3))|0;
  $10 = $1 << 24 >> 24;
  $11 = ($9>>>0)<(256);
  $12 = $11 ? $9 : 256;
  (_memset(($5|0),($10|0),($12|0))|0);
  $13 = ($9>>>0)>(255);
  if ($13) {
   $14 = (($2) - ($3))|0;
   $$011 = $9;
   while(1) {
    _out($0,$5,256);
    $15 = (($$011) + -256)|0;
    $16 = ($15>>>0)>(255);
    if ($16) {
     $$011 = $15;
    } else {
     break;
    }
   }
   $17 = $14 & 255;
   $$0$lcssa = $17;
  } else {
   $$0$lcssa = $9;
  }
  _out($0,$5,$$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = (___pthread_self_340()|0);
   $7 = ((($6)) + 188|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = $1 & -128;
    $12 = ($11|0)==(57216);
    if ($12) {
     $14 = $1&255;
     HEAP8[$0>>0] = $14;
     $$0 = 1;
     break;
    } else {
     $13 = (___errno_location()|0);
     HEAP32[$13>>2] = 84;
     $$0 = -1;
     break;
    }
   }
   $15 = ($1>>>0)<(2048);
   if ($15) {
    $16 = $1 >>> 6;
    $17 = $16 | 192;
    $18 = $17&255;
    $19 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $18;
    $20 = $1 & 63;
    $21 = $20 | 128;
    $22 = $21&255;
    HEAP8[$19>>0] = $22;
    $$0 = 2;
    break;
   }
   $23 = ($1>>>0)<(55296);
   $24 = $1 & -8192;
   $25 = ($24|0)==(57344);
   $or$cond = $23 | $25;
   if ($or$cond) {
    $26 = $1 >>> 12;
    $27 = $26 | 224;
    $28 = $27&255;
    $29 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $28;
    $30 = $1 >>> 6;
    $31 = $30 & 63;
    $32 = $31 | 128;
    $33 = $32&255;
    $34 = ((($0)) + 2|0);
    HEAP8[$29>>0] = $33;
    $35 = $1 & 63;
    $36 = $35 | 128;
    $37 = $36&255;
    HEAP8[$34>>0] = $37;
    $$0 = 3;
    break;
   }
   $38 = (($1) + -65536)|0;
   $39 = ($38>>>0)<(1048576);
   if ($39) {
    $40 = $1 >>> 18;
    $41 = $40 | 240;
    $42 = $41&255;
    $43 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $42;
    $44 = $1 >>> 12;
    $45 = $44 & 63;
    $46 = $45 | 128;
    $47 = $46&255;
    $48 = ((($0)) + 2|0);
    HEAP8[$43>>0] = $47;
    $49 = $1 >>> 6;
    $50 = $49 & 63;
    $51 = $50 | 128;
    $52 = $51&255;
    $53 = ((($0)) + 3|0);
    HEAP8[$48>>0] = $52;
    $54 = $1 & 63;
    $55 = $54 | 128;
    $56 = $55&255;
    HEAP8[$53>>0] = $56;
    $$0 = 4;
    break;
   } else {
    $57 = (___errno_location()|0);
    HEAP32[$57>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___pthread_self_340() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$03846 = 0, $$042 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $$pre = 0, $$pre48 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$1 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 511]($2,$0,$1)|0);
    $$1 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)<(0);
   $21 = ($1|0)==(0);
   $or$cond = $20 | $21;
   L10: do {
    if ($or$cond) {
     $$139 = 0;$$141 = $0;$$143 = $1;$32 = $14;
    } else {
     $$03846 = $1;
     while(1) {
      $23 = (($$03846) + -1)|0;
      $24 = (($0) + ($23)|0);
      $25 = HEAP8[$24>>0]|0;
      $26 = ($25<<24>>24)==(10);
      if ($26) {
       break;
      }
      $22 = ($23|0)==(0);
      if ($22) {
       $$139 = 0;$$141 = $0;$$143 = $1;$32 = $14;
       break L10;
      } else {
       $$03846 = $23;
      }
     }
     $27 = ((($2)) + 36|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = (FUNCTION_TABLE_iiii[$28 & 511]($2,$0,$$03846)|0);
     $30 = ($29>>>0)<($$03846>>>0);
     if ($30) {
      $$1 = $29;
      break L5;
     }
     $31 = (($0) + ($$03846)|0);
     $$042 = (($1) - ($$03846))|0;
     $$pre48 = HEAP32[$9>>2]|0;
     $$139 = $$03846;$$141 = $31;$$143 = $$042;$32 = $$pre48;
    }
   } while(0);
   (_memcpy(($32|0),($$141|0),($$143|0))|0);
   $33 = HEAP32[$9>>2]|0;
   $34 = (($33) + ($$143)|0);
   HEAP32[$9>>2] = $34;
   $35 = (($$139) + ($$143))|0;
   $$1 = $35;
  }
 } while(0);
 return ($$1|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = $14;
  $18 = ((($0)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + ($19)|0);
  $21 = ((($0)) + 16|0);
  HEAP32[$21>>2] = $20;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___DOUBLE_BITS_181($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 setTempRet0(($2) | 0);
 return ($1|0);
}
function _sn_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$cast = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ($7>>>0)>($2>>>0);
 $spec$select = $8 ? $2 : $7;
 $$cast = $6;
 (_memcpy(($$cast|0),($1|0),($spec$select|0))|0);
 $9 = HEAP32[$5>>2]|0;
 $10 = (($9) + ($spec$select)|0);
 HEAP32[$5>>2] = $10;
 return ($2|0);
}
function _strncmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$01823 = 0, $$01925 = 0, $$01925$in = 0, $$020 = 0, $$024 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $$020 = 0;
 } else {
  $4 = HEAP8[$0>>0]|0;
  $5 = ($4<<24>>24)==(0);
  L3: do {
   if ($5) {
    $$0$lcssa = $1;$$lcssa = 0;
   } else {
    $$01823 = $0;$$01925$in = $2;$$024 = $1;$10 = $4;
    while(1) {
     $$01925 = (($$01925$in) + -1)|0;
     $6 = HEAP8[$$024>>0]|0;
     $7 = ($6<<24>>24)!=(0);
     $8 = ($$01925|0)!=(0);
     $or$cond = $8 & $7;
     $9 = ($10<<24>>24)==($6<<24>>24);
     $or$cond21 = $9 & $or$cond;
     if (!($or$cond21)) {
      $$0$lcssa = $$024;$$lcssa = $10;
      break L3;
     }
     $11 = ((($$01823)) + 1|0);
     $12 = ((($$024)) + 1|0);
     $13 = HEAP8[$11>>0]|0;
     $14 = ($13<<24>>24)==(0);
     if ($14) {
      $$0$lcssa = $12;$$lcssa = 0;
      break;
     } else {
      $$01823 = $11;$$01925$in = $$01925;$$024 = $12;$10 = $13;
     }
    }
   }
  } while(0);
  $15 = $$lcssa&255;
  $16 = HEAP8[$$0$lcssa>>0]|0;
  $17 = $16&255;
  $18 = (($15) - ($17))|0;
  $$020 = $18;
 }
 return ($$020|0);
}
function _vfscanf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0266$lcssa = 0, $$0266407 = 0, $$0268 = 0, $$0270 = 0, $$0272 = 0, $$0273418 = 0, $$0276$ph$ph = 0, $$0280$ph = 0, $$0280$ph$ph = 0, $$0288409 = 0, $$0290414 = 0, $$0294 = 0, $$0295 = 0, $$0308412 = 0, $$10 = 0, $$10318 = 0, $$11 = 0, $$12 = 0, $$1267 = 0, $$1271 = 0;
 var $$1274 = 0, $$1281 = 0, $$1291 = 0, $$1309 = 0, $$2 = 0, $$2275 = 0, $$2278$ph = 0, $$2282 = 0, $$2282$ph = 0, $$2292 = 0, $$2310$ph = 0, $$3$lcssa = 0, $$3283 = 0, $$3293 = 0, $$3406 = 0, $$4 = 0, $$4284 = 0, $$5 = 0, $$5313 = 0, $$6 = 0;
 var $$6302 = 0, $$6314 = 0, $$7 = 0, $$7315 = 0, $$8 = 0, $$8316 = 0, $$9 = 0, $$9317 = 0, $$not = 0, $$old4 = 0, $$ph$ph = 0, $$pr = 0, $$pr332 = 0, $$pre = 0, $$pre$phi491Z2D = 0, $$pre$phiZ2D = 0, $$pre483 = 0, $$pre485 = 0, $$pre486 = 0, $$pre488 = 0;
 var $$pre490 = 0, $$sroa$2$0$$sroa_idx13 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0.0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0.0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0;
 var $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $factor = 0, $factor334 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond321 = 0, $or$cond5 = 0, $spec$select = 0, $spec$select319 = 0, $spec$select320 = 0, $spec$select322 = 0, $spec$select323 = 0, $spec$select324 = 0, $spec$select325 = 0, $spec$select326 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $3 = sp + 264|0;
 $4 = sp;
 $5 = sp + 260|0;
 $6 = sp + 272|0;
 $7 = ((($0)) + 76|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(-1);
 if ($9) {
  $10 = (___lockfile($0)|0);
  $386 = $10;
 } else {
  $386 = 0;
 }
 $11 = HEAP8[$1>>0]|0;
 $12 = ($11<<24>>24)==(0);
 L4: do {
  if ($12) {
   $$3293 = 0;
  } else {
   $13 = ((($0)) + 4|0);
   $14 = ((($0)) + 104|0);
   $15 = ((($0)) + 120|0);
   $16 = ((($0)) + 8|0);
   $17 = ((($4)) + 10|0);
   $18 = ((($4)) + 33|0);
   $19 = ((($4)) + 46|0);
   $20 = ((($4)) + 94|0);
   $$sroa$2$0$$sroa_idx13 = ((($3)) + 4|0);
   $$0273418 = $1;$$0290414 = 0;$$0308412 = 0;$22 = $11;$387 = 0;$56 = 0;$57 = 0;
   L6: while(1) {
    $21 = $22&255;
    $23 = (_isspace($21)|0);
    $24 = ($23|0)==(0);
    L8: do {
     if ($24) {
      $62 = HEAP8[$$0273418>>0]|0;
      $63 = ($62<<24>>24)==(37);
      L10: do {
       if ($63) {
        $64 = ((($$0273418)) + 1|0);
        $65 = HEAP8[$64>>0]|0;
        L12: do {
         switch ($65<<24>>24) {
         case 37:  {
          break L10;
          break;
         }
         case 42:  {
          $87 = ((($$0273418)) + 2|0);
          $$0295 = 0;$$2275 = $87;
          break;
         }
         default: {
          $88 = $65&255;
          $89 = (_isdigit($88)|0);
          $90 = ($89|0)==(0);
          if (!($90)) {
           $91 = ((($$0273418)) + 2|0);
           $92 = HEAP8[$91>>0]|0;
           $93 = ($92<<24>>24)==(36);
           if ($93) {
            $94 = HEAP8[$64>>0]|0;
            $95 = $94&255;
            $96 = (($95) + -48)|0;
            $97 = (_arg_n_202($2,$96)|0);
            $98 = ((($$0273418)) + 3|0);
            $$0295 = $97;$$2275 = $98;
            break L12;
           }
          }
          $arglist_current = HEAP32[$2>>2]|0;
          $99 = $arglist_current;
          $100 = ((0) + 4|0);
          $expanded1 = $100;
          $expanded = (($expanded1) - 1)|0;
          $101 = (($99) + ($expanded))|0;
          $102 = ((0) + 4|0);
          $expanded5 = $102;
          $expanded4 = (($expanded5) - 1)|0;
          $expanded3 = $expanded4 ^ -1;
          $103 = $101 & $expanded3;
          $104 = $103;
          $105 = HEAP32[$104>>2]|0;
          $arglist_next = ((($104)) + 4|0);
          HEAP32[$2>>2] = $arglist_next;
          $$0295 = $105;$$2275 = $64;
         }
         }
        } while(0);
        $106 = HEAP8[$$2275>>0]|0;
        $107 = $106&255;
        $108 = (_isdigit($107)|0);
        $109 = ($108|0)==(0);
        if ($109) {
         $$0266$lcssa = 0;$$3$lcssa = $$2275;
        } else {
         $$0266407 = 0;$$3406 = $$2275;
         while(1) {
          $110 = ($$0266407*10)|0;
          $111 = HEAP8[$$3406>>0]|0;
          $112 = $111&255;
          $113 = (($110) + -48)|0;
          $114 = (($113) + ($112))|0;
          $115 = ((($$3406)) + 1|0);
          $116 = HEAP8[$115>>0]|0;
          $117 = $116&255;
          $118 = (_isdigit($117)|0);
          $119 = ($118|0)==(0);
          if ($119) {
           $$0266$lcssa = $114;$$3$lcssa = $115;
           break;
          } else {
           $$0266407 = $114;$$3406 = $115;
          }
         }
        }
        $120 = HEAP8[$$3$lcssa>>0]|0;
        $121 = ($120<<24>>24)==(109);
        $122 = ((($$3$lcssa)) + 1|0);
        if ($121) {
         $123 = ($$0295|0)!=(0|0);
         $124 = $123&1;
         $$pr = HEAP8[$122>>0]|0;
         $$pre486 = ((($$3$lcssa)) + 2|0);
         $$0270 = $124;$$1309 = 0;$$4 = $122;$$pre$phiZ2D = $$pre486;$125 = $$pr;$392 = 0;
        } else {
         $$0270 = 0;$$1309 = $$0308412;$$4 = $$3$lcssa;$$pre$phiZ2D = $122;$125 = $120;$392 = $387;
        }
        switch ($125<<24>>24) {
        case 104:  {
         $126 = HEAP8[$$pre$phiZ2D>>0]|0;
         $127 = ($126<<24>>24)==(104);
         $128 = ((($$4)) + 2|0);
         $spec$select323 = $127 ? $128 : $$pre$phiZ2D;
         $spec$select324 = $127 ? -2 : -1;
         $$0268 = $spec$select324;$$5 = $spec$select323;
         break;
        }
        case 108:  {
         $129 = HEAP8[$$pre$phiZ2D>>0]|0;
         $130 = ($129<<24>>24)==(108);
         $131 = ((($$4)) + 2|0);
         $spec$select325 = $130 ? $131 : $$pre$phiZ2D;
         $spec$select326 = $130 ? 3 : 1;
         $$0268 = $spec$select326;$$5 = $spec$select325;
         break;
        }
        case 106:  {
         $$0268 = 3;$$5 = $$pre$phiZ2D;
         break;
        }
        case 116: case 122:  {
         $$0268 = 1;$$5 = $$pre$phiZ2D;
         break;
        }
        case 76:  {
         $$0268 = 2;$$5 = $$pre$phiZ2D;
         break;
        }
        case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
         $$0268 = 0;$$5 = $$4;
         break;
        }
        default: {
         $$8316 = $$1309;$393 = $392;
         label = 143;
         break L6;
        }
        }
        $132 = HEAP8[$$5>>0]|0;
        $133 = $132&255;
        $134 = $133 & 47;
        $135 = ($134|0)==(3);
        $136 = $133 | 32;
        $spec$select = $135 ? $136 : $133;
        $spec$select319 = $135 ? 1 : $$0268;
        $trunc = $spec$select&255;
        switch ($trunc<<24>>24) {
        case 99:  {
         $137 = ($$0266$lcssa|0)>(1);
         $spec$select320 = $137 ? $$0266$lcssa : 1;
         $$1267 = $spec$select320;$372 = $56;$373 = $57;
         break;
        }
        case 91:  {
         $$1267 = $$0266$lcssa;$372 = $56;$373 = $57;
         break;
        }
        case 110:  {
         _store_int_203($$0295,$spec$select319,$56,$57);
         $$12 = $$5;$$1291 = $$0290414;$$7315 = $$1309;$388 = $392;$389 = $56;$390 = $57;
         break L8;
         break;
        }
        default: {
         ___shlim($0,0,0);
         while(1) {
          $138 = HEAP32[$13>>2]|0;
          $139 = HEAP32[$14>>2]|0;
          $140 = ($138>>>0)<($139>>>0);
          if ($140) {
           $141 = ((($138)) + 1|0);
           HEAP32[$13>>2] = $141;
           $142 = HEAP8[$138>>0]|0;
           $143 = $142&255;
           $145 = $143;
          } else {
           $144 = (___shgetc($0)|0);
           $145 = $144;
          }
          $146 = (_isspace($145)|0);
          $147 = ($146|0)==(0);
          if ($147) {
           break;
          }
         }
         $148 = HEAP32[$14>>2]|0;
         $149 = ($148|0)==(0|0);
         if ($149) {
          $$pre483 = HEAP32[$13>>2]|0;
          $161 = $$pre483;
         } else {
          $150 = HEAP32[$13>>2]|0;
          $151 = ((($150)) + -1|0);
          HEAP32[$13>>2] = $151;
          $152 = $151;
          $161 = $152;
         }
         $153 = $15;
         $154 = $153;
         $155 = HEAP32[$154>>2]|0;
         $156 = (($153) + 4)|0;
         $157 = $156;
         $158 = HEAP32[$157>>2]|0;
         $159 = HEAP32[$16>>2]|0;
         $160 = (($161) - ($159))|0;
         $162 = ($160|0)<(0);
         $163 = $162 << 31 >> 31;
         $164 = (_i64Add(($155|0),($158|0),($56|0),($57|0))|0);
         $165 = (getTempRet0() | 0);
         $166 = (_i64Add(($164|0),($165|0),($160|0),($163|0))|0);
         $167 = (getTempRet0() | 0);
         $$1267 = $$0266$lcssa;$372 = $166;$373 = $167;
        }
        }
        $168 = ($$1267|0)<(0);
        $169 = $168 << 31 >> 31;
        ___shlim($0,$$1267,$169);
        $170 = HEAP32[$13>>2]|0;
        $171 = HEAP32[$14>>2]|0;
        $172 = ($170>>>0)<($171>>>0);
        if ($172) {
         $173 = ((($170)) + 1|0);
         HEAP32[$13>>2] = $173;
         $177 = $171;
        } else {
         $174 = (___shgetc($0)|0);
         $175 = ($174|0)<(0);
         if ($175) {
          $$8316 = $$1309;$393 = $392;
          label = 143;
          break L6;
         }
         $$pr332 = HEAP32[$14>>2]|0;
         $177 = $$pr332;
        }
        $176 = ($177|0)==(0|0);
        if (!($176)) {
         $178 = HEAP32[$13>>2]|0;
         $179 = ((($178)) + -1|0);
         HEAP32[$13>>2] = $179;
        }
        L59: do {
         switch ($trunc<<24>>24) {
         case 91: case 99: case 115:  {
          $180 = ($spec$select|0)==(99);
          $181 = $spec$select | 16;
          $182 = ($181|0)==(115);
          L61: do {
           if ($182) {
            $183 = ($spec$select|0)==(115);
            (_memset(($4|0),-1,257)|0);
            HEAP8[$4>>0] = 0;
            if ($183) {
             HEAP8[$18>>0] = 0;
             ;HEAP16[$17>>1]=0|0;HEAP16[$17+2>>1]=0|0;HEAP8[$17+4>>0]=0|0;
             $$10 = $$5;
            } else {
             $$10 = $$5;
            }
           } else {
            $184 = ((($$5)) + 1|0);
            $185 = HEAP8[$184>>0]|0;
            $186 = ($185<<24>>24)==(94);
            $187 = ((($$5)) + 2|0);
            $$0294 = $186&1;
            $$6 = $186 ? $187 : $184;
            (_memset(($4|0),($$0294|0),257)|0);
            HEAP8[$4>>0] = 0;
            $188 = HEAP8[$$6>>0]|0;
            switch ($188<<24>>24) {
            case 45:  {
             $189 = ((($$6)) + 1|0);
             $190 = $$0294 ^ 1;
             $191 = $190&255;
             HEAP8[$19>>0] = $191;
             $$7 = $189;$$pre$phi491Z2D = $191;
             break;
            }
            case 93:  {
             $192 = ((($$6)) + 1|0);
             $193 = $$0294 ^ 1;
             $194 = $193&255;
             HEAP8[$20>>0] = $194;
             $$7 = $192;$$pre$phi491Z2D = $194;
             break;
            }
            default: {
             $$pre488 = $$0294 ^ 1;
             $$pre490 = $$pre488&255;
             $$7 = $$6;$$pre$phi491Z2D = $$pre490;
            }
            }
            $$8 = $$7;
            while(1) {
             $195 = HEAP8[$$8>>0]|0;
             L72: do {
              switch ($195<<24>>24) {
              case 0:  {
               $$8316 = $$1309;$393 = $392;
               label = 143;
               break L6;
               break;
              }
              case 93:  {
               $$10 = $$8;
               break L61;
               break;
              }
              case 45:  {
               $196 = ((($$8)) + 1|0);
               $197 = HEAP8[$196>>0]|0;
               switch ($197<<24>>24) {
               case 93: case 0:  {
                $$9 = $$8;$208 = 45;
                break L72;
                break;
               }
               default: {
               }
               }
               $198 = ((($$8)) + -1|0);
               $199 = HEAP8[$198>>0]|0;
               $200 = ($199&255)<($197&255);
               if ($200) {
                $201 = $199&255;
                $$0288409 = $201;
                while(1) {
                 $202 = (($$0288409) + 1)|0;
                 $203 = (($4) + ($202)|0);
                 HEAP8[$203>>0] = $$pre$phi491Z2D;
                 $204 = HEAP8[$196>>0]|0;
                 $205 = $204&255;
                 $206 = ($202>>>0)<($205>>>0);
                 if ($206) {
                  $$0288409 = $202;
                 } else {
                  $$9 = $196;$208 = $204;
                  break;
                 }
                }
               } else {
                $$9 = $196;$208 = $197;
               }
               break;
              }
              default: {
               $$9 = $$8;$208 = $195;
              }
              }
             } while(0);
             $207 = $208&255;
             $209 = (($207) + 1)|0;
             $210 = (($4) + ($209)|0);
             HEAP8[$210>>0] = $$pre$phi491Z2D;
             $211 = ((($$9)) + 1|0);
             $$8 = $211;
            }
           }
          } while(0);
          $212 = (($$1267) + 1)|0;
          $213 = $180 ? $212 : 31;
          $214 = ($spec$select319|0)==(1);
          $215 = ($$0270|0)!=(0);
          L80: do {
           if ($214) {
            if ($215) {
             $216 = $213 << 2;
             $217 = (_malloc($216)|0);
             $218 = ($217|0)==(0|0);
             if ($218) {
              $$8316 = 0;$393 = 0;
              label = 143;
              break L6;
             } else {
              $395 = $217;
             }
            } else {
             $395 = $$0295;
            }
            HEAP32[$3>>2] = 0;
            HEAP32[$$sroa$2$0$$sroa_idx13>>2] = 0;
            $$0276$ph$ph = $213;$$0280$ph$ph = 0;$$ph$ph = $395;
            L85: while(1) {
             $219 = ($$ph$ph|0)==(0|0);
             $$0280$ph = $$0280$ph$ph;
             while(1) {
              L89: while(1) {
               $220 = HEAP32[$13>>2]|0;
               $221 = HEAP32[$14>>2]|0;
               $222 = ($220>>>0)<($221>>>0);
               if ($222) {
                $223 = ((($220)) + 1|0);
                HEAP32[$13>>2] = $223;
                $224 = HEAP8[$220>>0]|0;
                $225 = $224&255;
                $228 = $225;
               } else {
                $226 = (___shgetc($0)|0);
                $228 = $226;
               }
               $227 = (($228) + 1)|0;
               $229 = (($4) + ($227)|0);
               $230 = HEAP8[$229>>0]|0;
               $231 = ($230<<24>>24)==(0);
               if ($231) {
                break L85;
               }
               $232 = $228&255;
               HEAP8[$6>>0] = $232;
               $233 = (_mbrtowc($5,$6,1,$3)|0);
               switch ($233|0) {
               case -1:  {
                $$8316 = 0;$393 = $$ph$ph;
                label = 143;
                break L6;
                break;
               }
               case -2:  {
                break;
               }
               default: {
                break L89;
               }
               }
              }
              if ($219) {
               $$1281 = $$0280$ph;
              } else {
               $234 = (($$ph$ph) + ($$0280$ph<<2)|0);
               $235 = (($$0280$ph) + 1)|0;
               $236 = HEAP32[$5>>2]|0;
               HEAP32[$234>>2] = $236;
               $$1281 = $235;
              }
              $237 = ($$1281|0)==($$0276$ph$ph|0);
              $or$cond = $215 & $237;
              if ($or$cond) {
               break;
              } else {
               $$0280$ph = $$1281;
              }
             }
             $factor334 = $$0276$ph$ph << 1;
             $238 = $factor334 | 1;
             $239 = $238 << 2;
             $240 = (_realloc($$ph$ph,$239)|0);
             $241 = ($240|0)==(0|0);
             if ($241) {
              $$8316 = 0;$393 = $$ph$ph;
              label = 143;
              break L6;
             } else {
              $$0276$ph$ph = $238;$$0280$ph$ph = $$1281;$$ph$ph = $240;
             }
            }
            $242 = (_mbsinit($3)|0);
            $243 = ($242|0)==(0);
            if ($243) {
             $$8316 = 0;$393 = $$ph$ph;
             label = 143;
             break L6;
            } else {
             $$4284 = $$0280$ph;$$5313 = 0;$$6302 = $$ph$ph;$396 = $$ph$ph;
            }
           } else {
            if ($215) {
             $244 = (_malloc($213)|0);
             $245 = ($244|0)==(0|0);
             if ($245) {
              $$8316 = 0;$393 = 0;
              label = 143;
              break L6;
             }
             $$2278$ph = $213;$$2282$ph = 0;$$2310$ph = $244;
             while(1) {
              $$2282 = $$2282$ph;
              while(1) {
               $246 = HEAP32[$13>>2]|0;
               $247 = HEAP32[$14>>2]|0;
               $248 = ($246>>>0)<($247>>>0);
               if ($248) {
                $249 = ((($246)) + 1|0);
                HEAP32[$13>>2] = $249;
                $250 = HEAP8[$246>>0]|0;
                $251 = $250&255;
                $254 = $251;
               } else {
                $252 = (___shgetc($0)|0);
                $254 = $252;
               }
               $253 = (($254) + 1)|0;
               $255 = (($4) + ($253)|0);
               $256 = HEAP8[$255>>0]|0;
               $257 = ($256<<24>>24)==(0);
               if ($257) {
                $$4284 = $$2282;$$5313 = $$2310$ph;$$6302 = 0;$396 = 0;
                break L80;
               }
               $258 = $254&255;
               $259 = (($$2282) + 1)|0;
               $260 = (($$2310$ph) + ($$2282)|0);
               HEAP8[$260>>0] = $258;
               $261 = ($259|0)==($$2278$ph|0);
               if ($261) {
                break;
               } else {
                $$2282 = $259;
               }
              }
              $factor = $$2278$ph << 1;
              $262 = $factor | 1;
              $263 = (_realloc($$2310$ph,$262)|0);
              $264 = ($263|0)==(0|0);
              if ($264) {
               $$8316 = $$2310$ph;$393 = 0;
               label = 143;
               break L6;
              } else {
               $$2278$ph = $262;$$2282$ph = $259;$$2310$ph = $263;
              }
             }
            }
            $265 = ($$0295|0)==(0|0);
            if ($265) {
             while(1) {
              $281 = HEAP32[$13>>2]|0;
              $282 = HEAP32[$14>>2]|0;
              $283 = ($281>>>0)<($282>>>0);
              if ($283) {
               $284 = ((($281)) + 1|0);
               HEAP32[$13>>2] = $284;
               $285 = HEAP8[$281>>0]|0;
               $286 = $285&255;
               $289 = $286;
              } else {
               $287 = (___shgetc($0)|0);
               $289 = $287;
              }
              $288 = (($289) + 1)|0;
              $290 = (($4) + ($288)|0);
              $291 = HEAP8[$290>>0]|0;
              $292 = ($291<<24>>24)==(0);
              if ($292) {
               $$4284 = 0;$$5313 = 0;$$6302 = 0;$396 = 0;
               break L80;
              }
             }
            }
            $$3283 = 0;
            while(1) {
             $266 = HEAP32[$13>>2]|0;
             $267 = HEAP32[$14>>2]|0;
             $268 = ($266>>>0)<($267>>>0);
             if ($268) {
              $269 = ((($266)) + 1|0);
              HEAP32[$13>>2] = $269;
              $270 = HEAP8[$266>>0]|0;
              $271 = $270&255;
              $274 = $271;
             } else {
              $272 = (___shgetc($0)|0);
              $274 = $272;
             }
             $273 = (($274) + 1)|0;
             $275 = (($4) + ($273)|0);
             $276 = HEAP8[$275>>0]|0;
             $277 = ($276<<24>>24)==(0);
             if ($277) {
              $$4284 = $$3283;$$5313 = $$0295;$$6302 = 0;$396 = 0;
              break L80;
             }
             $278 = $274&255;
             $279 = (($$3283) + 1)|0;
             $280 = (($$0295) + ($$3283)|0);
             HEAP8[$280>>0] = $278;
             $$3283 = $279;
            }
           }
          } while(0);
          $293 = HEAP32[$14>>2]|0;
          $294 = ($293|0)==(0|0);
          if ($294) {
           $$pre485 = HEAP32[$13>>2]|0;
           $306 = $$pre485;
          } else {
           $295 = HEAP32[$13>>2]|0;
           $296 = ((($295)) + -1|0);
           HEAP32[$13>>2] = $296;
           $297 = $296;
           $306 = $297;
          }
          $298 = $15;
          $299 = $298;
          $300 = HEAP32[$299>>2]|0;
          $301 = (($298) + 4)|0;
          $302 = $301;
          $303 = HEAP32[$302>>2]|0;
          $304 = HEAP32[$16>>2]|0;
          $305 = (($306) - ($304))|0;
          $307 = ($305|0)<(0);
          $308 = $307 << 31 >> 31;
          $309 = (_i64Add(($300|0),($303|0),($305|0),($308|0))|0);
          $310 = (getTempRet0() | 0);
          $311 = ($309|0)==(0);
          $312 = ($310|0)==(0);
          $313 = $311 & $312;
          if ($313) {
           $$10318 = $$5313;$$2 = $$0270;$$2292 = $$0290414;$384 = $396;
           break L6;
          }
          $$not = $180 ^ 1;
          $314 = ($309|0)==($$1267|0);
          $315 = ($310|0)==($169|0);
          $316 = $314 & $315;
          $or$cond321 = $316 | $$not;
          if (!($or$cond321)) {
           $$10318 = $$5313;$$2 = $$0270;$$2292 = $$0290414;$384 = $396;
           break L6;
          }
          do {
           if ($215) {
            if ($214) {
             HEAP32[$$0295>>2] = $$6302;
             break;
            } else {
             HEAP32[$$0295>>2] = $$5313;
             break;
            }
           }
          } while(0);
          if ($180) {
           $$11 = $$10;$$6314 = $$5313;$394 = $396;
          } else {
           $317 = ($$6302|0)==(0|0);
           if (!($317)) {
            $318 = (($$6302) + ($$4284<<2)|0);
            HEAP32[$318>>2] = 0;
           }
           $319 = ($$5313|0)==(0|0);
           if ($319) {
            $$11 = $$10;$$6314 = 0;$394 = $396;
            break L59;
           }
           $320 = (($$5313) + ($$4284)|0);
           HEAP8[$320>>0] = 0;
           $$11 = $$10;$$6314 = $$5313;$394 = $396;
          }
          break;
         }
         case 120: case 88: case 112:  {
          $$0272 = 16;
          label = 131;
          break;
         }
         case 111:  {
          $$0272 = 8;
          label = 131;
          break;
         }
         case 117: case 100:  {
          $$0272 = 10;
          label = 131;
          break;
         }
         case 105:  {
          $$0272 = 0;
          label = 131;
          break;
         }
         case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
          $342 = (+___floatscan($0,$spec$select319,0));
          $343 = $15;
          $344 = $343;
          $345 = HEAP32[$344>>2]|0;
          $346 = (($343) + 4)|0;
          $347 = $346;
          $348 = HEAP32[$347>>2]|0;
          $349 = HEAP32[$13>>2]|0;
          $350 = HEAP32[$16>>2]|0;
          $351 = (($349) - ($350))|0;
          $352 = ($351|0)<(0);
          $353 = $352 << 31 >> 31;
          $354 = (_i64Subtract(0,0,($351|0),($353|0))|0);
          $355 = (getTempRet0() | 0);
          $356 = ($345|0)==($354|0);
          $357 = ($348|0)==($355|0);
          $358 = $356 & $357;
          if ($358) {
           $$10318 = $$1309;$$2 = $$0270;$$2292 = $$0290414;$384 = $392;
           break L6;
          }
          $359 = ($$0295|0)==(0|0);
          if ($359) {
           $$11 = $$5;$$6314 = $$1309;$394 = $392;
          } else {
           switch ($spec$select319|0) {
           case 0:  {
            $360 = $342;
            HEAPF32[$$0295>>2] = $360;
            $$11 = $$5;$$6314 = $$1309;$394 = $392;
            break L59;
            break;
           }
           case 1:  {
            HEAPF64[$$0295>>3] = $342;
            $$11 = $$5;$$6314 = $$1309;$394 = $392;
            break L59;
            break;
           }
           case 2:  {
            HEAPF64[$$0295>>3] = $342;
            $$11 = $$5;$$6314 = $$1309;$394 = $392;
            break L59;
            break;
           }
           default: {
            $$11 = $$5;$$6314 = $$1309;$394 = $392;
            break L59;
           }
           }
          }
          break;
         }
         default: {
          $$11 = $$5;$$6314 = $$1309;$394 = $392;
         }
         }
        } while(0);
        do {
         if ((label|0) == 131) {
          label = 0;
          $321 = (___intscan($0,$$0272,0,-1,-1)|0);
          $322 = (getTempRet0() | 0);
          $323 = $15;
          $324 = $323;
          $325 = HEAP32[$324>>2]|0;
          $326 = (($323) + 4)|0;
          $327 = $326;
          $328 = HEAP32[$327>>2]|0;
          $329 = HEAP32[$13>>2]|0;
          $330 = HEAP32[$16>>2]|0;
          $331 = (($329) - ($330))|0;
          $332 = ($331|0)<(0);
          $333 = $332 << 31 >> 31;
          $334 = (_i64Subtract(0,0,($331|0),($333|0))|0);
          $335 = (getTempRet0() | 0);
          $336 = ($325|0)==($334|0);
          $337 = ($328|0)==($335|0);
          $338 = $336 & $337;
          if ($338) {
           $$10318 = $$1309;$$2 = $$0270;$$2292 = $$0290414;$384 = $392;
           break L6;
          }
          $339 = ($spec$select|0)==(112);
          $340 = ($$0295|0)!=(0|0);
          $or$cond3 = $340 & $339;
          if ($or$cond3) {
           $341 = $321;
           HEAP32[$$0295>>2] = $341;
           $$11 = $$5;$$6314 = $$1309;$394 = $392;
           break;
          } else {
           _store_int_203($$0295,$spec$select319,$321,$322);
           $$11 = $$5;$$6314 = $$1309;$394 = $392;
           break;
          }
         }
        } while(0);
        $361 = $15;
        $362 = $361;
        $363 = HEAP32[$362>>2]|0;
        $364 = (($361) + 4)|0;
        $365 = $364;
        $366 = HEAP32[$365>>2]|0;
        $367 = HEAP32[$13>>2]|0;
        $368 = HEAP32[$16>>2]|0;
        $369 = (($367) - ($368))|0;
        $370 = ($369|0)<(0);
        $371 = $370 << 31 >> 31;
        $374 = (_i64Add(($363|0),($366|0),($372|0),($373|0))|0);
        $375 = (getTempRet0() | 0);
        $376 = (_i64Add(($374|0),($375|0),($369|0),($371|0))|0);
        $377 = (getTempRet0() | 0);
        $378 = ($$0295|0)!=(0|0);
        $379 = $378&1;
        $spec$select322 = (($$0290414) + ($379))|0;
        $$12 = $$11;$$1291 = $spec$select322;$$7315 = $$6314;$388 = $394;$389 = $376;$390 = $377;
        break L8;
       }
      } while(0);
      $66 = $63&1;
      $67 = (($$0273418) + ($66)|0);
      ___shlim($0,0,0);
      $68 = HEAP32[$13>>2]|0;
      $69 = HEAP32[$14>>2]|0;
      $70 = ($68>>>0)<($69>>>0);
      if ($70) {
       $71 = ((($68)) + 1|0);
       HEAP32[$13>>2] = $71;
       $72 = HEAP8[$68>>0]|0;
       $73 = $72&255;
       $78 = $73;
      } else {
       $74 = (___shgetc($0)|0);
       $78 = $74;
      }
      $75 = HEAP8[$67>>0]|0;
      $76 = $75&255;
      $77 = ($78|0)==($76|0);
      if (!($77)) {
       label = 23;
       break L6;
      }
      $85 = (_i64Add(($56|0),($57|0),1,0)|0);
      $86 = (getTempRet0() | 0);
      $$12 = $67;$$1291 = $$0290414;$$7315 = $$0308412;$388 = $387;$389 = $85;$390 = $86;
     } else {
      $$1274 = $$0273418;
      while(1) {
       $25 = ((($$1274)) + 1|0);
       $26 = HEAP8[$25>>0]|0;
       $27 = $26&255;
       $28 = (_isspace($27)|0);
       $29 = ($28|0)==(0);
       if ($29) {
        break;
       } else {
        $$1274 = $25;
       }
      }
      ___shlim($0,0,0);
      while(1) {
       $30 = HEAP32[$13>>2]|0;
       $31 = HEAP32[$14>>2]|0;
       $32 = ($30>>>0)<($31>>>0);
       if ($32) {
        $33 = ((($30)) + 1|0);
        HEAP32[$13>>2] = $33;
        $34 = HEAP8[$30>>0]|0;
        $35 = $34&255;
        $37 = $35;
       } else {
        $36 = (___shgetc($0)|0);
        $37 = $36;
       }
       $38 = (_isspace($37)|0);
       $39 = ($38|0)==(0);
       if ($39) {
        break;
       }
      }
      $40 = HEAP32[$14>>2]|0;
      $41 = ($40|0)==(0|0);
      if ($41) {
       $$pre = HEAP32[$13>>2]|0;
       $53 = $$pre;
      } else {
       $42 = HEAP32[$13>>2]|0;
       $43 = ((($42)) + -1|0);
       HEAP32[$13>>2] = $43;
       $44 = $43;
       $53 = $44;
      }
      $45 = $15;
      $46 = $45;
      $47 = HEAP32[$46>>2]|0;
      $48 = (($45) + 4)|0;
      $49 = $48;
      $50 = HEAP32[$49>>2]|0;
      $51 = HEAP32[$16>>2]|0;
      $52 = (($53) - ($51))|0;
      $54 = ($52|0)<(0);
      $55 = $54 << 31 >> 31;
      $58 = (_i64Add(($47|0),($50|0),($56|0),($57|0))|0);
      $59 = (getTempRet0() | 0);
      $60 = (_i64Add(($58|0),($59|0),($52|0),($55|0))|0);
      $61 = (getTempRet0() | 0);
      $$12 = $$1274;$$1291 = $$0290414;$$7315 = $$0308412;$388 = $387;$389 = $60;$390 = $61;
     }
    } while(0);
    $380 = ((($$12)) + 1|0);
    $381 = HEAP8[$380>>0]|0;
    $382 = ($381<<24>>24)==(0);
    if ($382) {
     $$3293 = $$1291;
     break L4;
    } else {
     $$0273418 = $380;$$0290414 = $$1291;$$0308412 = $$7315;$22 = $381;$387 = $388;$56 = $389;$57 = $390;
    }
   }
   if ((label|0) == 23) {
    $79 = HEAP32[$14>>2]|0;
    $80 = ($79|0)==(0|0);
    if (!($80)) {
     $81 = HEAP32[$13>>2]|0;
     $82 = ((($81)) + -1|0);
     HEAP32[$13>>2] = $82;
    }
    $83 = ($78|0)>(-1);
    $84 = ($$0290414|0)!=(0);
    $or$cond5 = $84 | $83;
    if ($or$cond5) {
     $$3293 = $$0290414;
     break;
    } else {
     $$1271 = 0;$$9317 = $$0308412;$391 = $387;
     label = 144;
    }
   }
   else if ((label|0) == 143) {
    $$old4 = ($$0290414|0)==(0);
    if ($$old4) {
     $$1271 = $$0270;$$9317 = $$8316;$391 = $393;
     label = 144;
    } else {
     $$10318 = $$8316;$$2 = $$0270;$$2292 = $$0290414;$384 = $393;
    }
   }
   if ((label|0) == 144) {
    $$10318 = $$9317;$$2 = $$1271;$$2292 = -1;$384 = $391;
   }
   $383 = ($$2|0)==(0);
   if ($383) {
    $$3293 = $$2292;
   } else {
    _free($$10318);
    _free($384);
    $$3293 = $$2292;
   }
  }
 } while(0);
 $385 = ($386|0)==(0);
 if (!($385)) {
  ___unlockfile($0);
 }
 STACKTOP = sp;return ($$3293|0);
}
function _isspace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $narrow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(32);
 $2 = (($0) + -9)|0;
 $3 = ($2>>>0)<(5);
 $narrow = $1 | $3;
 $4 = $narrow&1;
 return ($4|0);
}
function ___shlim($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 112|0);
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = $1;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = ((($0)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($0)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) - ($11))|0;
 $13 = ($12|0)<(0);
 $14 = $13 << 31 >> 31;
 $15 = ((($0)) + 120|0);
 $16 = $15;
 $17 = $16;
 HEAP32[$17>>2] = $12;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $14;
 $20 = ($1|0)!=(0);
 $21 = ($2|0)!=(0);
 $22 = $20 | $21;
 $23 = ($14|0)>($2|0);
 $24 = ($12>>>0)>($1>>>0);
 $25 = ($14|0)==($2|0);
 $26 = $25 & $24;
 $27 = $23 | $26;
 $or$cond = $22 & $27;
 if ($or$cond) {
  $28 = $11;
  $29 = (($28) + ($1)|0);
  $30 = ((($0)) + 104|0);
  HEAP32[$30>>2] = $29;
 } else {
  $31 = ((($0)) + 104|0);
  HEAP32[$31>>2] = $9;
 }
 return;
}
function ___shgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert28 = 0, $$pre = 0, $$pre29 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 112|0);
 $2 = $1;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4|0)==(0);
 $9 = ($7|0)==(0);
 $10 = $8 & $9;
 if ($10) {
  label = 3;
 } else {
  $11 = ((($0)) + 120|0);
  $12 = $11;
  $13 = $12;
  $14 = HEAP32[$13>>2]|0;
  $15 = (($12) + 4)|0;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)<($7|0);
  $19 = ($14>>>0)<($4>>>0);
  $20 = ($17|0)==($7|0);
  $21 = $20 & $19;
  $22 = $18 | $21;
  if ($22) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $23 = (___uflow($0)|0);
  $24 = ($23|0)<(0);
  if ($24) {
   label = 4;
  } else {
   $26 = $1;
   $27 = $26;
   $28 = HEAP32[$27>>2]|0;
   $29 = (($26) + 4)|0;
   $30 = $29;
   $31 = HEAP32[$30>>2]|0;
   $32 = ($28|0)==(0);
   $33 = ($31|0)==(0);
   $34 = $32 & $33;
   $$phi$trans$insert = ((($0)) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($34) {
    $35 = $$pre;
    $89 = $35;
    label = 9;
   } else {
    $36 = ((($0)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = $37;
    $39 = (($$pre) - ($38))|0;
    $40 = ($39|0)<(0);
    $41 = $40 << 31 >> 31;
    $42 = ((($0)) + 120|0);
    $43 = $42;
    $44 = $43;
    $45 = HEAP32[$44>>2]|0;
    $46 = (($43) + 4)|0;
    $47 = $46;
    $48 = HEAP32[$47>>2]|0;
    $49 = (_i64Subtract(($28|0),($31|0),($45|0),($48|0))|0);
    $50 = (getTempRet0() | 0);
    $51 = ($50|0)>($41|0);
    $52 = ($49>>>0)>($39>>>0);
    $53 = ($50|0)==($41|0);
    $54 = $53 & $52;
    $55 = $51 | $54;
    $56 = $$pre;
    if ($55) {
     $89 = $56;
     label = 9;
    } else {
     $57 = (($49) + -1)|0;
     $58 = (($37) + ($57)|0);
     $59 = ((($0)) + 104|0);
     HEAP32[$59>>2] = $58;
     $62 = $56;
    }
   }
   if ((label|0) == 9) {
    $60 = ((($0)) + 104|0);
    HEAP32[$60>>2] = $$pre;
    $62 = $89;
   }
   $61 = ($62|0)==(0|0);
   $$phi$trans$insert28 = ((($0)) + 4|0);
   if ($61) {
    $$pre29 = HEAP32[$$phi$trans$insert28>>2]|0;
    $84 = $$pre29;
   } else {
    $63 = HEAP32[$$phi$trans$insert28>>2]|0;
    $64 = $62;
    $65 = (($64) + 1)|0;
    $66 = (($65) - ($63))|0;
    $67 = ($66|0)<(0);
    $68 = $67 << 31 >> 31;
    $69 = ((($0)) + 120|0);
    $70 = $69;
    $71 = $70;
    $72 = HEAP32[$71>>2]|0;
    $73 = (($70) + 4)|0;
    $74 = $73;
    $75 = HEAP32[$74>>2]|0;
    $76 = (_i64Add(($72|0),($75|0),($66|0),($68|0))|0);
    $77 = (getTempRet0() | 0);
    $78 = $69;
    $79 = $78;
    HEAP32[$79>>2] = $76;
    $80 = (($78) + 4)|0;
    $81 = $80;
    HEAP32[$81>>2] = $77;
    $82 = $63;
    $84 = $82;
   }
   $83 = ((($84)) + -1|0);
   $85 = HEAP8[$83>>0]|0;
   $86 = $85&255;
   $87 = ($23|0)==($86|0);
   if ($87) {
    $$0 = $23;
   } else {
    $88 = $23&255;
    HEAP8[$83>>0] = $88;
    $$0 = $23;
   }
  }
 }
 if ((label|0) == 4) {
  $25 = ((($0)) + 104|0);
  HEAP32[$25>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function _arg_n_202($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $vacopy_currentptr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $vacopy_currentptr = HEAP32[$0>>2]|0;
 HEAP32[$2>>2] = $vacopy_currentptr;
 $$0 = $1;
 while(1) {
  $3 = ($$0>>>0)>(1);
  $arglist_current = HEAP32[$2>>2]|0;
  $4 = $arglist_current;
  $5 = ((0) + 4|0);
  $expanded1 = $5;
  $expanded = (($expanded1) - 1)|0;
  $6 = (($4) + ($expanded))|0;
  $7 = ((0) + 4|0);
  $expanded5 = $7;
  $expanded4 = (($expanded5) - 1)|0;
  $expanded3 = $expanded4 ^ -1;
  $8 = $6 & $expanded3;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $arglist_next = ((($9)) + 4|0);
  HEAP32[$2>>2] = $arglist_next;
  $11 = (($$0) + -1)|0;
  if ($3) {
   $$0 = $11;
  } else {
   break;
  }
 }
 STACKTOP = sp;return ($10|0);
}
function _store_int_203($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0|0);
 L1: do {
  if (!($4)) {
   switch ($1|0) {
   case -2:  {
    $5 = $2&255;
    HEAP8[$0>>0] = $5;
    break L1;
    break;
   }
   case -1:  {
    $6 = $2&65535;
    HEAP16[$0>>1] = $6;
    break L1;
    break;
   }
   case 0:  {
    HEAP32[$0>>2] = $2;
    break L1;
    break;
   }
   case 1:  {
    HEAP32[$0>>2] = $2;
    break L1;
    break;
   }
   case 3:  {
    $7 = $0;
    $8 = $7;
    HEAP32[$8>>2] = $2;
    $9 = (($7) + 4)|0;
    $10 = $9;
    HEAP32[$10>>2] = $3;
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
  }
 } while(0);
 return;
}
function _mbrtowc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$03952 = 0, $$03952$pn = 0, $$04051 = 0, $$04350 = 0, $$2 = 0, $$lcssa = 0, $$lcssa56 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, $spec$select47 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($3|0)==(0|0);
 $spec$select = $5 ? 13960 : $3;
 $6 = HEAP32[$spec$select>>2]|0;
 $7 = ($1|0)==(0|0);
 L1: do {
  if ($7) {
   $8 = ($6|0)==(0);
   if ($8) {
    $$0 = 0;
   } else {
    label = 19;
   }
  } else {
   $9 = ($0|0)==(0|0);
   $spec$select47 = $9 ? $4 : $0;
   $10 = ($2|0)==(0);
   if ($10) {
    $$0 = -2;
   } else {
    $11 = ($6|0)==(0);
    if ($11) {
     $12 = HEAP8[$1>>0]|0;
     $13 = ($12<<24>>24)>(-1);
     if ($13) {
      $14 = $12&255;
      HEAP32[$spec$select47>>2] = $14;
      $15 = ($12<<24>>24)!=(0);
      $16 = $15&1;
      $$0 = $16;
      break;
     }
     $17 = (___pthread_self_333()|0);
     $18 = ((($17)) + 188|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)==(0|0);
     $22 = HEAP8[$1>>0]|0;
     if ($21) {
      $23 = $22 << 24 >> 24;
      $24 = $23 & 57343;
      HEAP32[$spec$select47>>2] = $24;
      $$0 = 1;
      break;
     }
     $25 = $22&255;
     $26 = (($25) + -194)|0;
     $27 = ($26>>>0)>(50);
     if ($27) {
      label = 19;
      break;
     }
     $28 = ((($1)) + 1|0);
     $29 = (1552 + ($26<<2)|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (($2) + -1)|0;
     $32 = ($31|0)==(0);
     if ($32) {
      $$2 = $30;
     } else {
      $$03952 = $28;$$04051 = $30;$$04350 = $31;
      label = 11;
     }
    } else {
     $$03952 = $1;$$04051 = $6;$$04350 = $2;
     label = 11;
    }
    L14: do {
     if ((label|0) == 11) {
      $33 = HEAP8[$$03952>>0]|0;
      $34 = $33&255;
      $35 = $34 >>> 3;
      $36 = (($35) + -16)|0;
      $37 = $$04051 >> 26;
      $38 = (($35) + ($37))|0;
      $39 = $36 | $38;
      $40 = ($39>>>0)>(7);
      if ($40) {
       label = 19;
       break L1;
      }
      $41 = $$04051 << 6;
      $42 = (($34) + -128)|0;
      $43 = $42 | $41;
      $44 = (($$04350) + -1)|0;
      $45 = ($43|0)<(0);
      if ($45) {
       $$03952$pn = $$03952;$47 = $43;$53 = $44;
       while(1) {
        $56 = ((($$03952$pn)) + 1|0);
        $57 = ($53|0)==(0);
        if ($57) {
         $$2 = $47;
         break L14;
        }
        $49 = HEAP8[$56>>0]|0;
        $58 = $49 & -64;
        $59 = ($58<<24>>24)==(-128);
        if (!($59)) {
         label = 19;
         break L1;
        }
        $46 = $47 << 6;
        $48 = $49&255;
        $50 = (($48) + -128)|0;
        $51 = $50 | $46;
        $52 = (($53) + -1)|0;
        $54 = ($51|0)<(0);
        if ($54) {
         $$03952$pn = $56;$47 = $51;$53 = $52;
        } else {
         $$lcssa = $52;$$lcssa56 = $51;
         break;
        }
       }
      } else {
       $$lcssa = $44;$$lcssa56 = $43;
      }
      HEAP32[$spec$select>>2] = 0;
      HEAP32[$spec$select47>>2] = $$lcssa56;
      $55 = (($2) - ($$lcssa))|0;
      $$0 = $55;
      break L1;
     }
    } while(0);
    HEAP32[$spec$select>>2] = $$2;
    $$0 = -2;
   }
  }
 } while(0);
 if ((label|0) == 19) {
  HEAP32[$spec$select>>2] = 0;
  $60 = (___errno_location()|0);
  HEAP32[$60>>2] = 84;
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _mbsinit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $4 = 1;
 } else {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0);
  $phitmp = $3&1;
  $4 = $phitmp;
 }
 return ($4|0);
}
function ___intscan($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0154215 = 0, $$0157 = 0, $$0159 = 0, $$1155184 = 0, $$1158 = 0, $$1160 = 0, $$1160170 = 0, $$1165 = 0, $$1165168 = 0, $$1165169 = 0, $$2156202 = 0, $$3162208 = 0, $$4163$lcssa = 0, $$6$lcssa = 0, $$7190 = 0, $$8 = 0, $$pre$phi237Z2D = 0, $$pre$phi239Z2D = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond179 = 0, $or$cond5 = 0, $or$cond7 = 0, $spec$select166 = 0, $spec$select167 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $5 = ($1>>>0)>(36);
 L1: do {
  if ($5) {
   $6 = (___errno_location()|0);
   HEAP32[$6>>2] = 22;
   $291 = 0;$292 = 0;
  } else {
   $7 = ((($0)) + 4|0);
   $8 = ((($0)) + 104|0);
   while(1) {
    $9 = HEAP32[$7>>2]|0;
    $10 = HEAP32[$8>>2]|0;
    $11 = ($9>>>0)<($10>>>0);
    if ($11) {
     $12 = ((($9)) + 1|0);
     HEAP32[$7>>2] = $12;
     $13 = HEAP8[$9>>0]|0;
     $14 = $13&255;
     $16 = $14;
    } else {
     $15 = (___shgetc($0)|0);
     $16 = $15;
    }
    $17 = (_isspace($16)|0);
    $18 = ($17|0)==(0);
    if ($18) {
     break;
    }
   }
   L11: do {
    switch ($16|0) {
    case 43: case 45:  {
     $19 = ($16|0)==(45);
     $20 = $19 << 31 >> 31;
     $21 = HEAP32[$7>>2]|0;
     $22 = HEAP32[$8>>2]|0;
     $23 = ($21>>>0)<($22>>>0);
     if ($23) {
      $24 = ((($21)) + 1|0);
      HEAP32[$7>>2] = $24;
      $25 = HEAP8[$21>>0]|0;
      $26 = $25&255;
      $$0157 = $20;$$0159 = $26;
      break L11;
     } else {
      $27 = (___shgetc($0)|0);
      $$0157 = $20;$$0159 = $27;
      break L11;
     }
     break;
    }
    default: {
     $$0157 = 0;$$0159 = $16;
    }
    }
   } while(0);
   $28 = ($1|0)==(0);
   $29 = $1 | 16;
   $30 = ($29|0)==(16);
   $31 = ($$0159|0)==(48);
   $or$cond5 = $30 & $31;
   do {
    if ($or$cond5) {
     $32 = HEAP32[$7>>2]|0;
     $33 = HEAP32[$8>>2]|0;
     $34 = ($32>>>0)<($33>>>0);
     if ($34) {
      $35 = ((($32)) + 1|0);
      HEAP32[$7>>2] = $35;
      $36 = HEAP8[$32>>0]|0;
      $37 = $36&255;
      $40 = $37;
     } else {
      $38 = (___shgetc($0)|0);
      $40 = $38;
     }
     $39 = $40 | 32;
     $41 = ($39|0)==(120);
     if (!($41)) {
      if ($28) {
       $$1160170 = $40;$$1165168 = 8;
       label = 47;
       break;
      } else {
       $$1160 = $40;$$1165 = $1;
       label = 32;
       break;
      }
     }
     $42 = HEAP32[$7>>2]|0;
     $43 = HEAP32[$8>>2]|0;
     $44 = ($42>>>0)<($43>>>0);
     if ($44) {
      $45 = ((($42)) + 1|0);
      HEAP32[$7>>2] = $45;
      $46 = HEAP8[$42>>0]|0;
      $47 = $46&255;
      $50 = $47;
     } else {
      $48 = (___shgetc($0)|0);
      $50 = $48;
     }
     $49 = ((2273) + ($50)|0);
     $51 = HEAP8[$49>>0]|0;
     $52 = ($51&255)>(15);
     if ($52) {
      $53 = HEAP32[$8>>2]|0;
      $54 = ($53|0)==(0|0);
      if (!($54)) {
       $55 = HEAP32[$7>>2]|0;
       $56 = ((($55)) + -1|0);
       HEAP32[$7>>2] = $56;
      }
      $57 = ($2|0)==(0);
      if ($57) {
       ___shlim($0,0,0);
       $291 = 0;$292 = 0;
       break L1;
      }
      if ($54) {
       $291 = 0;$292 = 0;
       break L1;
      }
      $58 = HEAP32[$7>>2]|0;
      $59 = ((($58)) + -1|0);
      HEAP32[$7>>2] = $59;
      $291 = 0;$292 = 0;
      break L1;
     } else {
      $$1160170 = $50;$$1165168 = 16;
      label = 47;
     }
    } else {
     $spec$select166 = $28 ? 10 : $1;
     $60 = ((2273) + ($$0159)|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61&255;
     $63 = ($spec$select166>>>0)>($62>>>0);
     if ($63) {
      $$1160 = $$0159;$$1165 = $spec$select166;
      label = 32;
     } else {
      $64 = HEAP32[$8>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $66 = HEAP32[$7>>2]|0;
       $67 = ((($66)) + -1|0);
       HEAP32[$7>>2] = $67;
      }
      ___shlim($0,0,0);
      $68 = (___errno_location()|0);
      HEAP32[$68>>2] = 22;
      $291 = 0;$292 = 0;
      break L1;
     }
    }
   } while(0);
   L43: do {
    if ((label|0) == 32) {
     $69 = ($$1165|0)==(10);
     if ($69) {
      $70 = (($$1160) + -48)|0;
      $71 = ($70>>>0)<(10);
      if ($71) {
       $$0154215 = 0;$74 = $70;
       while(1) {
        $72 = ($$0154215*10)|0;
        $73 = (($72) + ($74))|0;
        $75 = HEAP32[$7>>2]|0;
        $76 = HEAP32[$8>>2]|0;
        $77 = ($75>>>0)<($76>>>0);
        if ($77) {
         $78 = ((($75)) + 1|0);
         HEAP32[$7>>2] = $78;
         $79 = HEAP8[$75>>0]|0;
         $80 = $79&255;
         $83 = $80;
        } else {
         $81 = (___shgetc($0)|0);
         $83 = $81;
        }
        $82 = (($83) + -48)|0;
        $84 = ($82>>>0)<(10);
        $85 = ($73>>>0)<(429496729);
        $86 = $84 & $85;
        if ($86) {
         $$0154215 = $73;$74 = $82;
        } else {
         break;
        }
       }
       $87 = ($82>>>0)<(10);
       if ($87) {
        $$3162208 = $83;$88 = $73;$89 = 0;$93 = $82;
        while(1) {
         $90 = (___muldi3(($88|0),($89|0),10,0)|0);
         $91 = (getTempRet0() | 0);
         $92 = ($93|0)<(0);
         $94 = $92 << 31 >> 31;
         $95 = $93 ^ -1;
         $96 = $94 ^ -1;
         $97 = ($91>>>0)>($96>>>0);
         $98 = ($90>>>0)>($95>>>0);
         $99 = ($91|0)==($96|0);
         $100 = $99 & $98;
         $101 = $97 | $100;
         if ($101) {
          $$1165169 = 10;$$8 = $$3162208;$293 = $88;$294 = $89;
          label = 76;
          break L43;
         }
         $102 = (_i64Add(($90|0),($91|0),($93|0),($94|0))|0);
         $103 = (getTempRet0() | 0);
         $104 = HEAP32[$7>>2]|0;
         $105 = HEAP32[$8>>2]|0;
         $106 = ($104>>>0)<($105>>>0);
         if ($106) {
          $107 = ((($104)) + 1|0);
          HEAP32[$7>>2] = $107;
          $108 = HEAP8[$104>>0]|0;
          $109 = $108&255;
          $112 = $109;
         } else {
          $110 = (___shgetc($0)|0);
          $112 = $110;
         }
         $111 = (($112) + -48)|0;
         $113 = ($111>>>0)<(10);
         $114 = ($103>>>0)<(429496729);
         $115 = ($102>>>0)<(2576980378);
         $116 = ($103|0)==(429496729);
         $117 = $116 & $115;
         $118 = $114 | $117;
         $or$cond7 = $113 & $118;
         if ($or$cond7) {
          $$3162208 = $112;$88 = $102;$89 = $103;$93 = $111;
         } else {
          break;
         }
        }
        $119 = ($111>>>0)>(9);
        if ($119) {
         $$1158 = $$0157;$265 = $103;$267 = $102;
        } else {
         $$1165169 = 10;$$8 = $112;$293 = $102;$294 = $103;
         label = 76;
        }
       } else {
        $$1158 = $$0157;$265 = 0;$267 = $73;
       }
      } else {
       $$1158 = $$0157;$265 = 0;$267 = 0;
      }
     } else {
      $$1160170 = $$1160;$$1165168 = $$1165;
      label = 47;
     }
    }
   } while(0);
   L63: do {
    if ((label|0) == 47) {
     $120 = (($$1165168) + -1)|0;
     $121 = $120 & $$1165168;
     $122 = ($121|0)==(0);
     if ($122) {
      $123 = ($$1165168*23)|0;
      $124 = $123 >>> 5;
      $125 = $124 & 7;
      $126 = (12147 + ($125)|0);
      $127 = HEAP8[$126>>0]|0;
      $128 = $127 << 24 >> 24;
      $129 = ((2273) + ($$1160170)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130&255;
      $132 = ($$1165168>>>0)>($131>>>0);
      if ($132) {
       $$1155184 = 0;$135 = $131;
       while(1) {
        $133 = $$1155184 << $128;
        $134 = $135 | $133;
        $136 = HEAP32[$7>>2]|0;
        $137 = HEAP32[$8>>2]|0;
        $138 = ($136>>>0)<($137>>>0);
        if ($138) {
         $139 = ((($136)) + 1|0);
         HEAP32[$7>>2] = $139;
         $140 = HEAP8[$136>>0]|0;
         $141 = $140&255;
         $144 = $141;
        } else {
         $142 = (___shgetc($0)|0);
         $144 = $142;
        }
        $143 = ((2273) + ($144)|0);
        $145 = HEAP8[$143>>0]|0;
        $146 = $145&255;
        $147 = ($$1165168>>>0)>($146>>>0);
        $148 = ($134>>>0)<(134217728);
        $149 = $148 & $147;
        if ($149) {
         $$1155184 = $134;$135 = $146;
        } else {
         break;
        }
       }
       $$4163$lcssa = $144;$$pre$phi237Z2D = $146;$154 = 0;$156 = $134;$295 = $145;
      } else {
       $$4163$lcssa = $$1160170;$$pre$phi237Z2D = $131;$154 = 0;$156 = 0;$295 = $130;
      }
      $150 = (_bitshift64Lshr(-1,-1,($128|0))|0);
      $151 = (getTempRet0() | 0);
      $152 = ($$1165168>>>0)<=($$pre$phi237Z2D>>>0);
      $153 = ($151>>>0)<($154>>>0);
      $155 = ($150>>>0)<($156>>>0);
      $157 = ($151|0)==($154|0);
      $158 = $157 & $155;
      $159 = $153 | $158;
      $or$cond179 = $152 | $159;
      if ($or$cond179) {
       $$1165169 = $$1165168;$$8 = $$4163$lcssa;$293 = $156;$294 = $154;
       label = 76;
       break;
      }
      $160 = $156;$161 = $154;$165 = $295;
      while(1) {
       $162 = (_bitshift64Shl(($160|0),($161|0),($128|0))|0);
       $163 = (getTempRet0() | 0);
       $164 = $165&255;
       $166 = $162 | $164;
       $167 = HEAP32[$7>>2]|0;
       $168 = HEAP32[$8>>2]|0;
       $169 = ($167>>>0)<($168>>>0);
       if ($169) {
        $170 = ((($167)) + 1|0);
        HEAP32[$7>>2] = $170;
        $171 = HEAP8[$167>>0]|0;
        $172 = $171&255;
        $175 = $172;
       } else {
        $173 = (___shgetc($0)|0);
        $175 = $173;
       }
       $174 = ((2273) + ($175)|0);
       $176 = HEAP8[$174>>0]|0;
       $177 = $176&255;
       $178 = ($$1165168>>>0)<=($177>>>0);
       $179 = ($163>>>0)>($151>>>0);
       $180 = ($166>>>0)>($150>>>0);
       $181 = ($163|0)==($151|0);
       $182 = $181 & $180;
       $183 = $179 | $182;
       $or$cond = $178 | $183;
       if ($or$cond) {
        $$1165169 = $$1165168;$$8 = $175;$293 = $166;$294 = $163;
        label = 76;
        break L63;
       } else {
        $160 = $166;$161 = $163;$165 = $176;
       }
      }
     }
     $184 = ((2273) + ($$1160170)|0);
     $185 = HEAP8[$184>>0]|0;
     $186 = $185&255;
     $187 = ($$1165168>>>0)>($186>>>0);
     if ($187) {
      $$2156202 = 0;$190 = $186;
      while(1) {
       $188 = Math_imul($$2156202, $$1165168)|0;
       $189 = (($190) + ($188))|0;
       $191 = HEAP32[$7>>2]|0;
       $192 = HEAP32[$8>>2]|0;
       $193 = ($191>>>0)<($192>>>0);
       if ($193) {
        $194 = ((($191)) + 1|0);
        HEAP32[$7>>2] = $194;
        $195 = HEAP8[$191>>0]|0;
        $196 = $195&255;
        $199 = $196;
       } else {
        $197 = (___shgetc($0)|0);
        $199 = $197;
       }
       $198 = ((2273) + ($199)|0);
       $200 = HEAP8[$198>>0]|0;
       $201 = $200&255;
       $202 = ($$1165168>>>0)>($201>>>0);
       $203 = ($189>>>0)<(119304647);
       $204 = $203 & $202;
       if ($204) {
        $$2156202 = $189;$190 = $201;
       } else {
        break;
       }
      }
      $$6$lcssa = $199;$$pre$phi239Z2D = $201;$296 = $200;$297 = $189;$298 = 0;
     } else {
      $$6$lcssa = $$1160170;$$pre$phi239Z2D = $186;$296 = $185;$297 = 0;$298 = 0;
     }
     $205 = ($$1165168>>>0)>($$pre$phi239Z2D>>>0);
     if ($205) {
      $206 = (___udivdi3(-1,-1,($$1165168|0),0)|0);
      $207 = (getTempRet0() | 0);
      $$7190 = $$6$lcssa;$209 = $298;$211 = $297;$218 = $296;
      while(1) {
       $208 = ($209>>>0)>($207>>>0);
       $210 = ($211>>>0)>($206>>>0);
       $212 = ($209|0)==($207|0);
       $213 = $212 & $210;
       $214 = $208 | $213;
       if ($214) {
        $$1165169 = $$1165168;$$8 = $$7190;$293 = $211;$294 = $209;
        label = 76;
        break L63;
       }
       $215 = (___muldi3(($211|0),($209|0),($$1165168|0),0)|0);
       $216 = (getTempRet0() | 0);
       $217 = $218&255;
       $219 = $217 ^ -1;
       $220 = ($216>>>0)>(4294967295);
       $221 = ($215>>>0)>($219>>>0);
       $222 = ($216|0)==(-1);
       $223 = $222 & $221;
       $224 = $220 | $223;
       if ($224) {
        $$1165169 = $$1165168;$$8 = $$7190;$293 = $211;$294 = $209;
        label = 76;
        break L63;
       }
       $225 = (_i64Add(($215|0),($216|0),($217|0),0)|0);
       $226 = (getTempRet0() | 0);
       $227 = HEAP32[$7>>2]|0;
       $228 = HEAP32[$8>>2]|0;
       $229 = ($227>>>0)<($228>>>0);
       if ($229) {
        $230 = ((($227)) + 1|0);
        HEAP32[$7>>2] = $230;
        $231 = HEAP8[$227>>0]|0;
        $232 = $231&255;
        $235 = $232;
       } else {
        $233 = (___shgetc($0)|0);
        $235 = $233;
       }
       $234 = ((2273) + ($235)|0);
       $236 = HEAP8[$234>>0]|0;
       $237 = $236&255;
       $238 = ($$1165168>>>0)>($237>>>0);
       if ($238) {
        $$7190 = $235;$209 = $226;$211 = $225;$218 = $236;
       } else {
        $$1165169 = $$1165168;$$8 = $235;$293 = $225;$294 = $226;
        label = 76;
        break;
       }
      }
     } else {
      $$1165169 = $$1165168;$$8 = $$6$lcssa;$293 = $297;$294 = $298;
      label = 76;
     }
    }
   } while(0);
   if ((label|0) == 76) {
    $239 = ((2273) + ($$8)|0);
    $240 = HEAP8[$239>>0]|0;
    $241 = $240&255;
    $242 = ($$1165169>>>0)>($241>>>0);
    if ($242) {
     while(1) {
      $243 = HEAP32[$7>>2]|0;
      $244 = HEAP32[$8>>2]|0;
      $245 = ($243>>>0)<($244>>>0);
      if ($245) {
       $246 = ((($243)) + 1|0);
       HEAP32[$7>>2] = $246;
       $247 = HEAP8[$243>>0]|0;
       $248 = $247&255;
       $251 = $248;
      } else {
       $249 = (___shgetc($0)|0);
       $251 = $249;
      }
      $250 = ((2273) + ($251)|0);
      $252 = HEAP8[$250>>0]|0;
      $253 = $252&255;
      $254 = ($$1165169>>>0)>($253>>>0);
      if (!($254)) {
       break;
      }
     }
     $255 = (___errno_location()|0);
     HEAP32[$255>>2] = 34;
     $256 = $3 & 1;
     $257 = ($256|0)==(0);
     $258 = (0)==(0);
     $259 = $257 & $258;
     $spec$select167 = $259 ? $$0157 : 0;
     $$1158 = $spec$select167;$265 = $4;$267 = $3;
    } else {
     $$1158 = $$0157;$265 = $294;$267 = $293;
    }
   }
   $260 = HEAP32[$8>>2]|0;
   $261 = ($260|0)==(0|0);
   if (!($261)) {
    $262 = HEAP32[$7>>2]|0;
    $263 = ((($262)) + -1|0);
    HEAP32[$7>>2] = $263;
   }
   $264 = ($265>>>0)<($4>>>0);
   $266 = ($267>>>0)<($3>>>0);
   $268 = ($265|0)==($4|0);
   $269 = $268 & $266;
   $270 = $264 | $269;
   if (!($270)) {
    $271 = $3 & 1;
    $272 = ($271|0)!=(0);
    $273 = (0)!=(0);
    $274 = $272 | $273;
    $275 = ($$1158|0)!=(0);
    $or$cond12 = $274 | $275;
    if (!($or$cond12)) {
     $276 = (___errno_location()|0);
     HEAP32[$276>>2] = 34;
     $277 = (_i64Add(($3|0),($4|0),-1,-1)|0);
     $278 = (getTempRet0() | 0);
     $291 = $278;$292 = $277;
     break;
    }
    $279 = ($265>>>0)>($4>>>0);
    $280 = ($267>>>0)>($3>>>0);
    $281 = ($265|0)==($4|0);
    $282 = $281 & $280;
    $283 = $279 | $282;
    if ($283) {
     $284 = (___errno_location()|0);
     HEAP32[$284>>2] = 34;
     $291 = $4;$292 = $3;
     break;
    }
   }
   $285 = ($$1158|0)<(0);
   $286 = $285 << 31 >> 31;
   $287 = $267 ^ $$1158;
   $288 = $265 ^ $286;
   $289 = (_i64Subtract(($287|0),($288|0),($$1158|0),($286|0))|0);
   $290 = (getTempRet0() | 0);
   $291 = $290;$292 = $289;
  }
 } while(0);
 setTempRet0(($291) | 0);
 return ($292|0);
}
function ___floatscan($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0102 = 0, $$0103 = 0, $$0104122 = 0, $$0110 = 0, $$0111 = 0.0, $$1$lcssa = 0, $$1105118 = 0, $$1123 = 0, $$2 = 0, $$2106120 = 0, $$3107 = 0, $$3121 = 0, $$4 = 0, $$4108 = 0, $$5 = 0, $$6 = 0, $$in = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0.0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond124 = 0, $or$cond5 = 0, $or$cond7 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($1|0) {
 case 0:  {
  $$0102 = -149;$$0103 = 24;
  label = 4;
  break;
 }
 case 1:  {
  $$0102 = -1074;$$0103 = 53;
  label = 4;
  break;
 }
 case 2:  {
  $$0102 = -1074;$$0103 = 53;
  label = 4;
  break;
 }
 default: {
  $$0111 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $3 = ((($0)) + 4|0);
   $4 = ((($0)) + 104|0);
   while(1) {
    $5 = HEAP32[$3>>2]|0;
    $6 = HEAP32[$4>>2]|0;
    $7 = ($5>>>0)<($6>>>0);
    if ($7) {
     $8 = ((($5)) + 1|0);
     HEAP32[$3>>2] = $8;
     $9 = HEAP8[$5>>0]|0;
     $10 = $9&255;
     $12 = $10;
    } else {
     $11 = (___shgetc($0)|0);
     $12 = $11;
    }
    $13 = (_isspace($12)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     break;
    }
   }
   L13: do {
    switch ($12|0) {
    case 43: case 45:  {
     $15 = ($12|0)==(45);
     $16 = $15&1;
     $17 = $16 << 1;
     $18 = (1 - ($17))|0;
     $19 = HEAP32[$3>>2]|0;
     $20 = HEAP32[$4>>2]|0;
     $21 = ($19>>>0)<($20>>>0);
     if ($21) {
      $22 = ((($19)) + 1|0);
      HEAP32[$3>>2] = $22;
      $23 = HEAP8[$19>>0]|0;
      $24 = $23&255;
      $$0 = $24;$$0110 = $18;
      break L13;
     } else {
      $25 = (___shgetc($0)|0);
      $$0 = $25;$$0110 = $18;
      break L13;
     }
     break;
    }
    default: {
     $$0 = $12;$$0110 = 1;
    }
    }
   } while(0);
   $$0104122 = 0;$$1123 = $$0;
   while(1) {
    $26 = $$1123 | 32;
    $27 = (12134 + ($$0104122)|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $28 << 24 >> 24;
    $30 = ($26|0)==($29|0);
    if (!($30)) {
     $$1$lcssa = $$1123;$trunc = $$0104122;
     break;
    }
    $31 = ($$0104122>>>0)<(7);
    do {
     if ($31) {
      $32 = HEAP32[$3>>2]|0;
      $33 = HEAP32[$4>>2]|0;
      $34 = ($32>>>0)<($33>>>0);
      if ($34) {
       $35 = ((($32)) + 1|0);
       HEAP32[$3>>2] = $35;
       $36 = HEAP8[$32>>0]|0;
       $37 = $36&255;
       $$2 = $37;
       break;
      } else {
       $38 = (___shgetc($0)|0);
       $$2 = $38;
       break;
      }
     } else {
      $$2 = $$1123;
     }
    } while(0);
    $39 = (($$0104122) + 1)|0;
    $40 = ($39>>>0)<(8);
    if ($40) {
     $$0104122 = $39;$$1123 = $$2;
    } else {
     $$1$lcssa = $$2;$trunc = 8;
     break;
    }
   }
   $trunc$clear = $trunc & 2147483647;
   L29: do {
    switch ($trunc$clear|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $41 = ($trunc>>>0)>(3);
     $42 = ($2|0)!=(0);
     $or$cond5 = $42 & $41;
     if ($or$cond5) {
      $43 = ($trunc|0)==(8);
      if ($43) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $57 = ($trunc|0)==(0);
     L34: do {
      if ($57) {
       $$2106120 = 0;$$3121 = $$1$lcssa;
       while(1) {
        $58 = $$3121 | 32;
        $59 = (12143 + ($$2106120)|0);
        $60 = HEAP8[$59>>0]|0;
        $61 = $60 << 24 >> 24;
        $62 = ($58|0)==($61|0);
        if (!($62)) {
         $$3107 = $$2106120;$$5 = $$3121;
         break L34;
        }
        $63 = ($$2106120>>>0)<(2);
        do {
         if ($63) {
          $64 = HEAP32[$3>>2]|0;
          $65 = HEAP32[$4>>2]|0;
          $66 = ($64>>>0)<($65>>>0);
          if ($66) {
           $67 = ((($64)) + 1|0);
           HEAP32[$3>>2] = $67;
           $68 = HEAP8[$64>>0]|0;
           $69 = $68&255;
           $$4 = $69;
           break;
          } else {
           $70 = (___shgetc($0)|0);
           $$4 = $70;
           break;
          }
         } else {
          $$4 = $$3121;
         }
        } while(0);
        $71 = (($$2106120) + 1)|0;
        $72 = ($71>>>0)<(3);
        if ($72) {
         $$2106120 = $71;$$3121 = $$4;
        } else {
         $$3107 = 3;$$5 = $$4;
         break;
        }
       }
      } else {
       $$3107 = $trunc;$$5 = $$1$lcssa;
      }
     } while(0);
     switch ($$3107|0) {
     case 3:  {
      $73 = HEAP32[$3>>2]|0;
      $74 = HEAP32[$4>>2]|0;
      $75 = ($73>>>0)<($74>>>0);
      if ($75) {
       $76 = ((($73)) + 1|0);
       HEAP32[$3>>2] = $76;
       $77 = HEAP8[$73>>0]|0;
       $78 = $77&255;
       $81 = $78;
      } else {
       $79 = (___shgetc($0)|0);
       $81 = $79;
      }
      $80 = ($81|0)==(40);
      if (!($80)) {
       $82 = HEAP32[$4>>2]|0;
       $83 = ($82|0)==(0|0);
       if ($83) {
        $$0111 = nan;
        break L4;
       }
       $84 = HEAP32[$3>>2]|0;
       $85 = ((($84)) + -1|0);
       HEAP32[$3>>2] = $85;
       $$0111 = nan;
       break L4;
      }
      $$4108 = 1;
      while(1) {
       $86 = HEAP32[$3>>2]|0;
       $87 = HEAP32[$4>>2]|0;
       $88 = ($86>>>0)<($87>>>0);
       if ($88) {
        $89 = ((($86)) + 1|0);
        HEAP32[$3>>2] = $89;
        $90 = HEAP8[$86>>0]|0;
        $91 = $90&255;
        $94 = $91;
       } else {
        $92 = (___shgetc($0)|0);
        $94 = $92;
       }
       $93 = (($94) + -48)|0;
       $95 = ($93>>>0)<(10);
       $96 = (($94) + -65)|0;
       $97 = ($96>>>0)<(26);
       $or$cond = $95 | $97;
       if (!($or$cond)) {
        $98 = (($94) + -97)|0;
        $99 = ($98>>>0)<(26);
        $100 = ($94|0)==(95);
        $or$cond7 = $100 | $99;
        if (!($or$cond7)) {
         break;
        }
       }
       $112 = (($$4108) + 1)|0;
       $$4108 = $112;
      }
      $101 = ($94|0)==(41);
      if ($101) {
       $$0111 = nan;
       break L4;
      }
      $102 = HEAP32[$4>>2]|0;
      $103 = ($102|0)==(0|0);
      if (!($103)) {
       $104 = HEAP32[$3>>2]|0;
       $105 = ((($104)) + -1|0);
       HEAP32[$3>>2] = $105;
      }
      if (!($42)) {
       $106 = (___errno_location()|0);
       HEAP32[$106>>2] = 22;
       ___shlim($0,0,0);
       $$0111 = 0.0;
       break L4;
      }
      $107 = ($$4108|0)==(0);
      if ($107) {
       $$0111 = nan;
       break L4;
      }
      $$in = $$4108;
      while(1) {
       $108 = (($$in) + -1)|0;
       if (!($103)) {
        $109 = HEAP32[$3>>2]|0;
        $110 = ((($109)) + -1|0);
        HEAP32[$3>>2] = $110;
       }
       $111 = ($108|0)==(0);
       if ($111) {
        $$0111 = nan;
        break L4;
       } else {
        $$in = $108;
       }
      }
      break;
     }
     case 0:  {
      $118 = ($$5|0)==(48);
      if ($118) {
       $119 = HEAP32[$3>>2]|0;
       $120 = HEAP32[$4>>2]|0;
       $121 = ($119>>>0)<($120>>>0);
       if ($121) {
        $122 = ((($119)) + 1|0);
        HEAP32[$3>>2] = $122;
        $123 = HEAP8[$119>>0]|0;
        $124 = $123&255;
        $127 = $124;
       } else {
        $125 = (___shgetc($0)|0);
        $127 = $125;
       }
       $126 = $127 | 32;
       $128 = ($126|0)==(120);
       if ($128) {
        $129 = (+_hexfloat($0,$$0103,$$0102,$$0110,$2));
        $$0111 = $129;
        break L4;
       }
       $130 = HEAP32[$4>>2]|0;
       $131 = ($130|0)==(0|0);
       if ($131) {
        $$6 = 48;
       } else {
        $132 = HEAP32[$3>>2]|0;
        $133 = ((($132)) + -1|0);
        HEAP32[$3>>2] = $133;
        $$6 = 48;
       }
      } else {
       $$6 = $$5;
      }
      $134 = (+_decfloat($0,$$6,$$0103,$$0102,$$0110,$2));
      $$0111 = $134;
      break L4;
      break;
     }
     default: {
      $113 = HEAP32[$4>>2]|0;
      $114 = ($113|0)==(0|0);
      if (!($114)) {
       $115 = HEAP32[$3>>2]|0;
       $116 = ((($115)) + -1|0);
       HEAP32[$3>>2] = $116;
      }
      $117 = (___errno_location()|0);
      HEAP32[$117>>2] = 22;
      ___shlim($0,0,0);
      $$0111 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $44 = HEAP32[$4>>2]|0;
    $45 = ($44|0)==(0|0);
    if (!($45)) {
     $46 = HEAP32[$3>>2]|0;
     $47 = ((($46)) + -1|0);
     HEAP32[$3>>2] = $47;
    }
    $48 = ($2|0)!=(0);
    $49 = ($trunc>>>0)>(3);
    $or$cond124 = $48 & $49;
    if ($or$cond124) {
     $$1105118 = $trunc;
     while(1) {
      if (!($45)) {
       $50 = HEAP32[$3>>2]|0;
       $51 = ((($50)) + -1|0);
       HEAP32[$3>>2] = $51;
      }
      $52 = (($$1105118) + -1)|0;
      $53 = ($52>>>0)>(3);
      if ($53) {
       $$1105118 = $52;
      } else {
       break;
      }
     }
    }
   }
   $54 = (+($$0110|0));
   $55 = $54 * inf;
   $56 = $55;
   $$0111 = $56;
  }
 } while(0);
 return (+$$0111);
}
function _hexfloat($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0$be = 0, $$0$ph = 0, $$0133 = 0, $$0143 = 0, $$0151 = 0, $$0154 = 0.0, $$0155 = 0.0, $$0158 = 0.0, $$0163 = 0, $$0169 = 0.0, $$0170 = 0, $$0170173 = 0, $$0170174 = 0, $$1149 = 0, $$1149$ph = 0, $$1152 = 0, $$1156 = 0.0, $$1159 = 0.0, $$1164 = 0;
 var $$2150 = 0, $$2153 = 0, $$2157 = 0.0, $$2160 = 0.0, $$2165 = 0, $$3 = 0, $$3$be = 0, $$3$lcssa = 0, $$3$ph = 0, $$3146 = 0, $$3146$ph = 0, $$3161$lcssa = 0.0, $$3161181 = 0.0, $$3166$lcssa = 0, $$3166185 = 0, $$4147 = 0, $$4162 = 0.0, $$4167$lcssa = 0, $$4167180 = 0, $$5 = 0.0;
 var $$5168 = 0, $$6 = 0, $$pn = 0.0, $$pre = 0, $$pre$phi204Z2D = 0.0, $$pre203 = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0.0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0;
 var $not$ = 0, $or$cond = 0, $or$cond172 = 0, $or$cond4 = 0, $or$cond6 = 0, $spec$select175 = 0.0, $spec$select176 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 104|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6>>>0)<($8>>>0);
 if ($9) {
  $10 = ((($6)) + 1|0);
  HEAP32[$5>>2] = $10;
  $11 = HEAP8[$6>>0]|0;
  $12 = $11&255;
  $$0$ph = $12;
 } else {
  $13 = (___shgetc($0)|0);
  $$0$ph = $13;
 }
 $$0 = $$0$ph;$$0143 = 0;
 L5: while(1) {
  switch ($$0|0) {
  case 46:  {
   label = 10;
   break L5;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $$1149$ph = 0;$$3$ph = $$0;$$3146$ph = $$0143;$212 = 0;$213 = 0;
   break L5;
  }
  }
  $14 = HEAP32[$5>>2]|0;
  $15 = HEAP32[$7>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$5>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $$0$be = $19;
  } else {
   $20 = (___shgetc($0)|0);
   $$0$be = $20;
  }
  $$0 = $$0$be;$$0143 = 1;
 }
 if ((label|0) == 10) {
  $21 = HEAP32[$5>>2]|0;
  $22 = HEAP32[$7>>2]|0;
  $23 = ($21>>>0)<($22>>>0);
  if ($23) {
   $24 = ((($21)) + 1|0);
   HEAP32[$5>>2] = $24;
   $25 = HEAP8[$21>>0]|0;
   $26 = $25&255;
   $29 = $26;
  } else {
   $27 = (___shgetc($0)|0);
   $29 = $27;
  }
  $28 = ($29|0)==(48);
  if ($28) {
   $37 = 0;$38 = 0;
   while(1) {
    $30 = HEAP32[$5>>2]|0;
    $31 = HEAP32[$7>>2]|0;
    $32 = ($30>>>0)<($31>>>0);
    if ($32) {
     $33 = ((($30)) + 1|0);
     HEAP32[$5>>2] = $33;
     $34 = HEAP8[$30>>0]|0;
     $35 = $34&255;
     $42 = $35;
    } else {
     $36 = (___shgetc($0)|0);
     $42 = $36;
    }
    $39 = (_i64Add(($37|0),($38|0),-1,-1)|0);
    $40 = (getTempRet0() | 0);
    $41 = ($42|0)==(48);
    if ($41) {
     $37 = $39;$38 = $40;
    } else {
     $$1149$ph = 1;$$3$ph = $42;$$3146$ph = 1;$212 = $39;$213 = $40;
     break;
    }
   }
  } else {
   $$1149$ph = 1;$$3$ph = $29;$$3146$ph = $$0143;$212 = 0;$213 = 0;
  }
 }
 $$0151 = 0;$$0155 = 1.0;$$0158 = 0.0;$$0163 = 0;$$1149 = $$1149$ph;$$3 = $$3$ph;$$3146 = $$3146$ph;$52 = 0;$54 = 0;$97 = $212;$99 = $213;
 while(1) {
  $43 = (($$3) + -48)|0;
  $44 = ($43>>>0)<(10);
  $$pre = $$3 | 32;
  if ($44) {
   label = 24;
  } else {
   $45 = (($$pre) + -97)|0;
   $46 = ($45>>>0)<(6);
   $47 = ($$3|0)==(46);
   $or$cond6 = $47 | $46;
   if (!($or$cond6)) {
    $$3$lcssa = $$3;
    break;
   }
   if ($47) {
    $48 = ($$1149|0)==(0);
    if ($48) {
     $$2150 = 1;$$2153 = $$0151;$$2157 = $$0155;$$2160 = $$0158;$$2165 = $$0163;$$4147 = $$3146;$214 = $54;$215 = $52;$216 = $54;$217 = $52;
    } else {
     $$3$lcssa = 46;
     break;
    }
   } else {
    label = 24;
   }
  }
  if ((label|0) == 24) {
   label = 0;
   $49 = ($$3|0)>(57);
   $50 = (($$pre) + -87)|0;
   $$0133 = $49 ? $50 : $43;
   $51 = ($52|0)<(0);
   $53 = ($54>>>0)<(8);
   $55 = ($52|0)==(0);
   $56 = $55 & $53;
   $57 = $51 | $56;
   do {
    if ($57) {
     $58 = $$0163 << 4;
     $59 = (($$0133) + ($58))|0;
     $$1152 = $$0151;$$1156 = $$0155;$$1159 = $$0158;$$1164 = $59;
    } else {
     $60 = ($52|0)<(0);
     $61 = ($54>>>0)<(14);
     $62 = ($52|0)==(0);
     $63 = $62 & $61;
     $64 = $60 | $63;
     if ($64) {
      $65 = (+($$0133|0));
      $66 = $$0155 * 0.0625;
      $67 = $66 * $65;
      $68 = $$0158 + $67;
      $$1152 = $$0151;$$1156 = $66;$$1159 = $68;$$1164 = $$0163;
      break;
     } else {
      $69 = ($$0133|0)==(0);
      $70 = ($$0151|0)!=(0);
      $or$cond = $70 | $69;
      $71 = $$0155 * 0.5;
      $72 = $$0158 + $71;
      $spec$select175 = $or$cond ? $$0158 : $72;
      $spec$select176 = $or$cond ? $$0151 : 1;
      $$1152 = $spec$select176;$$1156 = $$0155;$$1159 = $spec$select175;$$1164 = $$0163;
      break;
     }
    }
   } while(0);
   $73 = (_i64Add(($54|0),($52|0),1,0)|0);
   $74 = (getTempRet0() | 0);
   $$2150 = $$1149;$$2153 = $$1152;$$2157 = $$1156;$$2160 = $$1159;$$2165 = $$1164;$$4147 = 1;$214 = $97;$215 = $99;$216 = $73;$217 = $74;
  }
  $75 = HEAP32[$5>>2]|0;
  $76 = HEAP32[$7>>2]|0;
  $77 = ($75>>>0)<($76>>>0);
  if ($77) {
   $78 = ((($75)) + 1|0);
   HEAP32[$5>>2] = $78;
   $79 = HEAP8[$75>>0]|0;
   $80 = $79&255;
   $$3$be = $80;
  } else {
   $81 = (___shgetc($0)|0);
   $$3$be = $81;
  }
  $$0151 = $$2153;$$0155 = $$2157;$$0158 = $$2160;$$0163 = $$2165;$$1149 = $$2150;$$3 = $$3$be;$$3146 = $$4147;$52 = $217;$54 = $216;$97 = $214;$99 = $215;
 }
 $82 = ($$3146|0)==(0);
 do {
  if ($82) {
   $83 = HEAP32[$7>>2]|0;
   $84 = ($83|0)==(0|0);
   if (!($84)) {
    $85 = HEAP32[$5>>2]|0;
    $86 = ((($85)) + -1|0);
    HEAP32[$5>>2] = $86;
   }
   $87 = ($4|0)==(0);
   if ($87) {
    ___shlim($0,0,0);
   } else {
    if (!($84)) {
     $88 = HEAP32[$5>>2]|0;
     $89 = ((($88)) + -1|0);
     HEAP32[$5>>2] = $89;
     $90 = ($$1149|0)==(0);
     $brmerge = $90 | $84;
     if (!($brmerge)) {
      $91 = HEAP32[$5>>2]|0;
      $92 = ((($91)) + -1|0);
      HEAP32[$5>>2] = $92;
     }
    }
   }
   $93 = (+($3|0));
   $94 = $93 * 0.0;
   $$0169 = $94;
  } else {
   $95 = ($$1149|0)==(0);
   $96 = $95 ? $54 : $97;
   $98 = $95 ? $52 : $99;
   $100 = ($52|0)<(0);
   $101 = ($54>>>0)<(8);
   $102 = ($52|0)==(0);
   $103 = $102 & $101;
   $104 = $100 | $103;
   if ($104) {
    $$3166185 = $$0163;$106 = $54;$107 = $52;
    while(1) {
     $105 = $$3166185 << 4;
     $108 = (_i64Add(($106|0),($107|0),1,0)|0);
     $109 = (getTempRet0() | 0);
     $110 = ($107|0)<(0);
     $111 = ($106>>>0)<(7);
     $112 = ($107|0)==(0);
     $113 = $112 & $111;
     $114 = $110 | $113;
     if ($114) {
      $$3166185 = $105;$106 = $108;$107 = $109;
     } else {
      $$3166$lcssa = $105;
      break;
     }
    }
   } else {
    $$3166$lcssa = $$0163;
   }
   $115 = $$3$lcssa | 32;
   $116 = ($115|0)==(112);
   if ($116) {
    $117 = (_scanexp($0,$4)|0);
    $118 = (getTempRet0() | 0);
    $119 = ($117|0)==(0);
    $120 = ($118|0)==(-2147483648);
    $121 = $119 & $120;
    if ($121) {
     $122 = ($4|0)==(0);
     if ($122) {
      ___shlim($0,0,0);
      $$0169 = 0.0;
      break;
     }
     $123 = HEAP32[$7>>2]|0;
     $124 = ($123|0)==(0|0);
     if ($124) {
      $135 = 0;$136 = 0;
     } else {
      $125 = HEAP32[$5>>2]|0;
      $126 = ((($125)) + -1|0);
      HEAP32[$5>>2] = $126;
      $135 = 0;$136 = 0;
     }
    } else {
     $135 = $117;$136 = $118;
    }
   } else {
    $127 = HEAP32[$7>>2]|0;
    $128 = ($127|0)==(0|0);
    if ($128) {
     $135 = 0;$136 = 0;
    } else {
     $129 = HEAP32[$5>>2]|0;
     $130 = ((($129)) + -1|0);
     HEAP32[$5>>2] = $130;
     $135 = 0;$136 = 0;
    }
   }
   $131 = (_bitshift64Shl(($96|0),($98|0),2)|0);
   $132 = (getTempRet0() | 0);
   $133 = (_i64Add(($131|0),($132|0),-32,-1)|0);
   $134 = (getTempRet0() | 0);
   $137 = (_i64Add(($133|0),($134|0),($135|0),($136|0))|0);
   $138 = (getTempRet0() | 0);
   $139 = ($$3166$lcssa|0)==(0);
   if ($139) {
    $140 = (+($3|0));
    $141 = $140 * 0.0;
    $$0169 = $141;
    break;
   }
   $142 = (0 - ($2))|0;
   $143 = ($142|0)<(0);
   $144 = $143 << 31 >> 31;
   $145 = ($138|0)>($144|0);
   $146 = ($137>>>0)>($142>>>0);
   $147 = ($138|0)==($144|0);
   $148 = $147 & $146;
   $149 = $145 | $148;
   if ($149) {
    $150 = (___errno_location()|0);
    HEAP32[$150>>2] = 34;
    $151 = (+($3|0));
    $152 = $151 * 1.7976931348623157E+308;
    $153 = $152 * 1.7976931348623157E+308;
    $$0169 = $153;
    break;
   }
   $154 = (($2) + -106)|0;
   $155 = ($154|0)<(0);
   $156 = $155 << 31 >> 31;
   $157 = ($138|0)<($156|0);
   $158 = ($137>>>0)<($154>>>0);
   $159 = ($138|0)==($156|0);
   $160 = $159 & $158;
   $161 = $157 | $160;
   if ($161) {
    $162 = (___errno_location()|0);
    HEAP32[$162>>2] = 34;
    $163 = (+($3|0));
    $164 = $163 * 2.2250738585072014E-308;
    $165 = $164 * 2.2250738585072014E-308;
    $$0169 = $165;
    break;
   }
   $166 = ($$3166$lcssa|0)>(-1);
   if ($166) {
    $$3161181 = $$0158;$$4167180 = $$3166$lcssa;$171 = $137;$172 = $138;
    while(1) {
     $167 = !($$3161181 >= 0.5);
     $168 = $$4167180 << 1;
     $169 = $$3161181 + -1.0;
     $not$ = $167 ^ 1;
     $170 = $not$&1;
     $$5168 = $168 | $170;
     $$pn = $167 ? $$3161181 : $169;
     $$4162 = $$3161181 + $$pn;
     $173 = (_i64Add(($171|0),($172|0),-1,-1)|0);
     $174 = (getTempRet0() | 0);
     $175 = ($$5168|0)>(-1);
     if ($175) {
      $$3161181 = $$4162;$$4167180 = $$5168;$171 = $173;$172 = $174;
     } else {
      $$3161$lcssa = $$4162;$$4167$lcssa = $$5168;$182 = $173;$183 = $174;
      break;
     }
    }
   } else {
    $$3161$lcssa = $$0158;$$4167$lcssa = $$3166$lcssa;$182 = $137;$183 = $138;
   }
   $176 = ($1|0)<(0);
   $177 = $176 << 31 >> 31;
   $178 = ($2|0)<(0);
   $179 = $178 << 31 >> 31;
   $180 = (_i64Subtract(32,0,($2|0),($179|0))|0);
   $181 = (getTempRet0() | 0);
   $184 = (_i64Add(($180|0),($181|0),($182|0),($183|0))|0);
   $185 = (getTempRet0() | 0);
   $186 = ($185|0)<($177|0);
   $187 = ($184>>>0)<($1>>>0);
   $188 = ($185|0)==($177|0);
   $189 = $188 & $187;
   $190 = $186 | $189;
   if ($190) {
    $191 = ($184|0)>(0);
    if ($191) {
     $$0170 = $184;
     label = 65;
    } else {
     $$0170174 = 0;$195 = 84;
     label = 67;
    }
   } else {
    $$0170 = $1;
    label = 65;
   }
   if ((label|0) == 65) {
    $192 = ($$0170|0)<(53);
    $193 = (84 - ($$0170))|0;
    if ($192) {
     $$0170174 = $$0170;$195 = $193;
     label = 67;
    } else {
     $$pre203 = (+($3|0));
     $$0154 = 0.0;$$0170173 = $$0170;$$pre$phi204Z2D = $$pre203;
    }
   }
   if ((label|0) == 67) {
    $194 = (+($3|0));
    $196 = (+_scalbn(1.0,$195));
    $197 = (+_copysignl($196,$194));
    $$0154 = $197;$$0170173 = $$0170174;$$pre$phi204Z2D = $194;
   }
   $198 = ($$0170173|0)<(32);
   $199 = $$3161$lcssa != 0.0;
   $or$cond4 = $199 & $198;
   $200 = $$4167$lcssa & 1;
   $201 = ($200|0)==(0);
   $or$cond172 = $201 & $or$cond4;
   $202 = $or$cond172&1;
   $$6 = (($$4167$lcssa) + ($202))|0;
   $$5 = $or$cond172 ? 0.0 : $$3161$lcssa;
   $203 = (+($$6>>>0));
   $204 = $$pre$phi204Z2D * $203;
   $205 = $$0154 + $204;
   $206 = $$5 * $$pre$phi204Z2D;
   $207 = $206 + $205;
   $208 = $207 - $$0154;
   $209 = $208 != 0.0;
   if (!($209)) {
    $210 = (___errno_location()|0);
    HEAP32[$210>>2] = 34;
   }
   $211 = (+_scalbnl($208,$182));
   $$0169 = $211;
  }
 } while(0);
 return (+$$0169);
}
function _decfloat($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0324 = 0, $$0324$be = 0, $$0327480 = 0, $$0328 = 0, $$0329 = 0, $$0331476 = 0, $$0335486 = 0, $$0336$lcssa = 0, $$0336453 = 0, $$0336454 = 0, $$0336455 = 0, $$0336503 = 0, $$0340$lcssa = 0, $$0340457 = 0, $$0340458 = 0, $$0340459 = 0, $$0340502 = 0, $$0345$lcssa540 = 0, $$0345484 = 0, $$0355 = 0.0;
 var $$0356 = 0.0, $$0360474 = 0.0, $$0367 = 0, $$0376 = 0, $$0376$ph = 0, $$0381$lcssa539 = 0, $$0381483 = 0, $$0390 = 0, $$0393 = 0, $$0398$lcssa = 0, $$0398463 = 0, $$0398464 = 0, $$0398465 = 0, $$0398499 = 0, $$1 = 0.0, $$10473 = 0, $$11 = 0, $$1330 = 0, $$1357 = 0.0, $$1361 = 0.0;
 var $$1377 = 0, $$1377$ph = 0, $$1377$ph$ph = 0, $$1391$lcssa = 0, $$1391501 = 0, $$2 = 0, $$2338 = 0, $$2342 = 0, $$2362 = 0.0, $$2366$v = 0, $$2369 = 0, $$2369$ph = 0, $$2369$ph579 = 0, $$2392 = 0, $$2395 = 0, $$2400 = 0, $$3$lcssa = 0, $$3339493 = 0, $$3343 = 0, $$3348$ph = 0;
 var $$3348$ph580 = 0, $$3359 = 0.0, $$3363 = 0.0, $$3370 = 0, $$3379 = 0, $$3384$ph = 0, $$3384$ph578 = 0, $$3396$lcssa = 0, $$3396500 = 0, $$3504 = 0, $$4344485 = 0, $$4380 = 0, $$4397 = 0, $$4475 = 0, $$5 = 0, $$5$in = 0, $$5350 = 0, $$5350$ph = 0, $$5350$ph$ph = 0, $$5372 = 0;
 var $$5386$ph = 0, $$5386$ph576 = 0, $$5386$ph576$ph = 0, $$6351478 = 0, $$6387477 = 0, $$6479 = 0, $$7374$ph$ph = 0, $$neg447 = 0, $$neg448 = 0, $$pre = 0, $$promoted = 0, $$sink$off0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0;
 var $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0.0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0.0, $313 = 0, $314 = 0, $315 = 0.0, $316 = 0.0, $317 = 0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0.0, $327 = 0.0, $328 = 0, $329 = 0.0, $33 = 0, $330 = 0.0, $331 = 0.0, $332 = 0.0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0.0, $344 = 0.0, $345 = 0, $346 = 0.0, $347 = 0.0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0, $356 = 0, $357 = 0.0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0.0;
 var $361 = 0.0, $362 = 0, $363 = 0, $364 = 0, $365 = 0.0, $366 = 0, $367 = 0.0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0.0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cond = 0, $exitcond = 0, $narrow = 0, $not$ = 0, $or$cond = 0, $or$cond3 = 0, $or$cond414 = 0, $or$cond416 = 0, $or$cond417 = 0, $or$cond418 = 0, $or$cond421 = 0, $or$cond559 = 0, $or$cond9 = 0, $spec$select = 0, $spec$select410 = 0, $spec$select411 = 0, $spec$select419 = 0, $spec$select420 = 0, $spec$select439 = 0;
 var $spec$select440 = 0, $spec$select441 = 0, $spec$select442 = 0, $spec$select443 = 0, $spec$store$select = 0, $storemerge446 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $6 = sp;
 $7 = (($3) + ($2))|0;
 $8 = (0 - ($7))|0;
 $9 = ((($0)) + 4|0);
 $10 = ((($0)) + 104|0);
 $$0324 = $1;$$0393 = 0;
 L1: while(1) {
  switch ($$0324|0) {
  case 46:  {
   label = 7;
   break L1;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $$0390 = 0;$$2 = $$0324;$$2395 = $$0393;$375 = 0;$376 = 0;
   break L1;
  }
  }
  $11 = HEAP32[$9>>2]|0;
  $12 = HEAP32[$10>>2]|0;
  $13 = ($11>>>0)<($12>>>0);
  if ($13) {
   $14 = ((($11)) + 1|0);
   HEAP32[$9>>2] = $14;
   $15 = HEAP8[$11>>0]|0;
   $16 = $15&255;
   $$0324$be = $16;
  } else {
   $17 = (___shgetc($0)|0);
   $$0324$be = $17;
  }
  $$0324 = $$0324$be;$$0393 = 1;
 }
 if ((label|0) == 7) {
  $18 = HEAP32[$9>>2]|0;
  $19 = HEAP32[$10>>2]|0;
  $20 = ($18>>>0)<($19>>>0);
  if ($20) {
   $21 = ((($18)) + 1|0);
   HEAP32[$9>>2] = $21;
   $22 = HEAP8[$18>>0]|0;
   $23 = $22&255;
   $26 = $23;
  } else {
   $24 = (___shgetc($0)|0);
   $26 = $24;
  }
  $25 = ($26|0)==(48);
  if ($25) {
   $27 = 0;$28 = 0;
   while(1) {
    $29 = (_i64Add(($27|0),($28|0),-1,-1)|0);
    $30 = (getTempRet0() | 0);
    $31 = HEAP32[$9>>2]|0;
    $32 = HEAP32[$10>>2]|0;
    $33 = ($31>>>0)<($32>>>0);
    if ($33) {
     $34 = ((($31)) + 1|0);
     HEAP32[$9>>2] = $34;
     $35 = HEAP8[$31>>0]|0;
     $36 = $35&255;
     $39 = $36;
    } else {
     $37 = (___shgetc($0)|0);
     $39 = $37;
    }
    $38 = ($39|0)==(48);
    if ($38) {
     $27 = $29;$28 = $30;
    } else {
     $$0390 = 1;$$2 = $39;$$2395 = 1;$375 = $29;$376 = $30;
     break;
    }
   }
  } else {
   $$0390 = 1;$$2 = $26;$$2395 = $$0393;$375 = 0;$376 = 0;
  }
 }
 HEAP32[$6>>2] = 0;
 $40 = (($$2) + -48)|0;
 $41 = ($40>>>0)<(10);
 $42 = ($$2|0)==(46);
 $43 = $42 | $41;
 L22: do {
  if ($43) {
   $44 = ((($6)) + 496|0);
   $$0336503 = 0;$$0340502 = 0;$$0398499 = 0;$$1391501 = $$0390;$$3396500 = $$2395;$$3504 = $$2;$377 = $42;$378 = $40;$379 = $375;$380 = $376;$47 = 0;$48 = 0;
   L24: while(1) {
    do {
     if ($377) {
      $cond = ($$1391501|0)==(0);
      if ($cond) {
       $$2338 = $$0336503;$$2342 = $$0340502;$$2392 = 1;$$2400 = $$0398499;$$4397 = $$3396500;$381 = $47;$382 = $48;$383 = $47;$384 = $48;
      } else {
       break L24;
      }
     } else {
      $46 = ($$0340502|0)<(125);
      $49 = (_i64Add(($47|0),($48|0),1,0)|0);
      $50 = (getTempRet0() | 0);
      $51 = ($$3504|0)!=(48);
      if (!($46)) {
       if (!($51)) {
        $$2338 = $$0336503;$$2342 = $$0340502;$$2392 = $$1391501;$$2400 = $$0398499;$$4397 = $$3396500;$381 = $379;$382 = $380;$383 = $49;$384 = $50;
        break;
       }
       $61 = HEAP32[$44>>2]|0;
       $62 = $61 | 1;
       HEAP32[$44>>2] = $62;
       $$2338 = $$0336503;$$2342 = $$0340502;$$2392 = $$1391501;$$2400 = $$0398499;$$4397 = $$3396500;$381 = $379;$382 = $380;$383 = $49;$384 = $50;
       break;
      }
      $spec$select = $51 ? $49 : $$0398499;
      $52 = ($$0336503|0)==(0);
      $53 = (($6) + ($$0340502<<2)|0);
      if ($52) {
       $storemerge446 = $378;
      } else {
       $54 = HEAP32[$53>>2]|0;
       $55 = ($54*10)|0;
       $56 = (($$3504) + -48)|0;
       $57 = (($56) + ($55))|0;
       $storemerge446 = $57;
      }
      HEAP32[$53>>2] = $storemerge446;
      $58 = (($$0336503) + 1)|0;
      $59 = ($58|0)==(9);
      $60 = $59&1;
      $spec$select410 = (($$0340502) + ($60))|0;
      $spec$select411 = $59 ? 0 : $58;
      $$2338 = $spec$select411;$$2342 = $spec$select410;$$2392 = $$1391501;$$2400 = $spec$select;$$4397 = 1;$381 = $379;$382 = $380;$383 = $49;$384 = $50;
     }
    } while(0);
    $63 = HEAP32[$9>>2]|0;
    $64 = HEAP32[$10>>2]|0;
    $65 = ($63>>>0)<($64>>>0);
    if ($65) {
     $66 = ((($63)) + 1|0);
     HEAP32[$9>>2] = $66;
     $67 = HEAP8[$63>>0]|0;
     $68 = $67&255;
     $71 = $68;
    } else {
     $69 = (___shgetc($0)|0);
     $71 = $69;
    }
    $70 = (($71) + -48)|0;
    $72 = ($70>>>0)<(10);
    $73 = ($71|0)==(46);
    $74 = $73 | $72;
    if ($74) {
     $$0336503 = $$2338;$$0340502 = $$2342;$$0398499 = $$2400;$$1391501 = $$2392;$$3396500 = $$4397;$$3504 = $71;$377 = $73;$378 = $70;$379 = $381;$380 = $382;$47 = $383;$48 = $384;
    } else {
     $$0336$lcssa = $$2338;$$0340$lcssa = $$2342;$$0398$lcssa = $$2400;$$1391$lcssa = $$2392;$$3$lcssa = $71;$$3396$lcssa = $$4397;$77 = $383;$78 = $381;$80 = $384;$81 = $382;
     label = 31;
     break L22;
    }
   }
   $45 = ($$3396500|0)!=(0);
   $$0336455 = $$0336503;$$0340459 = $$0340502;$$0398465 = $$0398499;$385 = $47;$386 = $48;$387 = $379;$388 = $380;$389 = $45;
   label = 39;
  } else {
   $$0336$lcssa = 0;$$0340$lcssa = 0;$$0398$lcssa = 0;$$1391$lcssa = $$0390;$$3$lcssa = $$2;$$3396$lcssa = $$2395;$77 = 0;$78 = $375;$80 = 0;$81 = $376;
   label = 31;
  }
 } while(0);
 do {
  if ((label|0) == 31) {
   $75 = ($$1391$lcssa|0)==(0);
   $76 = $75 ? $77 : $78;
   $79 = $75 ? $80 : $81;
   $82 = ($$3396$lcssa|0)!=(0);
   $83 = $$3$lcssa | 32;
   $84 = ($83|0)==(101);
   $or$cond414 = $82 & $84;
   if (!($or$cond414)) {
    $99 = ($$3$lcssa|0)>(-1);
    if ($99) {
     $$0336455 = $$0336$lcssa;$$0340459 = $$0340$lcssa;$$0398465 = $$0398$lcssa;$385 = $77;$386 = $80;$387 = $76;$388 = $79;$389 = $82;
     label = 39;
     break;
    } else {
     $$0336454 = $$0336$lcssa;$$0340458 = $$0340$lcssa;$$0398464 = $$0398$lcssa;$390 = $77;$391 = $80;$392 = $82;$393 = $76;$394 = $79;
     label = 41;
     break;
    }
   }
   $85 = (_scanexp($0,$5)|0);
   $86 = (getTempRet0() | 0);
   $87 = ($85|0)==(0);
   $88 = ($86|0)==(-2147483648);
   $89 = $87 & $88;
   if ($89) {
    $90 = ($5|0)==(0);
    if ($90) {
     ___shlim($0,0,0);
     $$1 = 0.0;
     break;
    }
    $91 = HEAP32[$10>>2]|0;
    $92 = ($91|0)==(0|0);
    if ($92) {
     $95 = 0;$96 = 0;
    } else {
     $93 = HEAP32[$9>>2]|0;
     $94 = ((($93)) + -1|0);
     HEAP32[$9>>2] = $94;
     $95 = 0;$96 = 0;
    }
   } else {
    $95 = $85;$96 = $86;
   }
   $97 = (_i64Add(($95|0),($96|0),($76|0),($79|0))|0);
   $98 = (getTempRet0() | 0);
   $$0336453 = $$0336$lcssa;$$0340457 = $$0340$lcssa;$$0398463 = $$0398$lcssa;$110 = $97;$111 = $77;$113 = $98;$114 = $80;
   label = 43;
  }
 } while(0);
 if ((label|0) == 39) {
  $100 = HEAP32[$10>>2]|0;
  $101 = ($100|0)==(0|0);
  if ($101) {
   $$0336454 = $$0336455;$$0340458 = $$0340459;$$0398464 = $$0398465;$390 = $385;$391 = $386;$392 = $389;$393 = $387;$394 = $388;
   label = 41;
  } else {
   $102 = HEAP32[$9>>2]|0;
   $103 = ((($102)) + -1|0);
   HEAP32[$9>>2] = $103;
   if ($389) {
    $$0336453 = $$0336455;$$0340457 = $$0340459;$$0398463 = $$0398465;$110 = $387;$111 = $385;$113 = $388;$114 = $386;
    label = 43;
   } else {
    label = 42;
   }
  }
 }
 if ((label|0) == 41) {
  if ($392) {
   $$0336453 = $$0336454;$$0340457 = $$0340458;$$0398463 = $$0398464;$110 = $393;$111 = $390;$113 = $394;$114 = $391;
   label = 43;
  } else {
   label = 42;
  }
 }
 do {
  if ((label|0) == 42) {
   $104 = (___errno_location()|0);
   HEAP32[$104>>2] = 22;
   ___shlim($0,0,0);
   $$1 = 0.0;
  }
  else if ((label|0) == 43) {
   $105 = HEAP32[$6>>2]|0;
   $106 = ($105|0)==(0);
   if ($106) {
    $107 = (+($4|0));
    $108 = $107 * 0.0;
    $$1 = $108;
    break;
   }
   $109 = ($110|0)==($111|0);
   $112 = ($113|0)==($114|0);
   $115 = $109 & $112;
   $116 = ($114|0)<(0);
   $117 = ($111>>>0)<(10);
   $118 = ($114|0)==(0);
   $119 = $118 & $117;
   $120 = $116 | $119;
   $or$cond = $120 & $115;
   if ($or$cond) {
    $121 = ($2|0)>(30);
    $122 = $105 >>> $2;
    $123 = ($122|0)==(0);
    $or$cond416 = $121 | $123;
    if ($or$cond416) {
     $124 = (+($4|0));
     $125 = (+($105>>>0));
     $126 = $124 * $125;
     $$1 = $126;
     break;
    }
   }
   $127 = (($3|0) / -2)&-1;
   $128 = ($127|0)<(0);
   $129 = $128 << 31 >> 31;
   $130 = ($113|0)>($129|0);
   $131 = ($110>>>0)>($127>>>0);
   $132 = ($113|0)==($129|0);
   $133 = $132 & $131;
   $134 = $130 | $133;
   if ($134) {
    $135 = (___errno_location()|0);
    HEAP32[$135>>2] = 34;
    $136 = (+($4|0));
    $137 = $136 * 1.7976931348623157E+308;
    $138 = $137 * 1.7976931348623157E+308;
    $$1 = $138;
    break;
   }
   $139 = (($3) + -106)|0;
   $140 = ($139|0)<(0);
   $141 = $140 << 31 >> 31;
   $142 = ($113|0)<($141|0);
   $143 = ($110>>>0)<($139>>>0);
   $144 = ($113|0)==($141|0);
   $145 = $144 & $143;
   $146 = $142 | $145;
   if ($146) {
    $147 = (___errno_location()|0);
    HEAP32[$147>>2] = 34;
    $148 = (+($4|0));
    $149 = $148 * 2.2250738585072014E-308;
    $150 = $149 * 2.2250738585072014E-308;
    $$1 = $150;
    break;
   }
   $151 = ($$0336453|0)==(0);
   if ($151) {
    $$3343 = $$0340457;
   } else {
    $152 = ($$0336453|0)<(9);
    if ($152) {
     $153 = (($6) + ($$0340457<<2)|0);
     $$promoted = HEAP32[$153>>2]|0;
     $$3339493 = $$0336453;$155 = $$promoted;
     while(1) {
      $154 = ($155*10)|0;
      $156 = (($$3339493) + 1)|0;
      $157 = ($$3339493|0)<(8);
      if ($157) {
       $$3339493 = $156;$155 = $154;
      } else {
       break;
      }
     }
     HEAP32[$153>>2] = $154;
    }
    $158 = (($$0340457) + 1)|0;
    $$3343 = $158;
   }
   $159 = ($$0398463|0)<(9);
   if ($159) {
    $160 = ($$0398463|0)<=($110|0);
    $161 = ($110|0)<(18);
    $or$cond3 = $160 & $161;
    if ($or$cond3) {
     $162 = ($110|0)==(9);
     if ($162) {
      $163 = (+($4|0));
      $164 = HEAP32[$6>>2]|0;
      $165 = (+($164>>>0));
      $166 = $163 * $165;
      $$1 = $166;
      break;
     }
     $167 = ($110|0)<(9);
     if ($167) {
      $168 = (+($4|0));
      $169 = HEAP32[$6>>2]|0;
      $170 = (+($169>>>0));
      $171 = $168 * $170;
      $172 = (8 - ($110))|0;
      $173 = (2240 + ($172<<2)|0);
      $174 = HEAP32[$173>>2]|0;
      $175 = (+($174|0));
      $176 = $171 / $175;
      $$1 = $176;
      break;
     }
     $$neg447 = Math_imul($110, -3)|0;
     $$neg448 = (($2) + 27)|0;
     $177 = (($$neg448) + ($$neg447))|0;
     $178 = ($177|0)>(30);
     $$pre = HEAP32[$6>>2]|0;
     $179 = $$pre >>> $177;
     $180 = ($179|0)==(0);
     $or$cond559 = $178 | $180;
     if ($or$cond559) {
      $181 = (+($4|0));
      $182 = (+($$pre>>>0));
      $183 = $181 * $182;
      $184 = (($110) + -10)|0;
      $185 = (2240 + ($184<<2)|0);
      $186 = HEAP32[$185>>2]|0;
      $187 = (+($186|0));
      $188 = $183 * $187;
      $$1 = $188;
      break;
     }
    }
   }
   $189 = (($110|0) % 9)&-1;
   $190 = ($189|0)==(0);
   if ($190) {
    $$2369$ph = $$3343;$$3348$ph = 0;$$3384$ph = $110;
   } else {
    $191 = ($110|0)>(-1);
    $192 = (($189) + 9)|0;
    $193 = $191 ? $189 : $192;
    $194 = (8 - ($193))|0;
    $195 = (2240 + ($194<<2)|0);
    $196 = HEAP32[$195>>2]|0;
    $197 = ($$3343|0)==(0);
    if ($197) {
     $$0345$lcssa540 = 0;$$0367 = 0;$$0381$lcssa539 = $110;
    } else {
     $198 = (1000000000 / ($196|0))&-1;
     $$0335486 = 0;$$0345484 = 0;$$0381483 = $110;$$4344485 = 0;
     while(1) {
      $199 = (($6) + ($$4344485<<2)|0);
      $200 = HEAP32[$199>>2]|0;
      $201 = (($200>>>0) / ($196>>>0))&-1;
      $202 = Math_imul($201, $196)|0;
      $203 = (($200) - ($202))|0;
      $204 = (($201) + ($$0335486))|0;
      HEAP32[$199>>2] = $204;
      $205 = Math_imul($198, $203)|0;
      $206 = ($$4344485|0)==($$0345484|0);
      $207 = ($204|0)==(0);
      $or$cond417 = $206 & $207;
      $208 = (($$0345484) + 1)|0;
      $209 = $208 & 127;
      $210 = (($$0381483) + -9)|0;
      $spec$select439 = $or$cond417 ? $210 : $$0381483;
      $spec$select440 = $or$cond417 ? $209 : $$0345484;
      $211 = (($$4344485) + 1)|0;
      $212 = ($211|0)==($$3343|0);
      if ($212) {
       break;
      } else {
       $$0335486 = $205;$$0345484 = $spec$select440;$$0381483 = $spec$select439;$$4344485 = $211;
      }
     }
     $213 = ($205|0)==(0);
     if ($213) {
      $$0345$lcssa540 = $spec$select440;$$0367 = $$3343;$$0381$lcssa539 = $spec$select439;
     } else {
      $214 = (($6) + ($$3343<<2)|0);
      $215 = (($$3343) + 1)|0;
      HEAP32[$214>>2] = $205;
      $$0345$lcssa540 = $spec$select440;$$0367 = $215;$$0381$lcssa539 = $spec$select439;
     }
    }
    $216 = (9 - ($193))|0;
    $217 = (($216) + ($$0381$lcssa539))|0;
    $$2369$ph = $$0367;$$3348$ph = $$0345$lcssa540;$$3384$ph = $217;
   }
   $$0376$ph = 0;$$2369$ph579 = $$2369$ph;$$3348$ph580 = $$3348$ph;$$3384$ph578 = $$3384$ph;
   L104: while(1) {
    $218 = ($$3384$ph578|0)<(18);
    $219 = ($$3384$ph578|0)==(18);
    $220 = (($6) + ($$3348$ph580<<2)|0);
    $$0376 = $$0376$ph;$$2369 = $$2369$ph579;
    while(1) {
     if (!($218)) {
      if (!($219)) {
       $$5386$ph = $$3384$ph578;
       break L104;
      }
      $221 = HEAP32[$220>>2]|0;
      $222 = ($221>>>0)<(9007199);
      if (!($222)) {
       $$5386$ph = 18;
       break L104;
      }
     }
     $223 = (($$2369) + 127)|0;
     $$0329 = 0;$$3370 = $$2369;$$5$in = $223;
     while(1) {
      $$5 = $$5$in & 127;
      $224 = (($6) + ($$5<<2)|0);
      $225 = HEAP32[$224>>2]|0;
      $226 = (_bitshift64Shl(($225|0),0,29)|0);
      $227 = (getTempRet0() | 0);
      $228 = (_i64Add(($226|0),($227|0),($$0329|0),0)|0);
      $229 = (getTempRet0() | 0);
      $230 = ($229>>>0)>(0);
      $231 = ($228>>>0)>(1000000000);
      $232 = ($229|0)==(0);
      $233 = $232 & $231;
      $234 = $230 | $233;
      if ($234) {
       $235 = (___udivdi3(($228|0),($229|0),1000000000,0)|0);
       $236 = (getTempRet0() | 0);
       $237 = (___muldi3(($235|0),($236|0),1000000000,0)|0);
       $238 = (getTempRet0() | 0);
       $239 = (_i64Subtract(($228|0),($229|0),($237|0),($238|0))|0);
       $240 = (getTempRet0() | 0);
       $$1330 = $235;$$sink$off0 = $239;
      } else {
       $$1330 = 0;$$sink$off0 = $228;
      }
      HEAP32[$224>>2] = $$sink$off0;
      $241 = (($$3370) + 127)|0;
      $242 = $241 & 127;
      $243 = ($$5|0)!=($242|0);
      $244 = ($$5|0)==($$3348$ph580|0);
      $or$cond418 = $243 | $244;
      $245 = ($$sink$off0|0)==(0);
      $spec$select419 = $245 ? $$5 : $$3370;
      $spec$select441 = $or$cond418 ? $$3370 : $spec$select419;
      $246 = (($$5) + -1)|0;
      if ($244) {
       break;
      } else {
       $$0329 = $$1330;$$3370 = $spec$select441;$$5$in = $246;
      }
     }
     $247 = (($$0376) + -29)|0;
     $248 = ($$1330|0)==(0);
     if ($248) {
      $$0376 = $247;$$2369 = $$3370;
     } else {
      break;
     }
    }
    $249 = (($$3384$ph578) + 9)|0;
    $250 = (($$3348$ph580) + 127)|0;
    $251 = $250 & 127;
    $252 = ($251|0)==($spec$select441|0);
    $253 = (($spec$select441) + 127)|0;
    $254 = $253 & 127;
    $255 = (($spec$select441) + 126)|0;
    $256 = $255 & 127;
    $257 = (($6) + ($256<<2)|0);
    if ($252) {
     $258 = (($6) + ($254<<2)|0);
     $259 = HEAP32[$258>>2]|0;
     $260 = HEAP32[$257>>2]|0;
     $261 = $260 | $259;
     HEAP32[$257>>2] = $261;
     $$5372 = $254;
    } else {
     $$5372 = $$3370;
    }
    $262 = (($6) + ($251<<2)|0);
    HEAP32[$262>>2] = $$1330;
    $$0376$ph = $247;$$2369$ph579 = $$5372;$$3348$ph580 = $251;$$3384$ph578 = $249;
   }
   $$1377$ph$ph = $$0376;$$5350$ph$ph = $$3348$ph580;$$5386$ph576$ph = $$5386$ph;$$7374$ph$ph = $$2369;
   L123: while(1) {
    $299 = (($$7374$ph$ph) + 1)|0;
    $297 = $299 & 127;
    $300 = (($$7374$ph$ph) + 127)|0;
    $301 = $300 & 127;
    $302 = (($6) + ($301<<2)|0);
    $$1377$ph = $$1377$ph$ph;$$5350$ph = $$5350$ph$ph;$$5386$ph576 = $$5386$ph576$ph;
    while(1) {
     $294 = ($$5386$ph576|0)==(18);
     $295 = ($$5386$ph576|0)>(27);
     $spec$select420 = $295 ? 9 : 1;
     $$1377 = $$1377$ph;$$5350 = $$5350$ph;
     while(1) {
      $$0331476 = 0;
      while(1) {
       $263 = (($$0331476) + ($$5350))|0;
       $264 = $263 & 127;
       $265 = ($264|0)==($$7374$ph$ph|0);
       if ($265) {
        label = 92;
        break;
       }
       $266 = (($6) + ($264<<2)|0);
       $267 = HEAP32[$266>>2]|0;
       $268 = (5424 + ($$0331476<<2)|0);
       $269 = HEAP32[$268>>2]|0;
       $270 = ($267>>>0)<($269>>>0);
       if ($270) {
        label = 92;
        break;
       }
       $271 = ($267>>>0)>($269>>>0);
       if ($271) {
        break;
       }
       $272 = (($$0331476) + 1)|0;
       $273 = ($272>>>0)<(2);
       if ($273) {
        $$0331476 = 1;
       } else {
        label = 92;
        break;
       }
      }
      if ((label|0) == 92) {
       label = 0;
       if ($294) {
        break L123;
       }
      }
      $274 = (($spec$select420) + ($$1377))|0;
      $275 = ($$5350|0)==($$7374$ph$ph|0);
      if ($275) {
       $$1377 = $274;$$5350 = $$7374$ph$ph;
      } else {
       break;
      }
     }
     $276 = 1 << $spec$select420;
     $277 = (($276) + -1)|0;
     $278 = 1000000000 >>> $spec$select420;
     $$0327480 = 0;$$6351478 = $$5350;$$6387477 = $$5386$ph576;$$6479 = $$5350;
     while(1) {
      $279 = (($6) + ($$6479<<2)|0);
      $280 = HEAP32[$279>>2]|0;
      $281 = $280 & $277;
      $282 = $280 >>> $spec$select420;
      $283 = (($282) + ($$0327480))|0;
      HEAP32[$279>>2] = $283;
      $284 = Math_imul($281, $278)|0;
      $285 = ($$6479|0)==($$6351478|0);
      $286 = ($283|0)==(0);
      $or$cond421 = $285 & $286;
      $287 = (($$6351478) + 1)|0;
      $288 = $287 & 127;
      $289 = (($$6387477) + -9)|0;
      $spec$select442 = $or$cond421 ? $289 : $$6387477;
      $spec$select443 = $or$cond421 ? $288 : $$6351478;
      $290 = (($$6479) + 1)|0;
      $291 = $290 & 127;
      $292 = ($291|0)==($$7374$ph$ph|0);
      if ($292) {
       break;
      } else {
       $$0327480 = $284;$$6351478 = $spec$select443;$$6387477 = $spec$select442;$$6479 = $291;
      }
     }
     $293 = ($284|0)==(0);
     if (!($293)) {
      $296 = ($297|0)==($spec$select443|0);
      if (!($296)) {
       break;
      }
      $303 = HEAP32[$302>>2]|0;
      $304 = $303 | 1;
      HEAP32[$302>>2] = $304;
     }
     $$1377$ph = $274;$$5350$ph = $spec$select443;$$5386$ph576 = $spec$select442;
    }
    $298 = (($6) + ($$7374$ph$ph<<2)|0);
    HEAP32[$298>>2] = $284;
    $$1377$ph$ph = $274;$$5350$ph$ph = $spec$select443;$$5386$ph576$ph = $spec$select442;$$7374$ph$ph = $297;
   }
   $$0360474 = 0.0;$$10473 = $$7374$ph$ph;$$4475 = 0;
   while(1) {
    $305 = (($$4475) + ($$5350))|0;
    $306 = $305 & 127;
    $307 = ($306|0)==($$10473|0);
    $308 = (($$10473) + 1)|0;
    $309 = $308 & 127;
    if ($307) {
     $310 = (($309) + -1)|0;
     $311 = (($6) + ($310<<2)|0);
     HEAP32[$311>>2] = 0;
     $$11 = $309;
    } else {
     $$11 = $$10473;
    }
    $312 = $$0360474 * 1.0E+9;
    $313 = (($6) + ($306<<2)|0);
    $314 = HEAP32[$313>>2]|0;
    $315 = (+($314>>>0));
    $316 = $312 + $315;
    $317 = (($$4475) + 1)|0;
    $exitcond = ($317|0)==(2);
    if ($exitcond) {
     break;
    } else {
     $$0360474 = $316;$$10473 = $$11;$$4475 = $317;
    }
   }
   $318 = (+($4|0));
   $319 = $316 * $318;
   $320 = (($$1377) + 53)|0;
   $321 = (($320) - ($3))|0;
   $322 = ($321|0)<($2|0);
   $323 = ($321|0)>(0);
   $spec$store$select = $323 ? $321 : 0;
   $$0328 = $322 ? $spec$store$select : $2;
   $324 = ($$0328|0)<(53);
   if ($324) {
    $325 = (105 - ($$0328))|0;
    $326 = (+_scalbn(1.0,$325));
    $327 = (+_copysignl($326,$319));
    $328 = (53 - ($$0328))|0;
    $329 = (+_scalbn(1.0,$328));
    $330 = (+_fmodl($319,$329));
    $331 = $319 - $330;
    $332 = $327 + $331;
    $$0355 = $327;$$0356 = $330;$$1361 = $332;
   } else {
    $$0355 = 0.0;$$0356 = 0.0;$$1361 = $319;
   }
   $333 = (($$5350) + 2)|0;
   $334 = $333 & 127;
   $335 = ($334|0)==($$11|0);
   if ($335) {
    $$3359 = $$0356;
   } else {
    $336 = (($6) + ($334<<2)|0);
    $337 = HEAP32[$336>>2]|0;
    $338 = ($337>>>0)<(500000000);
    do {
     if ($338) {
      $339 = ($337|0)==(0);
      if ($339) {
       $340 = (($$5350) + 3)|0;
       $341 = $340 & 127;
       $342 = ($341|0)==($$11|0);
       if ($342) {
        $$1357 = $$0356;
        break;
       }
      }
      $343 = $318 * 0.25;
      $344 = $343 + $$0356;
      $$1357 = $344;
     } else {
      $345 = ($337|0)==(500000000);
      if (!($345)) {
       $346 = $318 * 0.75;
       $347 = $346 + $$0356;
       $$1357 = $347;
       break;
      }
      $348 = (($$5350) + 3)|0;
      $349 = $348 & 127;
      $350 = ($349|0)==($$11|0);
      if ($350) {
       $351 = $318 * 0.5;
       $352 = $351 + $$0356;
       $$1357 = $352;
       break;
      } else {
       $353 = $318 * 0.75;
       $354 = $353 + $$0356;
       $$1357 = $354;
       break;
      }
     }
    } while(0);
    $355 = (53 - ($$0328))|0;
    $356 = ($355|0)>(1);
    if ($356) {
     $357 = (+_fmodl($$1357,1.0));
     $358 = $357 != 0.0;
     if ($358) {
      $$3359 = $$1357;
     } else {
      $359 = $$1357 + 1.0;
      $$3359 = $359;
     }
    } else {
     $$3359 = $$1357;
    }
   }
   $360 = $$1361 + $$3359;
   $361 = $360 - $$0355;
   $362 = $320 & 2147483647;
   $363 = (-2 - ($7))|0;
   $364 = ($362|0)>($363|0);
   do {
    if ($364) {
     $365 = (+Math_abs((+$361)));
     $366 = !($365 >= 9007199254740992.0);
     $367 = $361 * 0.5;
     $not$ = $366 ^ 1;
     $368 = $not$&1;
     $$3379 = (($$1377) + ($368))|0;
     $$2362 = $366 ? $361 : $367;
     $369 = (($$3379) + 50)|0;
     $370 = ($369|0)>($8|0);
     if (!($370)) {
      $371 = ($$0328|0)!=($321|0);
      $narrow = $371 | $366;
      $$2366$v = $322 & $narrow;
      $372 = $$3359 != 0.0;
      $or$cond9 = $372 & $$2366$v;
      if (!($or$cond9)) {
       $$3363 = $$2362;$$4380 = $$3379;
       break;
      }
     }
     $373 = (___errno_location()|0);
     HEAP32[$373>>2] = 34;
     $$3363 = $$2362;$$4380 = $$3379;
    } else {
     $$3363 = $361;$$4380 = $$1377;
    }
   } while(0);
   $374 = (+_scalbnl($$3363,$$4380));
   $$1 = $374;
  }
 } while(0);
 STACKTOP = sp;return (+$$1);
}
function _scanexp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04858 = 0, $$049 = 0, $$157 = 0, $$251 = 0, $$pr = 0, $$pre = 0, $$pre$phi69Z2D = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 104|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 if ($6) {
  $7 = ((($3)) + 1|0);
  HEAP32[$2>>2] = $7;
  $8 = HEAP8[$3>>0]|0;
  $9 = $8&255;
  $11 = $9;
 } else {
  $10 = (___shgetc($0)|0);
  $11 = $10;
 }
 switch ($11|0) {
 case 43: case 45:  {
  $12 = ($11|0)==(45);
  $13 = $12&1;
  $14 = HEAP32[$2>>2]|0;
  $15 = HEAP32[$4>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$2>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $22 = $19;
  } else {
   $20 = (___shgetc($0)|0);
   $22 = $20;
  }
  $21 = (($22) + -48)|0;
  $23 = ($21>>>0)>(9);
  $24 = ($1|0)!=(0);
  $or$cond3 = $24 & $23;
  if ($or$cond3) {
   $25 = HEAP32[$4>>2]|0;
   $26 = ($25|0)==(0|0);
   if ($26) {
    $100 = 0;$99 = -2147483648;
   } else {
    $27 = HEAP32[$2>>2]|0;
    $28 = ((($27)) + -1|0);
    HEAP32[$2>>2] = $28;
    label = 14;
   }
  } else {
   $$0 = $13;$$049 = $22;$$pre$phi69Z2D = $21;
   label = 12;
  }
  break;
 }
 default: {
  $$pre = (($11) + -48)|0;
  $$0 = 0;$$049 = $11;$$pre$phi69Z2D = $$pre;
  label = 12;
 }
 }
 if ((label|0) == 12) {
  $29 = ($$pre$phi69Z2D>>>0)>(9);
  if ($29) {
   label = 14;
  } else {
   $$04858 = 0;$$157 = $$049;
   while(1) {
    $33 = ($$04858*10)|0;
    $34 = (($$157) + -48)|0;
    $35 = (($34) + ($33))|0;
    $36 = HEAP32[$2>>2]|0;
    $37 = HEAP32[$4>>2]|0;
    $38 = ($36>>>0)<($37>>>0);
    if ($38) {
     $39 = ((($36)) + 1|0);
     HEAP32[$2>>2] = $39;
     $40 = HEAP8[$36>>0]|0;
     $41 = $40&255;
     $44 = $41;
    } else {
     $42 = (___shgetc($0)|0);
     $44 = $42;
    }
    $43 = (($44) + -48)|0;
    $45 = ($43>>>0)<(10);
    $46 = ($35|0)<(214748364);
    $47 = $45 & $46;
    if ($47) {
     $$04858 = $35;$$157 = $44;
    } else {
     break;
    }
   }
   $48 = ($35|0)<(0);
   $49 = $48 << 31 >> 31;
   $50 = ($43>>>0)<(10);
   if ($50) {
    $$251 = $44;$51 = $35;$52 = $49;
    while(1) {
     $53 = (___muldi3(($51|0),($52|0),10,0)|0);
     $54 = (getTempRet0() | 0);
     $55 = ($$251|0)<(0);
     $56 = $55 << 31 >> 31;
     $57 = (_i64Add(($$251|0),($56|0),-48,-1)|0);
     $58 = (getTempRet0() | 0);
     $59 = (_i64Add(($57|0),($58|0),($53|0),($54|0))|0);
     $60 = (getTempRet0() | 0);
     $61 = HEAP32[$2>>2]|0;
     $62 = HEAP32[$4>>2]|0;
     $63 = ($61>>>0)<($62>>>0);
     if ($63) {
      $64 = ((($61)) + 1|0);
      HEAP32[$2>>2] = $64;
      $65 = HEAP8[$61>>0]|0;
      $66 = $65&255;
      $69 = $66;
     } else {
      $67 = (___shgetc($0)|0);
      $69 = $67;
     }
     $68 = (($69) + -48)|0;
     $70 = ($68>>>0)<(10);
     $71 = ($60|0)<(21474836);
     $72 = ($59>>>0)<(2061584302);
     $73 = ($60|0)==(21474836);
     $74 = $73 & $72;
     $75 = $71 | $74;
     $76 = $70 & $75;
     if ($76) {
      $$251 = $69;$51 = $59;$52 = $60;
     } else {
      break;
     }
    }
    $77 = ($68>>>0)<(10);
    if ($77) {
     while(1) {
      $78 = HEAP32[$2>>2]|0;
      $79 = HEAP32[$4>>2]|0;
      $80 = ($78>>>0)<($79>>>0);
      if ($80) {
       $81 = ((($78)) + 1|0);
       HEAP32[$2>>2] = $81;
       $82 = HEAP8[$78>>0]|0;
       $83 = $82&255;
       $86 = $83;
      } else {
       $84 = (___shgetc($0)|0);
       $86 = $84;
      }
      $85 = (($86) + -48)|0;
      $87 = ($85>>>0)<(10);
      if (!($87)) {
       $93 = $59;$94 = $60;
       break;
      }
     }
    } else {
     $93 = $59;$94 = $60;
    }
   } else {
    $93 = $35;$94 = $49;
   }
   $88 = HEAP32[$4>>2]|0;
   $89 = ($88|0)==(0|0);
   if (!($89)) {
    $90 = HEAP32[$2>>2]|0;
    $91 = ((($90)) + -1|0);
    HEAP32[$2>>2] = $91;
   }
   $92 = ($$0|0)==(0);
   $95 = (_i64Subtract(0,0,($93|0),($94|0))|0);
   $96 = (getTempRet0() | 0);
   $97 = $92 ? $93 : $95;
   $98 = $92 ? $94 : $96;
   $100 = $97;$99 = $98;
  }
 }
 if ((label|0) == 14) {
  $$pr = HEAP32[$4>>2]|0;
  $30 = ($$pr|0)==(0|0);
  if ($30) {
   $100 = 0;$99 = -2147483648;
  } else {
   $31 = HEAP32[$2>>2]|0;
   $32 = ((($31)) + -1|0);
   HEAP32[$2>>2] = $32;
   $100 = 0;$99 = -2147483648;
  }
 }
 setTempRet0(($99) | 0);
 return ($100|0);
}
function ___pthread_self_333() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___uflow($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = (___toread($0)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($0)) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (FUNCTION_TABLE_iiii[$5 & 511]($0,$1,1)|0);
  $7 = ($6|0)==(1);
  if ($7) {
   $8 = HEAP8[$1>>0]|0;
   $9 = $8&255;
   $$0 = $9;
  } else {
   $$0 = -1;
  }
 } else {
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($0)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 511]($0,0,0)|0);
 }
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$9>>2] = 0;
 HEAP32[$7>>2] = 0;
 $15 = HEAP32[$0>>2]|0;
 $16 = $15 & 4;
 $17 = ($16|0)==(0);
 if ($17) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 8|0);
  HEAP32[$24>>2] = $23;
  $25 = ((($0)) + 4|0);
  HEAP32[$25>>2] = $23;
  $26 = $15 << 27;
  $sext = $26 >> 31;
  $$0 = $sext;
 } else {
  $18 = $15 | 32;
  HEAP32[$0>>2] = $18;
  $$0 = -1;
 }
 return ($$0|0);
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[1294]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $29 = 0;
   } else {
    $10 = HEAP32[1294]|0;
    $11 = (_fflush($10)|0);
    $29 = $11;
   }
   $12 = (___ofl_lock()|0);
   $$02325 = HEAP32[$12>>2]|0;
   $13 = ($$02325|0)==(0|0);
   if ($13) {
    $$024$lcssa = $29;
   } else {
    $$02327 = $$02325;$$02426 = $29;
    while(1) {
     $14 = ((($$02327)) + 76|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)>(-1);
     if ($16) {
      $17 = (___lockfile($$02327)|0);
      $26 = $17;
     } else {
      $26 = 0;
     }
     $18 = ((($$02327)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($$02327)) + 28|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19>>>0)>($21>>>0);
     if ($22) {
      $23 = (___fflush_unlocked($$02327)|0);
      $24 = $23 | $$02426;
      $$1 = $24;
     } else {
      $$1 = $$02426;
     }
     $25 = ($26|0)==(0);
     if (!($25)) {
      ___unlockfile($$02327);
     }
     $27 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$27>>2]|0;
     $28 = ($$023|0)==(0|0);
     if ($28) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___ofl_unlock();
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 511]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = $11;
   $16 = $13;
   $17 = (($15) - ($16))|0;
   $18 = ($17|0)<(0);
   $19 = $18 << 31 >> 31;
   $20 = ((($0)) + 40|0);
   $21 = HEAP32[$20>>2]|0;
   (FUNCTION_TABLE_iiiii[$21 & 255]($0,$17,$19,1)|0);
   $22 = (getTempRet0() | 0);
  }
  $23 = ((($0)) + 16|0);
  HEAP32[$23>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((13964|0));
 return (13972|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((13964|0));
 return;
}
function ___pthread_self_164() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___unlist_locked_file($0) {
 $0 = $0|0;
 var $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = ((($0)) + 132|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  $7 = $5;
  $$pre = ((($0)) + 128|0);
  if (!($6)) {
   $8 = HEAP32[$$pre>>2]|0;
   $9 = ((($5)) + 128|0);
   HEAP32[$9>>2] = $8;
  }
  $10 = HEAP32[$$pre>>2]|0;
  $11 = ($10|0)==(0|0);
  if ($11) {
   $13 = (___pthread_self_164()|0);
   $14 = ((($13)) + 232|0);
   $$sink = $14;
  } else {
   $12 = ((($10)) + 132|0);
   $$sink = $12;
  }
  HEAP32[$$sink>>2] = $7;
 }
 return;
}
function _fscanf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vfscanf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _fread($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$054 = 0, $$056 = 0, $$15759 = 0, $$160 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ($1|0)==(0);
 $spec$select = $5 ? 0 : $2;
 $6 = ((($3)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(-1);
 if ($8) {
  $9 = (___lockfile($3)|0);
  $37 = $9;
 } else {
  $37 = 0;
 }
 $10 = ((($3)) + 74|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = (($12) + 255)|0;
 $14 = $13 | $12;
 $15 = $14&255;
 HEAP8[$10>>0] = $15;
 $16 = ((($3)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($3)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) - ($19))|0;
 $21 = ($20|0)>(0);
 if ($21) {
  $22 = $19;
  $23 = ($20>>>0)<($4>>>0);
  $$ = $23 ? $20 : $4;
  (_memcpy(($0|0),($22|0),($$|0))|0);
  $24 = HEAP32[$18>>2]|0;
  $25 = (($24) + ($$)|0);
  HEAP32[$18>>2] = $25;
  $26 = (($0) + ($$)|0);
  $27 = (($4) - ($$))|0;
  $$054 = $27;$$056 = $26;
 } else {
  $$054 = $4;$$056 = $0;
 }
 $28 = ($$054|0)==(0);
 L7: do {
  if ($28) {
   label = 13;
  } else {
   $29 = ((($3)) + 32|0);
   $$15759 = $$056;$$160 = $$054;
   while(1) {
    $30 = (___toread($3)|0);
    $31 = ($30|0)==(0);
    if (!($31)) {
     break;
    }
    $32 = HEAP32[$29>>2]|0;
    $33 = (FUNCTION_TABLE_iiii[$32 & 511]($3,$$15759,$$160)|0);
    $34 = (($33) + 1)|0;
    $35 = ($34>>>0)<(2);
    if ($35) {
     break;
    }
    $40 = (($$160) - ($33))|0;
    $41 = (($$15759) + ($33)|0);
    $42 = ($40|0)==(0);
    if ($42) {
     label = 13;
     break L7;
    } else {
     $$15759 = $41;$$160 = $40;
    }
   }
   $36 = ($37|0)==(0);
   if (!($36)) {
    ___unlockfile($3);
   }
   $38 = (($4) - ($$160))|0;
   $39 = (($38>>>0) / ($1>>>0))&-1;
   $$0 = $39;
  }
 } while(0);
 if ((label|0) == 13) {
  $43 = ($37|0)==(0);
  if ($43) {
   $$0 = $spec$select;
  } else {
   ___unlockfile($3);
   $$0 = $spec$select;
  }
 }
 return ($$0|0);
}
function _fclose($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $30 = $4;
 } else {
  $30 = 0;
 }
 ___unlist_locked_file($0);
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $8 = (___ofl_lock()|0);
  $9 = ((($0)) + 52|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  $12 = $10;
  $$pre = ((($0)) + 56|0);
  if (!($11)) {
   $13 = HEAP32[$$pre>>2]|0;
   $14 = ((($10)) + 56|0);
   HEAP32[$14>>2] = $13;
  }
  $15 = HEAP32[$$pre>>2]|0;
  $16 = ($15|0)==(0|0);
  $17 = $15;
  if (!($16)) {
   $18 = ((($15)) + 52|0);
   HEAP32[$18>>2] = $12;
  }
  $19 = HEAP32[$8>>2]|0;
  $20 = ($19|0)==($0|0);
  if ($20) {
   HEAP32[$8>>2] = $17;
  }
  ___ofl_unlock();
 }
 $21 = (_fflush($0)|0);
 $22 = ((($0)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (FUNCTION_TABLE_ii[$23 & 255]($0)|0);
 $25 = $24 | $21;
 $26 = ((($0)) + 96|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 if (!($28)) {
  _free($27);
 }
 if ($7) {
  $29 = ($30|0)==(0);
  if (!($29)) {
   ___unlockfile($0);
  }
 } else {
  _free($0);
 }
 return ($25|0);
}
function _fgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<(0);
 if ($3) {
  label = 3;
 } else {
  $4 = (___lockfile($0)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   label = 3;
  } else {
   $15 = ((($0)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($0)) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16>>>0)<($18>>>0);
   if ($19) {
    $20 = ((($16)) + 1|0);
    HEAP32[$15>>2] = $20;
    $21 = HEAP8[$16>>0]|0;
    $22 = $21&255;
    $24 = $22;
   } else {
    $23 = (___uflow($0)|0);
    $24 = $23;
   }
   $$0 = $24;
  }
 }
 do {
  if ((label|0) == 3) {
   $6 = ((($0)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ((($0)) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($7>>>0)<($9>>>0);
   if ($10) {
    $11 = ((($7)) + 1|0);
    HEAP32[$6>>2] = $11;
    $12 = HEAP8[$7>>0]|0;
    $13 = $12&255;
    $$0 = $13;
    break;
   } else {
    $14 = (___uflow($0)|0);
    $$0 = $14;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___overflow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = $1&255;
 HEAP8[$2>>0] = $3;
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___towrite($0)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$4>>2]|0;
   $12 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $12 = $5;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $9 = ((($0)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10>>>0)<($12>>>0);
   if ($11) {
    $13 = $1 & 255;
    $14 = ((($0)) + 75|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 << 24 >> 24;
    $17 = ($13|0)==($16|0);
    if (!($17)) {
     $18 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $18;
     HEAP8[$10>>0] = $3;
     $$0 = $13;
     break;
    }
   }
   $19 = ((($0)) + 36|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (FUNCTION_TABLE_iiii[$20 & 511]($0,$2,1)|0);
   $22 = ($21|0)==(1);
   if ($22) {
    $23 = HEAP8[$2>>0]|0;
    $24 = $23&255;
    $$0 = $24;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___fdopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 56|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3 << 24 >> 24;
 $5 = (_strchr(12156,$4)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___errno_location()|0);
  HEAP32[$7>>2] = 22;
  $$0 = 0;
 } else {
  $8 = (_malloc(1176)|0);
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = 0;
  } else {
   (_memset(($8|0),0,144)|0);
   $10 = (_strchr($1,43)|0);
   $11 = ($10|0)==(0|0);
   if ($11) {
    $12 = HEAP8[$1>>0]|0;
    $13 = ($12<<24>>24)==(114);
    $14 = $13 ? 8 : 4;
    HEAP32[$8>>2] = $14;
   }
   $15 = (_strchr($1,101)|0);
   $16 = ($15|0)==(0|0);
   if (!($16)) {
    HEAP32[$vararg_buffer>>2] = $0;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
   }
   $17 = HEAP8[$1>>0]|0;
   $18 = ($17<<24>>24)==(97);
   if ($18) {
    HEAP32[$vararg_buffer3>>2] = $0;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $19 = (___syscall221(221,($vararg_buffer3|0))|0);
    $20 = $19 & 1024;
    $21 = ($20|0)==(0);
    if ($21) {
     $22 = $19 | 1024;
     HEAP32[$vararg_buffer7>>2] = $0;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $22;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $23 = HEAP32[$8>>2]|0;
    $24 = $23 | 128;
    HEAP32[$8>>2] = $24;
    $31 = $24;
   } else {
    $$pre = HEAP32[$8>>2]|0;
    $31 = $$pre;
   }
   $25 = ((($8)) + 60|0);
   HEAP32[$25>>2] = $0;
   $26 = ((($8)) + 152|0);
   $27 = ((($8)) + 44|0);
   HEAP32[$27>>2] = $26;
   $28 = ((($8)) + 48|0);
   HEAP32[$28>>2] = 1024;
   $29 = ((($8)) + 75|0);
   HEAP8[$29>>0] = -1;
   $30 = $31 & 8;
   $32 = ($30|0)==(0);
   if ($32) {
    $33 = $2;
    HEAP32[$vararg_buffer12>>2] = $0;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21523;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $33;
    $34 = (___syscall54(54,($vararg_buffer12|0))|0);
    $35 = ($34|0)==(0);
    if ($35) {
     HEAP8[$29>>0] = 10;
    }
   }
   $36 = ((($8)) + 32|0);
   HEAP32[$36>>2] = 289;
   $37 = ((($8)) + 36|0);
   HEAP32[$37>>2] = 205;
   $38 = ((($8)) + 40|0);
   HEAP32[$38>>2] = 206;
   $39 = ((($8)) + 12|0);
   HEAP32[$39>>2] = 204;
   $40 = HEAP32[(13900)>>2]|0;
   $41 = ($40|0)==(0);
   if ($41) {
    $42 = ((($8)) + 76|0);
    HEAP32[$42>>2] = -1;
   }
   $43 = (___ofl_add($8)|0);
   $$0 = $8;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___ofl_add($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___ofl_lock()|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 56|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = ((($4)) + 52|0);
  HEAP32[$6>>2] = $0;
 }
 HEAP32[$1>>2] = $0;
 ___ofl_unlock();
 return ($0|0);
}
function _fputc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 if ($4) {
  label = 3;
 } else {
  $5 = (___lockfile($1)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   label = 3;
  } else {
   $20 = $0&255;
   $21 = $0 & 255;
   $22 = ((($1)) + 75|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23 << 24 >> 24;
   $25 = ($21|0)==($24|0);
   if ($25) {
    label = 10;
   } else {
    $26 = ((($1)) + 20|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ((($1)) + 16|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($27>>>0)<($29>>>0);
    if ($30) {
     $31 = ((($27)) + 1|0);
     HEAP32[$26>>2] = $31;
     HEAP8[$27>>0] = $20;
     $33 = $21;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $32 = (___overflow($1,$0)|0);
    $33 = $32;
   }
   ___unlockfile($1);
   $$0 = $33;
  }
 }
 do {
  if ((label|0) == 3) {
   $7 = $0&255;
   $8 = $0 & 255;
   $9 = ((($1)) + 75|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 << 24 >> 24;
   $12 = ($8|0)==($11|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($1)) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($14>>>0)<($16>>>0);
    if ($17) {
     $18 = ((($14)) + 1|0);
     HEAP32[$13>>2] = $18;
     HEAP8[$14>>0] = $7;
     $$0 = $8;
     break;
    }
   }
   $19 = (___overflow($1,$0)|0);
   $$0 = $19;
  }
 } while(0);
 return ($$0|0);
}
function _fprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vfprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _fwrite($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ($1|0)==(0);
 $spec$select = $5 ? 0 : $2;
 $6 = ((($3)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(-1);
 if ($8) {
  $10 = (___lockfile($3)|0);
  $phitmp = ($10|0)==(0);
  $11 = (___fwritex($0,$4,$3)|0);
  if ($phitmp) {
   $13 = $11;
  } else {
   ___unlockfile($3);
   $13 = $11;
  }
 } else {
  $9 = (___fwritex($0,$4,$3)|0);
  $13 = $9;
 }
 $12 = ($13|0)==($4|0);
 if ($12) {
  $15 = $spec$select;
 } else {
  $14 = (($13>>>0) / ($1>>>0))&-1;
  $15 = $14;
 }
 return ($15|0);
}
function ___fmodeflags($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $$2 = 0, $$4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $spec$select = 0, $spec$select13 = 0, $spec$select14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strchr($0,43)|0);
 $2 = ($1|0)==(0|0);
 $3 = HEAP8[$0>>0]|0;
 $4 = ($3<<24>>24)!=(114);
 $$ = $4&1;
 $$0 = $2 ? $$ : 2;
 $5 = (_strchr($0,120)|0);
 $6 = ($5|0)==(0|0);
 $7 = $$0 | 128;
 $spec$select = $6 ? $$0 : $7;
 $8 = (_strchr($0,101)|0);
 $9 = ($8|0)==(0|0);
 $10 = $spec$select | 524288;
 $$2 = $9 ? $spec$select : $10;
 $11 = ($3<<24>>24)==(114);
 $12 = $$2 | 64;
 $spec$select13 = $11 ? $$2 : $12;
 $13 = ($3<<24>>24)==(119);
 $14 = $spec$select13 | 512;
 $$4 = $13 ? $14 : $spec$select13;
 $15 = ($3<<24>>24)==(97);
 $16 = $$4 | 1024;
 $spec$select14 = $15 ? $16 : $$4;
 return ($spec$select14|0);
}
function _fopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (_strchr(12156,$3)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = (___errno_location()|0);
  HEAP32[$6>>2] = 22;
  $$0 = 0;
 } else {
  $7 = (___fmodeflags($1)|0);
  $8 = $0;
  $9 = $7 | 32768;
  HEAP32[$vararg_buffer>>2] = $8;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $9;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $10 = (___syscall5(5,($vararg_buffer|0))|0);
  $11 = (___syscall_ret($10)|0);
  $12 = ($11|0)<(0);
  if ($12) {
   $$0 = 0;
  } else {
   $13 = $7 & 524288;
   $14 = ($13|0)==(0);
   if (!($14)) {
    HEAP32[$vararg_buffer3>>2] = $11;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 2;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = 1;
    (___syscall221(221,($vararg_buffer3|0))|0);
   }
   $15 = (___fdopen($11,$1)|0);
   $16 = ($15|0)==(0|0);
   if ($16) {
    HEAP32[$vararg_buffer8>>2] = $11;
    (___syscall6(6,($vararg_buffer8|0))|0);
    $$0 = 0;
   } else {
    $$0 = $15;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fseeko_unlocked($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($3|0)==(1);
 if ($4) {
  $5 = ((($0)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($0)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($6) - ($8))|0;
  $10 = ($9|0)<(0);
  $11 = $10 << 31 >> 31;
  $12 = (_i64Subtract(($1|0),($2|0),($9|0),($11|0))|0);
  $13 = (getTempRet0() | 0);
  $26 = $12;$27 = $13;
 } else {
  $26 = $1;$27 = $2;
 }
 $14 = ((($0)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($0)) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($15>>>0)>($17>>>0);
 if ($18) {
  $19 = ((($0)) + 36|0);
  $20 = HEAP32[$19>>2]|0;
  (FUNCTION_TABLE_iiii[$20 & 511]($0,0,0)|0);
  $21 = HEAP32[$14>>2]|0;
  $22 = ($21|0)==(0|0);
  if ($22) {
   $$0 = -1;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $23 = ((($0)) + 16|0);
  HEAP32[$23>>2] = 0;
  HEAP32[$16>>2] = 0;
  HEAP32[$14>>2] = 0;
  $24 = ((($0)) + 40|0);
  $25 = HEAP32[$24>>2]|0;
  (FUNCTION_TABLE_iiiii[$25 & 255]($0,$26,$27,$3)|0);
  $28 = (getTempRet0() | 0);
  $29 = ($28|0)<(0);
  if ($29) {
   $$0 = -1;
  } else {
   $30 = ((($0)) + 8|0);
   HEAP32[$30>>2] = 0;
   $31 = ((($0)) + 4|0);
   HEAP32[$31>>2] = 0;
   $32 = HEAP32[$0>>2]|0;
   $33 = $32 & -17;
   HEAP32[$0>>2] = $33;
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function ___ftello_unlocked($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 128;
 $5 = ($4|0)==(0);
 if ($5) {
  $11 = 1;
 } else {
  $6 = ((($0)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($0)) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7>>>0)>($9>>>0);
  $phitmp = $10 ? 2 : 1;
  $11 = $phitmp;
 }
 $12 = (FUNCTION_TABLE_iiiii[$2 & 255]($0,0,0,$11)|0);
 $13 = (getTempRet0() | 0);
 $14 = ($13|0)<(0);
 if ($14) {
  $33 = $13;$34 = $12;
 } else {
  $15 = ((($0)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($0)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) - ($18))|0;
  $20 = ($19|0)<(0);
  $21 = $20 << 31 >> 31;
  $22 = (_i64Subtract(($12|0),($13|0),($19|0),($21|0))|0);
  $23 = (getTempRet0() | 0);
  $24 = ((($0)) + 20|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($0)) + 28|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($25) - ($27))|0;
  $29 = ($28|0)<(0);
  $30 = $29 << 31 >> 31;
  $31 = (_i64Add(($22|0),($23|0),($28|0),($30|0))|0);
  $32 = (getTempRet0() | 0);
  $33 = $32;$34 = $31;
 }
 setTempRet0(($33) | 0);
 return ($34|0);
}
function ___ftello($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $6 = (___lockfile($0)|0);
  $phitmp = ($6|0)==(0);
  $7 = (___ftello_unlocked($0)|0);
  $8 = (getTempRet0() | 0);
  if ($phitmp) {
   $10 = $7;$9 = $8;
  } else {
   ___unlockfile($0);
   $10 = $7;$9 = $8;
  }
 } else {
  $4 = (___ftello_unlocked($0)|0);
  $5 = (getTempRet0() | 0);
  $10 = $4;$9 = $5;
 }
 setTempRet0(($9) | 0);
 return ($10|0);
}
function _ftell($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___ftello($0)|0);
 $2 = (getTempRet0() | 0);
 $3 = ($2|0)>(0);
 $4 = ($1>>>0)>(2147483647);
 $5 = ($2|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $8 = (___errno_location()|0);
  HEAP32[$8>>2] = 75;
  $$0 = -1;
 } else {
  $$0 = $1;
 }
 return ($$0|0);
}
function _printf($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = HEAP32[1293]|0;
 $3 = (_vfprintf($2,$0,$1)|0);
 STACKTOP = sp;return ($3|0);
}
function _puts($0) {
 $0 = $0|0;
 var $$lobit = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[1293]|0;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(-1);
 if ($4) {
  $5 = (___lockfile($1)|0);
  $19 = $5;
 } else {
  $19 = 0;
 }
 $6 = (_fputs($0,$1)|0);
 $7 = ($6|0)<(0);
 do {
  if ($7) {
   $20 = -1;
  } else {
   $8 = ((($1)) + 75|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = ($9<<24>>24)==(10);
   if (!($10)) {
    $11 = ((($1)) + 20|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ((($1)) + 16|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($12>>>0)<($14>>>0);
    if ($15) {
     $16 = ((($12)) + 1|0);
     HEAP32[$11>>2] = $16;
     HEAP8[$12>>0] = 10;
     $20 = 0;
     break;
    }
   }
   $17 = (___overflow($1,10)|0);
   $$lobit = $17 >> 31;
   $20 = $$lobit;
  }
 } while(0);
 $18 = ($19|0)==(0);
 if (!($18)) {
  ___unlockfile($1);
 }
 return ($20|0);
}
function _fputs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (_fwrite($0,1,$2,$1)|0);
 $4 = ($3|0)!=($2|0);
 $5 = $4 << 31 >> 31;
 return ($5|0);
}
function _feof($0) {
 $0 = $0|0;
 var $$lobit = 0, $$lobit8 = 0, $$lobit9 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $6 = (___lockfile($0)|0);
  $phitmp = ($6|0)==(0);
  $7 = HEAP32[$0>>2]|0;
  $8 = $7 >>> 4;
  $$lobit = $8 & 1;
  if ($phitmp) {
   $$lobit9 = $$lobit;
  } else {
   $$lobit9 = $$lobit;
  }
 } else {
  $4 = HEAP32[$0>>2]|0;
  $5 = $4 >>> 4;
  $$lobit8 = $5 & 1;
  $$lobit9 = $$lobit8;
 }
 return ($$lobit9|0);
}
function ___fseeko($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 76|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(-1);
 if ($6) {
  $8 = (___lockfile($0)|0);
  $phitmp = ($8|0)==(0);
  $9 = (___fseeko_unlocked($0,$1,$2,$3)|0);
  if ($phitmp) {
   $10 = $9;
  } else {
   ___unlockfile($0);
   $10 = $9;
  }
 } else {
  $7 = (___fseeko_unlocked($0,$1,$2,$3)|0);
  $10 = $7;
 }
 return ($10|0);
}
function _fseek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)<(0);
 $4 = $3 << 31 >> 31;
 $5 = (___fseeko($0,$1,$4,$2)|0);
 return ($5|0);
}
function _strtox_307($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $5 = sp;
 HEAP32[$5>>2] = 0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($5)) + 44|0);
 HEAP32[$7>>2] = $0;
 $8 = ($0|0)<(0|0);
 $9 = ((($0)) + 2147483647|0);
 $$sink = $8 ? (-1) : $9;
 $10 = ((($5)) + 8|0);
 HEAP32[$10>>2] = $$sink;
 $11 = ((($5)) + 76|0);
 HEAP32[$11>>2] = -1;
 ___shlim($5,0,0);
 $12 = (___intscan($5,$2,1,$3,$4)|0);
 $13 = (getTempRet0() | 0);
 $14 = ($1|0)==(0|0);
 if (!($14)) {
  $15 = ((($5)) + 120|0);
  $16 = $15;
  $17 = $16;
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + 4)|0;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  $22 = HEAP32[$6>>2]|0;
  $23 = HEAP32[$10>>2]|0;
  $24 = (($22) + ($18))|0;
  $25 = (($24) - ($23))|0;
  $26 = (($0) + ($25)|0);
  HEAP32[$1>>2] = $26;
 }
 setTempRet0(($13) | 0);
 STACKTOP = sp;return ($12|0);
}
function _strtol($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strtox_307($0,$1,$2,-2147483648,0)|0);
 $4 = (getTempRet0() | 0);
 return ($3|0);
}
function _memcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $14 = 0;
  } else {
   $$01318 = $0;$$01417 = $2;$$019 = $1;
   while(1) {
    $4 = HEAP8[$$01318>>0]|0;
    $5 = HEAP8[$$019>>0]|0;
    $6 = ($4<<24>>24)==($5<<24>>24);
    if (!($6)) {
     break;
    }
    $7 = (($$01417) + -1)|0;
    $8 = ((($$01318)) + 1|0);
    $9 = ((($$019)) + 1|0);
    $10 = ($7|0)==(0);
    if ($10) {
     $14 = 0;
     break L1;
    } else {
     $$01318 = $8;$$01417 = $7;$$019 = $9;
    }
   }
   $11 = $4&255;
   $12 = $5&255;
   $13 = (($11) - ($12))|0;
   $14 = $13;
  }
 } while(0);
 return ($14|0);
}
function _malloc($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i20$i = 0, $$0169$i = 0, $$0170$i = 0, $$0171$i = 0, $$0192 = 0, $$0194 = 0, $$02014$i$i = 0, $$0202$lcssa$i$i = 0, $$02023$i$i = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$024372$i = 0, $$0259$i$i = 0, $$02604$i$i = 0, $$0261$lcssa$i$i = 0, $$02613$i$i = 0;
 var $$0267$i$i = 0, $$0268$i$i = 0, $$0318$i = 0, $$032012$i = 0, $$0321$lcssa$i = 0, $$032111$i = 0, $$0323$i = 0, $$0329$i = 0, $$0335$i = 0, $$0336$i = 0, $$0338$i = 0, $$0339$i = 0, $$0344$i = 0, $$1174$i = 0, $$1174$i$be = 0, $$1174$i$ph = 0, $$1176$i = 0, $$1176$i$be = 0, $$1176$i$ph = 0, $$124471$i = 0;
 var $$1263$i$i = 0, $$1263$i$i$be = 0, $$1263$i$i$ph = 0, $$1265$i$i = 0, $$1265$i$i$be = 0, $$1265$i$i$ph = 0, $$1319$i = 0, $$1324$i = 0, $$1340$i = 0, $$1346$i = 0, $$1346$i$be = 0, $$1346$i$ph = 0, $$1350$i = 0, $$1350$i$be = 0, $$1350$i$ph = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2331$i = 0, $$3$i = 0;
 var $$3$i$i = 0, $$3$i198 = 0, $$3$i198211 = 0, $$3326$i = 0, $$3348$i = 0, $$4$lcssa$i = 0, $$415$i = 0, $$415$i$ph = 0, $$4236$i = 0, $$4327$lcssa$i = 0, $$432714$i = 0, $$432714$i$ph = 0, $$4333$i = 0, $$533413$i = 0, $$533413$i$ph = 0, $$723947$i = 0, $$748$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0;
 var $$pre$i16$i = 0, $$pre$i195 = 0, $$pre$i204 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i17$iZ2D = 0, $$pre$phi$i205Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink320 = 0, $$sink321 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0;
 var $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0;
 var $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0;
 var $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0;
 var $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0;
 var $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0;
 var $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0;
 var $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0;
 var $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0;
 var $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0;
 var $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0;
 var $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0;
 var $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0;
 var $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0;
 var $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0;
 var $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $99 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i203 = 0, $not$$i = 0, $or$cond$i = 0, $or$cond$i199 = 0, $or$cond1$i = 0, $or$cond1$i197 = 0, $or$cond11$i = 0, $or$cond2$i = 0;
 var $or$cond5$i = 0, $or$cond50$i = 0, $or$cond51$i = 0, $or$cond6$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $or$cond8$not$i = 0, $spec$select$i = 0, $spec$select$i201 = 0, $spec$select1$i = 0, $spec$select2$i = 0, $spec$select4$i = 0, $spec$select49$i = 0, $spec$select9$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[3494]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (14016 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($16|0);
    if ($21) {
     $22 = 1 << $14;
     $23 = $22 ^ -1;
     $24 = $8 & $23;
     HEAP32[3494] = $24;
    } else {
     $25 = ((($20)) + 12|0);
     HEAP32[$25>>2] = $16;
     HEAP32[$17>>2] = $20;
    }
    $26 = $14 << 3;
    $27 = $26 | 3;
    $28 = ((($18)) + 4|0);
    HEAP32[$28>>2] = $27;
    $29 = (($18) + ($26)|0);
    $30 = ((($29)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $31 | 1;
    HEAP32[$30>>2] = $32;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[(13984)>>2]|0;
   $34 = ($6>>>0)>($33>>>0);
   if ($34) {
    $35 = ($9|0)==(0);
    if (!($35)) {
     $36 = $9 << $7;
     $37 = 2 << $7;
     $38 = (0 - ($37))|0;
     $39 = $37 | $38;
     $40 = $36 & $39;
     $41 = (0 - ($40))|0;
     $42 = $40 & $41;
     $43 = (($42) + -1)|0;
     $44 = $43 >>> 12;
     $45 = $44 & 16;
     $46 = $43 >>> $45;
     $47 = $46 >>> 5;
     $48 = $47 & 8;
     $49 = $48 | $45;
     $50 = $46 >>> $48;
     $51 = $50 >>> 2;
     $52 = $51 & 4;
     $53 = $49 | $52;
     $54 = $50 >>> $52;
     $55 = $54 >>> 1;
     $56 = $55 & 2;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 1;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = (($61) + ($62))|0;
     $64 = $63 << 1;
     $65 = (14016 + ($64<<2)|0);
     $66 = ((($65)) + 8|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($69|0)==($65|0);
     if ($70) {
      $71 = 1 << $63;
      $72 = $71 ^ -1;
      $73 = $8 & $72;
      HEAP32[3494] = $73;
      $90 = $73;
     } else {
      $74 = ((($69)) + 12|0);
      HEAP32[$74>>2] = $65;
      HEAP32[$66>>2] = $69;
      $90 = $8;
     }
     $75 = $63 << 3;
     $76 = (($75) - ($6))|0;
     $77 = $6 | 3;
     $78 = ((($67)) + 4|0);
     HEAP32[$78>>2] = $77;
     $79 = (($67) + ($6)|0);
     $80 = $76 | 1;
     $81 = ((($79)) + 4|0);
     HEAP32[$81>>2] = $80;
     $82 = (($67) + ($75)|0);
     HEAP32[$82>>2] = $76;
     $83 = ($33|0)==(0);
     if (!($83)) {
      $84 = HEAP32[(13996)>>2]|0;
      $85 = $33 >>> 3;
      $86 = $85 << 1;
      $87 = (14016 + ($86<<2)|0);
      $88 = 1 << $85;
      $89 = $90 & $88;
      $91 = ($89|0)==(0);
      if ($91) {
       $92 = $90 | $88;
       HEAP32[3494] = $92;
       $$pre = ((($87)) + 8|0);
       $$0194 = $87;$$pre$phiZ2D = $$pre;
      } else {
       $93 = ((($87)) + 8|0);
       $94 = HEAP32[$93>>2]|0;
       $$0194 = $94;$$pre$phiZ2D = $93;
      }
      HEAP32[$$pre$phiZ2D>>2] = $84;
      $95 = ((($$0194)) + 12|0);
      HEAP32[$95>>2] = $84;
      $96 = ((($84)) + 8|0);
      HEAP32[$96>>2] = $$0194;
      $97 = ((($84)) + 12|0);
      HEAP32[$97>>2] = $87;
     }
     HEAP32[(13984)>>2] = $76;
     HEAP32[(13996)>>2] = $79;
     $$0 = $68;
     STACKTOP = sp;return ($$0|0);
    }
    $98 = HEAP32[(13980)>>2]|0;
    $99 = ($98|0)==(0);
    if ($99) {
     $$0192 = $6;
    } else {
     $100 = (0 - ($98))|0;
     $101 = $98 & $100;
     $102 = (($101) + -1)|0;
     $103 = $102 >>> 12;
     $104 = $103 & 16;
     $105 = $102 >>> $104;
     $106 = $105 >>> 5;
     $107 = $106 & 8;
     $108 = $107 | $104;
     $109 = $105 >>> $107;
     $110 = $109 >>> 2;
     $111 = $110 & 4;
     $112 = $108 | $111;
     $113 = $109 >>> $111;
     $114 = $113 >>> 1;
     $115 = $114 & 2;
     $116 = $112 | $115;
     $117 = $113 >>> $115;
     $118 = $117 >>> 1;
     $119 = $118 & 1;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = (($120) + ($121))|0;
     $123 = (14280 + ($122<<2)|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ((($124)) + 4|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = $126 & -8;
     $128 = (($127) - ($6))|0;
     $$0169$i = $124;$$0170$i = $124;$$0171$i = $128;
     while(1) {
      $129 = ((($$0169$i)) + 16|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = ($130|0)==(0|0);
      if ($131) {
       $132 = ((($$0169$i)) + 20|0);
       $133 = HEAP32[$132>>2]|0;
       $134 = ($133|0)==(0|0);
       if ($134) {
        break;
       } else {
        $136 = $133;
       }
      } else {
       $136 = $130;
      }
      $135 = ((($136)) + 4|0);
      $137 = HEAP32[$135>>2]|0;
      $138 = $137 & -8;
      $139 = (($138) - ($6))|0;
      $140 = ($139>>>0)<($$0171$i>>>0);
      $spec$select$i = $140 ? $139 : $$0171$i;
      $spec$select1$i = $140 ? $136 : $$0170$i;
      $$0169$i = $136;$$0170$i = $spec$select1$i;$$0171$i = $spec$select$i;
     }
     $141 = (($$0170$i) + ($6)|0);
     $142 = ($141>>>0)>($$0170$i>>>0);
     if ($142) {
      $143 = ((($$0170$i)) + 24|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ((($$0170$i)) + 12|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($146|0)==($$0170$i|0);
      do {
       if ($147) {
        $152 = ((($$0170$i)) + 20|0);
        $153 = HEAP32[$152>>2]|0;
        $154 = ($153|0)==(0|0);
        if ($154) {
         $155 = ((($$0170$i)) + 16|0);
         $156 = HEAP32[$155>>2]|0;
         $157 = ($156|0)==(0|0);
         if ($157) {
          $$3$i = 0;
          break;
         } else {
          $$1174$i$ph = $156;$$1176$i$ph = $155;
         }
        } else {
         $$1174$i$ph = $153;$$1176$i$ph = $152;
        }
        $$1174$i = $$1174$i$ph;$$1176$i = $$1176$i$ph;
        while(1) {
         $158 = ((($$1174$i)) + 20|0);
         $159 = HEAP32[$158>>2]|0;
         $160 = ($159|0)==(0|0);
         if ($160) {
          $161 = ((($$1174$i)) + 16|0);
          $162 = HEAP32[$161>>2]|0;
          $163 = ($162|0)==(0|0);
          if ($163) {
           break;
          } else {
           $$1174$i$be = $162;$$1176$i$be = $161;
          }
         } else {
          $$1174$i$be = $159;$$1176$i$be = $158;
         }
         $$1174$i = $$1174$i$be;$$1176$i = $$1176$i$be;
        }
        HEAP32[$$1176$i>>2] = 0;
        $$3$i = $$1174$i;
       } else {
        $148 = ((($$0170$i)) + 8|0);
        $149 = HEAP32[$148>>2]|0;
        $150 = ((($149)) + 12|0);
        HEAP32[$150>>2] = $146;
        $151 = ((($146)) + 8|0);
        HEAP32[$151>>2] = $149;
        $$3$i = $146;
       }
      } while(0);
      $164 = ($144|0)==(0|0);
      do {
       if (!($164)) {
        $165 = ((($$0170$i)) + 28|0);
        $166 = HEAP32[$165>>2]|0;
        $167 = (14280 + ($166<<2)|0);
        $168 = HEAP32[$167>>2]|0;
        $169 = ($$0170$i|0)==($168|0);
        if ($169) {
         HEAP32[$167>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $170 = 1 << $166;
          $171 = $170 ^ -1;
          $172 = $98 & $171;
          HEAP32[(13980)>>2] = $172;
          break;
         }
        } else {
         $173 = ((($144)) + 16|0);
         $174 = HEAP32[$173>>2]|0;
         $175 = ($174|0)==($$0170$i|0);
         $176 = ((($144)) + 20|0);
         $$sink = $175 ? $173 : $176;
         HEAP32[$$sink>>2] = $$3$i;
         $177 = ($$3$i|0)==(0|0);
         if ($177) {
          break;
         }
        }
        $178 = ((($$3$i)) + 24|0);
        HEAP32[$178>>2] = $144;
        $179 = ((($$0170$i)) + 16|0);
        $180 = HEAP32[$179>>2]|0;
        $181 = ($180|0)==(0|0);
        if (!($181)) {
         $182 = ((($$3$i)) + 16|0);
         HEAP32[$182>>2] = $180;
         $183 = ((($180)) + 24|0);
         HEAP32[$183>>2] = $$3$i;
        }
        $184 = ((($$0170$i)) + 20|0);
        $185 = HEAP32[$184>>2]|0;
        $186 = ($185|0)==(0|0);
        if (!($186)) {
         $187 = ((($$3$i)) + 20|0);
         HEAP32[$187>>2] = $185;
         $188 = ((($185)) + 24|0);
         HEAP32[$188>>2] = $$3$i;
        }
       }
      } while(0);
      $189 = ($$0171$i>>>0)<(16);
      if ($189) {
       $190 = (($$0171$i) + ($6))|0;
       $191 = $190 | 3;
       $192 = ((($$0170$i)) + 4|0);
       HEAP32[$192>>2] = $191;
       $193 = (($$0170$i) + ($190)|0);
       $194 = ((($193)) + 4|0);
       $195 = HEAP32[$194>>2]|0;
       $196 = $195 | 1;
       HEAP32[$194>>2] = $196;
      } else {
       $197 = $6 | 3;
       $198 = ((($$0170$i)) + 4|0);
       HEAP32[$198>>2] = $197;
       $199 = $$0171$i | 1;
       $200 = ((($141)) + 4|0);
       HEAP32[$200>>2] = $199;
       $201 = (($141) + ($$0171$i)|0);
       HEAP32[$201>>2] = $$0171$i;
       $202 = ($33|0)==(0);
       if (!($202)) {
        $203 = HEAP32[(13996)>>2]|0;
        $204 = $33 >>> 3;
        $205 = $204 << 1;
        $206 = (14016 + ($205<<2)|0);
        $207 = 1 << $204;
        $208 = $207 & $8;
        $209 = ($208|0)==(0);
        if ($209) {
         $210 = $207 | $8;
         HEAP32[3494] = $210;
         $$pre$i = ((($206)) + 8|0);
         $$0$i = $206;$$pre$phi$iZ2D = $$pre$i;
        } else {
         $211 = ((($206)) + 8|0);
         $212 = HEAP32[$211>>2]|0;
         $$0$i = $212;$$pre$phi$iZ2D = $211;
        }
        HEAP32[$$pre$phi$iZ2D>>2] = $203;
        $213 = ((($$0$i)) + 12|0);
        HEAP32[$213>>2] = $203;
        $214 = ((($203)) + 8|0);
        HEAP32[$214>>2] = $$0$i;
        $215 = ((($203)) + 12|0);
        HEAP32[$215>>2] = $206;
       }
       HEAP32[(13984)>>2] = $$0171$i;
       HEAP32[(13996)>>2] = $141;
      }
      $216 = ((($$0170$i)) + 8|0);
      $$0 = $216;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0192 = $6;
     }
    }
   } else {
    $$0192 = $6;
   }
  } else {
   $217 = ($0>>>0)>(4294967231);
   if ($217) {
    $$0192 = -1;
   } else {
    $218 = (($0) + 11)|0;
    $219 = $218 & -8;
    $220 = HEAP32[(13980)>>2]|0;
    $221 = ($220|0)==(0);
    if ($221) {
     $$0192 = $219;
    } else {
     $222 = (0 - ($219))|0;
     $223 = $218 >>> 8;
     $224 = ($223|0)==(0);
     if ($224) {
      $$0335$i = 0;
     } else {
      $225 = ($219>>>0)>(16777215);
      if ($225) {
       $$0335$i = 31;
      } else {
       $226 = (($223) + 1048320)|0;
       $227 = $226 >>> 16;
       $228 = $227 & 8;
       $229 = $223 << $228;
       $230 = (($229) + 520192)|0;
       $231 = $230 >>> 16;
       $232 = $231 & 4;
       $233 = $232 | $228;
       $234 = $229 << $232;
       $235 = (($234) + 245760)|0;
       $236 = $235 >>> 16;
       $237 = $236 & 2;
       $238 = $233 | $237;
       $239 = (14 - ($238))|0;
       $240 = $234 << $237;
       $241 = $240 >>> 15;
       $242 = (($239) + ($241))|0;
       $243 = $242 << 1;
       $244 = (($242) + 7)|0;
       $245 = $219 >>> $244;
       $246 = $245 & 1;
       $247 = $246 | $243;
       $$0335$i = $247;
      }
     }
     $248 = (14280 + ($$0335$i<<2)|0);
     $249 = HEAP32[$248>>2]|0;
     $250 = ($249|0)==(0|0);
     L79: do {
      if ($250) {
       $$2331$i = 0;$$3$i198 = 0;$$3326$i = $222;
       label = 61;
      } else {
       $251 = ($$0335$i|0)==(31);
       $252 = $$0335$i >>> 1;
       $253 = (25 - ($252))|0;
       $254 = $251 ? 0 : $253;
       $255 = $219 << $254;
       $$0318$i = 0;$$0323$i = $222;$$0329$i = $249;$$0336$i = $255;$$0339$i = 0;
       while(1) {
        $256 = ((($$0329$i)) + 4|0);
        $257 = HEAP32[$256>>2]|0;
        $258 = $257 & -8;
        $259 = (($258) - ($219))|0;
        $260 = ($259>>>0)<($$0323$i>>>0);
        if ($260) {
         $261 = ($259|0)==(0);
         if ($261) {
          $$415$i$ph = $$0329$i;$$432714$i$ph = 0;$$533413$i$ph = $$0329$i;
          label = 65;
          break L79;
         } else {
          $$1319$i = $$0329$i;$$1324$i = $259;
         }
        } else {
         $$1319$i = $$0318$i;$$1324$i = $$0323$i;
        }
        $262 = ((($$0329$i)) + 20|0);
        $263 = HEAP32[$262>>2]|0;
        $264 = $$0336$i >>> 31;
        $265 = (((($$0329$i)) + 16|0) + ($264<<2)|0);
        $266 = HEAP32[$265>>2]|0;
        $267 = ($263|0)==(0|0);
        $268 = ($263|0)==($266|0);
        $or$cond1$i197 = $267 | $268;
        $$1340$i = $or$cond1$i197 ? $$0339$i : $263;
        $269 = ($266|0)==(0|0);
        $spec$select4$i = $$0336$i << 1;
        if ($269) {
         $$2331$i = $$1340$i;$$3$i198 = $$1319$i;$$3326$i = $$1324$i;
         label = 61;
         break;
        } else {
         $$0318$i = $$1319$i;$$0323$i = $$1324$i;$$0329$i = $266;$$0336$i = $spec$select4$i;$$0339$i = $$1340$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 61) {
      $270 = ($$2331$i|0)==(0|0);
      $271 = ($$3$i198|0)==(0|0);
      $or$cond$i199 = $270 & $271;
      if ($or$cond$i199) {
       $272 = 2 << $$0335$i;
       $273 = (0 - ($272))|0;
       $274 = $272 | $273;
       $275 = $274 & $220;
       $276 = ($275|0)==(0);
       if ($276) {
        $$0192 = $219;
        break;
       }
       $277 = (0 - ($275))|0;
       $278 = $275 & $277;
       $279 = (($278) + -1)|0;
       $280 = $279 >>> 12;
       $281 = $280 & 16;
       $282 = $279 >>> $281;
       $283 = $282 >>> 5;
       $284 = $283 & 8;
       $285 = $284 | $281;
       $286 = $282 >>> $284;
       $287 = $286 >>> 2;
       $288 = $287 & 4;
       $289 = $285 | $288;
       $290 = $286 >>> $288;
       $291 = $290 >>> 1;
       $292 = $291 & 2;
       $293 = $289 | $292;
       $294 = $290 >>> $292;
       $295 = $294 >>> 1;
       $296 = $295 & 1;
       $297 = $293 | $296;
       $298 = $294 >>> $296;
       $299 = (($297) + ($298))|0;
       $300 = (14280 + ($299<<2)|0);
       $301 = HEAP32[$300>>2]|0;
       $$3$i198211 = 0;$$4333$i = $301;
      } else {
       $$3$i198211 = $$3$i198;$$4333$i = $$2331$i;
      }
      $302 = ($$4333$i|0)==(0|0);
      if ($302) {
       $$4$lcssa$i = $$3$i198211;$$4327$lcssa$i = $$3326$i;
      } else {
       $$415$i$ph = $$3$i198211;$$432714$i$ph = $$3326$i;$$533413$i$ph = $$4333$i;
       label = 65;
      }
     }
     if ((label|0) == 65) {
      $$415$i = $$415$i$ph;$$432714$i = $$432714$i$ph;$$533413$i = $$533413$i$ph;
      while(1) {
       $303 = ((($$533413$i)) + 4|0);
       $304 = HEAP32[$303>>2]|0;
       $305 = $304 & -8;
       $306 = (($305) - ($219))|0;
       $307 = ($306>>>0)<($$432714$i>>>0);
       $spec$select$i201 = $307 ? $306 : $$432714$i;
       $spec$select2$i = $307 ? $$533413$i : $$415$i;
       $308 = ((($$533413$i)) + 16|0);
       $309 = HEAP32[$308>>2]|0;
       $310 = ($309|0)==(0|0);
       if ($310) {
        $311 = ((($$533413$i)) + 20|0);
        $312 = HEAP32[$311>>2]|0;
        $314 = $312;
       } else {
        $314 = $309;
       }
       $313 = ($314|0)==(0|0);
       if ($313) {
        $$4$lcssa$i = $spec$select2$i;$$4327$lcssa$i = $spec$select$i201;
        break;
       } else {
        $$415$i = $spec$select2$i;$$432714$i = $spec$select$i201;$$533413$i = $314;
       }
      }
     }
     $315 = ($$4$lcssa$i|0)==(0|0);
     if ($315) {
      $$0192 = $219;
     } else {
      $316 = HEAP32[(13984)>>2]|0;
      $317 = (($316) - ($219))|0;
      $318 = ($$4327$lcssa$i>>>0)<($317>>>0);
      if ($318) {
       $319 = (($$4$lcssa$i) + ($219)|0);
       $320 = ($319>>>0)>($$4$lcssa$i>>>0);
       if ($320) {
        $321 = ((($$4$lcssa$i)) + 24|0);
        $322 = HEAP32[$321>>2]|0;
        $323 = ((($$4$lcssa$i)) + 12|0);
        $324 = HEAP32[$323>>2]|0;
        $325 = ($324|0)==($$4$lcssa$i|0);
        do {
         if ($325) {
          $330 = ((($$4$lcssa$i)) + 20|0);
          $331 = HEAP32[$330>>2]|0;
          $332 = ($331|0)==(0|0);
          if ($332) {
           $333 = ((($$4$lcssa$i)) + 16|0);
           $334 = HEAP32[$333>>2]|0;
           $335 = ($334|0)==(0|0);
           if ($335) {
            $$3348$i = 0;
            break;
           } else {
            $$1346$i$ph = $334;$$1350$i$ph = $333;
           }
          } else {
           $$1346$i$ph = $331;$$1350$i$ph = $330;
          }
          $$1346$i = $$1346$i$ph;$$1350$i = $$1350$i$ph;
          while(1) {
           $336 = ((($$1346$i)) + 20|0);
           $337 = HEAP32[$336>>2]|0;
           $338 = ($337|0)==(0|0);
           if ($338) {
            $339 = ((($$1346$i)) + 16|0);
            $340 = HEAP32[$339>>2]|0;
            $341 = ($340|0)==(0|0);
            if ($341) {
             break;
            } else {
             $$1346$i$be = $340;$$1350$i$be = $339;
            }
           } else {
            $$1346$i$be = $337;$$1350$i$be = $336;
           }
           $$1346$i = $$1346$i$be;$$1350$i = $$1350$i$be;
          }
          HEAP32[$$1350$i>>2] = 0;
          $$3348$i = $$1346$i;
         } else {
          $326 = ((($$4$lcssa$i)) + 8|0);
          $327 = HEAP32[$326>>2]|0;
          $328 = ((($327)) + 12|0);
          HEAP32[$328>>2] = $324;
          $329 = ((($324)) + 8|0);
          HEAP32[$329>>2] = $327;
          $$3348$i = $324;
         }
        } while(0);
        $342 = ($322|0)==(0|0);
        do {
         if ($342) {
          $425 = $220;
         } else {
          $343 = ((($$4$lcssa$i)) + 28|0);
          $344 = HEAP32[$343>>2]|0;
          $345 = (14280 + ($344<<2)|0);
          $346 = HEAP32[$345>>2]|0;
          $347 = ($$4$lcssa$i|0)==($346|0);
          if ($347) {
           HEAP32[$345>>2] = $$3348$i;
           $cond$i203 = ($$3348$i|0)==(0|0);
           if ($cond$i203) {
            $348 = 1 << $344;
            $349 = $348 ^ -1;
            $350 = $220 & $349;
            HEAP32[(13980)>>2] = $350;
            $425 = $350;
            break;
           }
          } else {
           $351 = ((($322)) + 16|0);
           $352 = HEAP32[$351>>2]|0;
           $353 = ($352|0)==($$4$lcssa$i|0);
           $354 = ((($322)) + 20|0);
           $$sink320 = $353 ? $351 : $354;
           HEAP32[$$sink320>>2] = $$3348$i;
           $355 = ($$3348$i|0)==(0|0);
           if ($355) {
            $425 = $220;
            break;
           }
          }
          $356 = ((($$3348$i)) + 24|0);
          HEAP32[$356>>2] = $322;
          $357 = ((($$4$lcssa$i)) + 16|0);
          $358 = HEAP32[$357>>2]|0;
          $359 = ($358|0)==(0|0);
          if (!($359)) {
           $360 = ((($$3348$i)) + 16|0);
           HEAP32[$360>>2] = $358;
           $361 = ((($358)) + 24|0);
           HEAP32[$361>>2] = $$3348$i;
          }
          $362 = ((($$4$lcssa$i)) + 20|0);
          $363 = HEAP32[$362>>2]|0;
          $364 = ($363|0)==(0|0);
          if ($364) {
           $425 = $220;
          } else {
           $365 = ((($$3348$i)) + 20|0);
           HEAP32[$365>>2] = $363;
           $366 = ((($363)) + 24|0);
           HEAP32[$366>>2] = $$3348$i;
           $425 = $220;
          }
         }
        } while(0);
        $367 = ($$4327$lcssa$i>>>0)<(16);
        L128: do {
         if ($367) {
          $368 = (($$4327$lcssa$i) + ($219))|0;
          $369 = $368 | 3;
          $370 = ((($$4$lcssa$i)) + 4|0);
          HEAP32[$370>>2] = $369;
          $371 = (($$4$lcssa$i) + ($368)|0);
          $372 = ((($371)) + 4|0);
          $373 = HEAP32[$372>>2]|0;
          $374 = $373 | 1;
          HEAP32[$372>>2] = $374;
         } else {
          $375 = $219 | 3;
          $376 = ((($$4$lcssa$i)) + 4|0);
          HEAP32[$376>>2] = $375;
          $377 = $$4327$lcssa$i | 1;
          $378 = ((($319)) + 4|0);
          HEAP32[$378>>2] = $377;
          $379 = (($319) + ($$4327$lcssa$i)|0);
          HEAP32[$379>>2] = $$4327$lcssa$i;
          $380 = $$4327$lcssa$i >>> 3;
          $381 = ($$4327$lcssa$i>>>0)<(256);
          if ($381) {
           $382 = $380 << 1;
           $383 = (14016 + ($382<<2)|0);
           $384 = HEAP32[3494]|0;
           $385 = 1 << $380;
           $386 = $384 & $385;
           $387 = ($386|0)==(0);
           if ($387) {
            $388 = $384 | $385;
            HEAP32[3494] = $388;
            $$pre$i204 = ((($383)) + 8|0);
            $$0344$i = $383;$$pre$phi$i205Z2D = $$pre$i204;
           } else {
            $389 = ((($383)) + 8|0);
            $390 = HEAP32[$389>>2]|0;
            $$0344$i = $390;$$pre$phi$i205Z2D = $389;
           }
           HEAP32[$$pre$phi$i205Z2D>>2] = $319;
           $391 = ((($$0344$i)) + 12|0);
           HEAP32[$391>>2] = $319;
           $392 = ((($319)) + 8|0);
           HEAP32[$392>>2] = $$0344$i;
           $393 = ((($319)) + 12|0);
           HEAP32[$393>>2] = $383;
           break;
          }
          $394 = $$4327$lcssa$i >>> 8;
          $395 = ($394|0)==(0);
          if ($395) {
           $$0338$i = 0;
          } else {
           $396 = ($$4327$lcssa$i>>>0)>(16777215);
           if ($396) {
            $$0338$i = 31;
           } else {
            $397 = (($394) + 1048320)|0;
            $398 = $397 >>> 16;
            $399 = $398 & 8;
            $400 = $394 << $399;
            $401 = (($400) + 520192)|0;
            $402 = $401 >>> 16;
            $403 = $402 & 4;
            $404 = $403 | $399;
            $405 = $400 << $403;
            $406 = (($405) + 245760)|0;
            $407 = $406 >>> 16;
            $408 = $407 & 2;
            $409 = $404 | $408;
            $410 = (14 - ($409))|0;
            $411 = $405 << $408;
            $412 = $411 >>> 15;
            $413 = (($410) + ($412))|0;
            $414 = $413 << 1;
            $415 = (($413) + 7)|0;
            $416 = $$4327$lcssa$i >>> $415;
            $417 = $416 & 1;
            $418 = $417 | $414;
            $$0338$i = $418;
           }
          }
          $419 = (14280 + ($$0338$i<<2)|0);
          $420 = ((($319)) + 28|0);
          HEAP32[$420>>2] = $$0338$i;
          $421 = ((($319)) + 16|0);
          $422 = ((($421)) + 4|0);
          HEAP32[$422>>2] = 0;
          HEAP32[$421>>2] = 0;
          $423 = 1 << $$0338$i;
          $424 = $425 & $423;
          $426 = ($424|0)==(0);
          if ($426) {
           $427 = $425 | $423;
           HEAP32[(13980)>>2] = $427;
           HEAP32[$419>>2] = $319;
           $428 = ((($319)) + 24|0);
           HEAP32[$428>>2] = $419;
           $429 = ((($319)) + 12|0);
           HEAP32[$429>>2] = $319;
           $430 = ((($319)) + 8|0);
           HEAP32[$430>>2] = $319;
           break;
          }
          $431 = HEAP32[$419>>2]|0;
          $432 = ((($431)) + 4|0);
          $433 = HEAP32[$432>>2]|0;
          $434 = $433 & -8;
          $435 = ($434|0)==($$4327$lcssa$i|0);
          L145: do {
           if ($435) {
            $$0321$lcssa$i = $431;
           } else {
            $436 = ($$0338$i|0)==(31);
            $437 = $$0338$i >>> 1;
            $438 = (25 - ($437))|0;
            $439 = $436 ? 0 : $438;
            $440 = $$4327$lcssa$i << $439;
            $$032012$i = $440;$$032111$i = $431;
            while(1) {
             $447 = $$032012$i >>> 31;
             $448 = (((($$032111$i)) + 16|0) + ($447<<2)|0);
             $443 = HEAP32[$448>>2]|0;
             $449 = ($443|0)==(0|0);
             if ($449) {
              break;
             }
             $441 = $$032012$i << 1;
             $442 = ((($443)) + 4|0);
             $444 = HEAP32[$442>>2]|0;
             $445 = $444 & -8;
             $446 = ($445|0)==($$4327$lcssa$i|0);
             if ($446) {
              $$0321$lcssa$i = $443;
              break L145;
             } else {
              $$032012$i = $441;$$032111$i = $443;
             }
            }
            HEAP32[$448>>2] = $319;
            $450 = ((($319)) + 24|0);
            HEAP32[$450>>2] = $$032111$i;
            $451 = ((($319)) + 12|0);
            HEAP32[$451>>2] = $319;
            $452 = ((($319)) + 8|0);
            HEAP32[$452>>2] = $319;
            break L128;
           }
          } while(0);
          $453 = ((($$0321$lcssa$i)) + 8|0);
          $454 = HEAP32[$453>>2]|0;
          $455 = ((($454)) + 12|0);
          HEAP32[$455>>2] = $319;
          HEAP32[$453>>2] = $319;
          $456 = ((($319)) + 8|0);
          HEAP32[$456>>2] = $454;
          $457 = ((($319)) + 12|0);
          HEAP32[$457>>2] = $$0321$lcssa$i;
          $458 = ((($319)) + 24|0);
          HEAP32[$458>>2] = 0;
         }
        } while(0);
        $459 = ((($$4$lcssa$i)) + 8|0);
        $$0 = $459;
        STACKTOP = sp;return ($$0|0);
       } else {
        $$0192 = $219;
       }
      } else {
       $$0192 = $219;
      }
     }
    }
   }
  }
 } while(0);
 $460 = HEAP32[(13984)>>2]|0;
 $461 = ($460>>>0)<($$0192>>>0);
 if (!($461)) {
  $462 = (($460) - ($$0192))|0;
  $463 = HEAP32[(13996)>>2]|0;
  $464 = ($462>>>0)>(15);
  if ($464) {
   $465 = (($463) + ($$0192)|0);
   HEAP32[(13996)>>2] = $465;
   HEAP32[(13984)>>2] = $462;
   $466 = $462 | 1;
   $467 = ((($465)) + 4|0);
   HEAP32[$467>>2] = $466;
   $468 = (($463) + ($460)|0);
   HEAP32[$468>>2] = $462;
   $469 = $$0192 | 3;
   $470 = ((($463)) + 4|0);
   HEAP32[$470>>2] = $469;
  } else {
   HEAP32[(13984)>>2] = 0;
   HEAP32[(13996)>>2] = 0;
   $471 = $460 | 3;
   $472 = ((($463)) + 4|0);
   HEAP32[$472>>2] = $471;
   $473 = (($463) + ($460)|0);
   $474 = ((($473)) + 4|0);
   $475 = HEAP32[$474>>2]|0;
   $476 = $475 | 1;
   HEAP32[$474>>2] = $476;
  }
  $477 = ((($463)) + 8|0);
  $$0 = $477;
  STACKTOP = sp;return ($$0|0);
 }
 $478 = HEAP32[(13988)>>2]|0;
 $479 = ($478>>>0)>($$0192>>>0);
 if ($479) {
  $480 = (($478) - ($$0192))|0;
  HEAP32[(13988)>>2] = $480;
  $481 = HEAP32[(14000)>>2]|0;
  $482 = (($481) + ($$0192)|0);
  HEAP32[(14000)>>2] = $482;
  $483 = $480 | 1;
  $484 = ((($482)) + 4|0);
  HEAP32[$484>>2] = $483;
  $485 = $$0192 | 3;
  $486 = ((($481)) + 4|0);
  HEAP32[$486>>2] = $485;
  $487 = ((($481)) + 8|0);
  $$0 = $487;
  STACKTOP = sp;return ($$0|0);
 }
 $488 = HEAP32[3612]|0;
 $489 = ($488|0)==(0);
 if ($489) {
  HEAP32[(14456)>>2] = 4096;
  HEAP32[(14452)>>2] = 4096;
  HEAP32[(14460)>>2] = -1;
  HEAP32[(14464)>>2] = -1;
  HEAP32[(14468)>>2] = 0;
  HEAP32[(14420)>>2] = 0;
  $490 = $1;
  $491 = $490 & -16;
  $492 = $491 ^ 1431655768;
  HEAP32[3612] = $492;
  $496 = 4096;
 } else {
  $$pre$i195 = HEAP32[(14456)>>2]|0;
  $496 = $$pre$i195;
 }
 $493 = (($$0192) + 48)|0;
 $494 = (($$0192) + 47)|0;
 $495 = (($496) + ($494))|0;
 $497 = (0 - ($496))|0;
 $498 = $495 & $497;
 $499 = ($498>>>0)>($$0192>>>0);
 if (!($499)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $500 = HEAP32[(14416)>>2]|0;
 $501 = ($500|0)==(0);
 if (!($501)) {
  $502 = HEAP32[(14408)>>2]|0;
  $503 = (($502) + ($498))|0;
  $504 = ($503>>>0)<=($502>>>0);
  $505 = ($503>>>0)>($500>>>0);
  $or$cond1$i = $504 | $505;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $506 = HEAP32[(14420)>>2]|0;
 $507 = $506 & 4;
 $508 = ($507|0)==(0);
 L178: do {
  if ($508) {
   $509 = HEAP32[(14000)>>2]|0;
   $510 = ($509|0)==(0|0);
   L180: do {
    if ($510) {
     label = 128;
    } else {
     $$0$i20$i = (14424);
     while(1) {
      $511 = HEAP32[$$0$i20$i>>2]|0;
      $512 = ($511>>>0)>($509>>>0);
      if (!($512)) {
       $513 = ((($$0$i20$i)) + 4|0);
       $514 = HEAP32[$513>>2]|0;
       $515 = (($511) + ($514)|0);
       $516 = ($515>>>0)>($509>>>0);
       if ($516) {
        break;
       }
      }
      $517 = ((($$0$i20$i)) + 8|0);
      $518 = HEAP32[$517>>2]|0;
      $519 = ($518|0)==(0|0);
      if ($519) {
       label = 128;
       break L180;
      } else {
       $$0$i20$i = $518;
      }
     }
     $542 = (($495) - ($478))|0;
     $543 = $542 & $497;
     $544 = ($543>>>0)<(2147483647);
     if ($544) {
      $545 = ((($$0$i20$i)) + 4|0);
      $546 = (_sbrk(($543|0))|0);
      $547 = HEAP32[$$0$i20$i>>2]|0;
      $548 = HEAP32[$545>>2]|0;
      $549 = (($547) + ($548)|0);
      $550 = ($546|0)==($549|0);
      if ($550) {
       $551 = ($546|0)==((-1)|0);
       if ($551) {
        $$2234243136$i = $543;
       } else {
        $$723947$i = $543;$$748$i = $546;
        label = 145;
        break L178;
       }
      } else {
       $$2247$ph$i = $546;$$2253$ph$i = $543;
       label = 136;
      }
     } else {
      $$2234243136$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 128) {
     $520 = (_sbrk(0)|0);
     $521 = ($520|0)==((-1)|0);
     if ($521) {
      $$2234243136$i = 0;
     } else {
      $522 = $520;
      $523 = HEAP32[(14452)>>2]|0;
      $524 = (($523) + -1)|0;
      $525 = $524 & $522;
      $526 = ($525|0)==(0);
      $527 = (($524) + ($522))|0;
      $528 = (0 - ($523))|0;
      $529 = $527 & $528;
      $530 = (($529) - ($522))|0;
      $531 = $526 ? 0 : $530;
      $spec$select49$i = (($531) + ($498))|0;
      $532 = HEAP32[(14408)>>2]|0;
      $533 = (($spec$select49$i) + ($532))|0;
      $534 = ($spec$select49$i>>>0)>($$0192>>>0);
      $535 = ($spec$select49$i>>>0)<(2147483647);
      $or$cond$i = $534 & $535;
      if ($or$cond$i) {
       $536 = HEAP32[(14416)>>2]|0;
       $537 = ($536|0)==(0);
       if (!($537)) {
        $538 = ($533>>>0)<=($532>>>0);
        $539 = ($533>>>0)>($536>>>0);
        $or$cond2$i = $538 | $539;
        if ($or$cond2$i) {
         $$2234243136$i = 0;
         break;
        }
       }
       $540 = (_sbrk(($spec$select49$i|0))|0);
       $541 = ($540|0)==($520|0);
       if ($541) {
        $$723947$i = $spec$select49$i;$$748$i = $520;
        label = 145;
        break L178;
       } else {
        $$2247$ph$i = $540;$$2253$ph$i = $spec$select49$i;
        label = 136;
       }
      } else {
       $$2234243136$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 136) {
     $552 = (0 - ($$2253$ph$i))|0;
     $553 = ($$2247$ph$i|0)!=((-1)|0);
     $554 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $554 & $553;
     $555 = ($493>>>0)>($$2253$ph$i>>>0);
     $or$cond6$i = $555 & $or$cond7$i;
     if (!($or$cond6$i)) {
      $565 = ($$2247$ph$i|0)==((-1)|0);
      if ($565) {
       $$2234243136$i = 0;
       break;
      } else {
       $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
       label = 145;
       break L178;
      }
     }
     $556 = HEAP32[(14456)>>2]|0;
     $557 = (($494) - ($$2253$ph$i))|0;
     $558 = (($557) + ($556))|0;
     $559 = (0 - ($556))|0;
     $560 = $558 & $559;
     $561 = ($560>>>0)<(2147483647);
     if (!($561)) {
      $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
      label = 145;
      break L178;
     }
     $562 = (_sbrk(($560|0))|0);
     $563 = ($562|0)==((-1)|0);
     if ($563) {
      (_sbrk(($552|0))|0);
      $$2234243136$i = 0;
      break;
     } else {
      $564 = (($560) + ($$2253$ph$i))|0;
      $$723947$i = $564;$$748$i = $$2247$ph$i;
      label = 145;
      break L178;
     }
    }
   } while(0);
   $566 = HEAP32[(14420)>>2]|0;
   $567 = $566 | 4;
   HEAP32[(14420)>>2] = $567;
   $$4236$i = $$2234243136$i;
   label = 143;
  } else {
   $$4236$i = 0;
   label = 143;
  }
 } while(0);
 if ((label|0) == 143) {
  $568 = ($498>>>0)<(2147483647);
  if ($568) {
   $569 = (_sbrk(($498|0))|0);
   $570 = (_sbrk(0)|0);
   $571 = ($569|0)!=((-1)|0);
   $572 = ($570|0)!=((-1)|0);
   $or$cond5$i = $571 & $572;
   $573 = ($569>>>0)<($570>>>0);
   $or$cond8$i = $573 & $or$cond5$i;
   $574 = $570;
   $575 = $569;
   $576 = (($574) - ($575))|0;
   $577 = (($$0192) + 40)|0;
   $578 = ($576>>>0)>($577>>>0);
   $spec$select9$i = $578 ? $576 : $$4236$i;
   $or$cond8$not$i = $or$cond8$i ^ 1;
   $579 = ($569|0)==((-1)|0);
   $not$$i = $578 ^ 1;
   $580 = $579 | $not$$i;
   $or$cond50$i = $580 | $or$cond8$not$i;
   if (!($or$cond50$i)) {
    $$723947$i = $spec$select9$i;$$748$i = $569;
    label = 145;
   }
  }
 }
 if ((label|0) == 145) {
  $581 = HEAP32[(14408)>>2]|0;
  $582 = (($581) + ($$723947$i))|0;
  HEAP32[(14408)>>2] = $582;
  $583 = HEAP32[(14412)>>2]|0;
  $584 = ($582>>>0)>($583>>>0);
  if ($584) {
   HEAP32[(14412)>>2] = $582;
  }
  $585 = HEAP32[(14000)>>2]|0;
  $586 = ($585|0)==(0|0);
  L215: do {
   if ($586) {
    $587 = HEAP32[(13992)>>2]|0;
    $588 = ($587|0)==(0|0);
    $589 = ($$748$i>>>0)<($587>>>0);
    $or$cond11$i = $588 | $589;
    if ($or$cond11$i) {
     HEAP32[(13992)>>2] = $$748$i;
    }
    HEAP32[(14424)>>2] = $$748$i;
    HEAP32[(14428)>>2] = $$723947$i;
    HEAP32[(14436)>>2] = 0;
    $590 = HEAP32[3612]|0;
    HEAP32[(14012)>>2] = $590;
    HEAP32[(14008)>>2] = -1;
    HEAP32[(14028)>>2] = (14016);
    HEAP32[(14024)>>2] = (14016);
    HEAP32[(14036)>>2] = (14024);
    HEAP32[(14032)>>2] = (14024);
    HEAP32[(14044)>>2] = (14032);
    HEAP32[(14040)>>2] = (14032);
    HEAP32[(14052)>>2] = (14040);
    HEAP32[(14048)>>2] = (14040);
    HEAP32[(14060)>>2] = (14048);
    HEAP32[(14056)>>2] = (14048);
    HEAP32[(14068)>>2] = (14056);
    HEAP32[(14064)>>2] = (14056);
    HEAP32[(14076)>>2] = (14064);
    HEAP32[(14072)>>2] = (14064);
    HEAP32[(14084)>>2] = (14072);
    HEAP32[(14080)>>2] = (14072);
    HEAP32[(14092)>>2] = (14080);
    HEAP32[(14088)>>2] = (14080);
    HEAP32[(14100)>>2] = (14088);
    HEAP32[(14096)>>2] = (14088);
    HEAP32[(14108)>>2] = (14096);
    HEAP32[(14104)>>2] = (14096);
    HEAP32[(14116)>>2] = (14104);
    HEAP32[(14112)>>2] = (14104);
    HEAP32[(14124)>>2] = (14112);
    HEAP32[(14120)>>2] = (14112);
    HEAP32[(14132)>>2] = (14120);
    HEAP32[(14128)>>2] = (14120);
    HEAP32[(14140)>>2] = (14128);
    HEAP32[(14136)>>2] = (14128);
    HEAP32[(14148)>>2] = (14136);
    HEAP32[(14144)>>2] = (14136);
    HEAP32[(14156)>>2] = (14144);
    HEAP32[(14152)>>2] = (14144);
    HEAP32[(14164)>>2] = (14152);
    HEAP32[(14160)>>2] = (14152);
    HEAP32[(14172)>>2] = (14160);
    HEAP32[(14168)>>2] = (14160);
    HEAP32[(14180)>>2] = (14168);
    HEAP32[(14176)>>2] = (14168);
    HEAP32[(14188)>>2] = (14176);
    HEAP32[(14184)>>2] = (14176);
    HEAP32[(14196)>>2] = (14184);
    HEAP32[(14192)>>2] = (14184);
    HEAP32[(14204)>>2] = (14192);
    HEAP32[(14200)>>2] = (14192);
    HEAP32[(14212)>>2] = (14200);
    HEAP32[(14208)>>2] = (14200);
    HEAP32[(14220)>>2] = (14208);
    HEAP32[(14216)>>2] = (14208);
    HEAP32[(14228)>>2] = (14216);
    HEAP32[(14224)>>2] = (14216);
    HEAP32[(14236)>>2] = (14224);
    HEAP32[(14232)>>2] = (14224);
    HEAP32[(14244)>>2] = (14232);
    HEAP32[(14240)>>2] = (14232);
    HEAP32[(14252)>>2] = (14240);
    HEAP32[(14248)>>2] = (14240);
    HEAP32[(14260)>>2] = (14248);
    HEAP32[(14256)>>2] = (14248);
    HEAP32[(14268)>>2] = (14256);
    HEAP32[(14264)>>2] = (14256);
    HEAP32[(14276)>>2] = (14264);
    HEAP32[(14272)>>2] = (14264);
    $591 = (($$723947$i) + -40)|0;
    $592 = ((($$748$i)) + 8|0);
    $593 = $592;
    $594 = $593 & 7;
    $595 = ($594|0)==(0);
    $596 = (0 - ($593))|0;
    $597 = $596 & 7;
    $598 = $595 ? 0 : $597;
    $599 = (($$748$i) + ($598)|0);
    $600 = (($591) - ($598))|0;
    HEAP32[(14000)>>2] = $599;
    HEAP32[(13988)>>2] = $600;
    $601 = $600 | 1;
    $602 = ((($599)) + 4|0);
    HEAP32[$602>>2] = $601;
    $603 = (($$748$i) + ($591)|0);
    $604 = ((($603)) + 4|0);
    HEAP32[$604>>2] = 40;
    $605 = HEAP32[(14464)>>2]|0;
    HEAP32[(14004)>>2] = $605;
   } else {
    $$024372$i = (14424);
    while(1) {
     $606 = HEAP32[$$024372$i>>2]|0;
     $607 = ((($$024372$i)) + 4|0);
     $608 = HEAP32[$607>>2]|0;
     $609 = (($606) + ($608)|0);
     $610 = ($$748$i|0)==($609|0);
     if ($610) {
      label = 154;
      break;
     }
     $611 = ((($$024372$i)) + 8|0);
     $612 = HEAP32[$611>>2]|0;
     $613 = ($612|0)==(0|0);
     if ($613) {
      break;
     } else {
      $$024372$i = $612;
     }
    }
    if ((label|0) == 154) {
     $614 = ((($$024372$i)) + 4|0);
     $615 = ((($$024372$i)) + 12|0);
     $616 = HEAP32[$615>>2]|0;
     $617 = $616 & 8;
     $618 = ($617|0)==(0);
     if ($618) {
      $619 = ($606>>>0)<=($585>>>0);
      $620 = ($$748$i>>>0)>($585>>>0);
      $or$cond51$i = $620 & $619;
      if ($or$cond51$i) {
       $621 = (($608) + ($$723947$i))|0;
       HEAP32[$614>>2] = $621;
       $622 = HEAP32[(13988)>>2]|0;
       $623 = (($622) + ($$723947$i))|0;
       $624 = ((($585)) + 8|0);
       $625 = $624;
       $626 = $625 & 7;
       $627 = ($626|0)==(0);
       $628 = (0 - ($625))|0;
       $629 = $628 & 7;
       $630 = $627 ? 0 : $629;
       $631 = (($585) + ($630)|0);
       $632 = (($623) - ($630))|0;
       HEAP32[(14000)>>2] = $631;
       HEAP32[(13988)>>2] = $632;
       $633 = $632 | 1;
       $634 = ((($631)) + 4|0);
       HEAP32[$634>>2] = $633;
       $635 = (($585) + ($623)|0);
       $636 = ((($635)) + 4|0);
       HEAP32[$636>>2] = 40;
       $637 = HEAP32[(14464)>>2]|0;
       HEAP32[(14004)>>2] = $637;
       break;
      }
     }
    }
    $638 = HEAP32[(13992)>>2]|0;
    $639 = ($$748$i>>>0)<($638>>>0);
    if ($639) {
     HEAP32[(13992)>>2] = $$748$i;
    }
    $640 = (($$748$i) + ($$723947$i)|0);
    $$124471$i = (14424);
    while(1) {
     $641 = HEAP32[$$124471$i>>2]|0;
     $642 = ($641|0)==($640|0);
     if ($642) {
      label = 162;
      break;
     }
     $643 = ((($$124471$i)) + 8|0);
     $644 = HEAP32[$643>>2]|0;
     $645 = ($644|0)==(0|0);
     if ($645) {
      break;
     } else {
      $$124471$i = $644;
     }
    }
    if ((label|0) == 162) {
     $646 = ((($$124471$i)) + 12|0);
     $647 = HEAP32[$646>>2]|0;
     $648 = $647 & 8;
     $649 = ($648|0)==(0);
     if ($649) {
      HEAP32[$$124471$i>>2] = $$748$i;
      $650 = ((($$124471$i)) + 4|0);
      $651 = HEAP32[$650>>2]|0;
      $652 = (($651) + ($$723947$i))|0;
      HEAP32[$650>>2] = $652;
      $653 = ((($$748$i)) + 8|0);
      $654 = $653;
      $655 = $654 & 7;
      $656 = ($655|0)==(0);
      $657 = (0 - ($654))|0;
      $658 = $657 & 7;
      $659 = $656 ? 0 : $658;
      $660 = (($$748$i) + ($659)|0);
      $661 = ((($640)) + 8|0);
      $662 = $661;
      $663 = $662 & 7;
      $664 = ($663|0)==(0);
      $665 = (0 - ($662))|0;
      $666 = $665 & 7;
      $667 = $664 ? 0 : $666;
      $668 = (($640) + ($667)|0);
      $669 = $668;
      $670 = $660;
      $671 = (($669) - ($670))|0;
      $672 = (($660) + ($$0192)|0);
      $673 = (($671) - ($$0192))|0;
      $674 = $$0192 | 3;
      $675 = ((($660)) + 4|0);
      HEAP32[$675>>2] = $674;
      $676 = ($585|0)==($668|0);
      L238: do {
       if ($676) {
        $677 = HEAP32[(13988)>>2]|0;
        $678 = (($677) + ($673))|0;
        HEAP32[(13988)>>2] = $678;
        HEAP32[(14000)>>2] = $672;
        $679 = $678 | 1;
        $680 = ((($672)) + 4|0);
        HEAP32[$680>>2] = $679;
       } else {
        $681 = HEAP32[(13996)>>2]|0;
        $682 = ($681|0)==($668|0);
        if ($682) {
         $683 = HEAP32[(13984)>>2]|0;
         $684 = (($683) + ($673))|0;
         HEAP32[(13984)>>2] = $684;
         HEAP32[(13996)>>2] = $672;
         $685 = $684 | 1;
         $686 = ((($672)) + 4|0);
         HEAP32[$686>>2] = $685;
         $687 = (($672) + ($684)|0);
         HEAP32[$687>>2] = $684;
         break;
        }
        $688 = ((($668)) + 4|0);
        $689 = HEAP32[$688>>2]|0;
        $690 = $689 & 3;
        $691 = ($690|0)==(1);
        if ($691) {
         $692 = $689 & -8;
         $693 = $689 >>> 3;
         $694 = ($689>>>0)<(256);
         L246: do {
          if ($694) {
           $695 = ((($668)) + 8|0);
           $696 = HEAP32[$695>>2]|0;
           $697 = ((($668)) + 12|0);
           $698 = HEAP32[$697>>2]|0;
           $699 = ($698|0)==($696|0);
           if ($699) {
            $700 = 1 << $693;
            $701 = $700 ^ -1;
            $702 = HEAP32[3494]|0;
            $703 = $702 & $701;
            HEAP32[3494] = $703;
            break;
           } else {
            $704 = ((($696)) + 12|0);
            HEAP32[$704>>2] = $698;
            $705 = ((($698)) + 8|0);
            HEAP32[$705>>2] = $696;
            break;
           }
          } else {
           $706 = ((($668)) + 24|0);
           $707 = HEAP32[$706>>2]|0;
           $708 = ((($668)) + 12|0);
           $709 = HEAP32[$708>>2]|0;
           $710 = ($709|0)==($668|0);
           do {
            if ($710) {
             $715 = ((($668)) + 16|0);
             $716 = ((($715)) + 4|0);
             $717 = HEAP32[$716>>2]|0;
             $718 = ($717|0)==(0|0);
             if ($718) {
              $719 = HEAP32[$715>>2]|0;
              $720 = ($719|0)==(0|0);
              if ($720) {
               $$3$i$i = 0;
               break;
              } else {
               $$1263$i$i$ph = $719;$$1265$i$i$ph = $715;
              }
             } else {
              $$1263$i$i$ph = $717;$$1265$i$i$ph = $716;
             }
             $$1263$i$i = $$1263$i$i$ph;$$1265$i$i = $$1265$i$i$ph;
             while(1) {
              $721 = ((($$1263$i$i)) + 20|0);
              $722 = HEAP32[$721>>2]|0;
              $723 = ($722|0)==(0|0);
              if ($723) {
               $724 = ((($$1263$i$i)) + 16|0);
               $725 = HEAP32[$724>>2]|0;
               $726 = ($725|0)==(0|0);
               if ($726) {
                break;
               } else {
                $$1263$i$i$be = $725;$$1265$i$i$be = $724;
               }
              } else {
               $$1263$i$i$be = $722;$$1265$i$i$be = $721;
              }
              $$1263$i$i = $$1263$i$i$be;$$1265$i$i = $$1265$i$i$be;
             }
             HEAP32[$$1265$i$i>>2] = 0;
             $$3$i$i = $$1263$i$i;
            } else {
             $711 = ((($668)) + 8|0);
             $712 = HEAP32[$711>>2]|0;
             $713 = ((($712)) + 12|0);
             HEAP32[$713>>2] = $709;
             $714 = ((($709)) + 8|0);
             HEAP32[$714>>2] = $712;
             $$3$i$i = $709;
            }
           } while(0);
           $727 = ($707|0)==(0|0);
           if ($727) {
            break;
           }
           $728 = ((($668)) + 28|0);
           $729 = HEAP32[$728>>2]|0;
           $730 = (14280 + ($729<<2)|0);
           $731 = HEAP32[$730>>2]|0;
           $732 = ($731|0)==($668|0);
           do {
            if ($732) {
             HEAP32[$730>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $733 = 1 << $729;
             $734 = $733 ^ -1;
             $735 = HEAP32[(13980)>>2]|0;
             $736 = $735 & $734;
             HEAP32[(13980)>>2] = $736;
             break L246;
            } else {
             $737 = ((($707)) + 16|0);
             $738 = HEAP32[$737>>2]|0;
             $739 = ($738|0)==($668|0);
             $740 = ((($707)) + 20|0);
             $$sink321 = $739 ? $737 : $740;
             HEAP32[$$sink321>>2] = $$3$i$i;
             $741 = ($$3$i$i|0)==(0|0);
             if ($741) {
              break L246;
             }
            }
           } while(0);
           $742 = ((($$3$i$i)) + 24|0);
           HEAP32[$742>>2] = $707;
           $743 = ((($668)) + 16|0);
           $744 = HEAP32[$743>>2]|0;
           $745 = ($744|0)==(0|0);
           if (!($745)) {
            $746 = ((($$3$i$i)) + 16|0);
            HEAP32[$746>>2] = $744;
            $747 = ((($744)) + 24|0);
            HEAP32[$747>>2] = $$3$i$i;
           }
           $748 = ((($743)) + 4|0);
           $749 = HEAP32[$748>>2]|0;
           $750 = ($749|0)==(0|0);
           if ($750) {
            break;
           }
           $751 = ((($$3$i$i)) + 20|0);
           HEAP32[$751>>2] = $749;
           $752 = ((($749)) + 24|0);
           HEAP32[$752>>2] = $$3$i$i;
          }
         } while(0);
         $753 = (($668) + ($692)|0);
         $754 = (($692) + ($673))|0;
         $$0$i$i = $753;$$0259$i$i = $754;
        } else {
         $$0$i$i = $668;$$0259$i$i = $673;
        }
        $755 = ((($$0$i$i)) + 4|0);
        $756 = HEAP32[$755>>2]|0;
        $757 = $756 & -2;
        HEAP32[$755>>2] = $757;
        $758 = $$0259$i$i | 1;
        $759 = ((($672)) + 4|0);
        HEAP32[$759>>2] = $758;
        $760 = (($672) + ($$0259$i$i)|0);
        HEAP32[$760>>2] = $$0259$i$i;
        $761 = $$0259$i$i >>> 3;
        $762 = ($$0259$i$i>>>0)<(256);
        if ($762) {
         $763 = $761 << 1;
         $764 = (14016 + ($763<<2)|0);
         $765 = HEAP32[3494]|0;
         $766 = 1 << $761;
         $767 = $765 & $766;
         $768 = ($767|0)==(0);
         if ($768) {
          $769 = $765 | $766;
          HEAP32[3494] = $769;
          $$pre$i16$i = ((($764)) + 8|0);
          $$0267$i$i = $764;$$pre$phi$i17$iZ2D = $$pre$i16$i;
         } else {
          $770 = ((($764)) + 8|0);
          $771 = HEAP32[$770>>2]|0;
          $$0267$i$i = $771;$$pre$phi$i17$iZ2D = $770;
         }
         HEAP32[$$pre$phi$i17$iZ2D>>2] = $672;
         $772 = ((($$0267$i$i)) + 12|0);
         HEAP32[$772>>2] = $672;
         $773 = ((($672)) + 8|0);
         HEAP32[$773>>2] = $$0267$i$i;
         $774 = ((($672)) + 12|0);
         HEAP32[$774>>2] = $764;
         break;
        }
        $775 = $$0259$i$i >>> 8;
        $776 = ($775|0)==(0);
        do {
         if ($776) {
          $$0268$i$i = 0;
         } else {
          $777 = ($$0259$i$i>>>0)>(16777215);
          if ($777) {
           $$0268$i$i = 31;
           break;
          }
          $778 = (($775) + 1048320)|0;
          $779 = $778 >>> 16;
          $780 = $779 & 8;
          $781 = $775 << $780;
          $782 = (($781) + 520192)|0;
          $783 = $782 >>> 16;
          $784 = $783 & 4;
          $785 = $784 | $780;
          $786 = $781 << $784;
          $787 = (($786) + 245760)|0;
          $788 = $787 >>> 16;
          $789 = $788 & 2;
          $790 = $785 | $789;
          $791 = (14 - ($790))|0;
          $792 = $786 << $789;
          $793 = $792 >>> 15;
          $794 = (($791) + ($793))|0;
          $795 = $794 << 1;
          $796 = (($794) + 7)|0;
          $797 = $$0259$i$i >>> $796;
          $798 = $797 & 1;
          $799 = $798 | $795;
          $$0268$i$i = $799;
         }
        } while(0);
        $800 = (14280 + ($$0268$i$i<<2)|0);
        $801 = ((($672)) + 28|0);
        HEAP32[$801>>2] = $$0268$i$i;
        $802 = ((($672)) + 16|0);
        $803 = ((($802)) + 4|0);
        HEAP32[$803>>2] = 0;
        HEAP32[$802>>2] = 0;
        $804 = HEAP32[(13980)>>2]|0;
        $805 = 1 << $$0268$i$i;
        $806 = $804 & $805;
        $807 = ($806|0)==(0);
        if ($807) {
         $808 = $804 | $805;
         HEAP32[(13980)>>2] = $808;
         HEAP32[$800>>2] = $672;
         $809 = ((($672)) + 24|0);
         HEAP32[$809>>2] = $800;
         $810 = ((($672)) + 12|0);
         HEAP32[$810>>2] = $672;
         $811 = ((($672)) + 8|0);
         HEAP32[$811>>2] = $672;
         break;
        }
        $812 = HEAP32[$800>>2]|0;
        $813 = ((($812)) + 4|0);
        $814 = HEAP32[$813>>2]|0;
        $815 = $814 & -8;
        $816 = ($815|0)==($$0259$i$i|0);
        L291: do {
         if ($816) {
          $$0261$lcssa$i$i = $812;
         } else {
          $817 = ($$0268$i$i|0)==(31);
          $818 = $$0268$i$i >>> 1;
          $819 = (25 - ($818))|0;
          $820 = $817 ? 0 : $819;
          $821 = $$0259$i$i << $820;
          $$02604$i$i = $821;$$02613$i$i = $812;
          while(1) {
           $828 = $$02604$i$i >>> 31;
           $829 = (((($$02613$i$i)) + 16|0) + ($828<<2)|0);
           $824 = HEAP32[$829>>2]|0;
           $830 = ($824|0)==(0|0);
           if ($830) {
            break;
           }
           $822 = $$02604$i$i << 1;
           $823 = ((($824)) + 4|0);
           $825 = HEAP32[$823>>2]|0;
           $826 = $825 & -8;
           $827 = ($826|0)==($$0259$i$i|0);
           if ($827) {
            $$0261$lcssa$i$i = $824;
            break L291;
           } else {
            $$02604$i$i = $822;$$02613$i$i = $824;
           }
          }
          HEAP32[$829>>2] = $672;
          $831 = ((($672)) + 24|0);
          HEAP32[$831>>2] = $$02613$i$i;
          $832 = ((($672)) + 12|0);
          HEAP32[$832>>2] = $672;
          $833 = ((($672)) + 8|0);
          HEAP32[$833>>2] = $672;
          break L238;
         }
        } while(0);
        $834 = ((($$0261$lcssa$i$i)) + 8|0);
        $835 = HEAP32[$834>>2]|0;
        $836 = ((($835)) + 12|0);
        HEAP32[$836>>2] = $672;
        HEAP32[$834>>2] = $672;
        $837 = ((($672)) + 8|0);
        HEAP32[$837>>2] = $835;
        $838 = ((($672)) + 12|0);
        HEAP32[$838>>2] = $$0261$lcssa$i$i;
        $839 = ((($672)) + 24|0);
        HEAP32[$839>>2] = 0;
       }
      } while(0);
      $968 = ((($660)) + 8|0);
      $$0 = $968;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $$0$i$i$i = (14424);
    while(1) {
     $840 = HEAP32[$$0$i$i$i>>2]|0;
     $841 = ($840>>>0)>($585>>>0);
     if (!($841)) {
      $842 = ((($$0$i$i$i)) + 4|0);
      $843 = HEAP32[$842>>2]|0;
      $844 = (($840) + ($843)|0);
      $845 = ($844>>>0)>($585>>>0);
      if ($845) {
       break;
      }
     }
     $846 = ((($$0$i$i$i)) + 8|0);
     $847 = HEAP32[$846>>2]|0;
     $$0$i$i$i = $847;
    }
    $848 = ((($844)) + -47|0);
    $849 = ((($848)) + 8|0);
    $850 = $849;
    $851 = $850 & 7;
    $852 = ($851|0)==(0);
    $853 = (0 - ($850))|0;
    $854 = $853 & 7;
    $855 = $852 ? 0 : $854;
    $856 = (($848) + ($855)|0);
    $857 = ((($585)) + 16|0);
    $858 = ($856>>>0)<($857>>>0);
    $859 = $858 ? $585 : $856;
    $860 = ((($859)) + 8|0);
    $861 = ((($859)) + 24|0);
    $862 = (($$723947$i) + -40)|0;
    $863 = ((($$748$i)) + 8|0);
    $864 = $863;
    $865 = $864 & 7;
    $866 = ($865|0)==(0);
    $867 = (0 - ($864))|0;
    $868 = $867 & 7;
    $869 = $866 ? 0 : $868;
    $870 = (($$748$i) + ($869)|0);
    $871 = (($862) - ($869))|0;
    HEAP32[(14000)>>2] = $870;
    HEAP32[(13988)>>2] = $871;
    $872 = $871 | 1;
    $873 = ((($870)) + 4|0);
    HEAP32[$873>>2] = $872;
    $874 = (($$748$i) + ($862)|0);
    $875 = ((($874)) + 4|0);
    HEAP32[$875>>2] = 40;
    $876 = HEAP32[(14464)>>2]|0;
    HEAP32[(14004)>>2] = $876;
    $877 = ((($859)) + 4|0);
    HEAP32[$877>>2] = 27;
    ;HEAP32[$860>>2]=HEAP32[(14424)>>2]|0;HEAP32[$860+4>>2]=HEAP32[(14424)+4>>2]|0;HEAP32[$860+8>>2]=HEAP32[(14424)+8>>2]|0;HEAP32[$860+12>>2]=HEAP32[(14424)+12>>2]|0;
    HEAP32[(14424)>>2] = $$748$i;
    HEAP32[(14428)>>2] = $$723947$i;
    HEAP32[(14436)>>2] = 0;
    HEAP32[(14432)>>2] = $860;
    $879 = $861;
    while(1) {
     $878 = ((($879)) + 4|0);
     HEAP32[$878>>2] = 7;
     $880 = ((($879)) + 8|0);
     $881 = ($880>>>0)<($844>>>0);
     if ($881) {
      $879 = $878;
     } else {
      break;
     }
    }
    $882 = ($859|0)==($585|0);
    if (!($882)) {
     $883 = $859;
     $884 = $585;
     $885 = (($883) - ($884))|0;
     $886 = HEAP32[$877>>2]|0;
     $887 = $886 & -2;
     HEAP32[$877>>2] = $887;
     $888 = $885 | 1;
     $889 = ((($585)) + 4|0);
     HEAP32[$889>>2] = $888;
     HEAP32[$859>>2] = $885;
     $890 = $885 >>> 3;
     $891 = ($885>>>0)<(256);
     if ($891) {
      $892 = $890 << 1;
      $893 = (14016 + ($892<<2)|0);
      $894 = HEAP32[3494]|0;
      $895 = 1 << $890;
      $896 = $894 & $895;
      $897 = ($896|0)==(0);
      if ($897) {
       $898 = $894 | $895;
       HEAP32[3494] = $898;
       $$pre$i$i = ((($893)) + 8|0);
       $$0206$i$i = $893;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $899 = ((($893)) + 8|0);
       $900 = HEAP32[$899>>2]|0;
       $$0206$i$i = $900;$$pre$phi$i$iZ2D = $899;
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $585;
      $901 = ((($$0206$i$i)) + 12|0);
      HEAP32[$901>>2] = $585;
      $902 = ((($585)) + 8|0);
      HEAP32[$902>>2] = $$0206$i$i;
      $903 = ((($585)) + 12|0);
      HEAP32[$903>>2] = $893;
      break;
     }
     $904 = $885 >>> 8;
     $905 = ($904|0)==(0);
     if ($905) {
      $$0207$i$i = 0;
     } else {
      $906 = ($885>>>0)>(16777215);
      if ($906) {
       $$0207$i$i = 31;
      } else {
       $907 = (($904) + 1048320)|0;
       $908 = $907 >>> 16;
       $909 = $908 & 8;
       $910 = $904 << $909;
       $911 = (($910) + 520192)|0;
       $912 = $911 >>> 16;
       $913 = $912 & 4;
       $914 = $913 | $909;
       $915 = $910 << $913;
       $916 = (($915) + 245760)|0;
       $917 = $916 >>> 16;
       $918 = $917 & 2;
       $919 = $914 | $918;
       $920 = (14 - ($919))|0;
       $921 = $915 << $918;
       $922 = $921 >>> 15;
       $923 = (($920) + ($922))|0;
       $924 = $923 << 1;
       $925 = (($923) + 7)|0;
       $926 = $885 >>> $925;
       $927 = $926 & 1;
       $928 = $927 | $924;
       $$0207$i$i = $928;
      }
     }
     $929 = (14280 + ($$0207$i$i<<2)|0);
     $930 = ((($585)) + 28|0);
     HEAP32[$930>>2] = $$0207$i$i;
     $931 = ((($585)) + 20|0);
     HEAP32[$931>>2] = 0;
     HEAP32[$857>>2] = 0;
     $932 = HEAP32[(13980)>>2]|0;
     $933 = 1 << $$0207$i$i;
     $934 = $932 & $933;
     $935 = ($934|0)==(0);
     if ($935) {
      $936 = $932 | $933;
      HEAP32[(13980)>>2] = $936;
      HEAP32[$929>>2] = $585;
      $937 = ((($585)) + 24|0);
      HEAP32[$937>>2] = $929;
      $938 = ((($585)) + 12|0);
      HEAP32[$938>>2] = $585;
      $939 = ((($585)) + 8|0);
      HEAP32[$939>>2] = $585;
      break;
     }
     $940 = HEAP32[$929>>2]|0;
     $941 = ((($940)) + 4|0);
     $942 = HEAP32[$941>>2]|0;
     $943 = $942 & -8;
     $944 = ($943|0)==($885|0);
     L325: do {
      if ($944) {
       $$0202$lcssa$i$i = $940;
      } else {
       $945 = ($$0207$i$i|0)==(31);
       $946 = $$0207$i$i >>> 1;
       $947 = (25 - ($946))|0;
       $948 = $945 ? 0 : $947;
       $949 = $885 << $948;
       $$02014$i$i = $949;$$02023$i$i = $940;
       while(1) {
        $956 = $$02014$i$i >>> 31;
        $957 = (((($$02023$i$i)) + 16|0) + ($956<<2)|0);
        $952 = HEAP32[$957>>2]|0;
        $958 = ($952|0)==(0|0);
        if ($958) {
         break;
        }
        $950 = $$02014$i$i << 1;
        $951 = ((($952)) + 4|0);
        $953 = HEAP32[$951>>2]|0;
        $954 = $953 & -8;
        $955 = ($954|0)==($885|0);
        if ($955) {
         $$0202$lcssa$i$i = $952;
         break L325;
        } else {
         $$02014$i$i = $950;$$02023$i$i = $952;
        }
       }
       HEAP32[$957>>2] = $585;
       $959 = ((($585)) + 24|0);
       HEAP32[$959>>2] = $$02023$i$i;
       $960 = ((($585)) + 12|0);
       HEAP32[$960>>2] = $585;
       $961 = ((($585)) + 8|0);
       HEAP32[$961>>2] = $585;
       break L215;
      }
     } while(0);
     $962 = ((($$0202$lcssa$i$i)) + 8|0);
     $963 = HEAP32[$962>>2]|0;
     $964 = ((($963)) + 12|0);
     HEAP32[$964>>2] = $585;
     HEAP32[$962>>2] = $585;
     $965 = ((($585)) + 8|0);
     HEAP32[$965>>2] = $963;
     $966 = ((($585)) + 12|0);
     HEAP32[$966>>2] = $$0202$lcssa$i$i;
     $967 = ((($585)) + 24|0);
     HEAP32[$967>>2] = 0;
    }
   }
  } while(0);
  $969 = HEAP32[(13988)>>2]|0;
  $970 = ($969>>>0)>($$0192>>>0);
  if ($970) {
   $971 = (($969) - ($$0192))|0;
   HEAP32[(13988)>>2] = $971;
   $972 = HEAP32[(14000)>>2]|0;
   $973 = (($972) + ($$0192)|0);
   HEAP32[(14000)>>2] = $973;
   $974 = $971 | 1;
   $975 = ((($973)) + 4|0);
   HEAP32[$975>>2] = $974;
   $976 = $$0192 | 3;
   $977 = ((($972)) + 4|0);
   HEAP32[$977>>2] = $976;
   $978 = ((($972)) + 8|0);
   $$0 = $978;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $979 = (___errno_location()|0);
 HEAP32[$979>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0194$i = 0, $$0194$in$i = 0, $$0346381 = 0, $$0347$lcssa = 0, $$0347380 = 0, $$0359 = 0, $$0366 = 0, $$1 = 0, $$1345 = 0, $$1350 = 0, $$1350$be = 0, $$1350$ph = 0, $$1353 = 0, $$1353$be = 0, $$1353$ph = 0, $$1361 = 0, $$1361$be = 0, $$1361$ph = 0, $$1365 = 0, $$1365$be = 0;
 var $$1365$ph = 0, $$2 = 0, $$3 = 0, $$3363 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink395 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond371 = 0, $cond372 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(13992)>>2]|0;
 $4 = ((($0)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & -8;
 $7 = (($2) + ($6)|0);
 $8 = $5 & 1;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $10 = HEAP32[$2>>2]|0;
   $11 = $5 & 3;
   $12 = ($11|0)==(0);
   if ($12) {
    return;
   }
   $13 = (0 - ($10))|0;
   $14 = (($2) + ($13)|0);
   $15 = (($10) + ($6))|0;
   $16 = ($14>>>0)<($3>>>0);
   if ($16) {
    return;
   }
   $17 = HEAP32[(13996)>>2]|0;
   $18 = ($17|0)==($14|0);
   if ($18) {
    $79 = ((($7)) + 4|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = $80 & 3;
    $82 = ($81|0)==(3);
    if (!($82)) {
     $$1 = $14;$$1345 = $15;$88 = $14;
     break;
    }
    $83 = (($14) + ($15)|0);
    $84 = ((($14)) + 4|0);
    $85 = $15 | 1;
    $86 = $80 & -2;
    HEAP32[(13984)>>2] = $15;
    HEAP32[$79>>2] = $86;
    HEAP32[$84>>2] = $85;
    HEAP32[$83>>2] = $15;
    return;
   }
   $19 = $10 >>> 3;
   $20 = ($10>>>0)<(256);
   if ($20) {
    $21 = ((($14)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($14)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==($22|0);
    if ($25) {
     $26 = 1 << $19;
     $27 = $26 ^ -1;
     $28 = HEAP32[3494]|0;
     $29 = $28 & $27;
     HEAP32[3494] = $29;
     $$1 = $14;$$1345 = $15;$88 = $14;
     break;
    } else {
     $30 = ((($22)) + 12|0);
     HEAP32[$30>>2] = $24;
     $31 = ((($24)) + 8|0);
     HEAP32[$31>>2] = $22;
     $$1 = $14;$$1345 = $15;$88 = $14;
     break;
    }
   }
   $32 = ((($14)) + 24|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($14)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==($14|0);
   do {
    if ($36) {
     $41 = ((($14)) + 16|0);
     $42 = ((($41)) + 4|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)==(0|0);
     if ($44) {
      $45 = HEAP32[$41>>2]|0;
      $46 = ($45|0)==(0|0);
      if ($46) {
       $$3 = 0;
       break;
      } else {
       $$1350$ph = $45;$$1353$ph = $41;
      }
     } else {
      $$1350$ph = $43;$$1353$ph = $42;
     }
     $$1350 = $$1350$ph;$$1353 = $$1353$ph;
     while(1) {
      $47 = ((($$1350)) + 20|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if ($49) {
       $50 = ((($$1350)) + 16|0);
       $51 = HEAP32[$50>>2]|0;
       $52 = ($51|0)==(0|0);
       if ($52) {
        break;
       } else {
        $$1350$be = $51;$$1353$be = $50;
       }
      } else {
       $$1350$be = $48;$$1353$be = $47;
      }
      $$1350 = $$1350$be;$$1353 = $$1353$be;
     }
     HEAP32[$$1353>>2] = 0;
     $$3 = $$1350;
    } else {
     $37 = ((($14)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ((($38)) + 12|0);
     HEAP32[$39>>2] = $35;
     $40 = ((($35)) + 8|0);
     HEAP32[$40>>2] = $38;
     $$3 = $35;
    }
   } while(0);
   $53 = ($33|0)==(0|0);
   if ($53) {
    $$1 = $14;$$1345 = $15;$88 = $14;
   } else {
    $54 = ((($14)) + 28|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (14280 + ($55<<2)|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($57|0)==($14|0);
    if ($58) {
     HEAP32[$56>>2] = $$3;
     $cond371 = ($$3|0)==(0|0);
     if ($cond371) {
      $59 = 1 << $55;
      $60 = $59 ^ -1;
      $61 = HEAP32[(13980)>>2]|0;
      $62 = $61 & $60;
      HEAP32[(13980)>>2] = $62;
      $$1 = $14;$$1345 = $15;$88 = $14;
      break;
     }
    } else {
     $63 = ((($33)) + 16|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ($64|0)==($14|0);
     $66 = ((($33)) + 20|0);
     $$sink = $65 ? $63 : $66;
     HEAP32[$$sink>>2] = $$3;
     $67 = ($$3|0)==(0|0);
     if ($67) {
      $$1 = $14;$$1345 = $15;$88 = $14;
      break;
     }
    }
    $68 = ((($$3)) + 24|0);
    HEAP32[$68>>2] = $33;
    $69 = ((($14)) + 16|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($70|0)==(0|0);
    if (!($71)) {
     $72 = ((($$3)) + 16|0);
     HEAP32[$72>>2] = $70;
     $73 = ((($70)) + 24|0);
     HEAP32[$73>>2] = $$3;
    }
    $74 = ((($69)) + 4|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($75|0)==(0|0);
    if ($76) {
     $$1 = $14;$$1345 = $15;$88 = $14;
    } else {
     $77 = ((($$3)) + 20|0);
     HEAP32[$77>>2] = $75;
     $78 = ((($75)) + 24|0);
     HEAP32[$78>>2] = $$3;
     $$1 = $14;$$1345 = $15;$88 = $14;
    }
   }
  } else {
   $$1 = $2;$$1345 = $6;$88 = $2;
  }
 } while(0);
 $87 = ($88>>>0)<($7>>>0);
 if (!($87)) {
  return;
 }
 $89 = ((($7)) + 4|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = $90 & 1;
 $92 = ($91|0)==(0);
 if ($92) {
  return;
 }
 $93 = $90 & 2;
 $94 = ($93|0)==(0);
 if ($94) {
  $95 = HEAP32[(14000)>>2]|0;
  $96 = ($95|0)==($7|0);
  if ($96) {
   $97 = HEAP32[(13988)>>2]|0;
   $98 = (($97) + ($$1345))|0;
   HEAP32[(13988)>>2] = $98;
   HEAP32[(14000)>>2] = $$1;
   $99 = $98 | 1;
   $100 = ((($$1)) + 4|0);
   HEAP32[$100>>2] = $99;
   $101 = HEAP32[(13996)>>2]|0;
   $102 = ($$1|0)==($101|0);
   if (!($102)) {
    return;
   }
   HEAP32[(13996)>>2] = 0;
   HEAP32[(13984)>>2] = 0;
   return;
  }
  $103 = HEAP32[(13996)>>2]|0;
  $104 = ($103|0)==($7|0);
  if ($104) {
   $105 = HEAP32[(13984)>>2]|0;
   $106 = (($105) + ($$1345))|0;
   HEAP32[(13984)>>2] = $106;
   HEAP32[(13996)>>2] = $88;
   $107 = $106 | 1;
   $108 = ((($$1)) + 4|0);
   HEAP32[$108>>2] = $107;
   $109 = (($88) + ($106)|0);
   HEAP32[$109>>2] = $106;
   return;
  }
  $110 = $90 & -8;
  $111 = (($110) + ($$1345))|0;
  $112 = $90 >>> 3;
  $113 = ($90>>>0)<(256);
  do {
   if ($113) {
    $114 = ((($7)) + 8|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ((($7)) + 12|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ($117|0)==($115|0);
    if ($118) {
     $119 = 1 << $112;
     $120 = $119 ^ -1;
     $121 = HEAP32[3494]|0;
     $122 = $121 & $120;
     HEAP32[3494] = $122;
     break;
    } else {
     $123 = ((($115)) + 12|0);
     HEAP32[$123>>2] = $117;
     $124 = ((($117)) + 8|0);
     HEAP32[$124>>2] = $115;
     break;
    }
   } else {
    $125 = ((($7)) + 24|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ((($7)) + 12|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ($128|0)==($7|0);
    do {
     if ($129) {
      $134 = ((($7)) + 16|0);
      $135 = ((($134)) + 4|0);
      $136 = HEAP32[$135>>2]|0;
      $137 = ($136|0)==(0|0);
      if ($137) {
       $138 = HEAP32[$134>>2]|0;
       $139 = ($138|0)==(0|0);
       if ($139) {
        $$3363 = 0;
        break;
       } else {
        $$1361$ph = $138;$$1365$ph = $134;
       }
      } else {
       $$1361$ph = $136;$$1365$ph = $135;
      }
      $$1361 = $$1361$ph;$$1365 = $$1365$ph;
      while(1) {
       $140 = ((($$1361)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $143 = ((($$1361)) + 16|0);
        $144 = HEAP32[$143>>2]|0;
        $145 = ($144|0)==(0|0);
        if ($145) {
         break;
        } else {
         $$1361$be = $144;$$1365$be = $143;
        }
       } else {
        $$1361$be = $141;$$1365$be = $140;
       }
       $$1361 = $$1361$be;$$1365 = $$1365$be;
      }
      HEAP32[$$1365>>2] = 0;
      $$3363 = $$1361;
     } else {
      $130 = ((($7)) + 8|0);
      $131 = HEAP32[$130>>2]|0;
      $132 = ((($131)) + 12|0);
      HEAP32[$132>>2] = $128;
      $133 = ((($128)) + 8|0);
      HEAP32[$133>>2] = $131;
      $$3363 = $128;
     }
    } while(0);
    $146 = ($126|0)==(0|0);
    if (!($146)) {
     $147 = ((($7)) + 28|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = (14280 + ($148<<2)|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($7|0);
     if ($151) {
      HEAP32[$149>>2] = $$3363;
      $cond372 = ($$3363|0)==(0|0);
      if ($cond372) {
       $152 = 1 << $148;
       $153 = $152 ^ -1;
       $154 = HEAP32[(13980)>>2]|0;
       $155 = $154 & $153;
       HEAP32[(13980)>>2] = $155;
       break;
      }
     } else {
      $156 = ((($126)) + 16|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = ($157|0)==($7|0);
      $159 = ((($126)) + 20|0);
      $$sink395 = $158 ? $156 : $159;
      HEAP32[$$sink395>>2] = $$3363;
      $160 = ($$3363|0)==(0|0);
      if ($160) {
       break;
      }
     }
     $161 = ((($$3363)) + 24|0);
     HEAP32[$161>>2] = $126;
     $162 = ((($7)) + 16|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = ($163|0)==(0|0);
     if (!($164)) {
      $165 = ((($$3363)) + 16|0);
      HEAP32[$165>>2] = $163;
      $166 = ((($163)) + 24|0);
      HEAP32[$166>>2] = $$3363;
     }
     $167 = ((($162)) + 4|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = ($168|0)==(0|0);
     if (!($169)) {
      $170 = ((($$3363)) + 20|0);
      HEAP32[$170>>2] = $168;
      $171 = ((($168)) + 24|0);
      HEAP32[$171>>2] = $$3363;
     }
    }
   }
  } while(0);
  $172 = $111 | 1;
  $173 = ((($$1)) + 4|0);
  HEAP32[$173>>2] = $172;
  $174 = (($88) + ($111)|0);
  HEAP32[$174>>2] = $111;
  $175 = HEAP32[(13996)>>2]|0;
  $176 = ($$1|0)==($175|0);
  if ($176) {
   HEAP32[(13984)>>2] = $111;
   return;
  } else {
   $$2 = $111;
  }
 } else {
  $177 = $90 & -2;
  HEAP32[$89>>2] = $177;
  $178 = $$1345 | 1;
  $179 = ((($$1)) + 4|0);
  HEAP32[$179>>2] = $178;
  $180 = (($88) + ($$1345)|0);
  HEAP32[$180>>2] = $$1345;
  $$2 = $$1345;
 }
 $181 = $$2 >>> 3;
 $182 = ($$2>>>0)<(256);
 if ($182) {
  $183 = $181 << 1;
  $184 = (14016 + ($183<<2)|0);
  $185 = HEAP32[3494]|0;
  $186 = 1 << $181;
  $187 = $185 & $186;
  $188 = ($187|0)==(0);
  if ($188) {
   $189 = $185 | $186;
   HEAP32[3494] = $189;
   $$pre = ((($184)) + 8|0);
   $$0366 = $184;$$pre$phiZ2D = $$pre;
  } else {
   $190 = ((($184)) + 8|0);
   $191 = HEAP32[$190>>2]|0;
   $$0366 = $191;$$pre$phiZ2D = $190;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $192 = ((($$0366)) + 12|0);
  HEAP32[$192>>2] = $$1;
  $193 = ((($$1)) + 8|0);
  HEAP32[$193>>2] = $$0366;
  $194 = ((($$1)) + 12|0);
  HEAP32[$194>>2] = $184;
  return;
 }
 $195 = $$2 >>> 8;
 $196 = ($195|0)==(0);
 if ($196) {
  $$0359 = 0;
 } else {
  $197 = ($$2>>>0)>(16777215);
  if ($197) {
   $$0359 = 31;
  } else {
   $198 = (($195) + 1048320)|0;
   $199 = $198 >>> 16;
   $200 = $199 & 8;
   $201 = $195 << $200;
   $202 = (($201) + 520192)|0;
   $203 = $202 >>> 16;
   $204 = $203 & 4;
   $205 = $204 | $200;
   $206 = $201 << $204;
   $207 = (($206) + 245760)|0;
   $208 = $207 >>> 16;
   $209 = $208 & 2;
   $210 = $205 | $209;
   $211 = (14 - ($210))|0;
   $212 = $206 << $209;
   $213 = $212 >>> 15;
   $214 = (($211) + ($213))|0;
   $215 = $214 << 1;
   $216 = (($214) + 7)|0;
   $217 = $$2 >>> $216;
   $218 = $217 & 1;
   $219 = $218 | $215;
   $$0359 = $219;
  }
 }
 $220 = (14280 + ($$0359<<2)|0);
 $221 = ((($$1)) + 28|0);
 HEAP32[$221>>2] = $$0359;
 $222 = ((($$1)) + 16|0);
 $223 = ((($$1)) + 20|0);
 HEAP32[$223>>2] = 0;
 HEAP32[$222>>2] = 0;
 $224 = HEAP32[(13980)>>2]|0;
 $225 = 1 << $$0359;
 $226 = $224 & $225;
 $227 = ($226|0)==(0);
 L112: do {
  if ($227) {
   $228 = $224 | $225;
   HEAP32[(13980)>>2] = $228;
   HEAP32[$220>>2] = $$1;
   $229 = ((($$1)) + 24|0);
   HEAP32[$229>>2] = $220;
   $230 = ((($$1)) + 12|0);
   HEAP32[$230>>2] = $$1;
   $231 = ((($$1)) + 8|0);
   HEAP32[$231>>2] = $$1;
  } else {
   $232 = HEAP32[$220>>2]|0;
   $233 = ((($232)) + 4|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = $234 & -8;
   $236 = ($235|0)==($$2|0);
   L115: do {
    if ($236) {
     $$0347$lcssa = $232;
    } else {
     $237 = ($$0359|0)==(31);
     $238 = $$0359 >>> 1;
     $239 = (25 - ($238))|0;
     $240 = $237 ? 0 : $239;
     $241 = $$2 << $240;
     $$0346381 = $241;$$0347380 = $232;
     while(1) {
      $248 = $$0346381 >>> 31;
      $249 = (((($$0347380)) + 16|0) + ($248<<2)|0);
      $244 = HEAP32[$249>>2]|0;
      $250 = ($244|0)==(0|0);
      if ($250) {
       break;
      }
      $242 = $$0346381 << 1;
      $243 = ((($244)) + 4|0);
      $245 = HEAP32[$243>>2]|0;
      $246 = $245 & -8;
      $247 = ($246|0)==($$2|0);
      if ($247) {
       $$0347$lcssa = $244;
       break L115;
      } else {
       $$0346381 = $242;$$0347380 = $244;
      }
     }
     HEAP32[$249>>2] = $$1;
     $251 = ((($$1)) + 24|0);
     HEAP32[$251>>2] = $$0347380;
     $252 = ((($$1)) + 12|0);
     HEAP32[$252>>2] = $$1;
     $253 = ((($$1)) + 8|0);
     HEAP32[$253>>2] = $$1;
     break L112;
    }
   } while(0);
   $254 = ((($$0347$lcssa)) + 8|0);
   $255 = HEAP32[$254>>2]|0;
   $256 = ((($255)) + 12|0);
   HEAP32[$256>>2] = $$1;
   HEAP32[$254>>2] = $$1;
   $257 = ((($$1)) + 8|0);
   HEAP32[$257>>2] = $255;
   $258 = ((($$1)) + 12|0);
   HEAP32[$258>>2] = $$0347$lcssa;
   $259 = ((($$1)) + 24|0);
   HEAP32[$259>>2] = 0;
  }
 } while(0);
 $260 = HEAP32[(14008)>>2]|0;
 $261 = (($260) + -1)|0;
 HEAP32[(14008)>>2] = $261;
 $262 = ($261|0)==(0);
 if (!($262)) {
  return;
 }
 $$0194$in$i = (14432);
 while(1) {
  $$0194$i = HEAP32[$$0194$in$i>>2]|0;
  $263 = ($$0194$i|0)==(0|0);
  $264 = ((($$0194$i)) + 8|0);
  if ($263) {
   break;
  } else {
   $$0194$in$i = $264;
  }
 }
 HEAP32[(14008)>>2] = -1;
 return;
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 (_memcpy(($14|0),($0|0),($24|0))|0);
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1245 = 0, $$1245$be = 0, $$1245$ph = 0, $$1248 = 0, $$1248$be = 0, $$1248$ph = 0, $$2 = 0, $$3 = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $storemerge = 0, $storemerge1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = $3 & 3;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ($1>>>0)<(256);
  if ($8) {
   $$2 = 0;
   return ($$2|0);
  }
  $9 = (($1) + 4)|0;
  $10 = ($4>>>0)<($9>>>0);
  if (!($10)) {
   $11 = (($4) - ($1))|0;
   $12 = HEAP32[(14456)>>2]|0;
   $13 = $12 << 1;
   $14 = ($11>>>0)>($13>>>0);
   if (!($14)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $15 = ($4>>>0)<($1>>>0);
 if (!($15)) {
  $16 = (($4) - ($1))|0;
  $17 = ($16>>>0)>(15);
  if (!($17)) {
   $$2 = $0;
   return ($$2|0);
  }
  $18 = (($0) + ($1)|0);
  $19 = $3 & 1;
  $20 = $19 | $1;
  $21 = $20 | 2;
  HEAP32[$2>>2] = $21;
  $22 = ((($18)) + 4|0);
  $23 = $16 | 3;
  HEAP32[$22>>2] = $23;
  $24 = ((($5)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $25 | 1;
  HEAP32[$24>>2] = $26;
  _dispose_chunk($18,$16);
  $$2 = $0;
  return ($$2|0);
 }
 $27 = HEAP32[(14000)>>2]|0;
 $28 = ($27|0)==($5|0);
 if ($28) {
  $29 = HEAP32[(13988)>>2]|0;
  $30 = (($29) + ($4))|0;
  $31 = ($30>>>0)>($1>>>0);
  $32 = (($30) - ($1))|0;
  $33 = (($0) + ($1)|0);
  if (!($31)) {
   $$2 = 0;
   return ($$2|0);
  }
  $34 = $32 | 1;
  $35 = ((($33)) + 4|0);
  $36 = $3 & 1;
  $37 = $36 | $1;
  $38 = $37 | 2;
  HEAP32[$2>>2] = $38;
  HEAP32[$35>>2] = $34;
  HEAP32[(14000)>>2] = $33;
  HEAP32[(13988)>>2] = $32;
  $$2 = $0;
  return ($$2|0);
 }
 $39 = HEAP32[(13996)>>2]|0;
 $40 = ($39|0)==($5|0);
 if ($40) {
  $41 = HEAP32[(13984)>>2]|0;
  $42 = (($41) + ($4))|0;
  $43 = ($42>>>0)<($1>>>0);
  if ($43) {
   $$2 = 0;
   return ($$2|0);
  }
  $44 = (($42) - ($1))|0;
  $45 = ($44>>>0)>(15);
  if ($45) {
   $46 = (($0) + ($1)|0);
   $47 = (($0) + ($42)|0);
   $48 = $3 & 1;
   $49 = $48 | $1;
   $50 = $49 | 2;
   HEAP32[$2>>2] = $50;
   $51 = ((($46)) + 4|0);
   $52 = $44 | 1;
   HEAP32[$51>>2] = $52;
   HEAP32[$47>>2] = $44;
   $53 = ((($47)) + 4|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $54 & -2;
   HEAP32[$53>>2] = $55;
   $storemerge = $46;$storemerge1 = $44;
  } else {
   $56 = $3 & 1;
   $57 = $56 | $42;
   $58 = $57 | 2;
   HEAP32[$2>>2] = $58;
   $59 = (($0) + ($42)|0);
   $60 = ((($59)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 | 1;
   HEAP32[$60>>2] = $62;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(13984)>>2] = $storemerge1;
  HEAP32[(13996)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $63 = ((($5)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $64 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $$2 = 0;
  return ($$2|0);
 }
 $67 = $64 & -8;
 $68 = (($67) + ($4))|0;
 $69 = ($68>>>0)<($1>>>0);
 if ($69) {
  $$2 = 0;
  return ($$2|0);
 }
 $70 = (($68) - ($1))|0;
 $71 = $64 >>> 3;
 $72 = ($64>>>0)<(256);
 do {
  if ($72) {
   $73 = ((($5)) + 8|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ((($5)) + 12|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($76|0)==($74|0);
   if ($77) {
    $78 = 1 << $71;
    $79 = $78 ^ -1;
    $80 = HEAP32[3494]|0;
    $81 = $80 & $79;
    HEAP32[3494] = $81;
    break;
   } else {
    $82 = ((($74)) + 12|0);
    HEAP32[$82>>2] = $76;
    $83 = ((($76)) + 8|0);
    HEAP32[$83>>2] = $74;
    break;
   }
  } else {
   $84 = ((($5)) + 24|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ((($5)) + 12|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($87|0)==($5|0);
   do {
    if ($88) {
     $93 = ((($5)) + 16|0);
     $94 = ((($93)) + 4|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = ($95|0)==(0|0);
     if ($96) {
      $97 = HEAP32[$93>>2]|0;
      $98 = ($97|0)==(0|0);
      if ($98) {
       $$3 = 0;
       break;
      } else {
       $$1245$ph = $97;$$1248$ph = $93;
      }
     } else {
      $$1245$ph = $95;$$1248$ph = $94;
     }
     $$1245 = $$1245$ph;$$1248 = $$1248$ph;
     while(1) {
      $99 = ((($$1245)) + 20|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = ($100|0)==(0|0);
      if ($101) {
       $102 = ((($$1245)) + 16|0);
       $103 = HEAP32[$102>>2]|0;
       $104 = ($103|0)==(0|0);
       if ($104) {
        break;
       } else {
        $$1245$be = $103;$$1248$be = $102;
       }
      } else {
       $$1245$be = $100;$$1248$be = $99;
      }
      $$1245 = $$1245$be;$$1248 = $$1248$be;
     }
     HEAP32[$$1248>>2] = 0;
     $$3 = $$1245;
    } else {
     $89 = ((($5)) + 8|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = ((($90)) + 12|0);
     HEAP32[$91>>2] = $87;
     $92 = ((($87)) + 8|0);
     HEAP32[$92>>2] = $90;
     $$3 = $87;
    }
   } while(0);
   $105 = ($85|0)==(0|0);
   if (!($105)) {
    $106 = ((($5)) + 28|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = (14280 + ($107<<2)|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = ($109|0)==($5|0);
    if ($110) {
     HEAP32[$108>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $111 = 1 << $107;
      $112 = $111 ^ -1;
      $113 = HEAP32[(13980)>>2]|0;
      $114 = $113 & $112;
      HEAP32[(13980)>>2] = $114;
      break;
     }
    } else {
     $115 = ((($85)) + 16|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($116|0)==($5|0);
     $118 = ((($85)) + 20|0);
     $$sink = $117 ? $115 : $118;
     HEAP32[$$sink>>2] = $$3;
     $119 = ($$3|0)==(0|0);
     if ($119) {
      break;
     }
    }
    $120 = ((($$3)) + 24|0);
    HEAP32[$120>>2] = $85;
    $121 = ((($5)) + 16|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = ($122|0)==(0|0);
    if (!($123)) {
     $124 = ((($$3)) + 16|0);
     HEAP32[$124>>2] = $122;
     $125 = ((($122)) + 24|0);
     HEAP32[$125>>2] = $$3;
    }
    $126 = ((($121)) + 4|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = ($127|0)==(0|0);
    if (!($128)) {
     $129 = ((($$3)) + 20|0);
     HEAP32[$129>>2] = $127;
     $130 = ((($127)) + 24|0);
     HEAP32[$130>>2] = $$3;
    }
   }
  }
 } while(0);
 $131 = ($70>>>0)<(16);
 if ($131) {
  $132 = $3 & 1;
  $133 = $132 | $68;
  $134 = $133 | 2;
  HEAP32[$2>>2] = $134;
  $135 = (($0) + ($68)|0);
  $136 = ((($135)) + 4|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = $137 | 1;
  HEAP32[$136>>2] = $138;
  $$2 = $0;
  return ($$2|0);
 } else {
  $139 = (($0) + ($1)|0);
  $140 = $3 & 1;
  $141 = $140 | $1;
  $142 = $141 | 2;
  HEAP32[$2>>2] = $142;
  $143 = ((($139)) + 4|0);
  $144 = $70 | 3;
  HEAP32[$143>>2] = $144;
  $145 = (($0) + ($68)|0);
  $146 = ((($145)) + 4|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = $147 | 1;
  HEAP32[$146>>2] = $148;
  _dispose_chunk($139,$70);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$03649 = 0, $$0365$lcssa = 0, $$03658 = 0, $$0376 = 0, $$0383 = 0, $$1 = 0, $$1363 = 0, $$1371 = 0, $$1371$be = 0, $$1371$ph = 0, $$1374 = 0, $$1374$be = 0, $$1374$ph = 0, $$1378 = 0, $$1378$be = 0, $$1378$ph = 0, $$1382 = 0, $$1382$be = 0, $$1382$ph = 0, $$2 = 0;
 var $$3 = 0, $$3380 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink24 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(13996)>>2]|0;
   $14 = ($13|0)==($11|0);
   if ($14) {
    $75 = ((($2)) + 4|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = $76 & 3;
    $78 = ($77|0)==(3);
    if (!($78)) {
     $$1 = $11;$$1363 = $12;
     break;
    }
    $79 = ((($11)) + 4|0);
    $80 = $12 | 1;
    $81 = $76 & -2;
    HEAP32[(13984)>>2] = $12;
    HEAP32[$75>>2] = $81;
    HEAP32[$79>>2] = $80;
    HEAP32[$2>>2] = $12;
    return;
   }
   $15 = $7 >>> 3;
   $16 = ($7>>>0)<(256);
   if ($16) {
    $17 = ((($11)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($11)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($18|0);
    if ($21) {
     $22 = 1 << $15;
     $23 = $22 ^ -1;
     $24 = HEAP32[3494]|0;
     $25 = $24 & $23;
     HEAP32[3494] = $25;
     $$1 = $11;$$1363 = $12;
     break;
    } else {
     $26 = ((($18)) + 12|0);
     HEAP32[$26>>2] = $20;
     $27 = ((($20)) + 8|0);
     HEAP32[$27>>2] = $18;
     $$1 = $11;$$1363 = $12;
     break;
    }
   }
   $28 = ((($11)) + 24|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($11)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==($11|0);
   do {
    if ($32) {
     $37 = ((($11)) + 16|0);
     $38 = ((($37)) + 4|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($39|0)==(0|0);
     if ($40) {
      $41 = HEAP32[$37>>2]|0;
      $42 = ($41|0)==(0|0);
      if ($42) {
       $$3 = 0;
       break;
      } else {
       $$1371$ph = $41;$$1374$ph = $37;
      }
     } else {
      $$1371$ph = $39;$$1374$ph = $38;
     }
     $$1371 = $$1371$ph;$$1374 = $$1374$ph;
     while(1) {
      $43 = ((($$1371)) + 20|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ($44|0)==(0|0);
      if ($45) {
       $46 = ((($$1371)) + 16|0);
       $47 = HEAP32[$46>>2]|0;
       $48 = ($47|0)==(0|0);
       if ($48) {
        break;
       } else {
        $$1371$be = $47;$$1374$be = $46;
       }
      } else {
       $$1371$be = $44;$$1374$be = $43;
      }
      $$1371 = $$1371$be;$$1374 = $$1374$be;
     }
     HEAP32[$$1374>>2] = 0;
     $$3 = $$1371;
    } else {
     $33 = ((($11)) + 8|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ((($34)) + 12|0);
     HEAP32[$35>>2] = $31;
     $36 = ((($31)) + 8|0);
     HEAP32[$36>>2] = $34;
     $$3 = $31;
    }
   } while(0);
   $49 = ($29|0)==(0|0);
   if ($49) {
    $$1 = $11;$$1363 = $12;
   } else {
    $50 = ((($11)) + 28|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (14280 + ($51<<2)|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($53|0)==($11|0);
    if ($54) {
     HEAP32[$52>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $55 = 1 << $51;
      $56 = $55 ^ -1;
      $57 = HEAP32[(13980)>>2]|0;
      $58 = $57 & $56;
      HEAP32[(13980)>>2] = $58;
      $$1 = $11;$$1363 = $12;
      break;
     }
    } else {
     $59 = ((($29)) + 16|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)==($11|0);
     $62 = ((($29)) + 20|0);
     $$sink = $61 ? $59 : $62;
     HEAP32[$$sink>>2] = $$3;
     $63 = ($$3|0)==(0|0);
     if ($63) {
      $$1 = $11;$$1363 = $12;
      break;
     }
    }
    $64 = ((($$3)) + 24|0);
    HEAP32[$64>>2] = $29;
    $65 = ((($11)) + 16|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ($66|0)==(0|0);
    if (!($67)) {
     $68 = ((($$3)) + 16|0);
     HEAP32[$68>>2] = $66;
     $69 = ((($66)) + 24|0);
     HEAP32[$69>>2] = $$3;
    }
    $70 = ((($65)) + 4|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = ($71|0)==(0|0);
    if ($72) {
     $$1 = $11;$$1363 = $12;
    } else {
     $73 = ((($$3)) + 20|0);
     HEAP32[$73>>2] = $71;
     $74 = ((($71)) + 24|0);
     HEAP32[$74>>2] = $$3;
     $$1 = $11;$$1363 = $12;
    }
   }
  } else {
   $$1 = $0;$$1363 = $1;
  }
 } while(0);
 $82 = ((($2)) + 4|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $83 & 2;
 $85 = ($84|0)==(0);
 if ($85) {
  $86 = HEAP32[(14000)>>2]|0;
  $87 = ($86|0)==($2|0);
  if ($87) {
   $88 = HEAP32[(13988)>>2]|0;
   $89 = (($88) + ($$1363))|0;
   HEAP32[(13988)>>2] = $89;
   HEAP32[(14000)>>2] = $$1;
   $90 = $89 | 1;
   $91 = ((($$1)) + 4|0);
   HEAP32[$91>>2] = $90;
   $92 = HEAP32[(13996)>>2]|0;
   $93 = ($$1|0)==($92|0);
   if (!($93)) {
    return;
   }
   HEAP32[(13996)>>2] = 0;
   HEAP32[(13984)>>2] = 0;
   return;
  }
  $94 = HEAP32[(13996)>>2]|0;
  $95 = ($94|0)==($2|0);
  if ($95) {
   $96 = HEAP32[(13984)>>2]|0;
   $97 = (($96) + ($$1363))|0;
   HEAP32[(13984)>>2] = $97;
   HEAP32[(13996)>>2] = $$1;
   $98 = $97 | 1;
   $99 = ((($$1)) + 4|0);
   HEAP32[$99>>2] = $98;
   $100 = (($$1) + ($97)|0);
   HEAP32[$100>>2] = $97;
   return;
  }
  $101 = $83 & -8;
  $102 = (($101) + ($$1363))|0;
  $103 = $83 >>> 3;
  $104 = ($83>>>0)<(256);
  do {
   if ($104) {
    $105 = ((($2)) + 8|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = ((($2)) + 12|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = ($108|0)==($106|0);
    if ($109) {
     $110 = 1 << $103;
     $111 = $110 ^ -1;
     $112 = HEAP32[3494]|0;
     $113 = $112 & $111;
     HEAP32[3494] = $113;
     break;
    } else {
     $114 = ((($106)) + 12|0);
     HEAP32[$114>>2] = $108;
     $115 = ((($108)) + 8|0);
     HEAP32[$115>>2] = $106;
     break;
    }
   } else {
    $116 = ((($2)) + 24|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ((($2)) + 12|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = ($119|0)==($2|0);
    do {
     if ($120) {
      $125 = ((($2)) + 16|0);
      $126 = ((($125)) + 4|0);
      $127 = HEAP32[$126>>2]|0;
      $128 = ($127|0)==(0|0);
      if ($128) {
       $129 = HEAP32[$125>>2]|0;
       $130 = ($129|0)==(0|0);
       if ($130) {
        $$3380 = 0;
        break;
       } else {
        $$1378$ph = $129;$$1382$ph = $125;
       }
      } else {
       $$1378$ph = $127;$$1382$ph = $126;
      }
      $$1378 = $$1378$ph;$$1382 = $$1382$ph;
      while(1) {
       $131 = ((($$1378)) + 20|0);
       $132 = HEAP32[$131>>2]|0;
       $133 = ($132|0)==(0|0);
       if ($133) {
        $134 = ((($$1378)) + 16|0);
        $135 = HEAP32[$134>>2]|0;
        $136 = ($135|0)==(0|0);
        if ($136) {
         break;
        } else {
         $$1378$be = $135;$$1382$be = $134;
        }
       } else {
        $$1378$be = $132;$$1382$be = $131;
       }
       $$1378 = $$1378$be;$$1382 = $$1382$be;
      }
      HEAP32[$$1382>>2] = 0;
      $$3380 = $$1378;
     } else {
      $121 = ((($2)) + 8|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = ((($122)) + 12|0);
      HEAP32[$123>>2] = $119;
      $124 = ((($119)) + 8|0);
      HEAP32[$124>>2] = $122;
      $$3380 = $119;
     }
    } while(0);
    $137 = ($117|0)==(0|0);
    if (!($137)) {
     $138 = ((($2)) + 28|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = (14280 + ($139<<2)|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ($141|0)==($2|0);
     if ($142) {
      HEAP32[$140>>2] = $$3380;
      $cond4 = ($$3380|0)==(0|0);
      if ($cond4) {
       $143 = 1 << $139;
       $144 = $143 ^ -1;
       $145 = HEAP32[(13980)>>2]|0;
       $146 = $145 & $144;
       HEAP32[(13980)>>2] = $146;
       break;
      }
     } else {
      $147 = ((($117)) + 16|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ($148|0)==($2|0);
      $150 = ((($117)) + 20|0);
      $$sink24 = $149 ? $147 : $150;
      HEAP32[$$sink24>>2] = $$3380;
      $151 = ($$3380|0)==(0|0);
      if ($151) {
       break;
      }
     }
     $152 = ((($$3380)) + 24|0);
     HEAP32[$152>>2] = $117;
     $153 = ((($2)) + 16|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ($154|0)==(0|0);
     if (!($155)) {
      $156 = ((($$3380)) + 16|0);
      HEAP32[$156>>2] = $154;
      $157 = ((($154)) + 24|0);
      HEAP32[$157>>2] = $$3380;
     }
     $158 = ((($153)) + 4|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==(0|0);
     if (!($160)) {
      $161 = ((($$3380)) + 20|0);
      HEAP32[$161>>2] = $159;
      $162 = ((($159)) + 24|0);
      HEAP32[$162>>2] = $$3380;
     }
    }
   }
  } while(0);
  $163 = $102 | 1;
  $164 = ((($$1)) + 4|0);
  HEAP32[$164>>2] = $163;
  $165 = (($$1) + ($102)|0);
  HEAP32[$165>>2] = $102;
  $166 = HEAP32[(13996)>>2]|0;
  $167 = ($$1|0)==($166|0);
  if ($167) {
   HEAP32[(13984)>>2] = $102;
   return;
  } else {
   $$2 = $102;
  }
 } else {
  $168 = $83 & -2;
  HEAP32[$82>>2] = $168;
  $169 = $$1363 | 1;
  $170 = ((($$1)) + 4|0);
  HEAP32[$170>>2] = $169;
  $171 = (($$1) + ($$1363)|0);
  HEAP32[$171>>2] = $$1363;
  $$2 = $$1363;
 }
 $172 = $$2 >>> 3;
 $173 = ($$2>>>0)<(256);
 if ($173) {
  $174 = $172 << 1;
  $175 = (14016 + ($174<<2)|0);
  $176 = HEAP32[3494]|0;
  $177 = 1 << $172;
  $178 = $176 & $177;
  $179 = ($178|0)==(0);
  if ($179) {
   $180 = $176 | $177;
   HEAP32[3494] = $180;
   $$pre = ((($175)) + 8|0);
   $$0383 = $175;$$pre$phiZ2D = $$pre;
  } else {
   $181 = ((($175)) + 8|0);
   $182 = HEAP32[$181>>2]|0;
   $$0383 = $182;$$pre$phiZ2D = $181;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $183 = ((($$0383)) + 12|0);
  HEAP32[$183>>2] = $$1;
  $184 = ((($$1)) + 8|0);
  HEAP32[$184>>2] = $$0383;
  $185 = ((($$1)) + 12|0);
  HEAP32[$185>>2] = $175;
  return;
 }
 $186 = $$2 >>> 8;
 $187 = ($186|0)==(0);
 if ($187) {
  $$0376 = 0;
 } else {
  $188 = ($$2>>>0)>(16777215);
  if ($188) {
   $$0376 = 31;
  } else {
   $189 = (($186) + 1048320)|0;
   $190 = $189 >>> 16;
   $191 = $190 & 8;
   $192 = $186 << $191;
   $193 = (($192) + 520192)|0;
   $194 = $193 >>> 16;
   $195 = $194 & 4;
   $196 = $195 | $191;
   $197 = $192 << $195;
   $198 = (($197) + 245760)|0;
   $199 = $198 >>> 16;
   $200 = $199 & 2;
   $201 = $196 | $200;
   $202 = (14 - ($201))|0;
   $203 = $197 << $200;
   $204 = $203 >>> 15;
   $205 = (($202) + ($204))|0;
   $206 = $205 << 1;
   $207 = (($205) + 7)|0;
   $208 = $$2 >>> $207;
   $209 = $208 & 1;
   $210 = $209 | $206;
   $$0376 = $210;
  }
 }
 $211 = (14280 + ($$0376<<2)|0);
 $212 = ((($$1)) + 28|0);
 HEAP32[$212>>2] = $$0376;
 $213 = ((($$1)) + 16|0);
 $214 = ((($$1)) + 20|0);
 HEAP32[$214>>2] = 0;
 HEAP32[$213>>2] = 0;
 $215 = HEAP32[(13980)>>2]|0;
 $216 = 1 << $$0376;
 $217 = $215 & $216;
 $218 = ($217|0)==(0);
 if ($218) {
  $219 = $215 | $216;
  HEAP32[(13980)>>2] = $219;
  HEAP32[$211>>2] = $$1;
  $220 = ((($$1)) + 24|0);
  HEAP32[$220>>2] = $211;
  $221 = ((($$1)) + 12|0);
  HEAP32[$221>>2] = $$1;
  $222 = ((($$1)) + 8|0);
  HEAP32[$222>>2] = $$1;
  return;
 }
 $223 = HEAP32[$211>>2]|0;
 $224 = ((($223)) + 4|0);
 $225 = HEAP32[$224>>2]|0;
 $226 = $225 & -8;
 $227 = ($226|0)==($$2|0);
 L104: do {
  if ($227) {
   $$0365$lcssa = $223;
  } else {
   $228 = ($$0376|0)==(31);
   $229 = $$0376 >>> 1;
   $230 = (25 - ($229))|0;
   $231 = $228 ? 0 : $230;
   $232 = $$2 << $231;
   $$03649 = $232;$$03658 = $223;
   while(1) {
    $239 = $$03649 >>> 31;
    $240 = (((($$03658)) + 16|0) + ($239<<2)|0);
    $235 = HEAP32[$240>>2]|0;
    $241 = ($235|0)==(0|0);
    if ($241) {
     break;
    }
    $233 = $$03649 << 1;
    $234 = ((($235)) + 4|0);
    $236 = HEAP32[$234>>2]|0;
    $237 = $236 & -8;
    $238 = ($237|0)==($$2|0);
    if ($238) {
     $$0365$lcssa = $235;
     break L104;
    } else {
     $$03649 = $233;$$03658 = $235;
    }
   }
   HEAP32[$240>>2] = $$1;
   $242 = ((($$1)) + 24|0);
   HEAP32[$242>>2] = $$03658;
   $243 = ((($$1)) + 12|0);
   HEAP32[$243>>2] = $$1;
   $244 = ((($$1)) + 8|0);
   HEAP32[$244>>2] = $$1;
   return;
  }
 } while(0);
 $245 = ((($$0365$lcssa)) + 8|0);
 $246 = HEAP32[$245>>2]|0;
 $247 = ((($246)) + 12|0);
 HEAP32[$247>>2] = $$1;
 HEAP32[$245>>2] = $$1;
 $248 = ((($$1)) + 8|0);
 HEAP32[$248>>2] = $246;
 $249 = ((($$1)) + 12|0);
 HEAP32[$249>>2] = $$0365$lcssa;
 $250 = ((($$1)) + 24|0);
 HEAP32[$250>>2] = 0;
 return;
}
function _pthread_key_create($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 22;
  return ($$0|0);
 }
 $3 = (_malloc(8)|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 38177486;
 $5 = $3;
 HEAP32[$0>>2] = $5;
 $$0 = 0;
 return ($$0|0);
}
function _pthread_getspecific($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(38177486);
 if (!($4)) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = $0;
 $6 = HEAP32[$5>>2]|0;
 $$0 = $6;
 return ($$0|0);
}
function _pthread_setspecific($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(38177486);
 if (!($5)) {
  $$0 = 22;
  return ($$0|0);
 }
 $6 = $1;
 HEAP32[$2>>2] = $6;
 $$0 = 0;
 return ($$0|0);
}
function _pthread_once($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)==(324508639);
 if ($3) {
  return 0;
 }
 FUNCTION_TABLE_v[$1 & 511]();
 HEAP32[$0>>2] = 324508639;
 return 0;
}
function __ZNSt3__217bad_function_callD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__217bad_function_callD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__217bad_function_callD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__217bad_function_call4whatEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (12160|0);
}
function __Znwm($0) {
 $0 = $0|0;
 var $$lcssa = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $spec$store$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 $spec$store$select = $1 ? 1 : $0;
 while(1) {
  $2 = (_malloc($spec$store$select)|0);
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $$lcssa = $2;
   break;
  }
  $4 = (__ZSt15get_new_handlerv()|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   $$lcssa = 0;
   break;
  }
  FUNCTION_TABLE_v[$4 & 511]();
 }
 return ($$lcssa|0);
}
function __Znam($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm($0)|0);
 return ($1|0);
}
function __ZdlPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($0);
 return;
}
function __ZdaPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNSt3__218__libcpp_refstringC2EPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($1)|0);
 $3 = (($2) + 13)|0;
 $4 = (__Znwm($3)|0);
 HEAP32[$4>>2] = $2;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = $2;
 $6 = ((($4)) + 8|0);
 HEAP32[$6>>2] = 0;
 $7 = (__ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($4)|0);
 $8 = (($2) + 1)|0;
 _memcpy(($7|0),($1|0),($8|0))|0;
 HEAP32[$0>>2] = $7;
 return;
}
function __ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 return ($1|0);
}
function __ZNSt11logic_errorC2EPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (5564);
 $2 = ((($0)) + 4|0);
 __ZNSt3__218__libcpp_refstringC2EPKc($2,$1);
 return;
}
function __ZNKSt3__218__libcpp_refstring15__uses_refcountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $2 = ((($1)) + 11|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)<(0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = ((($1)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($0,$5,$7);
 } else {
  ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;
 }
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($2>>>0)>(4294967279);
 if ($4) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $5 = ($2>>>0)<(11);
 if ($5) {
  $6 = $2&255;
  $7 = ((($0)) + 11|0);
  HEAP8[$7>>0] = $6;
  $$0 = $0;
 } else {
  $8 = (($2) + 16)|0;
  $9 = $8 & -16;
  $10 = (__Znwm($9)|0);
  HEAP32[$0>>2] = $10;
  $11 = $9 | -2147483648;
  $12 = ((($0)) + 8|0);
  HEAP32[$12>>2] = $11;
  $13 = ((($0)) + 4|0);
  HEAP32[$13>>2] = $2;
  $$0 = $10;
 }
 (__ZNSt3__211char_traitsIcE4copyEPcPKcm($$0,$1,$2)|0);
 $14 = (($$0) + ($2)|0);
 HEAP8[$3>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($14,$3);
 STACKTOP = sp;return;
}
function __ZNSt3__211char_traitsIcE4copyEPcPKcm($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if (!($3)) {
  _memcpy(($0|0),($1|0),($2|0))|0;
 }
 return ($0|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 11|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)<(0);
 if ($3) {
  $4 = HEAP32[$0>>2]|0;
  __ZdlPv($4);
 }
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$017$off042 = 0, $$01938 = 0, $$020355154 = 0, $$02036 = 0, $$pre = 0, $$pre$phi57Z2D = 0, $$pre$phiZ2D = 0, $$pre56 = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $phitmp$i = 0, $phitmp$i22 = 0, $spec$select$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(4294967279);
 if ($2) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $3 = ((($0)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 if ($5) {
  $6 = ((($0)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 & 2147483647;
  $phitmp$i = (($8) + -1)|0;
  $9 = ((($0)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $13 = $10;$18 = $phitmp$i;
 } else {
  $11 = $4&255;
  $13 = $11;$18 = 10;
 }
 $12 = ($13>>>0)>($1>>>0);
 $$sroa$speculated = $12 ? $13 : $1;
 $14 = ($$sroa$speculated>>>0)<(11);
 $15 = (($$sroa$speculated) + 16)|0;
 $16 = $15 & -16;
 $phitmp$i22 = (($16) + -1)|0;
 $spec$select$i = $14 ? 10 : $phitmp$i22;
 $17 = ($spec$select$i|0)==($18|0);
 do {
  if (!($17)) {
   do {
    if ($14) {
     $22 = HEAP32[$0>>2]|0;
     if ($5) {
      $$017$off042 = 0;$$01938 = $22;$$02036 = $0;
      label = 13;
     } else {
      $23 = $4&255;
      $24 = (($23) + 1)|0;
      (__ZNSt3__211char_traitsIcE4copyEPcPKcm($0,$22,$24)|0);
      __ZdlPv($22);
      label = 16;
     }
    } else {
     $19 = (($spec$select$i) + 1)|0;
     $20 = (__Znwm($19)|0);
     if ($5) {
      $21 = HEAP32[$0>>2]|0;
      $$017$off042 = 1;$$01938 = $21;$$02036 = $20;
      label = 13;
      break;
     } else {
      $25 = $4&255;
      $26 = (($25) + 1)|0;
      (__ZNSt3__211char_traitsIcE4copyEPcPKcm($20,$0,$26)|0);
      $$pre = ((($0)) + 4|0);
      $$020355154 = $20;$$pre$phi57Z2D = $19;$$pre$phiZ2D = $$pre;
      label = 15;
      break;
     }
    }
   } while(0);
   if ((label|0) == 13) {
    $27 = ((($0)) + 4|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($28) + 1)|0;
    (__ZNSt3__211char_traitsIcE4copyEPcPKcm($$02036,$$01938,$29)|0);
    __ZdlPv($$01938);
    if ($$017$off042) {
     $$pre56 = (($spec$select$i) + 1)|0;
     $$020355154 = $$02036;$$pre$phi57Z2D = $$pre56;$$pre$phiZ2D = $27;
     label = 15;
    } else {
     label = 16;
    }
   }
   if ((label|0) == 15) {
    $30 = $$pre$phi57Z2D | -2147483648;
    $31 = ((($0)) + 8|0);
    HEAP32[$31>>2] = $30;
    HEAP32[$$pre$phiZ2D>>2] = $13;
    HEAP32[$0>>2] = $$020355154;
    break;
   }
   else if ((label|0) == 16) {
    $32 = $13&255;
    HEAP8[$3>>0] = $32;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__211char_traitsIcE7compareEPKcS3_m($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 0;
 } else {
  $4 = (_memcmp($0,$1,$2)|0);
  $$0 = $4;
 }
 return ($$0|0);
}
function __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sroa$speculated = 0, $$sroa$speculated19 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $spec$select = 0, $spec$select31 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 11|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if ($7) {
  $8 = ((($0)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $12 = $9;
 } else {
  $10 = $6&255;
  $12 = $10;
 }
 $11 = ($12>>>0)<($1>>>0);
 $13 = ($4|0)==(-1);
 $or$cond = $13 | $11;
 if ($or$cond) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0);
  // unreachable;
 }
 $14 = (($12) - ($1))|0;
 $15 = ($14>>>0)<($2>>>0);
 $$sroa$speculated = $15 ? $14 : $2;
 if ($7) {
  $16 = HEAP32[$0>>2]|0;
  $18 = $16;
 } else {
  $18 = $0;
 }
 $17 = (($18) + ($1)|0);
 $19 = ($$sroa$speculated>>>0)>($4>>>0);
 $$sroa$speculated19 = $19 ? $4 : $$sroa$speculated;
 $20 = (__ZNSt3__211char_traitsIcE7compareEPKcS3_m($17,$3,$$sroa$speculated19)|0);
 $21 = ($20|0)==(0);
 if ($21) {
  $22 = ($$sroa$speculated>>>0)<($4>>>0);
  $spec$select = $19&1;
  $spec$select31 = $22 ? -1 : $spec$select;
  return ($spec$select31|0);
 } else {
  return ($20|0);
 }
 return (0)|0;
}
function __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__211char_traitsIcE6lengthEPKc($1)|0);
 $3 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm($0,0,-1,$1,$2)|0);
 return ($3|0);
}
function __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = sp + 36|0;
 $1 = (___cxa_get_globals_fast()|0);
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = HEAP32[$1>>2]|0;
  $4 = ($3|0)==(0|0);
  if (!($4)) {
   $5 = ((($3)) + 80|0);
   $6 = ((($3)) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if (!($16)) {
    HEAP32[$vararg_buffer7>>2] = 12347;
    _abort_message(12297,$vararg_buffer7);
    // unreachable;
   }
   $17 = ($9|0)==(1126902529);
   $18 = ($12|0)==(1129074247);
   $19 = $17 & $18;
   if ($19) {
    $20 = ((($3)) + 44|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $21;
   } else {
    $22 = $5;
   }
   HEAP32[$0>>2] = $22;
   $23 = HEAP32[$3>>2]|0;
   $24 = ((($23)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = HEAP32[894]|0;
   $27 = ((($26)) + 16|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (FUNCTION_TABLE_iiii[$28 & 511](3576,$23,$0)|0);
   if ($29) {
    $30 = HEAP32[$0>>2]|0;
    $31 = HEAP32[$30>>2]|0;
    $32 = ((($31)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (FUNCTION_TABLE_ii[$33 & 255]($30)|0);
    HEAP32[$vararg_buffer>>2] = 12347;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $25;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $34;
    _abort_message(12211,$vararg_buffer);
    // unreachable;
   } else {
    HEAP32[$vararg_buffer3>>2] = 12347;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $25;
    _abort_message(12256,$vararg_buffer3);
    // unreachable;
   }
  }
 }
 _abort_message(12335,$vararg_buffer10);
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = (_pthread_once(14472,290)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[3619]|0;
  $3 = (_pthread_getspecific($2)|0);
  STACKTOP = sp;return ($3|0);
 } else {
  _abort_message(12486,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function _abort_message($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = HEAP32[1292]|0;
 (_vfprintf($2,$0,$1)|0);
 (_fputc(10,$2)|0);
 _abort();
 // unreachable;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $4 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,0)|0);
 if ($4) {
  $$2 = 1;
 } else {
  $5 = ($1|0)==(0|0);
  if ($5) {
   $$2 = 0;
  } else {
   $6 = (___dynamic_cast($1,3600,3584,0)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $$2 = 0;
   } else {
    $8 = ((($3)) + 4|0);
    dest=$8; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$3>>2] = $6;
    $9 = ((($3)) + 8|0);
    HEAP32[$9>>2] = $0;
    $10 = ((($3)) + 12|0);
    HEAP32[$10>>2] = -1;
    $11 = ((($3)) + 48|0);
    HEAP32[$11>>2] = 1;
    $12 = HEAP32[$6>>2]|0;
    $13 = ((($12)) + 28|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = HEAP32[$2>>2]|0;
    FUNCTION_TABLE_viiii[$14 & 511]($6,$3,$15,1);
    $16 = ((($3)) + 24|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)==(1);
    if ($18) {
     $19 = ((($3)) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     HEAP32[$2>>2] = $20;
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$2 = $$0;
   }
  }
 }
 STACKTOP = sp;return ($$2|0);
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$7,$5)|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$6,$4)|0);
 do {
  if ($7) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$1,$2,$3);
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$8,$4)|0);
   if ($9) {
    $10 = ((($1)) + 16|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==($2|0);
    if (!($12)) {
     $13 = ((($1)) + 20|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ($14|0)==($2|0);
     if (!($15)) {
      $18 = ((($1)) + 32|0);
      HEAP32[$18>>2] = $3;
      HEAP32[$13>>2] = $2;
      $19 = ((($1)) + 40|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = (($20) + 1)|0;
      HEAP32[$19>>2] = $21;
      $22 = ((($1)) + 36|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = ($23|0)==(1);
      if ($24) {
       $25 = ((($1)) + 24|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = ($26|0)==(2);
       if ($27) {
        $28 = ((($1)) + 54|0);
        HEAP8[$28>>0] = 1;
       }
      }
      $29 = ((($1)) + 44|0);
      HEAP32[$29>>2] = 4;
      break;
     }
    }
    $16 = ($3|0)==(1);
    if ($16) {
     $17 = ((($1)) + 32|0);
     HEAP32[$17>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$5,0)|0);
 if ($6) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
 }
 return;
}
function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==($1|0);
 return ($3|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   HEAP32[$4>>2] = $2;
   $7 = ((($1)) + 24|0);
   HEAP32[$7>>2] = $3;
   $8 = ((($1)) + 36|0);
   HEAP32[$8>>2] = 1;
  } else {
   $9 = ($5|0)==($2|0);
   if (!($9)) {
    $13 = ((($1)) + 36|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 1)|0;
    HEAP32[$13>>2] = $15;
    $16 = ((($1)) + 24|0);
    HEAP32[$16>>2] = 2;
    $17 = ((($1)) + 54|0);
    HEAP8[$17>>0] = 1;
    break;
   }
   $10 = ((($1)) + 24|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(2);
   if ($12) {
    HEAP32[$10>>2] = $3;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($2|0);
 if ($6) {
  $7 = ((($1)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(1);
  if (!($9)) {
   HEAP32[$7>>2] = $3;
  }
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 53|0);
 HEAP8[$5>>0] = 1;
 $6 = ((($1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==($3|0);
 do {
  if ($8) {
   $9 = ((($1)) + 52|0);
   HEAP8[$9>>0] = 1;
   $10 = ((($1)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if ($12) {
    HEAP32[$10>>2] = $2;
    $13 = ((($1)) + 24|0);
    HEAP32[$13>>2] = $4;
    $14 = ((($1)) + 36|0);
    HEAP32[$14>>2] = 1;
    $15 = ((($1)) + 48|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==(1);
    $18 = ($4|0)==(1);
    $or$cond = $18 & $17;
    if (!($or$cond)) {
     break;
    }
    $19 = ((($1)) + 54|0);
    HEAP8[$19>>0] = 1;
    break;
   }
   $20 = ($11|0)==($2|0);
   if (!($20)) {
    $30 = ((($1)) + 36|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($31) + 1)|0;
    HEAP32[$30>>2] = $32;
    $33 = ((($1)) + 54|0);
    HEAP8[$33>>0] = 1;
    break;
   }
   $21 = ((($1)) + 24|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(2);
   if ($23) {
    HEAP32[$21>>2] = $4;
    $28 = $4;
   } else {
    $28 = $22;
   }
   $24 = ((($1)) + 48|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(1);
   $27 = ($28|0)==(1);
   $or$cond22 = $26 & $27;
   if ($or$cond22) {
    $29 = ((($1)) + 54|0);
    HEAP8[$29>>0] = 1;
   }
  }
 } while(0);
 return;
}
function ___dynamic_cast($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond28 = 0, $or$cond30 = 0, $or$cond32 = 0, $spec$select = 0, $spec$select33 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + -8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($0) + ($7)|0);
 $9 = ((($5)) + -4|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$4>>2] = $2;
 $11 = ((($4)) + 4|0);
 HEAP32[$11>>2] = $0;
 $12 = ((($4)) + 8|0);
 HEAP32[$12>>2] = $1;
 $13 = ((($4)) + 12|0);
 HEAP32[$13>>2] = $3;
 $14 = ((($4)) + 16|0);
 $15 = ((($4)) + 20|0);
 $16 = ((($4)) + 24|0);
 $17 = ((($4)) + 28|0);
 $18 = ((($4)) + 32|0);
 $19 = ((($4)) + 40|0);
 dest=$14; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$14+36>>1]=0|0;HEAP8[$14+38>>0]=0|0;
 $20 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($10,$2,0)|0);
 L1: do {
  if ($20) {
   $21 = ((($4)) + 48|0);
   HEAP32[$21>>2] = 1;
   $22 = HEAP32[$10>>2]|0;
   $23 = ((($22)) + 20|0);
   $24 = HEAP32[$23>>2]|0;
   FUNCTION_TABLE_viiiiii[$24 & 511]($10,$4,$8,$8,1,0);
   $25 = HEAP32[$16>>2]|0;
   $26 = ($25|0)==(1);
   $spec$select = $26 ? $8 : 0;
   $$0 = $spec$select;
  } else {
   $27 = ((($4)) + 36|0);
   $28 = HEAP32[$10>>2]|0;
   $29 = ((($28)) + 24|0);
   $30 = HEAP32[$29>>2]|0;
   FUNCTION_TABLE_viiiii[$30 & 511]($10,$4,$8,1,0);
   $31 = HEAP32[$27>>2]|0;
   switch ($31|0) {
   case 0:  {
    $32 = HEAP32[$19>>2]|0;
    $33 = ($32|0)==(1);
    $34 = HEAP32[$17>>2]|0;
    $35 = ($34|0)==(1);
    $or$cond = $33 & $35;
    $36 = HEAP32[$18>>2]|0;
    $37 = ($36|0)==(1);
    $or$cond28 = $or$cond & $37;
    $38 = HEAP32[$15>>2]|0;
    $spec$select33 = $or$cond28 ? $38 : 0;
    $$0 = $spec$select33;
    break L1;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $$0 = 0;
    break L1;
   }
   }
   $39 = HEAP32[$16>>2]|0;
   $40 = ($39|0)==(1);
   if (!($40)) {
    $41 = HEAP32[$19>>2]|0;
    $42 = ($41|0)==(0);
    $43 = HEAP32[$17>>2]|0;
    $44 = ($43|0)==(1);
    $or$cond30 = $42 & $44;
    $45 = HEAP32[$18>>2]|0;
    $46 = ($45|0)==(1);
    $or$cond32 = $or$cond30 & $46;
    if (!($or$cond32)) {
     $$0 = 0;
     break;
    }
   }
   $47 = HEAP32[$14>>2]|0;
   $$0 = $47;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$7,$5)|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 } else {
  $9 = ((($0)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_viiiiii[$13 & 511]($10,$1,$2,$3,$4,$5);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$037$off038 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$6,$4)|0);
 do {
  if ($7) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$1,$2,$3);
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$8,$4)|0);
   if (!($9)) {
    $44 = ((($0)) + 8|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($46)) + 24|0);
    $48 = HEAP32[$47>>2]|0;
    FUNCTION_TABLE_viiiii[$48 & 511]($45,$1,$2,$3,$4);
    break;
   }
   $10 = ((($1)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==($2|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==($2|0);
    if (!($15)) {
     $18 = ((($1)) + 32|0);
     HEAP32[$18>>2] = $3;
     $19 = ((($1)) + 44|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)==(4);
     if ($21) {
      break;
     }
     $22 = ((($1)) + 52|0);
     HEAP8[$22>>0] = 0;
     $23 = ((($1)) + 53|0);
     HEAP8[$23>>0] = 0;
     $24 = ((($0)) + 8|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = HEAP32[$25>>2]|0;
     $27 = ((($26)) + 20|0);
     $28 = HEAP32[$27>>2]|0;
     FUNCTION_TABLE_viiiiii[$28 & 511]($25,$1,$2,$2,1,$4);
     $29 = HEAP8[$23>>0]|0;
     $30 = ($29<<24>>24)==(0);
     if ($30) {
      $$037$off038 = 0;
      label = 11;
     } else {
      $31 = HEAP8[$22>>0]|0;
      $32 = ($31<<24>>24)==(0);
      if ($32) {
       $$037$off038 = 1;
       label = 11;
      } else {
       label = 15;
      }
     }
     do {
      if ((label|0) == 11) {
       HEAP32[$13>>2] = $2;
       $33 = ((($1)) + 40|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = (($34) + 1)|0;
       HEAP32[$33>>2] = $35;
       $36 = ((($1)) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = ($37|0)==(1);
       if ($38) {
        $39 = ((($1)) + 24|0);
        $40 = HEAP32[$39>>2]|0;
        $41 = ($40|0)==(2);
        if ($41) {
         $42 = ((($1)) + 54|0);
         HEAP8[$42>>0] = 1;
         if ($$037$off038) {
          label = 15;
          break;
         } else {
          $43 = 4;
          break;
         }
        }
       }
       if ($$037$off038) {
        label = 15;
       } else {
        $43 = 4;
       }
      }
     } while(0);
     if ((label|0) == 15) {
      $43 = 3;
     }
     HEAP32[$19>>2] = $43;
     break;
    }
   }
   $16 = ($3|0)==(1);
   if ($16) {
    $17 = ((($1)) + 32|0);
    HEAP32[$17>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$5,0)|0);
 if ($6) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
 } else {
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_viiii[$11 & 511]($8,$1,$2,$3);
 }
 return;
}
function __ZNSt9type_infoD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = (_pthread_key_create(14476,291)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(12535,$vararg_buffer);
  // unreachable;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 _free($0);
 $1 = HEAP32[3619]|0;
 $2 = (_pthread_setspecific($1,0)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return;
 } else {
  _abort_message(12585,$vararg_buffer);
  // unreachable;
 }
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_get_globals_fast()|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $4 = ((($2)) + 48|0);
   $5 = $4;
   $6 = $5;
   $7 = HEAP32[$6>>2]|0;
   $8 = (($5) + 4)|0;
   $9 = $8;
   $10 = HEAP32[$9>>2]|0;
   $11 = $7 & -256;
   $12 = ($11|0)==(1126902528);
   $13 = ($10|0)==(1129074247);
   $14 = $12 & $13;
   if ($14) {
    $15 = ((($2)) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    __ZSt11__terminatePFvvE($16);
    // unreachable;
   }
  }
 }
 $17 = (__ZSt13get_terminatev()|0);
 __ZSt11__terminatePFvvE($17);
 // unreachable;
}
function __ZSt11__terminatePFvvE($0) {
 $0 = $0|0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 FUNCTION_TABLE_v[$0 & 511]();
 _abort_message(12638,$vararg_buffer);
 // unreachable;
}
function __ZSt13get_terminatev() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1363]|0;
 $1 = (($0) + 0)|0;
 HEAP32[1363] = $1;
 $2 = $0;
 return ($2|0);
}
function __ZNSt9exceptionD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9exceptionD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt9exception4whatEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (12678|0);
}
function __ZNSt11logic_errorD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (5564);
 $1 = ((($0)) + 4|0);
 __ZNSt3__218__libcpp_refstringD2Ev($1);
 return;
}
function __ZNSt11logic_errorD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt11logic_error4whatEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = (__ZNKSt3__218__libcpp_refstring5c_strEv($1)|0);
 return ($2|0);
}
function __ZNKSt3__218__libcpp_refstring5c_strEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNSt3__218__libcpp_refstringD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNKSt3__218__libcpp_refstring15__uses_refcountEv($0)|0);
 if ($1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = (__ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_468($2)|0);
  $4 = ((($3)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + -1)|0;
  HEAP32[$4>>2] = $6;
  $7 = (($5) + -1)|0;
  $8 = ($7|0)<(0);
  if ($8) {
   __ZdlPv($3);
  }
 }
 return;
}
function __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_468($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + -12|0);
 return ($1|0);
}
function __ZNSt12length_errorD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[3620]|0;
 $1 = (($0) + 0)|0;
 HEAP32[3620] = $1;
 $2 = $0;
 return ($2|0);
}
function ___cxa_can_catch($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $4;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iiii[$7 & 511]($0,$1,$3)|0);
 $9 = $8&1;
 if ($8) {
  $10 = HEAP32[$3>>2]|0;
  HEAP32[$2>>2] = $10;
 }
 STACKTOP = sp;return ($9|0);
}
function ___cxa_is_pointer_type($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $phitmp = 0, $phitmp1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $3 = 0;
 } else {
  $2 = (___dynamic_cast($0,3600,3688,0)|0);
  $phitmp = ($2|0)!=(0|0);
  $phitmp1 = $phitmp&1;
  $3 = $phitmp1;
 }
 return ($3|0);
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (setTempRet0(((($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0) | 0), 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = (getTempRet0() | 0);
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (setTempRet0((((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0) | 0), 0 | $1$0 & -1) | 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _llvm_cttz_i32(x) { // Note: Currently doesn't take isZeroUndef()
    x = x | 0;
    return (x ? (31 - (Math_clz32((x ^ (x - 1))) | 0) | 0) : 32) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = (getTempRet0() | 0);
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = (getTempRet0() | 0);
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = (getTempRet0() | 0);
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0((high >>> bits) | 0);
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    setTempRet0((0) | 0);
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0(((high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits))) | 0);
      return low << bits;
    }
    setTempRet0((low << (bits - 32)) | 0);
    return 0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >= 8192) {
      _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
      return dest|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      block_aligned_end = (aligned_end - 64)|0;

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    totalMemory = _emscripten_get_heap_size()|0;

      oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
      newDynamicTop = oldDynamicTop + increment | 0;

      if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
        | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
        abortOnCannotGrowMemory(newDynamicTop|0)|0;
        ___setErrNo(12);
        return -1;
      }

      if ((newDynamicTop|0) > (totalMemory|0)) {
        if (_emscripten_resize_heap(newDynamicTop|0)|0) {
          // We resized the heap. Start another loop iteration if we need to.
        } else {
          // We failed to resize the heap.
          ___setErrNo(12);
          return -1;
        }
      }

      HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop|0;

    return oldDynamicTop|0;
}

  
function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&255](a1|0)|0;
}


function dynCall_iidiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iidiiii[index&511](a1|0,+a2,a3|0,a4|0,a5|0,a6|0)|0;
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&255](a1|0,a2|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&511](a1|0,a2|0,a3|0)|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&255](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&511]();
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&511](a1|0);
}


function dynCall_vid(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=+a2;
  FUNCTION_TABLE_vid[index&255](a1|0,+a2);
}


function dynCall_vidd(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3;
  FUNCTION_TABLE_vidd[index&511](a1|0,+a2,+a3);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&511](a1|0,a2|0);
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&511](a1|0,a2|0,a3|0);
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&511](a1|0,a2|0,a3|0,a4|0);
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}

function b1(p0) {
 p0 = p0|0; nullFunc_ii(0);return 0;
}
function b2(p0) {
 p0 = p0|0; nullFunc_ii(1);return 0;
}
function b3(p0) {
 p0 = p0|0; nullFunc_ii(2);return 0;
}
function b4(p0) {
 p0 = p0|0; nullFunc_ii(3);return 0;
}
function b5(p0) {
 p0 = p0|0; nullFunc_ii(4);return 0;
}
function b6(p0) {
 p0 = p0|0; nullFunc_ii(5);return 0;
}
function b7(p0) {
 p0 = p0|0; nullFunc_ii(6);return 0;
}
function b8(p0) {
 p0 = p0|0; nullFunc_ii(7);return 0;
}
function b9(p0) {
 p0 = p0|0; nullFunc_ii(8);return 0;
}
function b10(p0) {
 p0 = p0|0; nullFunc_ii(9);return 0;
}
function b11(p0) {
 p0 = p0|0; nullFunc_ii(10);return 0;
}
function b12(p0) {
 p0 = p0|0; nullFunc_ii(11);return 0;
}
function b13(p0) {
 p0 = p0|0; nullFunc_ii(12);return 0;
}
function b14(p0) {
 p0 = p0|0; nullFunc_ii(14);return 0;
}
function b15(p0) {
 p0 = p0|0; nullFunc_ii(15);return 0;
}
function b16(p0) {
 p0 = p0|0; nullFunc_ii(16);return 0;
}
function b17(p0) {
 p0 = p0|0; nullFunc_ii(17);return 0;
}
function b18(p0) {
 p0 = p0|0; nullFunc_ii(18);return 0;
}
function b19(p0) {
 p0 = p0|0; nullFunc_ii(20);return 0;
}
function b20(p0) {
 p0 = p0|0; nullFunc_ii(21);return 0;
}
function b21(p0) {
 p0 = p0|0; nullFunc_ii(22);return 0;
}
function b22(p0) {
 p0 = p0|0; nullFunc_ii(23);return 0;
}
function b23(p0) {
 p0 = p0|0; nullFunc_ii(24);return 0;
}
function b24(p0) {
 p0 = p0|0; nullFunc_ii(25);return 0;
}
function b25(p0) {
 p0 = p0|0; nullFunc_ii(26);return 0;
}
function b26(p0) {
 p0 = p0|0; nullFunc_ii(27);return 0;
}
function b27(p0) {
 p0 = p0|0; nullFunc_ii(28);return 0;
}
function b28(p0) {
 p0 = p0|0; nullFunc_ii(30);return 0;
}
function b29(p0) {
 p0 = p0|0; nullFunc_ii(31);return 0;
}
function b30(p0) {
 p0 = p0|0; nullFunc_ii(32);return 0;
}
function b31(p0) {
 p0 = p0|0; nullFunc_ii(33);return 0;
}
function b32(p0) {
 p0 = p0|0; nullFunc_ii(34);return 0;
}
function b33(p0) {
 p0 = p0|0; nullFunc_ii(36);return 0;
}
function b34(p0) {
 p0 = p0|0; nullFunc_ii(37);return 0;
}
function b35(p0) {
 p0 = p0|0; nullFunc_ii(39);return 0;
}
function b36(p0) {
 p0 = p0|0; nullFunc_ii(40);return 0;
}
function b37(p0) {
 p0 = p0|0; nullFunc_ii(41);return 0;
}
function b38(p0) {
 p0 = p0|0; nullFunc_ii(42);return 0;
}
function b39(p0) {
 p0 = p0|0; nullFunc_ii(43);return 0;
}
function b40(p0) {
 p0 = p0|0; nullFunc_ii(45);return 0;
}
function b41(p0) {
 p0 = p0|0; nullFunc_ii(46);return 0;
}
function b42(p0) {
 p0 = p0|0; nullFunc_ii(48);return 0;
}
function b43(p0) {
 p0 = p0|0; nullFunc_ii(49);return 0;
}
function b44(p0) {
 p0 = p0|0; nullFunc_ii(50);return 0;
}
function b45(p0) {
 p0 = p0|0; nullFunc_ii(51);return 0;
}
function b46(p0) {
 p0 = p0|0; nullFunc_ii(52);return 0;
}
function b47(p0) {
 p0 = p0|0; nullFunc_ii(54);return 0;
}
function b48(p0) {
 p0 = p0|0; nullFunc_ii(55);return 0;
}
function b49(p0) {
 p0 = p0|0; nullFunc_ii(57);return 0;
}
function b50(p0) {
 p0 = p0|0; nullFunc_ii(58);return 0;
}
function b51(p0) {
 p0 = p0|0; nullFunc_ii(59);return 0;
}
function b52(p0) {
 p0 = p0|0; nullFunc_ii(60);return 0;
}
function b53(p0) {
 p0 = p0|0; nullFunc_ii(61);return 0;
}
function b54(p0) {
 p0 = p0|0; nullFunc_ii(63);return 0;
}
function b55(p0) {
 p0 = p0|0; nullFunc_ii(64);return 0;
}
function b56(p0) {
 p0 = p0|0; nullFunc_ii(66);return 0;
}
function b57(p0) {
 p0 = p0|0; nullFunc_ii(67);return 0;
}
function b58(p0) {
 p0 = p0|0; nullFunc_ii(68);return 0;
}
function b59(p0) {
 p0 = p0|0; nullFunc_ii(69);return 0;
}
function b60(p0) {
 p0 = p0|0; nullFunc_ii(70);return 0;
}
function b61(p0) {
 p0 = p0|0; nullFunc_ii(72);return 0;
}
function b62(p0) {
 p0 = p0|0; nullFunc_ii(73);return 0;
}
function b63(p0) {
 p0 = p0|0; nullFunc_ii(75);return 0;
}
function b64(p0) {
 p0 = p0|0; nullFunc_ii(76);return 0;
}
function b65(p0) {
 p0 = p0|0; nullFunc_ii(77);return 0;
}
function b66(p0) {
 p0 = p0|0; nullFunc_ii(78);return 0;
}
function b67(p0) {
 p0 = p0|0; nullFunc_ii(79);return 0;
}
function b68(p0) {
 p0 = p0|0; nullFunc_ii(81);return 0;
}
function b69(p0) {
 p0 = p0|0; nullFunc_ii(82);return 0;
}
function b70(p0) {
 p0 = p0|0; nullFunc_ii(83);return 0;
}
function b71(p0) {
 p0 = p0|0; nullFunc_ii(84);return 0;
}
function b72(p0) {
 p0 = p0|0; nullFunc_ii(85);return 0;
}
function b73(p0) {
 p0 = p0|0; nullFunc_ii(86);return 0;
}
function b74(p0) {
 p0 = p0|0; nullFunc_ii(87);return 0;
}
function b75(p0) {
 p0 = p0|0; nullFunc_ii(88);return 0;
}
function b76(p0) {
 p0 = p0|0; nullFunc_ii(89);return 0;
}
function b77(p0) {
 p0 = p0|0; nullFunc_ii(91);return 0;
}
function b78(p0) {
 p0 = p0|0; nullFunc_ii(92);return 0;
}
function b79(p0) {
 p0 = p0|0; nullFunc_ii(93);return 0;
}
function b80(p0) {
 p0 = p0|0; nullFunc_ii(94);return 0;
}
function b81(p0) {
 p0 = p0|0; nullFunc_ii(95);return 0;
}
function b82(p0) {
 p0 = p0|0; nullFunc_ii(97);return 0;
}
function b83(p0) {
 p0 = p0|0; nullFunc_ii(98);return 0;
}
function b84(p0) {
 p0 = p0|0; nullFunc_ii(99);return 0;
}
function b85(p0) {
 p0 = p0|0; nullFunc_ii(100);return 0;
}
function b86(p0) {
 p0 = p0|0; nullFunc_ii(101);return 0;
}
function b87(p0) {
 p0 = p0|0; nullFunc_ii(102);return 0;
}
function b88(p0) {
 p0 = p0|0; nullFunc_ii(103);return 0;
}
function b89(p0) {
 p0 = p0|0; nullFunc_ii(104);return 0;
}
function b90(p0) {
 p0 = p0|0; nullFunc_ii(105);return 0;
}
function b91(p0) {
 p0 = p0|0; nullFunc_ii(107);return 0;
}
function b92(p0) {
 p0 = p0|0; nullFunc_ii(108);return 0;
}
function b93(p0) {
 p0 = p0|0; nullFunc_ii(109);return 0;
}
function b94(p0) {
 p0 = p0|0; nullFunc_ii(110);return 0;
}
function b95(p0) {
 p0 = p0|0; nullFunc_ii(111);return 0;
}
function b96(p0) {
 p0 = p0|0; nullFunc_ii(113);return 0;
}
function b97(p0) {
 p0 = p0|0; nullFunc_ii(114);return 0;
}
function b98(p0) {
 p0 = p0|0; nullFunc_ii(116);return 0;
}
function b99(p0) {
 p0 = p0|0; nullFunc_ii(117);return 0;
}
function b100(p0) {
 p0 = p0|0; nullFunc_ii(118);return 0;
}
function b101(p0) {
 p0 = p0|0; nullFunc_ii(119);return 0;
}
function b102(p0) {
 p0 = p0|0; nullFunc_ii(120);return 0;
}
function b103(p0) {
 p0 = p0|0; nullFunc_ii(122);return 0;
}
function b104(p0) {
 p0 = p0|0; nullFunc_ii(123);return 0;
}
function b105(p0) {
 p0 = p0|0; nullFunc_ii(125);return 0;
}
function b106(p0) {
 p0 = p0|0; nullFunc_ii(126);return 0;
}
function b107(p0) {
 p0 = p0|0; nullFunc_ii(127);return 0;
}
function b108(p0) {
 p0 = p0|0; nullFunc_ii(128);return 0;
}
function b109(p0) {
 p0 = p0|0; nullFunc_ii(129);return 0;
}
function b110(p0) {
 p0 = p0|0; nullFunc_ii(131);return 0;
}
function b111(p0) {
 p0 = p0|0; nullFunc_ii(132);return 0;
}
function b112(p0) {
 p0 = p0|0; nullFunc_ii(134);return 0;
}
function b113(p0) {
 p0 = p0|0; nullFunc_ii(135);return 0;
}
function b114(p0) {
 p0 = p0|0; nullFunc_ii(136);return 0;
}
function b115(p0) {
 p0 = p0|0; nullFunc_ii(137);return 0;
}
function b116(p0) {
 p0 = p0|0; nullFunc_ii(138);return 0;
}
function b117(p0) {
 p0 = p0|0; nullFunc_ii(140);return 0;
}
function b118(p0) {
 p0 = p0|0; nullFunc_ii(141);return 0;
}
function b119(p0) {
 p0 = p0|0; nullFunc_ii(143);return 0;
}
function b120(p0) {
 p0 = p0|0; nullFunc_ii(144);return 0;
}
function b121(p0) {
 p0 = p0|0; nullFunc_ii(145);return 0;
}
function b122(p0) {
 p0 = p0|0; nullFunc_ii(146);return 0;
}
function b123(p0) {
 p0 = p0|0; nullFunc_ii(147);return 0;
}
function b124(p0) {
 p0 = p0|0; nullFunc_ii(149);return 0;
}
function b125(p0) {
 p0 = p0|0; nullFunc_ii(150);return 0;
}
function b126(p0) {
 p0 = p0|0; nullFunc_ii(152);return 0;
}
function b127(p0) {
 p0 = p0|0; nullFunc_ii(153);return 0;
}
function b128(p0) {
 p0 = p0|0; nullFunc_ii(154);return 0;
}
function b129(p0) {
 p0 = p0|0; nullFunc_ii(155);return 0;
}
function b130(p0) {
 p0 = p0|0; nullFunc_ii(156);return 0;
}
function b131(p0) {
 p0 = p0|0; nullFunc_ii(158);return 0;
}
function b132(p0) {
 p0 = p0|0; nullFunc_ii(159);return 0;
}
function b133(p0) {
 p0 = p0|0; nullFunc_ii(160);return 0;
}
function b134(p0) {
 p0 = p0|0; nullFunc_ii(161);return 0;
}
function b135(p0) {
 p0 = p0|0; nullFunc_ii(162);return 0;
}
function b136(p0) {
 p0 = p0|0; nullFunc_ii(163);return 0;
}
function b137(p0) {
 p0 = p0|0; nullFunc_ii(164);return 0;
}
function b138(p0) {
 p0 = p0|0; nullFunc_ii(165);return 0;
}
function b139(p0) {
 p0 = p0|0; nullFunc_ii(166);return 0;
}
function b140(p0) {
 p0 = p0|0; nullFunc_ii(167);return 0;
}
function b141(p0) {
 p0 = p0|0; nullFunc_ii(168);return 0;
}
function b142(p0) {
 p0 = p0|0; nullFunc_ii(169);return 0;
}
function b143(p0) {
 p0 = p0|0; nullFunc_ii(170);return 0;
}
function b144(p0) {
 p0 = p0|0; nullFunc_ii(171);return 0;
}
function b145(p0) {
 p0 = p0|0; nullFunc_ii(172);return 0;
}
function b146(p0) {
 p0 = p0|0; nullFunc_ii(173);return 0;
}
function b147(p0) {
 p0 = p0|0; nullFunc_ii(174);return 0;
}
function b148(p0) {
 p0 = p0|0; nullFunc_ii(175);return 0;
}
function b149(p0) {
 p0 = p0|0; nullFunc_ii(176);return 0;
}
function b150(p0) {
 p0 = p0|0; nullFunc_ii(177);return 0;
}
function b151(p0) {
 p0 = p0|0; nullFunc_ii(178);return 0;
}
function b152(p0) {
 p0 = p0|0; nullFunc_ii(179);return 0;
}
function b153(p0) {
 p0 = p0|0; nullFunc_ii(180);return 0;
}
function b154(p0) {
 p0 = p0|0; nullFunc_ii(181);return 0;
}
function b155(p0) {
 p0 = p0|0; nullFunc_ii(182);return 0;
}
function b156(p0) {
 p0 = p0|0; nullFunc_ii(183);return 0;
}
function b157(p0) {
 p0 = p0|0; nullFunc_ii(184);return 0;
}
function b158(p0) {
 p0 = p0|0; nullFunc_ii(185);return 0;
}
function b159(p0) {
 p0 = p0|0; nullFunc_ii(186);return 0;
}
function b160(p0) {
 p0 = p0|0; nullFunc_ii(187);return 0;
}
function b161(p0) {
 p0 = p0|0; nullFunc_ii(188);return 0;
}
function b162(p0) {
 p0 = p0|0; nullFunc_ii(190);return 0;
}
function b163(p0) {
 p0 = p0|0; nullFunc_ii(191);return 0;
}
function b164(p0) {
 p0 = p0|0; nullFunc_ii(192);return 0;
}
function b165(p0) {
 p0 = p0|0; nullFunc_ii(193);return 0;
}
function b166(p0) {
 p0 = p0|0; nullFunc_ii(194);return 0;
}
function b167(p0) {
 p0 = p0|0; nullFunc_ii(196);return 0;
}
function b168(p0) {
 p0 = p0|0; nullFunc_ii(197);return 0;
}
function b169(p0) {
 p0 = p0|0; nullFunc_ii(198);return 0;
}
function b170(p0) {
 p0 = p0|0; nullFunc_ii(199);return 0;
}
function b171(p0) {
 p0 = p0|0; nullFunc_ii(200);return 0;
}
function b172(p0) {
 p0 = p0|0; nullFunc_ii(201);return 0;
}
function b173(p0) {
 p0 = p0|0; nullFunc_ii(202);return 0;
}
function b174(p0) {
 p0 = p0|0; nullFunc_ii(205);return 0;
}
function b175(p0) {
 p0 = p0|0; nullFunc_ii(206);return 0;
}
function b176(p0) {
 p0 = p0|0; nullFunc_ii(207);return 0;
}
function b177(p0) {
 p0 = p0|0; nullFunc_ii(208);return 0;
}
function b178(p0) {
 p0 = p0|0; nullFunc_ii(209);return 0;
}
function b179(p0) {
 p0 = p0|0; nullFunc_ii(210);return 0;
}
function b180(p0) {
 p0 = p0|0; nullFunc_ii(212);return 0;
}
function b181(p0) {
 p0 = p0|0; nullFunc_ii(213);return 0;
}
function b182(p0) {
 p0 = p0|0; nullFunc_ii(214);return 0;
}
function b183(p0) {
 p0 = p0|0; nullFunc_ii(215);return 0;
}
function b184(p0) {
 p0 = p0|0; nullFunc_ii(216);return 0;
}
function b185(p0) {
 p0 = p0|0; nullFunc_ii(217);return 0;
}
function b186(p0) {
 p0 = p0|0; nullFunc_ii(218);return 0;
}
function b187(p0) {
 p0 = p0|0; nullFunc_ii(219);return 0;
}
function b188(p0) {
 p0 = p0|0; nullFunc_ii(220);return 0;
}
function b189(p0) {
 p0 = p0|0; nullFunc_ii(221);return 0;
}
function b190(p0) {
 p0 = p0|0; nullFunc_ii(222);return 0;
}
function b191(p0) {
 p0 = p0|0; nullFunc_ii(223);return 0;
}
function b192(p0) {
 p0 = p0|0; nullFunc_ii(224);return 0;
}
function b193(p0) {
 p0 = p0|0; nullFunc_ii(225);return 0;
}
function b194(p0) {
 p0 = p0|0; nullFunc_ii(226);return 0;
}
function b195(p0) {
 p0 = p0|0; nullFunc_ii(228);return 0;
}
function b196(p0) {
 p0 = p0|0; nullFunc_ii(229);return 0;
}
function b197(p0) {
 p0 = p0|0; nullFunc_ii(231);return 0;
}
function b198(p0) {
 p0 = p0|0; nullFunc_ii(232);return 0;
}
function b199(p0) {
 p0 = p0|0; nullFunc_ii(233);return 0;
}
function b200(p0) {
 p0 = p0|0; nullFunc_ii(234);return 0;
}
function b201(p0) {
 p0 = p0|0; nullFunc_ii(235);return 0;
}
function b202(p0) {
 p0 = p0|0; nullFunc_ii(236);return 0;
}
function b203(p0) {
 p0 = p0|0; nullFunc_ii(237);return 0;
}
function b204(p0) {
 p0 = p0|0; nullFunc_ii(238);return 0;
}
function b205(p0) {
 p0 = p0|0; nullFunc_ii(239);return 0;
}
function b206(p0) {
 p0 = p0|0; nullFunc_ii(240);return 0;
}
function b207(p0) {
 p0 = p0|0; nullFunc_ii(241);return 0;
}
function b208(p0) {
 p0 = p0|0; nullFunc_ii(242);return 0;
}
function b209(p0) {
 p0 = p0|0; nullFunc_ii(243);return 0;
}
function b210(p0) {
 p0 = p0|0; nullFunc_ii(244);return 0;
}
function b211(p0) {
 p0 = p0|0; nullFunc_ii(245);return 0;
}
function b212(p0) {
 p0 = p0|0; nullFunc_ii(246);return 0;
}
function b213(p0) {
 p0 = p0|0; nullFunc_ii(247);return 0;
}
function b214(p0) {
 p0 = p0|0; nullFunc_ii(248);return 0;
}
function b215(p0) {
 p0 = p0|0; nullFunc_ii(249);return 0;
}
function b216(p0) {
 p0 = p0|0; nullFunc_ii(250);return 0;
}
function b217(p0) {
 p0 = p0|0; nullFunc_ii(251);return 0;
}
function b218(p0) {
 p0 = p0|0; nullFunc_ii(252);return 0;
}
function b219(p0) {
 p0 = p0|0; nullFunc_ii(253);return 0;
}
function b220(p0) {
 p0 = p0|0; nullFunc_ii(254);return 0;
}
function b221(p0) {
 p0 = p0|0; nullFunc_ii(255);return 0;
}
function b223(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(0);return 0;
}
function b224(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(1);return 0;
}
function b225(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(2);return 0;
}
function b226(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(3);return 0;
}
function b227(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(4);return 0;
}
function b228(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(5);return 0;
}
function b229(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(6);return 0;
}
function b230(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(7);return 0;
}
function b231(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(8);return 0;
}
function b232(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(9);return 0;
}
function b233(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(10);return 0;
}
function b234(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(11);return 0;
}
function b235(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(12);return 0;
}
function b236(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(13);return 0;
}
function b237(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(14);return 0;
}
function b238(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(15);return 0;
}
function b239(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(16);return 0;
}
function b240(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(17);return 0;
}
function b241(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(18);return 0;
}
function b242(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(19);return 0;
}
function b243(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(20);return 0;
}
function b244(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(21);return 0;
}
function b245(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(22);return 0;
}
function b246(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(23);return 0;
}
function b247(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(24);return 0;
}
function b248(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(25);return 0;
}
function b249(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(26);return 0;
}
function b250(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(27);return 0;
}
function b251(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(28);return 0;
}
function b252(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(29);return 0;
}
function b253(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(30);return 0;
}
function b254(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(31);return 0;
}
function b255(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(32);return 0;
}
function b256(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(33);return 0;
}
function b257(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(34);return 0;
}
function b258(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(35);return 0;
}
function b259(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(36);return 0;
}
function b260(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(37);return 0;
}
function b261(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(38);return 0;
}
function b262(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(39);return 0;
}
function b263(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(40);return 0;
}
function b264(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(41);return 0;
}
function b265(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(42);return 0;
}
function b266(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(43);return 0;
}
function b267(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(44);return 0;
}
function b268(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(45);return 0;
}
function b269(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(46);return 0;
}
function b270(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(47);return 0;
}
function b271(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(48);return 0;
}
function b272(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(49);return 0;
}
function b273(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(50);return 0;
}
function b274(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(51);return 0;
}
function b275(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(52);return 0;
}
function b276(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(53);return 0;
}
function b277(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(54);return 0;
}
function b278(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(55);return 0;
}
function b279(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(56);return 0;
}
function b280(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(57);return 0;
}
function b281(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(58);return 0;
}
function b282(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(59);return 0;
}
function b283(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(60);return 0;
}
function b284(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(61);return 0;
}
function b285(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(62);return 0;
}
function b286(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(63);return 0;
}
function b287(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(64);return 0;
}
function b288(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(65);return 0;
}
function b289(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(66);return 0;
}
function b290(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(67);return 0;
}
function b291(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(68);return 0;
}
function b292(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(69);return 0;
}
function b293(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(70);return 0;
}
function b294(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(71);return 0;
}
function b295(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(72);return 0;
}
function b296(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(73);return 0;
}
function b297(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(74);return 0;
}
function b298(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(75);return 0;
}
function b299(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(76);return 0;
}
function b300(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(77);return 0;
}
function b301(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(78);return 0;
}
function b302(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(79);return 0;
}
function b303(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(80);return 0;
}
function b304(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(81);return 0;
}
function b305(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(82);return 0;
}
function b306(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(83);return 0;
}
function b307(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(84);return 0;
}
function b308(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(85);return 0;
}
function b309(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(86);return 0;
}
function b310(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(87);return 0;
}
function b311(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(88);return 0;
}
function b312(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(89);return 0;
}
function b313(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(90);return 0;
}
function b314(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(91);return 0;
}
function b315(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(92);return 0;
}
function b316(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(93);return 0;
}
function b317(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(94);return 0;
}
function b318(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(95);return 0;
}
function b319(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(96);return 0;
}
function b320(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(97);return 0;
}
function b321(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(98);return 0;
}
function b322(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(99);return 0;
}
function b323(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(100);return 0;
}
function b324(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(101);return 0;
}
function b325(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(102);return 0;
}
function b326(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(103);return 0;
}
function b327(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(104);return 0;
}
function b328(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(105);return 0;
}
function b329(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(106);return 0;
}
function b330(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(107);return 0;
}
function b331(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(108);return 0;
}
function b332(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(109);return 0;
}
function b333(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(110);return 0;
}
function b334(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(111);return 0;
}
function b335(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(112);return 0;
}
function b336(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(113);return 0;
}
function b337(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(114);return 0;
}
function b338(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(115);return 0;
}
function b339(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(116);return 0;
}
function b340(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(117);return 0;
}
function b341(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(118);return 0;
}
function b342(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(119);return 0;
}
function b343(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(120);return 0;
}
function b344(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(121);return 0;
}
function b345(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(122);return 0;
}
function b346(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(123);return 0;
}
function b347(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(124);return 0;
}
function b348(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(125);return 0;
}
function b349(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(126);return 0;
}
function b350(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(127);return 0;
}
function b351(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(128);return 0;
}
function b352(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(129);return 0;
}
function b353(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(130);return 0;
}
function b354(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(131);return 0;
}
function b355(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(132);return 0;
}
function b356(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(133);return 0;
}
function b357(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(134);return 0;
}
function b358(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(135);return 0;
}
function b359(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(136);return 0;
}
function b360(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(137);return 0;
}
function b361(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(138);return 0;
}
function b362(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(139);return 0;
}
function b363(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(140);return 0;
}
function b364(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(141);return 0;
}
function b365(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(142);return 0;
}
function b366(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(143);return 0;
}
function b367(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(144);return 0;
}
function b368(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(145);return 0;
}
function b369(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(146);return 0;
}
function b370(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(147);return 0;
}
function b371(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(148);return 0;
}
function b372(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(149);return 0;
}
function b373(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(150);return 0;
}
function b374(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(151);return 0;
}
function b375(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(152);return 0;
}
function b376(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(153);return 0;
}
function b377(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(154);return 0;
}
function b378(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(155);return 0;
}
function b379(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(156);return 0;
}
function b380(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(157);return 0;
}
function b381(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(158);return 0;
}
function b382(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(159);return 0;
}
function b383(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(160);return 0;
}
function b384(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(161);return 0;
}
function b385(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(162);return 0;
}
function b386(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(163);return 0;
}
function b387(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(164);return 0;
}
function b388(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(165);return 0;
}
function b389(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(166);return 0;
}
function b390(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(167);return 0;
}
function b391(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(168);return 0;
}
function b392(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(169);return 0;
}
function b393(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(170);return 0;
}
function b394(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(171);return 0;
}
function b395(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(172);return 0;
}
function b396(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(173);return 0;
}
function b397(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(174);return 0;
}
function b398(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(175);return 0;
}
function b399(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(176);return 0;
}
function b400(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(177);return 0;
}
function b401(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(178);return 0;
}
function b402(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(179);return 0;
}
function b403(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(180);return 0;
}
function b404(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(181);return 0;
}
function b405(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(182);return 0;
}
function b406(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(183);return 0;
}
function b407(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(184);return 0;
}
function b408(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(185);return 0;
}
function b409(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(186);return 0;
}
function b410(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(187);return 0;
}
function b411(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(188);return 0;
}
function b412(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(189);return 0;
}
function b413(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(190);return 0;
}
function b414(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(191);return 0;
}
function b415(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(192);return 0;
}
function b416(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(193);return 0;
}
function b417(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(194);return 0;
}
function b418(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(195);return 0;
}
function b419(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(196);return 0;
}
function b420(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(197);return 0;
}
function b421(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(198);return 0;
}
function b422(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(199);return 0;
}
function b423(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(200);return 0;
}
function b424(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(201);return 0;
}
function b425(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(202);return 0;
}
function b426(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(203);return 0;
}
function b427(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(204);return 0;
}
function b428(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(205);return 0;
}
function b429(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(206);return 0;
}
function b430(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(207);return 0;
}
function b431(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(208);return 0;
}
function b432(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(209);return 0;
}
function b433(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(210);return 0;
}
function b434(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(211);return 0;
}
function b435(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(212);return 0;
}
function b436(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(213);return 0;
}
function b437(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(214);return 0;
}
function b438(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(215);return 0;
}
function b439(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(216);return 0;
}
function b440(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(217);return 0;
}
function b441(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(218);return 0;
}
function b442(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(219);return 0;
}
function b443(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(220);return 0;
}
function b444(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(221);return 0;
}
function b445(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(222);return 0;
}
function b446(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(223);return 0;
}
function b447(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(224);return 0;
}
function b448(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(225);return 0;
}
function b449(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(226);return 0;
}
function b450(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(227);return 0;
}
function b451(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(228);return 0;
}
function b452(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(229);return 0;
}
function b453(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(230);return 0;
}
function b454(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(231);return 0;
}
function b455(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(232);return 0;
}
function b456(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(233);return 0;
}
function b457(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(234);return 0;
}
function b458(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(235);return 0;
}
function b459(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(236);return 0;
}
function b460(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(237);return 0;
}
function b461(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(238);return 0;
}
function b462(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(239);return 0;
}
function b463(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(240);return 0;
}
function b464(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(241);return 0;
}
function b465(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(242);return 0;
}
function b466(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(243);return 0;
}
function b467(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(244);return 0;
}
function b468(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(245);return 0;
}
function b469(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(246);return 0;
}
function b470(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(247);return 0;
}
function b471(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(248);return 0;
}
function b472(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(249);return 0;
}
function b473(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(250);return 0;
}
function b474(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(251);return 0;
}
function b475(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(252);return 0;
}
function b476(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(253);return 0;
}
function b477(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(254);return 0;
}
function b478(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(255);return 0;
}
function b479(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(256);return 0;
}
function b480(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(257);return 0;
}
function b481(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(258);return 0;
}
function b482(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(259);return 0;
}
function b483(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(260);return 0;
}
function b484(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(261);return 0;
}
function b485(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(262);return 0;
}
function b486(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(263);return 0;
}
function b487(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(264);return 0;
}
function b488(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(265);return 0;
}
function b489(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(266);return 0;
}
function b490(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(267);return 0;
}
function b491(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(268);return 0;
}
function b492(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(269);return 0;
}
function b493(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(270);return 0;
}
function b494(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(271);return 0;
}
function b495(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(272);return 0;
}
function b496(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(273);return 0;
}
function b497(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(274);return 0;
}
function b498(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(275);return 0;
}
function b499(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(276);return 0;
}
function b500(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(277);return 0;
}
function b501(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(278);return 0;
}
function b502(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(279);return 0;
}
function b503(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(280);return 0;
}
function b504(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(281);return 0;
}
function b505(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(282);return 0;
}
function b506(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(283);return 0;
}
function b507(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(284);return 0;
}
function b508(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(285);return 0;
}
function b509(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(286);return 0;
}
function b510(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(288);return 0;
}
function b511(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(289);return 0;
}
function b512(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(290);return 0;
}
function b513(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(291);return 0;
}
function b514(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(292);return 0;
}
function b515(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(293);return 0;
}
function b516(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(294);return 0;
}
function b517(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(295);return 0;
}
function b518(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(296);return 0;
}
function b519(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(297);return 0;
}
function b520(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(298);return 0;
}
function b521(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(299);return 0;
}
function b522(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(300);return 0;
}
function b523(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(301);return 0;
}
function b524(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(302);return 0;
}
function b525(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(303);return 0;
}
function b526(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(304);return 0;
}
function b527(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(305);return 0;
}
function b528(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(306);return 0;
}
function b529(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(307);return 0;
}
function b530(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(308);return 0;
}
function b531(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(309);return 0;
}
function b532(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(310);return 0;
}
function b533(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(311);return 0;
}
function b534(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(312);return 0;
}
function b535(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(313);return 0;
}
function b536(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(314);return 0;
}
function b537(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(315);return 0;
}
function b538(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(316);return 0;
}
function b539(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(317);return 0;
}
function b540(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(318);return 0;
}
function b541(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(319);return 0;
}
function b542(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(320);return 0;
}
function b543(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(321);return 0;
}
function b544(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(322);return 0;
}
function b545(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(323);return 0;
}
function b546(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(324);return 0;
}
function b547(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(325);return 0;
}
function b548(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(326);return 0;
}
function b549(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(327);return 0;
}
function b550(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(328);return 0;
}
function b551(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(329);return 0;
}
function b552(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(330);return 0;
}
function b553(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(331);return 0;
}
function b554(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(332);return 0;
}
function b555(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(333);return 0;
}
function b556(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(334);return 0;
}
function b557(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(335);return 0;
}
function b558(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(336);return 0;
}
function b559(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(337);return 0;
}
function b560(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(338);return 0;
}
function b561(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(339);return 0;
}
function b562(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(340);return 0;
}
function b563(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(341);return 0;
}
function b564(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(342);return 0;
}
function b565(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(343);return 0;
}
function b566(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(344);return 0;
}
function b567(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(345);return 0;
}
function b568(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(346);return 0;
}
function b569(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(347);return 0;
}
function b570(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(348);return 0;
}
function b571(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(349);return 0;
}
function b572(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(350);return 0;
}
function b573(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(351);return 0;
}
function b574(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(352);return 0;
}
function b575(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(353);return 0;
}
function b576(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(354);return 0;
}
function b577(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(355);return 0;
}
function b578(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(356);return 0;
}
function b579(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(357);return 0;
}
function b580(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(358);return 0;
}
function b581(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(359);return 0;
}
function b582(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(360);return 0;
}
function b583(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(361);return 0;
}
function b584(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(362);return 0;
}
function b585(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(363);return 0;
}
function b586(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(364);return 0;
}
function b587(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(365);return 0;
}
function b588(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(366);return 0;
}
function b589(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(367);return 0;
}
function b590(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(368);return 0;
}
function b591(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(369);return 0;
}
function b592(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(370);return 0;
}
function b593(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(371);return 0;
}
function b594(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(372);return 0;
}
function b595(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(373);return 0;
}
function b596(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(374);return 0;
}
function b597(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(375);return 0;
}
function b598(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(376);return 0;
}
function b599(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(377);return 0;
}
function b600(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(378);return 0;
}
function b601(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(379);return 0;
}
function b602(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(380);return 0;
}
function b603(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(381);return 0;
}
function b604(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(382);return 0;
}
function b605(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(383);return 0;
}
function b606(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(384);return 0;
}
function b607(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(385);return 0;
}
function b608(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(386);return 0;
}
function b609(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(387);return 0;
}
function b610(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(388);return 0;
}
function b611(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(389);return 0;
}
function b612(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(390);return 0;
}
function b613(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(391);return 0;
}
function b614(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(392);return 0;
}
function b615(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(393);return 0;
}
function b616(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(394);return 0;
}
function b617(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(395);return 0;
}
function b618(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(396);return 0;
}
function b619(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(397);return 0;
}
function b620(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(398);return 0;
}
function b621(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(399);return 0;
}
function b622(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(400);return 0;
}
function b623(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(401);return 0;
}
function b624(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(402);return 0;
}
function b625(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(403);return 0;
}
function b626(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(404);return 0;
}
function b627(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(405);return 0;
}
function b628(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(406);return 0;
}
function b629(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(407);return 0;
}
function b630(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(408);return 0;
}
function b631(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(409);return 0;
}
function b632(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(410);return 0;
}
function b633(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(411);return 0;
}
function b634(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(412);return 0;
}
function b635(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(413);return 0;
}
function b636(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(414);return 0;
}
function b637(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(415);return 0;
}
function b638(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(416);return 0;
}
function b639(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(417);return 0;
}
function b640(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(418);return 0;
}
function b641(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(419);return 0;
}
function b642(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(420);return 0;
}
function b643(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(421);return 0;
}
function b644(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(422);return 0;
}
function b645(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(423);return 0;
}
function b646(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(424);return 0;
}
function b647(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(425);return 0;
}
function b648(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(426);return 0;
}
function b649(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(427);return 0;
}
function b650(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(428);return 0;
}
function b651(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(429);return 0;
}
function b652(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(430);return 0;
}
function b653(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(431);return 0;
}
function b654(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(432);return 0;
}
function b655(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(433);return 0;
}
function b656(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(434);return 0;
}
function b657(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(435);return 0;
}
function b658(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(436);return 0;
}
function b659(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(437);return 0;
}
function b660(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(438);return 0;
}
function b661(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(439);return 0;
}
function b662(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(440);return 0;
}
function b663(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(441);return 0;
}
function b664(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(442);return 0;
}
function b665(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(443);return 0;
}
function b666(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(444);return 0;
}
function b667(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(445);return 0;
}
function b668(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(446);return 0;
}
function b669(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(447);return 0;
}
function b670(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(448);return 0;
}
function b671(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(449);return 0;
}
function b672(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(450);return 0;
}
function b673(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(451);return 0;
}
function b674(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(452);return 0;
}
function b675(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(453);return 0;
}
function b676(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(454);return 0;
}
function b677(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(455);return 0;
}
function b678(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(456);return 0;
}
function b679(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(457);return 0;
}
function b680(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(458);return 0;
}
function b681(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(459);return 0;
}
function b682(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(460);return 0;
}
function b683(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(461);return 0;
}
function b684(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(462);return 0;
}
function b685(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(463);return 0;
}
function b686(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(464);return 0;
}
function b687(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(465);return 0;
}
function b688(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(466);return 0;
}
function b689(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(467);return 0;
}
function b690(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(468);return 0;
}
function b691(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(469);return 0;
}
function b692(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(470);return 0;
}
function b693(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(471);return 0;
}
function b694(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(472);return 0;
}
function b695(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(473);return 0;
}
function b696(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(474);return 0;
}
function b697(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(475);return 0;
}
function b698(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(476);return 0;
}
function b699(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(477);return 0;
}
function b700(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(478);return 0;
}
function b701(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(479);return 0;
}
function b702(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(480);return 0;
}
function b703(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(481);return 0;
}
function b704(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(482);return 0;
}
function b705(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(483);return 0;
}
function b706(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(484);return 0;
}
function b707(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(485);return 0;
}
function b708(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(486);return 0;
}
function b709(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(487);return 0;
}
function b710(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(488);return 0;
}
function b711(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(489);return 0;
}
function b712(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(490);return 0;
}
function b713(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(491);return 0;
}
function b714(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(492);return 0;
}
function b715(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(493);return 0;
}
function b716(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(494);return 0;
}
function b717(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(495);return 0;
}
function b718(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(496);return 0;
}
function b719(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(497);return 0;
}
function b720(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(498);return 0;
}
function b721(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(499);return 0;
}
function b722(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(500);return 0;
}
function b723(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(501);return 0;
}
function b724(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(502);return 0;
}
function b725(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(503);return 0;
}
function b726(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(504);return 0;
}
function b727(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(505);return 0;
}
function b728(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(506);return 0;
}
function b729(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(507);return 0;
}
function b730(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(508);return 0;
}
function b731(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(509);return 0;
}
function b732(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(510);return 0;
}
function b733(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(511);return 0;
}
function b735(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(0);return 0;
}
function b736(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(1);return 0;
}
function b737(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(2);return 0;
}
function b738(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(3);return 0;
}
function b739(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(4);return 0;
}
function b740(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(5);return 0;
}
function b741(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(6);return 0;
}
function b742(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(7);return 0;
}
function b743(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(8);return 0;
}
function b744(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(9);return 0;
}
function b745(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(10);return 0;
}
function b746(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(11);return 0;
}
function b747(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(12);return 0;
}
function b748(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(13);return 0;
}
function b749(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(14);return 0;
}
function b750(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(15);return 0;
}
function b751(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(16);return 0;
}
function b752(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(19);return 0;
}
function b753(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(20);return 0;
}
function b754(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(21);return 0;
}
function b755(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(22);return 0;
}
function b756(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(23);return 0;
}
function b757(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(24);return 0;
}
function b758(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(25);return 0;
}
function b759(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(26);return 0;
}
function b760(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(27);return 0;
}
function b761(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(28);return 0;
}
function b762(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(29);return 0;
}
function b763(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(30);return 0;
}
function b764(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(31);return 0;
}
function b765(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(32);return 0;
}
function b766(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(35);return 0;
}
function b767(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(36);return 0;
}
function b768(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(37);return 0;
}
function b769(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(38);return 0;
}
function b770(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(39);return 0;
}
function b771(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(40);return 0;
}
function b772(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(41);return 0;
}
function b773(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(44);return 0;
}
function b774(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(45);return 0;
}
function b775(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(46);return 0;
}
function b776(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(47);return 0;
}
function b777(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(48);return 0;
}
function b778(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(49);return 0;
}
function b779(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(50);return 0;
}
function b780(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(53);return 0;
}
function b781(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(54);return 0;
}
function b782(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(55);return 0;
}
function b783(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(56);return 0;
}
function b784(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(57);return 0;
}
function b785(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(58);return 0;
}
function b786(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(59);return 0;
}
function b787(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(62);return 0;
}
function b788(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(63);return 0;
}
function b789(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(64);return 0;
}
function b790(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(65);return 0;
}
function b791(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(66);return 0;
}
function b792(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(67);return 0;
}
function b793(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(68);return 0;
}
function b794(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(71);return 0;
}
function b795(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(72);return 0;
}
function b796(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(73);return 0;
}
function b797(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(74);return 0;
}
function b798(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(75);return 0;
}
function b799(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(76);return 0;
}
function b800(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(77);return 0;
}
function b801(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(80);return 0;
}
function b802(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(81);return 0;
}
function b803(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(82);return 0;
}
function b804(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(83);return 0;
}
function b805(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(84);return 0;
}
function b806(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(85);return 0;
}
function b807(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(86);return 0;
}
function b808(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(87);return 0;
}
function b809(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(88);return 0;
}
function b810(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(89);return 0;
}
function b811(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(90);return 0;
}
function b812(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(91);return 0;
}
function b813(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(92);return 0;
}
function b814(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(93);return 0;
}
function b815(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(96);return 0;
}
function b816(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(97);return 0;
}
function b817(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(98);return 0;
}
function b818(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(99);return 0;
}
function b819(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(100);return 0;
}
function b820(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(101);return 0;
}
function b821(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(102);return 0;
}
function b822(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(103);return 0;
}
function b823(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(104);return 0;
}
function b824(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(105);return 0;
}
function b825(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(106);return 0;
}
function b826(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(107);return 0;
}
function b827(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(108);return 0;
}
function b828(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(109);return 0;
}
function b829(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(112);return 0;
}
function b830(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(113);return 0;
}
function b831(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(114);return 0;
}
function b832(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(115);return 0;
}
function b833(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(116);return 0;
}
function b834(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(117);return 0;
}
function b835(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(118);return 0;
}
function b836(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(121);return 0;
}
function b837(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(122);return 0;
}
function b838(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(123);return 0;
}
function b839(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(124);return 0;
}
function b840(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(125);return 0;
}
function b841(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(126);return 0;
}
function b842(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(127);return 0;
}
function b843(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(130);return 0;
}
function b844(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(131);return 0;
}
function b845(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(132);return 0;
}
function b846(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(133);return 0;
}
function b847(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(134);return 0;
}
function b848(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(135);return 0;
}
function b849(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(136);return 0;
}
function b850(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(139);return 0;
}
function b851(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(140);return 0;
}
function b852(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(141);return 0;
}
function b853(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(142);return 0;
}
function b854(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(143);return 0;
}
function b855(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(144);return 0;
}
function b856(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(145);return 0;
}
function b857(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(148);return 0;
}
function b858(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(149);return 0;
}
function b859(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(150);return 0;
}
function b860(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(151);return 0;
}
function b861(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(152);return 0;
}
function b862(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(153);return 0;
}
function b863(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(154);return 0;
}
function b864(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(157);return 0;
}
function b865(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(158);return 0;
}
function b866(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(159);return 0;
}
function b867(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(160);return 0;
}
function b868(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(161);return 0;
}
function b869(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(162);return 0;
}
function b870(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(163);return 0;
}
function b871(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(164);return 0;
}
function b872(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(165);return 0;
}
function b873(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(166);return 0;
}
function b874(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(167);return 0;
}
function b875(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(168);return 0;
}
function b876(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(169);return 0;
}
function b877(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(170);return 0;
}
function b878(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(171);return 0;
}
function b879(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(172);return 0;
}
function b880(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(173);return 0;
}
function b881(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(174);return 0;
}
function b882(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(175);return 0;
}
function b883(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(176);return 0;
}
function b884(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(177);return 0;
}
function b885(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(178);return 0;
}
function b886(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(179);return 0;
}
function b887(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(180);return 0;
}
function b888(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(181);return 0;
}
function b889(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(182);return 0;
}
function b890(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(183);return 0;
}
function b891(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(184);return 0;
}
function b892(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(185);return 0;
}
function b893(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(186);return 0;
}
function b894(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(187);return 0;
}
function b895(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(188);return 0;
}
function b896(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(189);return 0;
}
function b897(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(190);return 0;
}
function b898(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(191);return 0;
}
function b899(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(192);return 0;
}
function b900(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(193);return 0;
}
function b901(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(195);return 0;
}
function b902(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(196);return 0;
}
function b903(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(197);return 0;
}
function b904(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(199);return 0;
}
function b905(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(200);return 0;
}
function b906(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(201);return 0;
}
function b907(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(202);return 0;
}
function b908(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(203);return 0;
}
function b909(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(204);return 0;
}
function b910(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(205);return 0;
}
function b911(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(206);return 0;
}
function b912(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(207);return 0;
}
function b913(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(208);return 0;
}
function b914(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(209);return 0;
}
function b915(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(210);return 0;
}
function b916(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(211);return 0;
}
function b917(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(212);return 0;
}
function b918(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(213);return 0;
}
function b919(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(214);return 0;
}
function b920(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(215);return 0;
}
function b921(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(216);return 0;
}
function b922(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(217);return 0;
}
function b923(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(218);return 0;
}
function b924(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(219);return 0;
}
function b925(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(220);return 0;
}
function b926(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(221);return 0;
}
function b927(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(222);return 0;
}
function b928(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(223);return 0;
}
function b929(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(224);return 0;
}
function b930(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(225);return 0;
}
function b931(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(226);return 0;
}
function b932(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(227);return 0;
}
function b933(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(228);return 0;
}
function b934(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(229);return 0;
}
function b935(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(230);return 0;
}
function b936(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(231);return 0;
}
function b937(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(232);return 0;
}
function b938(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(233);return 0;
}
function b939(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(234);return 0;
}
function b940(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(235);return 0;
}
function b941(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(236);return 0;
}
function b942(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(237);return 0;
}
function b943(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(238);return 0;
}
function b944(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(239);return 0;
}
function b945(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(240);return 0;
}
function b946(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(241);return 0;
}
function b947(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(242);return 0;
}
function b948(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(243);return 0;
}
function b949(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(244);return 0;
}
function b950(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(245);return 0;
}
function b951(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(246);return 0;
}
function b952(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(247);return 0;
}
function b953(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(248);return 0;
}
function b954(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(249);return 0;
}
function b955(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(250);return 0;
}
function b956(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(251);return 0;
}
function b957(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(252);return 0;
}
function b958(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(253);return 0;
}
function b959(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(254);return 0;
}
function b960(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(255);return 0;
}
function b962(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0;
}
function b963(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(1);return 0;
}
function b964(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(2);return 0;
}
function b965(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(3);return 0;
}
function b966(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(4);return 0;
}
function b967(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(5);return 0;
}
function b968(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(6);return 0;
}
function b969(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(7);return 0;
}
function b970(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(8);return 0;
}
function b971(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(9);return 0;
}
function b972(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(10);return 0;
}
function b973(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(11);return 0;
}
function b974(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(12);return 0;
}
function b975(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(13);return 0;
}
function b976(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(14);return 0;
}
function b977(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(15);return 0;
}
function b978(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(16);return 0;
}
function b979(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(17);return 0;
}
function b980(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(18);return 0;
}
function b981(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(19);return 0;
}
function b982(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(20);return 0;
}
function b983(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(21);return 0;
}
function b984(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(22);return 0;
}
function b985(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(23);return 0;
}
function b986(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(24);return 0;
}
function b987(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(25);return 0;
}
function b988(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(26);return 0;
}
function b989(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(27);return 0;
}
function b990(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(28);return 0;
}
function b991(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(29);return 0;
}
function b992(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(30);return 0;
}
function b993(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(31);return 0;
}
function b994(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(32);return 0;
}
function b995(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(33);return 0;
}
function b996(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(34);return 0;
}
function b997(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(35);return 0;
}
function b998(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(36);return 0;
}
function b999(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(37);return 0;
}
function b1000(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(38);return 0;
}
function b1001(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(39);return 0;
}
function b1002(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(40);return 0;
}
function b1003(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(41);return 0;
}
function b1004(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(42);return 0;
}
function b1005(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(43);return 0;
}
function b1006(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(44);return 0;
}
function b1007(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(45);return 0;
}
function b1008(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(46);return 0;
}
function b1009(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(47);return 0;
}
function b1010(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(48);return 0;
}
function b1011(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(49);return 0;
}
function b1012(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(50);return 0;
}
function b1013(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(51);return 0;
}
function b1014(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(52);return 0;
}
function b1015(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(53);return 0;
}
function b1016(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(54);return 0;
}
function b1017(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(55);return 0;
}
function b1018(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(56);return 0;
}
function b1019(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(57);return 0;
}
function b1020(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(58);return 0;
}
function b1021(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(59);return 0;
}
function b1022(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(60);return 0;
}
function b1023(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(61);return 0;
}
function b1024(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(62);return 0;
}
function b1025(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(63);return 0;
}
function b1026(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(64);return 0;
}
function b1027(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(65);return 0;
}
function b1028(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(66);return 0;
}
function b1029(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(67);return 0;
}
function b1030(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(68);return 0;
}
function b1031(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(69);return 0;
}
function b1032(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(70);return 0;
}
function b1033(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(71);return 0;
}
function b1034(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(72);return 0;
}
function b1035(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(73);return 0;
}
function b1036(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(74);return 0;
}
function b1037(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(75);return 0;
}
function b1038(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(76);return 0;
}
function b1039(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(77);return 0;
}
function b1040(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(78);return 0;
}
function b1041(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(79);return 0;
}
function b1042(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(80);return 0;
}
function b1043(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(81);return 0;
}
function b1044(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(82);return 0;
}
function b1045(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(83);return 0;
}
function b1046(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(84);return 0;
}
function b1047(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(85);return 0;
}
function b1048(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(86);return 0;
}
function b1049(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(87);return 0;
}
function b1050(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(88);return 0;
}
function b1051(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(89);return 0;
}
function b1052(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(90);return 0;
}
function b1053(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(91);return 0;
}
function b1054(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(92);return 0;
}
function b1055(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(93);return 0;
}
function b1056(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(94);return 0;
}
function b1057(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(95);return 0;
}
function b1058(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(96);return 0;
}
function b1059(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(97);return 0;
}
function b1060(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(98);return 0;
}
function b1061(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(99);return 0;
}
function b1062(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(100);return 0;
}
function b1063(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(101);return 0;
}
function b1064(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(102);return 0;
}
function b1065(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(103);return 0;
}
function b1066(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(104);return 0;
}
function b1067(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(105);return 0;
}
function b1068(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(106);return 0;
}
function b1069(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(107);return 0;
}
function b1070(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(108);return 0;
}
function b1071(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(109);return 0;
}
function b1072(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(110);return 0;
}
function b1073(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(111);return 0;
}
function b1074(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(112);return 0;
}
function b1075(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(113);return 0;
}
function b1076(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(114);return 0;
}
function b1077(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(115);return 0;
}
function b1078(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(116);return 0;
}
function b1079(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(117);return 0;
}
function b1080(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(118);return 0;
}
function b1081(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(119);return 0;
}
function b1082(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(120);return 0;
}
function b1083(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(121);return 0;
}
function b1084(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(122);return 0;
}
function b1085(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(123);return 0;
}
function b1086(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(124);return 0;
}
function b1087(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(125);return 0;
}
function b1088(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(126);return 0;
}
function b1089(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(127);return 0;
}
function b1090(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(128);return 0;
}
function b1091(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(129);return 0;
}
function b1092(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(130);return 0;
}
function b1093(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(131);return 0;
}
function b1094(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(132);return 0;
}
function b1095(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(133);return 0;
}
function b1096(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(134);return 0;
}
function b1097(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(135);return 0;
}
function b1098(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(136);return 0;
}
function b1099(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(137);return 0;
}
function b1100(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(138);return 0;
}
function b1101(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(139);return 0;
}
function b1102(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(140);return 0;
}
function b1103(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(141);return 0;
}
function b1104(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(142);return 0;
}
function b1105(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(143);return 0;
}
function b1106(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(144);return 0;
}
function b1107(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(145);return 0;
}
function b1108(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(146);return 0;
}
function b1109(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(147);return 0;
}
function b1110(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(148);return 0;
}
function b1111(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(149);return 0;
}
function b1112(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(150);return 0;
}
function b1113(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(151);return 0;
}
function b1114(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(152);return 0;
}
function b1115(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(153);return 0;
}
function b1116(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(154);return 0;
}
function b1117(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(155);return 0;
}
function b1118(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(156);return 0;
}
function b1119(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(157);return 0;
}
function b1120(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(158);return 0;
}
function b1121(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(159);return 0;
}
function b1122(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(160);return 0;
}
function b1123(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(161);return 0;
}
function b1124(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(162);return 0;
}
function b1125(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(163);return 0;
}
function b1126(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(164);return 0;
}
function b1127(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(165);return 0;
}
function b1128(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(166);return 0;
}
function b1129(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(167);return 0;
}
function b1130(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(168);return 0;
}
function b1131(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(169);return 0;
}
function b1132(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(170);return 0;
}
function b1133(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(171);return 0;
}
function b1134(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(172);return 0;
}
function b1135(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(173);return 0;
}
function b1136(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(174);return 0;
}
function b1137(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(175);return 0;
}
function b1138(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(176);return 0;
}
function b1139(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(177);return 0;
}
function b1140(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(178);return 0;
}
function b1141(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(179);return 0;
}
function b1142(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(180);return 0;
}
function b1143(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(181);return 0;
}
function b1144(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(182);return 0;
}
function b1145(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(183);return 0;
}
function b1146(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(184);return 0;
}
function b1147(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(185);return 0;
}
function b1148(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(186);return 0;
}
function b1149(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(187);return 0;
}
function b1150(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(188);return 0;
}
function b1151(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(189);return 0;
}
function b1152(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(190);return 0;
}
function b1153(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(191);return 0;
}
function b1154(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(192);return 0;
}
function b1155(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(193);return 0;
}
function b1156(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(194);return 0;
}
function b1157(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(195);return 0;
}
function b1158(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(196);return 0;
}
function b1159(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(197);return 0;
}
function b1160(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(198);return 0;
}
function b1161(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(199);return 0;
}
function b1162(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(200);return 0;
}
function b1163(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(202);return 0;
}
function b1164(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(203);return 0;
}
function b1165(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(204);return 0;
}
function b1166(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(206);return 0;
}
function b1167(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(209);return 0;
}
function b1168(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(210);return 0;
}
function b1169(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(211);return 0;
}
function b1170(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(212);return 0;
}
function b1171(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(213);return 0;
}
function b1172(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(214);return 0;
}
function b1173(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(215);return 0;
}
function b1174(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(216);return 0;
}
function b1175(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(218);return 0;
}
function b1176(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(219);return 0;
}
function b1177(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(220);return 0;
}
function b1178(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(221);return 0;
}
function b1179(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(222);return 0;
}
function b1180(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(223);return 0;
}
function b1181(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(224);return 0;
}
function b1182(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(225);return 0;
}
function b1183(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(226);return 0;
}
function b1184(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(227);return 0;
}
function b1185(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(228);return 0;
}
function b1186(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(229);return 0;
}
function b1187(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(230);return 0;
}
function b1188(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(231);return 0;
}
function b1189(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(232);return 0;
}
function b1190(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(233);return 0;
}
function b1191(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(234);return 0;
}
function b1192(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(235);return 0;
}
function b1193(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(236);return 0;
}
function b1194(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(237);return 0;
}
function b1195(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(238);return 0;
}
function b1196(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(239);return 0;
}
function b1197(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(240);return 0;
}
function b1198(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(241);return 0;
}
function b1199(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(242);return 0;
}
function b1200(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(243);return 0;
}
function b1201(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(244);return 0;
}
function b1202(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(245);return 0;
}
function b1203(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(246);return 0;
}
function b1204(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(247);return 0;
}
function b1205(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(248);return 0;
}
function b1206(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(249);return 0;
}
function b1207(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(250);return 0;
}
function b1208(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(251);return 0;
}
function b1209(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(252);return 0;
}
function b1210(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(253);return 0;
}
function b1211(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(254);return 0;
}
function b1212(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(255);return 0;
}
function b1213(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(256);return 0;
}
function b1214(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(257);return 0;
}
function b1215(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(258);return 0;
}
function b1216(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(259);return 0;
}
function b1217(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(260);return 0;
}
function b1218(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(261);return 0;
}
function b1219(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(262);return 0;
}
function b1220(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(263);return 0;
}
function b1221(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(264);return 0;
}
function b1222(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(265);return 0;
}
function b1223(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(266);return 0;
}
function b1224(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(267);return 0;
}
function b1225(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(268);return 0;
}
function b1226(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(269);return 0;
}
function b1227(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(270);return 0;
}
function b1228(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(271);return 0;
}
function b1229(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(272);return 0;
}
function b1230(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(273);return 0;
}
function b1231(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(274);return 0;
}
function b1232(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(275);return 0;
}
function b1233(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(276);return 0;
}
function b1234(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(277);return 0;
}
function b1235(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(278);return 0;
}
function b1236(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(279);return 0;
}
function b1237(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(280);return 0;
}
function b1238(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(281);return 0;
}
function b1239(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(282);return 0;
}
function b1240(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(283);return 0;
}
function b1241(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(284);return 0;
}
function b1242(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(285);return 0;
}
function b1243(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(286);return 0;
}
function b1244(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(287);return 0;
}
function b1245(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(288);return 0;
}
function b1246(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(290);return 0;
}
function b1247(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(291);return 0;
}
function b1248(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(292);return 0;
}
function b1249(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(293);return 0;
}
function b1250(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(294);return 0;
}
function b1251(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(295);return 0;
}
function b1252(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(296);return 0;
}
function b1253(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(297);return 0;
}
function b1254(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(298);return 0;
}
function b1255(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(299);return 0;
}
function b1256(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(300);return 0;
}
function b1257(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(301);return 0;
}
function b1258(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(302);return 0;
}
function b1259(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(303);return 0;
}
function b1260(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(304);return 0;
}
function b1261(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(305);return 0;
}
function b1262(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(306);return 0;
}
function b1263(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(307);return 0;
}
function b1264(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(308);return 0;
}
function b1265(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(309);return 0;
}
function b1266(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(310);return 0;
}
function b1267(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(311);return 0;
}
function b1268(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(312);return 0;
}
function b1269(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(313);return 0;
}
function b1270(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(314);return 0;
}
function b1271(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(315);return 0;
}
function b1272(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(316);return 0;
}
function b1273(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(317);return 0;
}
function b1274(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(318);return 0;
}
function b1275(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(319);return 0;
}
function b1276(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(320);return 0;
}
function b1277(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(321);return 0;
}
function b1278(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(322);return 0;
}
function b1279(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(323);return 0;
}
function b1280(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(324);return 0;
}
function b1281(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(325);return 0;
}
function b1282(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(326);return 0;
}
function b1283(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(327);return 0;
}
function b1284(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(328);return 0;
}
function b1285(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(329);return 0;
}
function b1286(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(330);return 0;
}
function b1287(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(331);return 0;
}
function b1288(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(332);return 0;
}
function b1289(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(333);return 0;
}
function b1290(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(334);return 0;
}
function b1291(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(335);return 0;
}
function b1292(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(336);return 0;
}
function b1293(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(337);return 0;
}
function b1294(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(338);return 0;
}
function b1295(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(339);return 0;
}
function b1296(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(340);return 0;
}
function b1297(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(341);return 0;
}
function b1298(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(342);return 0;
}
function b1299(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(343);return 0;
}
function b1300(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(344);return 0;
}
function b1301(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(345);return 0;
}
function b1302(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(346);return 0;
}
function b1303(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(347);return 0;
}
function b1304(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(348);return 0;
}
function b1305(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(349);return 0;
}
function b1306(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(350);return 0;
}
function b1307(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(351);return 0;
}
function b1308(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(352);return 0;
}
function b1309(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(353);return 0;
}
function b1310(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(354);return 0;
}
function b1311(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(355);return 0;
}
function b1312(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(356);return 0;
}
function b1313(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(357);return 0;
}
function b1314(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(358);return 0;
}
function b1315(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(359);return 0;
}
function b1316(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(360);return 0;
}
function b1317(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(361);return 0;
}
function b1318(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(362);return 0;
}
function b1319(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(363);return 0;
}
function b1320(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(364);return 0;
}
function b1321(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(365);return 0;
}
function b1322(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(366);return 0;
}
function b1323(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(367);return 0;
}
function b1324(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(368);return 0;
}
function b1325(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(369);return 0;
}
function b1326(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(370);return 0;
}
function b1327(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(371);return 0;
}
function b1328(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(372);return 0;
}
function b1329(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(373);return 0;
}
function b1330(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(374);return 0;
}
function b1331(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(375);return 0;
}
function b1332(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(376);return 0;
}
function b1333(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(377);return 0;
}
function b1334(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(378);return 0;
}
function b1335(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(379);return 0;
}
function b1336(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(380);return 0;
}
function b1337(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(381);return 0;
}
function b1338(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(382);return 0;
}
function b1339(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(383);return 0;
}
function b1340(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(384);return 0;
}
function b1341(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(385);return 0;
}
function b1342(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(386);return 0;
}
function b1343(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(387);return 0;
}
function b1344(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(388);return 0;
}
function b1345(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(389);return 0;
}
function b1346(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(390);return 0;
}
function b1347(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(391);return 0;
}
function b1348(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(392);return 0;
}
function b1349(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(393);return 0;
}
function b1350(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(394);return 0;
}
function b1351(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(395);return 0;
}
function b1352(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(396);return 0;
}
function b1353(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(397);return 0;
}
function b1354(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(398);return 0;
}
function b1355(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(399);return 0;
}
function b1356(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(400);return 0;
}
function b1357(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(401);return 0;
}
function b1358(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(402);return 0;
}
function b1359(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(403);return 0;
}
function b1360(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(404);return 0;
}
function b1361(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(405);return 0;
}
function b1362(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(406);return 0;
}
function b1363(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(407);return 0;
}
function b1364(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(408);return 0;
}
function b1365(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(409);return 0;
}
function b1366(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(410);return 0;
}
function b1367(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(411);return 0;
}
function b1368(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(412);return 0;
}
function b1369(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(413);return 0;
}
function b1370(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(414);return 0;
}
function b1371(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(415);return 0;
}
function b1372(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(416);return 0;
}
function b1373(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(417);return 0;
}
function b1374(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(418);return 0;
}
function b1375(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(419);return 0;
}
function b1376(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(420);return 0;
}
function b1377(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(421);return 0;
}
function b1378(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(422);return 0;
}
function b1379(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(423);return 0;
}
function b1380(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(424);return 0;
}
function b1381(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(425);return 0;
}
function b1382(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(426);return 0;
}
function b1383(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(427);return 0;
}
function b1384(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(428);return 0;
}
function b1385(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(429);return 0;
}
function b1386(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(430);return 0;
}
function b1387(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(431);return 0;
}
function b1388(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(432);return 0;
}
function b1389(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(433);return 0;
}
function b1390(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(434);return 0;
}
function b1391(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(435);return 0;
}
function b1392(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(436);return 0;
}
function b1393(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(437);return 0;
}
function b1394(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(438);return 0;
}
function b1395(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(439);return 0;
}
function b1396(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(440);return 0;
}
function b1397(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(441);return 0;
}
function b1398(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(442);return 0;
}
function b1399(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(443);return 0;
}
function b1400(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(444);return 0;
}
function b1401(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(445);return 0;
}
function b1402(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(446);return 0;
}
function b1403(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(447);return 0;
}
function b1404(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(448);return 0;
}
function b1405(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(449);return 0;
}
function b1406(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(450);return 0;
}
function b1407(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(451);return 0;
}
function b1408(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(452);return 0;
}
function b1409(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(453);return 0;
}
function b1410(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(454);return 0;
}
function b1411(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(455);return 0;
}
function b1412(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(456);return 0;
}
function b1413(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(457);return 0;
}
function b1414(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(458);return 0;
}
function b1415(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(459);return 0;
}
function b1416(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(460);return 0;
}
function b1417(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(461);return 0;
}
function b1418(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(462);return 0;
}
function b1419(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(463);return 0;
}
function b1420(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(464);return 0;
}
function b1421(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(465);return 0;
}
function b1422(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(466);return 0;
}
function b1423(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(467);return 0;
}
function b1424(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(468);return 0;
}
function b1425(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(469);return 0;
}
function b1426(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(470);return 0;
}
function b1427(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(471);return 0;
}
function b1428(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(472);return 0;
}
function b1429(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(473);return 0;
}
function b1430(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(474);return 0;
}
function b1431(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(475);return 0;
}
function b1432(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(476);return 0;
}
function b1433(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(477);return 0;
}
function b1434(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(478);return 0;
}
function b1435(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(479);return 0;
}
function b1436(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(480);return 0;
}
function b1437(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(481);return 0;
}
function b1438(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(482);return 0;
}
function b1439(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(483);return 0;
}
function b1440(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(484);return 0;
}
function b1441(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(485);return 0;
}
function b1442(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(486);return 0;
}
function b1443(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(487);return 0;
}
function b1444(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(488);return 0;
}
function b1445(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(489);return 0;
}
function b1446(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(490);return 0;
}
function b1447(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(491);return 0;
}
function b1448(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(492);return 0;
}
function b1449(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(493);return 0;
}
function b1450(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(494);return 0;
}
function b1451(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(495);return 0;
}
function b1452(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(496);return 0;
}
function b1453(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(497);return 0;
}
function b1454(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(498);return 0;
}
function b1455(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(499);return 0;
}
function b1456(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(500);return 0;
}
function b1457(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(501);return 0;
}
function b1458(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(502);return 0;
}
function b1459(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(503);return 0;
}
function b1460(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(504);return 0;
}
function b1461(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(505);return 0;
}
function b1462(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(506);return 0;
}
function b1463(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(507);return 0;
}
function b1464(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(508);return 0;
}
function b1465(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(509);return 0;
}
function b1466(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(510);return 0;
}
function b1467(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(511);return 0;
}
function b1469(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(0);return 0;
}
function b1470(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(1);return 0;
}
function b1471(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(2);return 0;
}
function b1472(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(3);return 0;
}
function b1473(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(4);return 0;
}
function b1474(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(5);return 0;
}
function b1475(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(6);return 0;
}
function b1476(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(7);return 0;
}
function b1477(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(8);return 0;
}
function b1478(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(9);return 0;
}
function b1479(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(10);return 0;
}
function b1480(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(11);return 0;
}
function b1481(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(12);return 0;
}
function b1482(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(13);return 0;
}
function b1483(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(14);return 0;
}
function b1484(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(15);return 0;
}
function b1485(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(16);return 0;
}
function b1486(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(17);return 0;
}
function b1487(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(18);return 0;
}
function b1488(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(19);return 0;
}
function b1489(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(20);return 0;
}
function b1490(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(21);return 0;
}
function b1491(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(22);return 0;
}
function b1492(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(23);return 0;
}
function b1493(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(24);return 0;
}
function b1494(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(25);return 0;
}
function b1495(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(26);return 0;
}
function b1496(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(27);return 0;
}
function b1497(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(28);return 0;
}
function b1498(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(29);return 0;
}
function b1499(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(30);return 0;
}
function b1500(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(31);return 0;
}
function b1501(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(32);return 0;
}
function b1502(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(33);return 0;
}
function b1503(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(34);return 0;
}
function b1504(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(35);return 0;
}
function b1505(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(36);return 0;
}
function b1506(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(37);return 0;
}
function b1507(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(38);return 0;
}
function b1508(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(39);return 0;
}
function b1509(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(40);return 0;
}
function b1510(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(41);return 0;
}
function b1511(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(42);return 0;
}
function b1512(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(43);return 0;
}
function b1513(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(44);return 0;
}
function b1514(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(45);return 0;
}
function b1515(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(46);return 0;
}
function b1516(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(47);return 0;
}
function b1517(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(48);return 0;
}
function b1518(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(49);return 0;
}
function b1519(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(50);return 0;
}
function b1520(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(51);return 0;
}
function b1521(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(52);return 0;
}
function b1522(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(53);return 0;
}
function b1523(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(54);return 0;
}
function b1524(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(55);return 0;
}
function b1525(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(56);return 0;
}
function b1526(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(57);return 0;
}
function b1527(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(58);return 0;
}
function b1528(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(59);return 0;
}
function b1529(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(60);return 0;
}
function b1530(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(61);return 0;
}
function b1531(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(62);return 0;
}
function b1532(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(63);return 0;
}
function b1533(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(64);return 0;
}
function b1534(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(65);return 0;
}
function b1535(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(66);return 0;
}
function b1536(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(67);return 0;
}
function b1537(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(68);return 0;
}
function b1538(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(69);return 0;
}
function b1539(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(70);return 0;
}
function b1540(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(71);return 0;
}
function b1541(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(72);return 0;
}
function b1542(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(73);return 0;
}
function b1543(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(74);return 0;
}
function b1544(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(75);return 0;
}
function b1545(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(76);return 0;
}
function b1546(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(77);return 0;
}
function b1547(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(78);return 0;
}
function b1548(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(79);return 0;
}
function b1549(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(80);return 0;
}
function b1550(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(81);return 0;
}
function b1551(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(82);return 0;
}
function b1552(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(83);return 0;
}
function b1553(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(84);return 0;
}
function b1554(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(85);return 0;
}
function b1555(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(86);return 0;
}
function b1556(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(87);return 0;
}
function b1557(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(88);return 0;
}
function b1558(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(89);return 0;
}
function b1559(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(90);return 0;
}
function b1560(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(91);return 0;
}
function b1561(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(92);return 0;
}
function b1562(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(93);return 0;
}
function b1563(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(94);return 0;
}
function b1564(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(95);return 0;
}
function b1565(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(96);return 0;
}
function b1566(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(97);return 0;
}
function b1567(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(98);return 0;
}
function b1568(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(99);return 0;
}
function b1569(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(100);return 0;
}
function b1570(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(101);return 0;
}
function b1571(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(102);return 0;
}
function b1572(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(103);return 0;
}
function b1573(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(104);return 0;
}
function b1574(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(105);return 0;
}
function b1575(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(106);return 0;
}
function b1576(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(107);return 0;
}
function b1577(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(108);return 0;
}
function b1578(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(109);return 0;
}
function b1579(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(110);return 0;
}
function b1580(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(111);return 0;
}
function b1581(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(112);return 0;
}
function b1582(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(113);return 0;
}
function b1583(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(114);return 0;
}
function b1584(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(115);return 0;
}
function b1585(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(116);return 0;
}
function b1586(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(117);return 0;
}
function b1587(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(118);return 0;
}
function b1588(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(119);return 0;
}
function b1589(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(120);return 0;
}
function b1590(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(121);return 0;
}
function b1591(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(122);return 0;
}
function b1592(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(123);return 0;
}
function b1593(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(124);return 0;
}
function b1594(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(125);return 0;
}
function b1595(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(126);return 0;
}
function b1596(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(127);return 0;
}
function b1597(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(128);return 0;
}
function b1598(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(129);return 0;
}
function b1599(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(130);return 0;
}
function b1600(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(131);return 0;
}
function b1601(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(132);return 0;
}
function b1602(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(133);return 0;
}
function b1603(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(134);return 0;
}
function b1604(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(135);return 0;
}
function b1605(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(136);return 0;
}
function b1606(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(137);return 0;
}
function b1607(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(138);return 0;
}
function b1608(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(139);return 0;
}
function b1609(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(140);return 0;
}
function b1610(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(141);return 0;
}
function b1611(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(142);return 0;
}
function b1612(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(143);return 0;
}
function b1613(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(144);return 0;
}
function b1614(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(145);return 0;
}
function b1615(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(146);return 0;
}
function b1616(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(147);return 0;
}
function b1617(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(148);return 0;
}
function b1618(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(149);return 0;
}
function b1619(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(150);return 0;
}
function b1620(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(151);return 0;
}
function b1621(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(152);return 0;
}
function b1622(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(153);return 0;
}
function b1623(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(154);return 0;
}
function b1624(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(155);return 0;
}
function b1625(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(156);return 0;
}
function b1626(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(157);return 0;
}
function b1627(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(158);return 0;
}
function b1628(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(159);return 0;
}
function b1629(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(160);return 0;
}
function b1630(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(161);return 0;
}
function b1631(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(162);return 0;
}
function b1632(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(163);return 0;
}
function b1633(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(164);return 0;
}
function b1634(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(165);return 0;
}
function b1635(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(166);return 0;
}
function b1636(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(167);return 0;
}
function b1637(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(168);return 0;
}
function b1638(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(169);return 0;
}
function b1639(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(170);return 0;
}
function b1640(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(171);return 0;
}
function b1641(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(172);return 0;
}
function b1642(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(173);return 0;
}
function b1643(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(174);return 0;
}
function b1644(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(175);return 0;
}
function b1645(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(176);return 0;
}
function b1646(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(177);return 0;
}
function b1647(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(178);return 0;
}
function b1648(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(179);return 0;
}
function b1649(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(180);return 0;
}
function b1650(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(181);return 0;
}
function b1651(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(182);return 0;
}
function b1652(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(183);return 0;
}
function b1653(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(184);return 0;
}
function b1654(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(185);return 0;
}
function b1655(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(186);return 0;
}
function b1656(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(187);return 0;
}
function b1657(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(188);return 0;
}
function b1658(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(189);return 0;
}
function b1659(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(190);return 0;
}
function b1660(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(191);return 0;
}
function b1661(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(192);return 0;
}
function b1662(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(193);return 0;
}
function b1663(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(194);return 0;
}
function b1664(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(195);return 0;
}
function b1665(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(196);return 0;
}
function b1666(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(197);return 0;
}
function b1667(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(198);return 0;
}
function b1668(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(199);return 0;
}
function b1669(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(200);return 0;
}
function b1670(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(201);return 0;
}
function b1671(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(202);return 0;
}
function b1672(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(203);return 0;
}
function b1673(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(204);return 0;
}
function b1674(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(205);return 0;
}
function b1675(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(207);return 0;
}
function b1676(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(208);return 0;
}
function b1677(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(209);return 0;
}
function b1678(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(210);return 0;
}
function b1679(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(211);return 0;
}
function b1680(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(212);return 0;
}
function b1681(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(213);return 0;
}
function b1682(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(214);return 0;
}
function b1683(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(215);return 0;
}
function b1684(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(216);return 0;
}
function b1685(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(217);return 0;
}
function b1686(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(218);return 0;
}
function b1687(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(219);return 0;
}
function b1688(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(220);return 0;
}
function b1689(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(221);return 0;
}
function b1690(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(222);return 0;
}
function b1691(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(223);return 0;
}
function b1692(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(224);return 0;
}
function b1693(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(225);return 0;
}
function b1694(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(226);return 0;
}
function b1695(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(227);return 0;
}
function b1696(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(228);return 0;
}
function b1697(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(229);return 0;
}
function b1698(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(230);return 0;
}
function b1699(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(231);return 0;
}
function b1700(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(232);return 0;
}
function b1701(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(233);return 0;
}
function b1702(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(234);return 0;
}
function b1703(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(235);return 0;
}
function b1704(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(236);return 0;
}
function b1705(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(237);return 0;
}
function b1706(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(238);return 0;
}
function b1707(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(239);return 0;
}
function b1708(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(240);return 0;
}
function b1709(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(241);return 0;
}
function b1710(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(242);return 0;
}
function b1711(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(243);return 0;
}
function b1712(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(244);return 0;
}
function b1713(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(245);return 0;
}
function b1714(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(246);return 0;
}
function b1715(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(247);return 0;
}
function b1716(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(248);return 0;
}
function b1717(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(249);return 0;
}
function b1718(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(250);return 0;
}
function b1719(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(251);return 0;
}
function b1720(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(252);return 0;
}
function b1721(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(253);return 0;
}
function b1722(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(254);return 0;
}
function b1723(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(255);return 0;
}
function b1725(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(0);return 0;
}
function b1726(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(1);return 0;
}
function b1727(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(2);return 0;
}
function b1728(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(3);return 0;
}
function b1729(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(4);return 0;
}
function b1730(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(5);return 0;
}
function b1731(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(6);return 0;
}
function b1732(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(7);return 0;
}
function b1733(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(8);return 0;
}
function b1734(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(9);return 0;
}
function b1735(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(10);return 0;
}
function b1736(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(11);return 0;
}
function b1737(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(12);return 0;
}
function b1738(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(13);return 0;
}
function b1739(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(14);return 0;
}
function b1740(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(15);return 0;
}
function b1741(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(16);return 0;
}
function b1742(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(17);return 0;
}
function b1743(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(18);return 0;
}
function b1744(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(19);return 0;
}
function b1745(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(20);return 0;
}
function b1746(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(21);return 0;
}
function b1747(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(22);return 0;
}
function b1748(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(23);return 0;
}
function b1749(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(24);return 0;
}
function b1750(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(25);return 0;
}
function b1751(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(26);return 0;
}
function b1752(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(27);return 0;
}
function b1753(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(28);return 0;
}
function b1754(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(29);return 0;
}
function b1755(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(30);return 0;
}
function b1756(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(31);return 0;
}
function b1757(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(32);return 0;
}
function b1758(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(33);return 0;
}
function b1759(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(34);return 0;
}
function b1760(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(35);return 0;
}
function b1761(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(36);return 0;
}
function b1762(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(37);return 0;
}
function b1763(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(38);return 0;
}
function b1764(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(39);return 0;
}
function b1765(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(40);return 0;
}
function b1766(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(41);return 0;
}
function b1767(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(42);return 0;
}
function b1768(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(43);return 0;
}
function b1769(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(44);return 0;
}
function b1770(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(45);return 0;
}
function b1771(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(46);return 0;
}
function b1772(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(47);return 0;
}
function b1773(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(48);return 0;
}
function b1774(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(49);return 0;
}
function b1775(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(50);return 0;
}
function b1776(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(51);return 0;
}
function b1777(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(52);return 0;
}
function b1778(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(53);return 0;
}
function b1779(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(54);return 0;
}
function b1780(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(55);return 0;
}
function b1781(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(56);return 0;
}
function b1782(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(57);return 0;
}
function b1783(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(58);return 0;
}
function b1784(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(59);return 0;
}
function b1785(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(60);return 0;
}
function b1786(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(61);return 0;
}
function b1787(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(62);return 0;
}
function b1788(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(63);return 0;
}
function b1789(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(64);return 0;
}
function b1790(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(65);return 0;
}
function b1791(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(66);return 0;
}
function b1792(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(67);return 0;
}
function b1793(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(68);return 0;
}
function b1794(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(69);return 0;
}
function b1795(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(70);return 0;
}
function b1796(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(71);return 0;
}
function b1797(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(72);return 0;
}
function b1798(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(73);return 0;
}
function b1799(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(74);return 0;
}
function b1800(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(75);return 0;
}
function b1801(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(76);return 0;
}
function b1802(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(77);return 0;
}
function b1803(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(78);return 0;
}
function b1804(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(79);return 0;
}
function b1805(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(80);return 0;
}
function b1806(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(81);return 0;
}
function b1807(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(82);return 0;
}
function b1808(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(83);return 0;
}
function b1809(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(84);return 0;
}
function b1810(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(85);return 0;
}
function b1811(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(86);return 0;
}
function b1812(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(87);return 0;
}
function b1813(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(88);return 0;
}
function b1814(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(89);return 0;
}
function b1815(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(90);return 0;
}
function b1816(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(91);return 0;
}
function b1817(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(92);return 0;
}
function b1818(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(93);return 0;
}
function b1819(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(94);return 0;
}
function b1820(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(95);return 0;
}
function b1821(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(96);return 0;
}
function b1822(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(97);return 0;
}
function b1823(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(98);return 0;
}
function b1824(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(99);return 0;
}
function b1825(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(100);return 0;
}
function b1826(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(101);return 0;
}
function b1827(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(102);return 0;
}
function b1828(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(103);return 0;
}
function b1829(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(104);return 0;
}
function b1830(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(105);return 0;
}
function b1831(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(106);return 0;
}
function b1832(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(107);return 0;
}
function b1833(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(108);return 0;
}
function b1834(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(109);return 0;
}
function b1835(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(110);return 0;
}
function b1836(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(111);return 0;
}
function b1837(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(112);return 0;
}
function b1838(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(113);return 0;
}
function b1839(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(114);return 0;
}
function b1840(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(115);return 0;
}
function b1841(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(116);return 0;
}
function b1842(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(117);return 0;
}
function b1843(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(118);return 0;
}
function b1844(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(119);return 0;
}
function b1845(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(120);return 0;
}
function b1846(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(121);return 0;
}
function b1847(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(122);return 0;
}
function b1848(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(123);return 0;
}
function b1849(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(124);return 0;
}
function b1850(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(125);return 0;
}
function b1851(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(126);return 0;
}
function b1852(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(127);return 0;
}
function b1853(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(128);return 0;
}
function b1854(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(129);return 0;
}
function b1855(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(130);return 0;
}
function b1856(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(131);return 0;
}
function b1857(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(132);return 0;
}
function b1858(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(133);return 0;
}
function b1859(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(134);return 0;
}
function b1860(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(135);return 0;
}
function b1861(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(136);return 0;
}
function b1862(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(137);return 0;
}
function b1863(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(138);return 0;
}
function b1864(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(139);return 0;
}
function b1865(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(140);return 0;
}
function b1866(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(141);return 0;
}
function b1867(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(142);return 0;
}
function b1868(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(143);return 0;
}
function b1869(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(144);return 0;
}
function b1870(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(145);return 0;
}
function b1871(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(146);return 0;
}
function b1872(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(147);return 0;
}
function b1873(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(148);return 0;
}
function b1874(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(149);return 0;
}
function b1875(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(150);return 0;
}
function b1876(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(151);return 0;
}
function b1877(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(152);return 0;
}
function b1878(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(153);return 0;
}
function b1879(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(154);return 0;
}
function b1880(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(155);return 0;
}
function b1881(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(156);return 0;
}
function b1882(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(157);return 0;
}
function b1883(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(158);return 0;
}
function b1884(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(159);return 0;
}
function b1885(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(160);return 0;
}
function b1886(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(161);return 0;
}
function b1887(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(162);return 0;
}
function b1888(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(163);return 0;
}
function b1889(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(164);return 0;
}
function b1890(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(165);return 0;
}
function b1891(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(166);return 0;
}
function b1892(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(167);return 0;
}
function b1893(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(168);return 0;
}
function b1894(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(169);return 0;
}
function b1895(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(170);return 0;
}
function b1896(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(171);return 0;
}
function b1897(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(172);return 0;
}
function b1898(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(173);return 0;
}
function b1899(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(174);return 0;
}
function b1900(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(175);return 0;
}
function b1901(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(176);return 0;
}
function b1902(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(177);return 0;
}
function b1903(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(178);return 0;
}
function b1904(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(179);return 0;
}
function b1905(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(180);return 0;
}
function b1906(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(181);return 0;
}
function b1907(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(182);return 0;
}
function b1908(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(183);return 0;
}
function b1909(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(184);return 0;
}
function b1910(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(185);return 0;
}
function b1911(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(186);return 0;
}
function b1912(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(187);return 0;
}
function b1913(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(188);return 0;
}
function b1914(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(189);return 0;
}
function b1915(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(190);return 0;
}
function b1916(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(191);return 0;
}
function b1917(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(192);return 0;
}
function b1918(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(193);return 0;
}
function b1919(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(194);return 0;
}
function b1920(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(195);return 0;
}
function b1921(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(196);return 0;
}
function b1922(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(197);return 0;
}
function b1923(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(198);return 0;
}
function b1924(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(199);return 0;
}
function b1925(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(200);return 0;
}
function b1926(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(201);return 0;
}
function b1927(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(202);return 0;
}
function b1928(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(203);return 0;
}
function b1929(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(204);return 0;
}
function b1930(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(205);return 0;
}
function b1931(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(206);return 0;
}
function b1932(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(207);return 0;
}
function b1933(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(208);return 0;
}
function b1934(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(209);return 0;
}
function b1935(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(210);return 0;
}
function b1936(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(211);return 0;
}
function b1937(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(212);return 0;
}
function b1938(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(213);return 0;
}
function b1939(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(214);return 0;
}
function b1940(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(215);return 0;
}
function b1941(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(216);return 0;
}
function b1942(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(217);return 0;
}
function b1943(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(218);return 0;
}
function b1944(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(219);return 0;
}
function b1945(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(220);return 0;
}
function b1946(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(221);return 0;
}
function b1947(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(222);return 0;
}
function b1948(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(223);return 0;
}
function b1949(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(224);return 0;
}
function b1950(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(225);return 0;
}
function b1951(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(226);return 0;
}
function b1952(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(227);return 0;
}
function b1953(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(228);return 0;
}
function b1954(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(229);return 0;
}
function b1955(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(230);return 0;
}
function b1956(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(231);return 0;
}
function b1957(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(232);return 0;
}
function b1958(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(233);return 0;
}
function b1959(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(234);return 0;
}
function b1960(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(235);return 0;
}
function b1961(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(236);return 0;
}
function b1962(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(237);return 0;
}
function b1963(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(238);return 0;
}
function b1964(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(239);return 0;
}
function b1965(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(240);return 0;
}
function b1966(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(241);return 0;
}
function b1967(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(242);return 0;
}
function b1968(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(243);return 0;
}
function b1969(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(244);return 0;
}
function b1970(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(245);return 0;
}
function b1971(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(246);return 0;
}
function b1972(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(247);return 0;
}
function b1973(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(248);return 0;
}
function b1974(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(249);return 0;
}
function b1975(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(250);return 0;
}
function b1976(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(251);return 0;
}
function b1977(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(252);return 0;
}
function b1978(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(253);return 0;
}
function b1979(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(254);return 0;
}
function b1980(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(255);return 0;
}
function b1981(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(256);return 0;
}
function b1982(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(257);return 0;
}
function b1983(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(258);return 0;
}
function b1984(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(259);return 0;
}
function b1985(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(260);return 0;
}
function b1986(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(261);return 0;
}
function b1987(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(262);return 0;
}
function b1988(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(263);return 0;
}
function b1989(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(264);return 0;
}
function b1990(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(265);return 0;
}
function b1991(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(266);return 0;
}
function b1992(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(267);return 0;
}
function b1993(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(268);return 0;
}
function b1994(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(269);return 0;
}
function b1995(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(270);return 0;
}
function b1996(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(276);return 0;
}
function b1997(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(277);return 0;
}
function b1998(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(278);return 0;
}
function b1999(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(279);return 0;
}
function b2000(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(280);return 0;
}
function b2001(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(281);return 0;
}
function b2002(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(282);return 0;
}
function b2003(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(283);return 0;
}
function b2004(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(284);return 0;
}
function b2005(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(285);return 0;
}
function b2006(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(286);return 0;
}
function b2007(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(287);return 0;
}
function b2008(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(288);return 0;
}
function b2009(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(289);return 0;
}
function b2010(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(290);return 0;
}
function b2011(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(291);return 0;
}
function b2012(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(292);return 0;
}
function b2013(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(293);return 0;
}
function b2014(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(294);return 0;
}
function b2015(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(295);return 0;
}
function b2016(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(296);return 0;
}
function b2017(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(297);return 0;
}
function b2018(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(298);return 0;
}
function b2019(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(299);return 0;
}
function b2020(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(300);return 0;
}
function b2021(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(301);return 0;
}
function b2022(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(302);return 0;
}
function b2023(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(303);return 0;
}
function b2024(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(304);return 0;
}
function b2025(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(305);return 0;
}
function b2026(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(306);return 0;
}
function b2027(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(307);return 0;
}
function b2028(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(308);return 0;
}
function b2029(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(309);return 0;
}
function b2030(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(310);return 0;
}
function b2031(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(311);return 0;
}
function b2032(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(312);return 0;
}
function b2033(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(313);return 0;
}
function b2034(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(314);return 0;
}
function b2035(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(315);return 0;
}
function b2036(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(316);return 0;
}
function b2037(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(317);return 0;
}
function b2038(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(318);return 0;
}
function b2039(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(319);return 0;
}
function b2040(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(320);return 0;
}
function b2041(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(321);return 0;
}
function b2042(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(322);return 0;
}
function b2043(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(323);return 0;
}
function b2044(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(324);return 0;
}
function b2045(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(325);return 0;
}
function b2046(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(326);return 0;
}
function b2047(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(327);return 0;
}
function b2048(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(328);return 0;
}
function b2049(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(329);return 0;
}
function b2050(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(330);return 0;
}
function b2051(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(331);return 0;
}
function b2052(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(332);return 0;
}
function b2053(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(333);return 0;
}
function b2054(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(334);return 0;
}
function b2055(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(335);return 0;
}
function b2056(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(336);return 0;
}
function b2057(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(337);return 0;
}
function b2058(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(338);return 0;
}
function b2059(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(339);return 0;
}
function b2060(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(340);return 0;
}
function b2061(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(341);return 0;
}
function b2062(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(342);return 0;
}
function b2063(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(343);return 0;
}
function b2064(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(344);return 0;
}
function b2065(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(345);return 0;
}
function b2066(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(346);return 0;
}
function b2067(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(347);return 0;
}
function b2068(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(348);return 0;
}
function b2069(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(349);return 0;
}
function b2070(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(350);return 0;
}
function b2071(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(351);return 0;
}
function b2072(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(352);return 0;
}
function b2073(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(353);return 0;
}
function b2074(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(354);return 0;
}
function b2075(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(355);return 0;
}
function b2076(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(356);return 0;
}
function b2077(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(357);return 0;
}
function b2078(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(358);return 0;
}
function b2079(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(359);return 0;
}
function b2080(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(360);return 0;
}
function b2081(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(361);return 0;
}
function b2082(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(362);return 0;
}
function b2083(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(363);return 0;
}
function b2084(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(364);return 0;
}
function b2085(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(365);return 0;
}
function b2086(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(366);return 0;
}
function b2087(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(367);return 0;
}
function b2088(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(368);return 0;
}
function b2089(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(369);return 0;
}
function b2090(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(370);return 0;
}
function b2091(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(371);return 0;
}
function b2092(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(372);return 0;
}
function b2093(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(373);return 0;
}
function b2094(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(374);return 0;
}
function b2095(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(375);return 0;
}
function b2096(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(376);return 0;
}
function b2097(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(377);return 0;
}
function b2098(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(378);return 0;
}
function b2099(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(379);return 0;
}
function b2100(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(380);return 0;
}
function b2101(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(381);return 0;
}
function b2102(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(382);return 0;
}
function b2103(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(383);return 0;
}
function b2104(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(384);return 0;
}
function b2105(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(385);return 0;
}
function b2106(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(386);return 0;
}
function b2107(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(387);return 0;
}
function b2108(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(388);return 0;
}
function b2109(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(389);return 0;
}
function b2110(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(390);return 0;
}
function b2111(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(391);return 0;
}
function b2112(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(392);return 0;
}
function b2113(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(393);return 0;
}
function b2114(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(394);return 0;
}
function b2115(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(395);return 0;
}
function b2116(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(396);return 0;
}
function b2117(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(397);return 0;
}
function b2118(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(398);return 0;
}
function b2119(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(399);return 0;
}
function b2120(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(400);return 0;
}
function b2121(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(401);return 0;
}
function b2122(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(402);return 0;
}
function b2123(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(403);return 0;
}
function b2124(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(404);return 0;
}
function b2125(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(405);return 0;
}
function b2126(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(406);return 0;
}
function b2127(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(407);return 0;
}
function b2128(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(408);return 0;
}
function b2129(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(409);return 0;
}
function b2130(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(410);return 0;
}
function b2131(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(411);return 0;
}
function b2132(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(412);return 0;
}
function b2133(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(413);return 0;
}
function b2134(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(414);return 0;
}
function b2135(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(415);return 0;
}
function b2136(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(416);return 0;
}
function b2137(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(417);return 0;
}
function b2138(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(418);return 0;
}
function b2139(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(419);return 0;
}
function b2140(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(420);return 0;
}
function b2141(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(421);return 0;
}
function b2142(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(422);return 0;
}
function b2143(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(423);return 0;
}
function b2144(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(424);return 0;
}
function b2145(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(425);return 0;
}
function b2146(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(426);return 0;
}
function b2147(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(427);return 0;
}
function b2148(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(428);return 0;
}
function b2149(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(429);return 0;
}
function b2150(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(430);return 0;
}
function b2151(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(431);return 0;
}
function b2152(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(432);return 0;
}
function b2153(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(433);return 0;
}
function b2154(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(434);return 0;
}
function b2155(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(435);return 0;
}
function b2156(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(436);return 0;
}
function b2157(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(437);return 0;
}
function b2158(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(438);return 0;
}
function b2159(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(439);return 0;
}
function b2160(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(440);return 0;
}
function b2161(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(441);return 0;
}
function b2162(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(442);return 0;
}
function b2163(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(443);return 0;
}
function b2164(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(444);return 0;
}
function b2165(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(445);return 0;
}
function b2166(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(446);return 0;
}
function b2167(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(447);return 0;
}
function b2168(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(448);return 0;
}
function b2169(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(449);return 0;
}
function b2170(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(450);return 0;
}
function b2171(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(451);return 0;
}
function b2172(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(452);return 0;
}
function b2173(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(453);return 0;
}
function b2174(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(454);return 0;
}
function b2175(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(455);return 0;
}
function b2176(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(456);return 0;
}
function b2177(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(457);return 0;
}
function b2178(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(458);return 0;
}
function b2179(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(459);return 0;
}
function b2180(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(460);return 0;
}
function b2181(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(461);return 0;
}
function b2182(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(462);return 0;
}
function b2183(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(463);return 0;
}
function b2184(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(464);return 0;
}
function b2185(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(465);return 0;
}
function b2186(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(466);return 0;
}
function b2187(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(467);return 0;
}
function b2188(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(468);return 0;
}
function b2189(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(469);return 0;
}
function b2190(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(470);return 0;
}
function b2191(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(471);return 0;
}
function b2192(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(472);return 0;
}
function b2193(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(473);return 0;
}
function b2194(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(474);return 0;
}
function b2195(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(475);return 0;
}
function b2196(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(476);return 0;
}
function b2197(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(477);return 0;
}
function b2198(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(478);return 0;
}
function b2199(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(479);return 0;
}
function b2200(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(480);return 0;
}
function b2201(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(481);return 0;
}
function b2202(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(482);return 0;
}
function b2203(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(483);return 0;
}
function b2204(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(484);return 0;
}
function b2205(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(485);return 0;
}
function b2206(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(486);return 0;
}
function b2207(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(487);return 0;
}
function b2208(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(488);return 0;
}
function b2209(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(489);return 0;
}
function b2210(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(490);return 0;
}
function b2211(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(491);return 0;
}
function b2212(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(492);return 0;
}
function b2213(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(493);return 0;
}
function b2214(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(494);return 0;
}
function b2215(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(495);return 0;
}
function b2216(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(496);return 0;
}
function b2217(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(497);return 0;
}
function b2218(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(498);return 0;
}
function b2219(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(499);return 0;
}
function b2220(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(500);return 0;
}
function b2221(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(501);return 0;
}
function b2222(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(502);return 0;
}
function b2223(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(503);return 0;
}
function b2224(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(504);return 0;
}
function b2225(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(505);return 0;
}
function b2226(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(506);return 0;
}
function b2227(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(507);return 0;
}
function b2228(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(508);return 0;
}
function b2229(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(509);return 0;
}
function b2230(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(510);return 0;
}
function b2231(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(511);return 0;
}
function b2233() {
 ; nullFunc_v(0);
}
function b2234() {
 ; nullFunc_v(1);
}
function b2235() {
 ; nullFunc_v(2);
}
function b2236() {
 ; nullFunc_v(3);
}
function b2237() {
 ; nullFunc_v(4);
}
function b2238() {
 ; nullFunc_v(5);
}
function b2239() {
 ; nullFunc_v(6);
}
function b2240() {
 ; nullFunc_v(7);
}
function b2241() {
 ; nullFunc_v(8);
}
function b2242() {
 ; nullFunc_v(9);
}
function ___cxa_pure_virtual__wrapper() {
 ; ___cxa_pure_virtual();
}
function b2243() {
 ; nullFunc_v(11);
}
function b2244() {
 ; nullFunc_v(12);
}
function b2245() {
 ; nullFunc_v(13);
}
function b2246() {
 ; nullFunc_v(14);
}
function b2247() {
 ; nullFunc_v(15);
}
function b2248() {
 ; nullFunc_v(16);
}
function b2249() {
 ; nullFunc_v(17);
}
function b2250() {
 ; nullFunc_v(18);
}
function b2251() {
 ; nullFunc_v(19);
}
function b2252() {
 ; nullFunc_v(20);
}
function b2253() {
 ; nullFunc_v(21);
}
function b2254() {
 ; nullFunc_v(22);
}
function b2255() {
 ; nullFunc_v(23);
}
function b2256() {
 ; nullFunc_v(24);
}
function b2257() {
 ; nullFunc_v(25);
}
function b2258() {
 ; nullFunc_v(26);
}
function b2259() {
 ; nullFunc_v(27);
}
function b2260() {
 ; nullFunc_v(28);
}
function b2261() {
 ; nullFunc_v(29);
}
function b2262() {
 ; nullFunc_v(30);
}
function b2263() {
 ; nullFunc_v(31);
}
function b2264() {
 ; nullFunc_v(32);
}
function b2265() {
 ; nullFunc_v(33);
}
function b2266() {
 ; nullFunc_v(34);
}
function b2267() {
 ; nullFunc_v(35);
}
function b2268() {
 ; nullFunc_v(36);
}
function b2269() {
 ; nullFunc_v(37);
}
function b2270() {
 ; nullFunc_v(38);
}
function b2271() {
 ; nullFunc_v(39);
}
function b2272() {
 ; nullFunc_v(40);
}
function b2273() {
 ; nullFunc_v(41);
}
function b2274() {
 ; nullFunc_v(42);
}
function b2275() {
 ; nullFunc_v(43);
}
function b2276() {
 ; nullFunc_v(44);
}
function b2277() {
 ; nullFunc_v(45);
}
function b2278() {
 ; nullFunc_v(46);
}
function b2279() {
 ; nullFunc_v(47);
}
function b2280() {
 ; nullFunc_v(48);
}
function b2281() {
 ; nullFunc_v(49);
}
function b2282() {
 ; nullFunc_v(50);
}
function b2283() {
 ; nullFunc_v(51);
}
function b2284() {
 ; nullFunc_v(52);
}
function b2285() {
 ; nullFunc_v(53);
}
function b2286() {
 ; nullFunc_v(54);
}
function b2287() {
 ; nullFunc_v(55);
}
function b2288() {
 ; nullFunc_v(56);
}
function b2289() {
 ; nullFunc_v(57);
}
function b2290() {
 ; nullFunc_v(58);
}
function b2291() {
 ; nullFunc_v(59);
}
function b2292() {
 ; nullFunc_v(60);
}
function b2293() {
 ; nullFunc_v(61);
}
function b2294() {
 ; nullFunc_v(62);
}
function b2295() {
 ; nullFunc_v(63);
}
function b2296() {
 ; nullFunc_v(64);
}
function b2297() {
 ; nullFunc_v(65);
}
function b2298() {
 ; nullFunc_v(66);
}
function b2299() {
 ; nullFunc_v(67);
}
function b2300() {
 ; nullFunc_v(68);
}
function b2301() {
 ; nullFunc_v(69);
}
function b2302() {
 ; nullFunc_v(70);
}
function b2303() {
 ; nullFunc_v(71);
}
function b2304() {
 ; nullFunc_v(72);
}
function b2305() {
 ; nullFunc_v(73);
}
function b2306() {
 ; nullFunc_v(74);
}
function b2307() {
 ; nullFunc_v(75);
}
function b2308() {
 ; nullFunc_v(76);
}
function b2309() {
 ; nullFunc_v(77);
}
function b2310() {
 ; nullFunc_v(78);
}
function b2311() {
 ; nullFunc_v(79);
}
function b2312() {
 ; nullFunc_v(80);
}
function b2313() {
 ; nullFunc_v(81);
}
function b2314() {
 ; nullFunc_v(82);
}
function b2315() {
 ; nullFunc_v(83);
}
function b2316() {
 ; nullFunc_v(84);
}
function b2317() {
 ; nullFunc_v(85);
}
function b2318() {
 ; nullFunc_v(86);
}
function b2319() {
 ; nullFunc_v(87);
}
function b2320() {
 ; nullFunc_v(88);
}
function b2321() {
 ; nullFunc_v(89);
}
function b2322() {
 ; nullFunc_v(90);
}
function b2323() {
 ; nullFunc_v(91);
}
function b2324() {
 ; nullFunc_v(92);
}
function b2325() {
 ; nullFunc_v(93);
}
function b2326() {
 ; nullFunc_v(94);
}
function b2327() {
 ; nullFunc_v(95);
}
function b2328() {
 ; nullFunc_v(96);
}
function b2329() {
 ; nullFunc_v(97);
}
function b2330() {
 ; nullFunc_v(98);
}
function b2331() {
 ; nullFunc_v(99);
}
function b2332() {
 ; nullFunc_v(100);
}
function b2333() {
 ; nullFunc_v(101);
}
function b2334() {
 ; nullFunc_v(102);
}
function b2335() {
 ; nullFunc_v(103);
}
function b2336() {
 ; nullFunc_v(104);
}
function b2337() {
 ; nullFunc_v(105);
}
function b2338() {
 ; nullFunc_v(106);
}
function b2339() {
 ; nullFunc_v(107);
}
function b2340() {
 ; nullFunc_v(108);
}
function b2341() {
 ; nullFunc_v(109);
}
function b2342() {
 ; nullFunc_v(110);
}
function b2343() {
 ; nullFunc_v(111);
}
function b2344() {
 ; nullFunc_v(112);
}
function b2345() {
 ; nullFunc_v(113);
}
function b2346() {
 ; nullFunc_v(114);
}
function b2347() {
 ; nullFunc_v(115);
}
function b2348() {
 ; nullFunc_v(116);
}
function b2349() {
 ; nullFunc_v(117);
}
function b2350() {
 ; nullFunc_v(118);
}
function b2351() {
 ; nullFunc_v(119);
}
function b2352() {
 ; nullFunc_v(120);
}
function b2353() {
 ; nullFunc_v(121);
}
function b2354() {
 ; nullFunc_v(122);
}
function b2355() {
 ; nullFunc_v(123);
}
function b2356() {
 ; nullFunc_v(124);
}
function b2357() {
 ; nullFunc_v(125);
}
function b2358() {
 ; nullFunc_v(126);
}
function b2359() {
 ; nullFunc_v(127);
}
function b2360() {
 ; nullFunc_v(128);
}
function b2361() {
 ; nullFunc_v(129);
}
function b2362() {
 ; nullFunc_v(130);
}
function b2363() {
 ; nullFunc_v(131);
}
function b2364() {
 ; nullFunc_v(132);
}
function b2365() {
 ; nullFunc_v(133);
}
function b2366() {
 ; nullFunc_v(134);
}
function b2367() {
 ; nullFunc_v(135);
}
function b2368() {
 ; nullFunc_v(136);
}
function b2369() {
 ; nullFunc_v(137);
}
function b2370() {
 ; nullFunc_v(138);
}
function b2371() {
 ; nullFunc_v(139);
}
function b2372() {
 ; nullFunc_v(140);
}
function b2373() {
 ; nullFunc_v(141);
}
function b2374() {
 ; nullFunc_v(142);
}
function b2375() {
 ; nullFunc_v(143);
}
function b2376() {
 ; nullFunc_v(144);
}
function b2377() {
 ; nullFunc_v(145);
}
function b2378() {
 ; nullFunc_v(146);
}
function b2379() {
 ; nullFunc_v(147);
}
function b2380() {
 ; nullFunc_v(148);
}
function b2381() {
 ; nullFunc_v(149);
}
function b2382() {
 ; nullFunc_v(150);
}
function b2383() {
 ; nullFunc_v(151);
}
function b2384() {
 ; nullFunc_v(152);
}
function b2385() {
 ; nullFunc_v(153);
}
function b2386() {
 ; nullFunc_v(154);
}
function b2387() {
 ; nullFunc_v(155);
}
function b2388() {
 ; nullFunc_v(156);
}
function b2389() {
 ; nullFunc_v(157);
}
function b2390() {
 ; nullFunc_v(158);
}
function b2391() {
 ; nullFunc_v(159);
}
function b2392() {
 ; nullFunc_v(160);
}
function b2393() {
 ; nullFunc_v(161);
}
function b2394() {
 ; nullFunc_v(162);
}
function b2395() {
 ; nullFunc_v(163);
}
function b2396() {
 ; nullFunc_v(164);
}
function b2397() {
 ; nullFunc_v(165);
}
function b2398() {
 ; nullFunc_v(166);
}
function b2399() {
 ; nullFunc_v(167);
}
function b2400() {
 ; nullFunc_v(168);
}
function b2401() {
 ; nullFunc_v(169);
}
function b2402() {
 ; nullFunc_v(170);
}
function b2403() {
 ; nullFunc_v(171);
}
function b2404() {
 ; nullFunc_v(172);
}
function b2405() {
 ; nullFunc_v(173);
}
function b2406() {
 ; nullFunc_v(174);
}
function b2407() {
 ; nullFunc_v(175);
}
function b2408() {
 ; nullFunc_v(176);
}
function b2409() {
 ; nullFunc_v(177);
}
function b2410() {
 ; nullFunc_v(178);
}
function b2411() {
 ; nullFunc_v(179);
}
function b2412() {
 ; nullFunc_v(180);
}
function b2413() {
 ; nullFunc_v(181);
}
function b2414() {
 ; nullFunc_v(182);
}
function b2415() {
 ; nullFunc_v(183);
}
function b2416() {
 ; nullFunc_v(184);
}
function b2417() {
 ; nullFunc_v(185);
}
function b2418() {
 ; nullFunc_v(186);
}
function b2419() {
 ; nullFunc_v(187);
}
function b2420() {
 ; nullFunc_v(188);
}
function b2421() {
 ; nullFunc_v(189);
}
function b2422() {
 ; nullFunc_v(190);
}
function b2423() {
 ; nullFunc_v(191);
}
function b2424() {
 ; nullFunc_v(192);
}
function b2425() {
 ; nullFunc_v(193);
}
function b2426() {
 ; nullFunc_v(194);
}
function b2427() {
 ; nullFunc_v(195);
}
function b2428() {
 ; nullFunc_v(196);
}
function b2429() {
 ; nullFunc_v(197);
}
function b2430() {
 ; nullFunc_v(198);
}
function b2431() {
 ; nullFunc_v(199);
}
function b2432() {
 ; nullFunc_v(200);
}
function b2433() {
 ; nullFunc_v(201);
}
function b2434() {
 ; nullFunc_v(202);
}
function b2435() {
 ; nullFunc_v(203);
}
function b2436() {
 ; nullFunc_v(204);
}
function b2437() {
 ; nullFunc_v(205);
}
function b2438() {
 ; nullFunc_v(206);
}
function b2439() {
 ; nullFunc_v(207);
}
function b2440() {
 ; nullFunc_v(208);
}
function b2441() {
 ; nullFunc_v(209);
}
function b2442() {
 ; nullFunc_v(210);
}
function b2443() {
 ; nullFunc_v(211);
}
function b2444() {
 ; nullFunc_v(213);
}
function b2445() {
 ; nullFunc_v(214);
}
function b2446() {
 ; nullFunc_v(215);
}
function b2447() {
 ; nullFunc_v(216);
}
function b2448() {
 ; nullFunc_v(217);
}
function b2449() {
 ; nullFunc_v(218);
}
function b2450() {
 ; nullFunc_v(219);
}
function b2451() {
 ; nullFunc_v(220);
}
function b2452() {
 ; nullFunc_v(221);
}
function b2453() {
 ; nullFunc_v(222);
}
function b2454() {
 ; nullFunc_v(223);
}
function b2455() {
 ; nullFunc_v(224);
}
function b2456() {
 ; nullFunc_v(225);
}
function b2457() {
 ; nullFunc_v(226);
}
function b2458() {
 ; nullFunc_v(227);
}
function b2459() {
 ; nullFunc_v(228);
}
function b2460() {
 ; nullFunc_v(229);
}
function b2461() {
 ; nullFunc_v(230);
}
function b2462() {
 ; nullFunc_v(231);
}
function b2463() {
 ; nullFunc_v(268);
}
function b2464() {
 ; nullFunc_v(269);
}
function b2465() {
 ; nullFunc_v(270);
}
function b2466() {
 ; nullFunc_v(271);
}
function b2467() {
 ; nullFunc_v(272);
}
function b2468() {
 ; nullFunc_v(273);
}
function b2469() {
 ; nullFunc_v(274);
}
function b2470() {
 ; nullFunc_v(275);
}
function b2471() {
 ; nullFunc_v(276);
}
function b2472() {
 ; nullFunc_v(277);
}
function b2473() {
 ; nullFunc_v(278);
}
function b2474() {
 ; nullFunc_v(279);
}
function b2475() {
 ; nullFunc_v(280);
}
function b2476() {
 ; nullFunc_v(281);
}
function b2477() {
 ; nullFunc_v(282);
}
function b2478() {
 ; nullFunc_v(283);
}
function b2479() {
 ; nullFunc_v(284);
}
function b2480() {
 ; nullFunc_v(285);
}
function b2481() {
 ; nullFunc_v(286);
}
function b2482() {
 ; nullFunc_v(287);
}
function b2483() {
 ; nullFunc_v(288);
}
function b2484() {
 ; nullFunc_v(289);
}
function b2485() {
 ; nullFunc_v(291);
}
function b2486() {
 ; nullFunc_v(292);
}
function b2487() {
 ; nullFunc_v(293);
}
function b2488() {
 ; nullFunc_v(294);
}
function b2489() {
 ; nullFunc_v(295);
}
function b2490() {
 ; nullFunc_v(296);
}
function b2491() {
 ; nullFunc_v(297);
}
function b2492() {
 ; nullFunc_v(298);
}
function b2493() {
 ; nullFunc_v(299);
}
function b2494() {
 ; nullFunc_v(300);
}
function b2495() {
 ; nullFunc_v(301);
}
function b2496() {
 ; nullFunc_v(302);
}
function b2497() {
 ; nullFunc_v(303);
}
function b2498() {
 ; nullFunc_v(304);
}
function b2499() {
 ; nullFunc_v(305);
}
function b2500() {
 ; nullFunc_v(306);
}
function b2501() {
 ; nullFunc_v(307);
}
function b2502() {
 ; nullFunc_v(308);
}
function b2503() {
 ; nullFunc_v(309);
}
function b2504() {
 ; nullFunc_v(310);
}
function b2505() {
 ; nullFunc_v(311);
}
function b2506() {
 ; nullFunc_v(312);
}
function b2507() {
 ; nullFunc_v(313);
}
function b2508() {
 ; nullFunc_v(314);
}
function b2509() {
 ; nullFunc_v(315);
}
function b2510() {
 ; nullFunc_v(316);
}
function b2511() {
 ; nullFunc_v(317);
}
function b2512() {
 ; nullFunc_v(318);
}
function b2513() {
 ; nullFunc_v(319);
}
function b2514() {
 ; nullFunc_v(320);
}
function b2515() {
 ; nullFunc_v(321);
}
function b2516() {
 ; nullFunc_v(322);
}
function b2517() {
 ; nullFunc_v(323);
}
function b2518() {
 ; nullFunc_v(324);
}
function b2519() {
 ; nullFunc_v(325);
}
function b2520() {
 ; nullFunc_v(326);
}
function b2521() {
 ; nullFunc_v(327);
}
function b2522() {
 ; nullFunc_v(328);
}
function b2523() {
 ; nullFunc_v(329);
}
function b2524() {
 ; nullFunc_v(330);
}
function b2525() {
 ; nullFunc_v(331);
}
function b2526() {
 ; nullFunc_v(332);
}
function b2527() {
 ; nullFunc_v(333);
}
function b2528() {
 ; nullFunc_v(334);
}
function b2529() {
 ; nullFunc_v(335);
}
function b2530() {
 ; nullFunc_v(336);
}
function b2531() {
 ; nullFunc_v(337);
}
function b2532() {
 ; nullFunc_v(338);
}
function b2533() {
 ; nullFunc_v(339);
}
function b2534() {
 ; nullFunc_v(340);
}
function b2535() {
 ; nullFunc_v(341);
}
function b2536() {
 ; nullFunc_v(342);
}
function b2537() {
 ; nullFunc_v(343);
}
function b2538() {
 ; nullFunc_v(344);
}
function b2539() {
 ; nullFunc_v(345);
}
function b2540() {
 ; nullFunc_v(346);
}
function b2541() {
 ; nullFunc_v(347);
}
function b2542() {
 ; nullFunc_v(348);
}
function b2543() {
 ; nullFunc_v(349);
}
function b2544() {
 ; nullFunc_v(350);
}
function b2545() {
 ; nullFunc_v(351);
}
function b2546() {
 ; nullFunc_v(352);
}
function b2547() {
 ; nullFunc_v(353);
}
function b2548() {
 ; nullFunc_v(354);
}
function b2549() {
 ; nullFunc_v(355);
}
function b2550() {
 ; nullFunc_v(356);
}
function b2551() {
 ; nullFunc_v(357);
}
function b2552() {
 ; nullFunc_v(358);
}
function b2553() {
 ; nullFunc_v(359);
}
function b2554() {
 ; nullFunc_v(360);
}
function b2555() {
 ; nullFunc_v(361);
}
function b2556() {
 ; nullFunc_v(362);
}
function b2557() {
 ; nullFunc_v(363);
}
function b2558() {
 ; nullFunc_v(364);
}
function b2559() {
 ; nullFunc_v(365);
}
function b2560() {
 ; nullFunc_v(366);
}
function b2561() {
 ; nullFunc_v(367);
}
function b2562() {
 ; nullFunc_v(368);
}
function b2563() {
 ; nullFunc_v(369);
}
function b2564() {
 ; nullFunc_v(370);
}
function b2565() {
 ; nullFunc_v(371);
}
function b2566() {
 ; nullFunc_v(372);
}
function b2567() {
 ; nullFunc_v(373);
}
function b2568() {
 ; nullFunc_v(374);
}
function b2569() {
 ; nullFunc_v(375);
}
function b2570() {
 ; nullFunc_v(376);
}
function b2571() {
 ; nullFunc_v(377);
}
function b2572() {
 ; nullFunc_v(378);
}
function b2573() {
 ; nullFunc_v(379);
}
function b2574() {
 ; nullFunc_v(380);
}
function b2575() {
 ; nullFunc_v(381);
}
function b2576() {
 ; nullFunc_v(382);
}
function b2577() {
 ; nullFunc_v(383);
}
function b2578() {
 ; nullFunc_v(384);
}
function b2579() {
 ; nullFunc_v(385);
}
function b2580() {
 ; nullFunc_v(386);
}
function b2581() {
 ; nullFunc_v(387);
}
function b2582() {
 ; nullFunc_v(388);
}
function b2583() {
 ; nullFunc_v(389);
}
function b2584() {
 ; nullFunc_v(390);
}
function b2585() {
 ; nullFunc_v(391);
}
function b2586() {
 ; nullFunc_v(392);
}
function b2587() {
 ; nullFunc_v(393);
}
function b2588() {
 ; nullFunc_v(394);
}
function b2589() {
 ; nullFunc_v(395);
}
function b2590() {
 ; nullFunc_v(396);
}
function b2591() {
 ; nullFunc_v(397);
}
function b2592() {
 ; nullFunc_v(398);
}
function b2593() {
 ; nullFunc_v(399);
}
function b2594() {
 ; nullFunc_v(400);
}
function b2595() {
 ; nullFunc_v(401);
}
function b2596() {
 ; nullFunc_v(402);
}
function b2597() {
 ; nullFunc_v(403);
}
function b2598() {
 ; nullFunc_v(404);
}
function b2599() {
 ; nullFunc_v(405);
}
function b2600() {
 ; nullFunc_v(406);
}
function b2601() {
 ; nullFunc_v(407);
}
function b2602() {
 ; nullFunc_v(408);
}
function b2603() {
 ; nullFunc_v(409);
}
function b2604() {
 ; nullFunc_v(410);
}
function b2605() {
 ; nullFunc_v(411);
}
function b2606() {
 ; nullFunc_v(412);
}
function b2607() {
 ; nullFunc_v(413);
}
function b2608() {
 ; nullFunc_v(414);
}
function b2609() {
 ; nullFunc_v(415);
}
function b2610() {
 ; nullFunc_v(416);
}
function b2611() {
 ; nullFunc_v(417);
}
function b2612() {
 ; nullFunc_v(418);
}
function b2613() {
 ; nullFunc_v(419);
}
function b2614() {
 ; nullFunc_v(420);
}
function b2615() {
 ; nullFunc_v(421);
}
function b2616() {
 ; nullFunc_v(422);
}
function b2617() {
 ; nullFunc_v(423);
}
function b2618() {
 ; nullFunc_v(424);
}
function b2619() {
 ; nullFunc_v(425);
}
function b2620() {
 ; nullFunc_v(426);
}
function b2621() {
 ; nullFunc_v(427);
}
function b2622() {
 ; nullFunc_v(428);
}
function b2623() {
 ; nullFunc_v(429);
}
function b2624() {
 ; nullFunc_v(430);
}
function b2625() {
 ; nullFunc_v(431);
}
function b2626() {
 ; nullFunc_v(432);
}
function b2627() {
 ; nullFunc_v(433);
}
function b2628() {
 ; nullFunc_v(434);
}
function b2629() {
 ; nullFunc_v(435);
}
function b2630() {
 ; nullFunc_v(436);
}
function b2631() {
 ; nullFunc_v(437);
}
function b2632() {
 ; nullFunc_v(438);
}
function b2633() {
 ; nullFunc_v(439);
}
function b2634() {
 ; nullFunc_v(440);
}
function b2635() {
 ; nullFunc_v(441);
}
function b2636() {
 ; nullFunc_v(442);
}
function b2637() {
 ; nullFunc_v(443);
}
function b2638() {
 ; nullFunc_v(444);
}
function b2639() {
 ; nullFunc_v(445);
}
function b2640() {
 ; nullFunc_v(446);
}
function b2641() {
 ; nullFunc_v(447);
}
function b2642() {
 ; nullFunc_v(448);
}
function b2643() {
 ; nullFunc_v(449);
}
function b2644() {
 ; nullFunc_v(450);
}
function b2645() {
 ; nullFunc_v(451);
}
function b2646() {
 ; nullFunc_v(452);
}
function b2647() {
 ; nullFunc_v(453);
}
function b2648() {
 ; nullFunc_v(454);
}
function b2649() {
 ; nullFunc_v(455);
}
function b2650() {
 ; nullFunc_v(456);
}
function b2651() {
 ; nullFunc_v(457);
}
function b2652() {
 ; nullFunc_v(458);
}
function b2653() {
 ; nullFunc_v(459);
}
function b2654() {
 ; nullFunc_v(460);
}
function b2655() {
 ; nullFunc_v(461);
}
function b2656() {
 ; nullFunc_v(462);
}
function b2657() {
 ; nullFunc_v(463);
}
function b2658() {
 ; nullFunc_v(464);
}
function b2659() {
 ; nullFunc_v(465);
}
function b2660() {
 ; nullFunc_v(466);
}
function b2661() {
 ; nullFunc_v(467);
}
function b2662() {
 ; nullFunc_v(468);
}
function b2663() {
 ; nullFunc_v(469);
}
function b2664() {
 ; nullFunc_v(470);
}
function b2665() {
 ; nullFunc_v(471);
}
function b2666() {
 ; nullFunc_v(472);
}
function b2667() {
 ; nullFunc_v(473);
}
function b2668() {
 ; nullFunc_v(474);
}
function b2669() {
 ; nullFunc_v(475);
}
function b2670() {
 ; nullFunc_v(476);
}
function b2671() {
 ; nullFunc_v(477);
}
function b2672() {
 ; nullFunc_v(478);
}
function b2673() {
 ; nullFunc_v(479);
}
function b2674() {
 ; nullFunc_v(480);
}
function b2675() {
 ; nullFunc_v(481);
}
function b2676() {
 ; nullFunc_v(482);
}
function b2677() {
 ; nullFunc_v(483);
}
function b2678() {
 ; nullFunc_v(484);
}
function b2679() {
 ; nullFunc_v(485);
}
function b2680() {
 ; nullFunc_v(486);
}
function b2681() {
 ; nullFunc_v(487);
}
function b2682() {
 ; nullFunc_v(488);
}
function b2683() {
 ; nullFunc_v(489);
}
function b2684() {
 ; nullFunc_v(490);
}
function b2685() {
 ; nullFunc_v(491);
}
function b2686() {
 ; nullFunc_v(492);
}
function b2687() {
 ; nullFunc_v(493);
}
function b2688() {
 ; nullFunc_v(494);
}
function b2689() {
 ; nullFunc_v(495);
}
function b2690() {
 ; nullFunc_v(496);
}
function b2691() {
 ; nullFunc_v(497);
}
function b2692() {
 ; nullFunc_v(498);
}
function b2693() {
 ; nullFunc_v(499);
}
function b2694() {
 ; nullFunc_v(500);
}
function b2695() {
 ; nullFunc_v(501);
}
function b2696() {
 ; nullFunc_v(502);
}
function b2697() {
 ; nullFunc_v(503);
}
function b2698() {
 ; nullFunc_v(504);
}
function b2699() {
 ; nullFunc_v(505);
}
function b2700() {
 ; nullFunc_v(506);
}
function b2701() {
 ; nullFunc_v(507);
}
function b2702() {
 ; nullFunc_v(508);
}
function b2703() {
 ; nullFunc_v(509);
}
function b2704() {
 ; nullFunc_v(510);
}
function b2705() {
 ; nullFunc_v(511);
}
function b2707(p0) {
 p0 = p0|0; nullFunc_vi(0);
}
function b2708(p0) {
 p0 = p0|0; nullFunc_vi(3);
}
function b2709(p0) {
 p0 = p0|0; nullFunc_vi(6);
}
function b2710(p0) {
 p0 = p0|0; nullFunc_vi(10);
}
function b2711(p0) {
 p0 = p0|0; nullFunc_vi(13);
}
function b2712(p0) {
 p0 = p0|0; nullFunc_vi(14);
}
function b2713(p0) {
 p0 = p0|0; nullFunc_vi(17);
}
function b2714(p0) {
 p0 = p0|0; nullFunc_vi(18);
}
function b2715(p0) {
 p0 = p0|0; nullFunc_vi(19);
}
function b2716(p0) {
 p0 = p0|0; nullFunc_vi(22);
}
function b2717(p0) {
 p0 = p0|0; nullFunc_vi(25);
}
function b2718(p0) {
 p0 = p0|0; nullFunc_vi(29);
}
function b2719(p0) {
 p0 = p0|0; nullFunc_vi(30);
}
function b2720(p0) {
 p0 = p0|0; nullFunc_vi(33);
}
function b2721(p0) {
 p0 = p0|0; nullFunc_vi(34);
}
function b2722(p0) {
 p0 = p0|0; nullFunc_vi(35);
}
function b2723(p0) {
 p0 = p0|0; nullFunc_vi(38);
}
function b2724(p0) {
 p0 = p0|0; nullFunc_vi(39);
}
function b2725(p0) {
 p0 = p0|0; nullFunc_vi(42);
}
function b2726(p0) {
 p0 = p0|0; nullFunc_vi(43);
}
function b2727(p0) {
 p0 = p0|0; nullFunc_vi(44);
}
function b2728(p0) {
 p0 = p0|0; nullFunc_vi(47);
}
function b2729(p0) {
 p0 = p0|0; nullFunc_vi(48);
}
function b2730(p0) {
 p0 = p0|0; nullFunc_vi(51);
}
function b2731(p0) {
 p0 = p0|0; nullFunc_vi(52);
}
function b2732(p0) {
 p0 = p0|0; nullFunc_vi(53);
}
function b2733(p0) {
 p0 = p0|0; nullFunc_vi(56);
}
function b2734(p0) {
 p0 = p0|0; nullFunc_vi(57);
}
function b2735(p0) {
 p0 = p0|0; nullFunc_vi(60);
}
function b2736(p0) {
 p0 = p0|0; nullFunc_vi(61);
}
function b2737(p0) {
 p0 = p0|0; nullFunc_vi(62);
}
function b2738(p0) {
 p0 = p0|0; nullFunc_vi(65);
}
function b2739(p0) {
 p0 = p0|0; nullFunc_vi(66);
}
function b2740(p0) {
 p0 = p0|0; nullFunc_vi(69);
}
function b2741(p0) {
 p0 = p0|0; nullFunc_vi(70);
}
function b2742(p0) {
 p0 = p0|0; nullFunc_vi(71);
}
function b2743(p0) {
 p0 = p0|0; nullFunc_vi(74);
}
function b2744(p0) {
 p0 = p0|0; nullFunc_vi(75);
}
function b2745(p0) {
 p0 = p0|0; nullFunc_vi(78);
}
function b2746(p0) {
 p0 = p0|0; nullFunc_vi(79);
}
function b2747(p0) {
 p0 = p0|0; nullFunc_vi(80);
}
function b2748(p0) {
 p0 = p0|0; nullFunc_vi(83);
}
function b2749(p0) {
 p0 = p0|0; nullFunc_vi(86);
}
function b2750(p0) {
 p0 = p0|0; nullFunc_vi(90);
}
function b2751(p0) {
 p0 = p0|0; nullFunc_vi(91);
}
function b2752(p0) {
 p0 = p0|0; nullFunc_vi(94);
}
function b2753(p0) {
 p0 = p0|0; nullFunc_vi(95);
}
function b2754(p0) {
 p0 = p0|0; nullFunc_vi(96);
}
function b2755(p0) {
 p0 = p0|0; nullFunc_vi(99);
}
function b2756(p0) {
 p0 = p0|0; nullFunc_vi(102);
}
function b2757(p0) {
 p0 = p0|0; nullFunc_vi(106);
}
function b2758(p0) {
 p0 = p0|0; nullFunc_vi(107);
}
function b2759(p0) {
 p0 = p0|0; nullFunc_vi(110);
}
function b2760(p0) {
 p0 = p0|0; nullFunc_vi(111);
}
function b2761(p0) {
 p0 = p0|0; nullFunc_vi(112);
}
function b2762(p0) {
 p0 = p0|0; nullFunc_vi(115);
}
function b2763(p0) {
 p0 = p0|0; nullFunc_vi(116);
}
function b2764(p0) {
 p0 = p0|0; nullFunc_vi(119);
}
function b2765(p0) {
 p0 = p0|0; nullFunc_vi(120);
}
function b2766(p0) {
 p0 = p0|0; nullFunc_vi(121);
}
function b2767(p0) {
 p0 = p0|0; nullFunc_vi(124);
}
function b2768(p0) {
 p0 = p0|0; nullFunc_vi(125);
}
function b2769(p0) {
 p0 = p0|0; nullFunc_vi(128);
}
function b2770(p0) {
 p0 = p0|0; nullFunc_vi(129);
}
function b2771(p0) {
 p0 = p0|0; nullFunc_vi(130);
}
function b2772(p0) {
 p0 = p0|0; nullFunc_vi(133);
}
function b2773(p0) {
 p0 = p0|0; nullFunc_vi(134);
}
function b2774(p0) {
 p0 = p0|0; nullFunc_vi(137);
}
function b2775(p0) {
 p0 = p0|0; nullFunc_vi(138);
}
function b2776(p0) {
 p0 = p0|0; nullFunc_vi(139);
}
function b2777(p0) {
 p0 = p0|0; nullFunc_vi(142);
}
function b2778(p0) {
 p0 = p0|0; nullFunc_vi(143);
}
function b2779(p0) {
 p0 = p0|0; nullFunc_vi(146);
}
function b2780(p0) {
 p0 = p0|0; nullFunc_vi(147);
}
function b2781(p0) {
 p0 = p0|0; nullFunc_vi(148);
}
function b2782(p0) {
 p0 = p0|0; nullFunc_vi(151);
}
function b2783(p0) {
 p0 = p0|0; nullFunc_vi(152);
}
function b2784(p0) {
 p0 = p0|0; nullFunc_vi(155);
}
function b2785(p0) {
 p0 = p0|0; nullFunc_vi(156);
}
function b2786(p0) {
 p0 = p0|0; nullFunc_vi(157);
}
function b2787(p0) {
 p0 = p0|0; nullFunc_vi(164);
}
function b2788(p0) {
 p0 = p0|0; nullFunc_vi(165);
}
function b2789(p0) {
 p0 = p0|0; nullFunc_vi(172);
}
function b2790(p0) {
 p0 = p0|0; nullFunc_vi(173);
}
function b2791(p0) {
 p0 = p0|0; nullFunc_vi(180);
}
function b2792(p0) {
 p0 = p0|0; nullFunc_vi(181);
}
function b2793(p0) {
 p0 = p0|0; nullFunc_vi(189);
}
function b2794(p0) {
 p0 = p0|0; nullFunc_vi(190);
}
function b2795(p0) {
 p0 = p0|0; nullFunc_vi(194);
}
function b2796(p0) {
 p0 = p0|0; nullFunc_vi(195);
}
function b2797(p0) {
 p0 = p0|0; nullFunc_vi(198);
}
function b2798(p0) {
 p0 = p0|0; nullFunc_vi(201);
}
function b2799(p0) {
 p0 = p0|0; nullFunc_vi(202);
}
function b2800(p0) {
 p0 = p0|0; nullFunc_vi(203);
}
function b2801(p0) {
 p0 = p0|0; nullFunc_vi(204);
}
function b2802(p0) {
 p0 = p0|0; nullFunc_vi(205);
}
function b2803(p0) {
 p0 = p0|0; nullFunc_vi(206);
}
function b2804(p0) {
 p0 = p0|0; nullFunc_vi(207);
}
function b2805(p0) {
 p0 = p0|0; nullFunc_vi(208);
}
function b2806(p0) {
 p0 = p0|0; nullFunc_vi(211);
}
function b2807(p0) {
 p0 = p0|0; nullFunc_vi(212);
}
function b2808(p0) {
 p0 = p0|0; nullFunc_vi(217);
}
function b2809(p0) {
 p0 = p0|0; nullFunc_vi(218);
}
function b2810(p0) {
 p0 = p0|0; nullFunc_vi(219);
}
function b2811(p0) {
 p0 = p0|0; nullFunc_vi(220);
}
function b2812(p0) {
 p0 = p0|0; nullFunc_vi(222);
}
function b2813(p0) {
 p0 = p0|0; nullFunc_vi(223);
}
function b2814(p0) {
 p0 = p0|0; nullFunc_vi(224);
}
function b2815(p0) {
 p0 = p0|0; nullFunc_vi(227);
}
function b2816(p0) {
 p0 = p0|0; nullFunc_vi(230);
}
function b2817(p0) {
 p0 = p0|0; nullFunc_vi(232);
}
function b2818(p0) {
 p0 = p0|0; nullFunc_vi(233);
}
function b2819(p0) {
 p0 = p0|0; nullFunc_vi(234);
}
function b2820(p0) {
 p0 = p0|0; nullFunc_vi(235);
}
function b2821(p0) {
 p0 = p0|0; nullFunc_vi(236);
}
function b2822(p0) {
 p0 = p0|0; nullFunc_vi(237);
}
function b2823(p0) {
 p0 = p0|0; nullFunc_vi(238);
}
function b2824(p0) {
 p0 = p0|0; nullFunc_vi(239);
}
function b2825(p0) {
 p0 = p0|0; nullFunc_vi(240);
}
function b2826(p0) {
 p0 = p0|0; nullFunc_vi(241);
}
function b2827(p0) {
 p0 = p0|0; nullFunc_vi(242);
}
function b2828(p0) {
 p0 = p0|0; nullFunc_vi(243);
}
function b2829(p0) {
 p0 = p0|0; nullFunc_vi(244);
}
function b2830(p0) {
 p0 = p0|0; nullFunc_vi(245);
}
function b2831(p0) {
 p0 = p0|0; nullFunc_vi(246);
}
function b2832(p0) {
 p0 = p0|0; nullFunc_vi(247);
}
function b2833(p0) {
 p0 = p0|0; nullFunc_vi(248);
}
function b2834(p0) {
 p0 = p0|0; nullFunc_vi(249);
}
function b2835(p0) {
 p0 = p0|0; nullFunc_vi(250);
}
function b2836(p0) {
 p0 = p0|0; nullFunc_vi(251);
}
function b2837(p0) {
 p0 = p0|0; nullFunc_vi(252);
}
function b2838(p0) {
 p0 = p0|0; nullFunc_vi(253);
}
function b2839(p0) {
 p0 = p0|0; nullFunc_vi(254);
}
function b2840(p0) {
 p0 = p0|0; nullFunc_vi(255);
}
function b2841(p0) {
 p0 = p0|0; nullFunc_vi(256);
}
function b2842(p0) {
 p0 = p0|0; nullFunc_vi(257);
}
function b2843(p0) {
 p0 = p0|0; nullFunc_vi(258);
}
function b2844(p0) {
 p0 = p0|0; nullFunc_vi(259);
}
function b2845(p0) {
 p0 = p0|0; nullFunc_vi(260);
}
function b2846(p0) {
 p0 = p0|0; nullFunc_vi(261);
}
function b2847(p0) {
 p0 = p0|0; nullFunc_vi(262);
}
function b2848(p0) {
 p0 = p0|0; nullFunc_vi(263);
}
function b2849(p0) {
 p0 = p0|0; nullFunc_vi(264);
}
function b2850(p0) {
 p0 = p0|0; nullFunc_vi(265);
}
function b2851(p0) {
 p0 = p0|0; nullFunc_vi(266);
}
function b2852(p0) {
 p0 = p0|0; nullFunc_vi(267);
}
function b2853(p0) {
 p0 = p0|0; nullFunc_vi(269);
}
function b2854(p0) {
 p0 = p0|0; nullFunc_vi(270);
}
function b2855(p0) {
 p0 = p0|0; nullFunc_vi(271);
}
function b2856(p0) {
 p0 = p0|0; nullFunc_vi(272);
}
function b2857(p0) {
 p0 = p0|0; nullFunc_vi(273);
}
function b2858(p0) {
 p0 = p0|0; nullFunc_vi(274);
}
function b2859(p0) {
 p0 = p0|0; nullFunc_vi(275);
}
function b2860(p0) {
 p0 = p0|0; nullFunc_vi(276);
}
function b2861(p0) {
 p0 = p0|0; nullFunc_vi(278);
}
function b2862(p0) {
 p0 = p0|0; nullFunc_vi(279);
}
function b2863(p0) {
 p0 = p0|0; nullFunc_vi(280);
}
function b2864(p0) {
 p0 = p0|0; nullFunc_vi(281);
}
function b2865(p0) {
 p0 = p0|0; nullFunc_vi(282);
}
function b2866(p0) {
 p0 = p0|0; nullFunc_vi(283);
}
function b2867(p0) {
 p0 = p0|0; nullFunc_vi(284);
}
function b2868(p0) {
 p0 = p0|0; nullFunc_vi(285);
}
function b2869(p0) {
 p0 = p0|0; nullFunc_vi(286);
}
function b2870(p0) {
 p0 = p0|0; nullFunc_vi(287);
}
function b2871(p0) {
 p0 = p0|0; nullFunc_vi(288);
}
function b2872(p0) {
 p0 = p0|0; nullFunc_vi(289);
}
function b2873(p0) {
 p0 = p0|0; nullFunc_vi(290);
}
function b2874(p0) {
 p0 = p0|0; nullFunc_vi(292);
}
function b2875(p0) {
 p0 = p0|0; nullFunc_vi(293);
}
function b2876(p0) {
 p0 = p0|0; nullFunc_vi(294);
}
function b2877(p0) {
 p0 = p0|0; nullFunc_vi(295);
}
function b2878(p0) {
 p0 = p0|0; nullFunc_vi(296);
}
function b2879(p0) {
 p0 = p0|0; nullFunc_vi(297);
}
function b2880(p0) {
 p0 = p0|0; nullFunc_vi(298);
}
function b2881(p0) {
 p0 = p0|0; nullFunc_vi(299);
}
function b2882(p0) {
 p0 = p0|0; nullFunc_vi(300);
}
function b2883(p0) {
 p0 = p0|0; nullFunc_vi(301);
}
function b2884(p0) {
 p0 = p0|0; nullFunc_vi(302);
}
function b2885(p0) {
 p0 = p0|0; nullFunc_vi(303);
}
function b2886(p0) {
 p0 = p0|0; nullFunc_vi(304);
}
function b2887(p0) {
 p0 = p0|0; nullFunc_vi(305);
}
function b2888(p0) {
 p0 = p0|0; nullFunc_vi(306);
}
function b2889(p0) {
 p0 = p0|0; nullFunc_vi(307);
}
function b2890(p0) {
 p0 = p0|0; nullFunc_vi(308);
}
function b2891(p0) {
 p0 = p0|0; nullFunc_vi(309);
}
function b2892(p0) {
 p0 = p0|0; nullFunc_vi(310);
}
function b2893(p0) {
 p0 = p0|0; nullFunc_vi(311);
}
function b2894(p0) {
 p0 = p0|0; nullFunc_vi(312);
}
function b2895(p0) {
 p0 = p0|0; nullFunc_vi(313);
}
function b2896(p0) {
 p0 = p0|0; nullFunc_vi(314);
}
function b2897(p0) {
 p0 = p0|0; nullFunc_vi(315);
}
function b2898(p0) {
 p0 = p0|0; nullFunc_vi(316);
}
function b2899(p0) {
 p0 = p0|0; nullFunc_vi(317);
}
function b2900(p0) {
 p0 = p0|0; nullFunc_vi(318);
}
function b2901(p0) {
 p0 = p0|0; nullFunc_vi(319);
}
function b2902(p0) {
 p0 = p0|0; nullFunc_vi(320);
}
function b2903(p0) {
 p0 = p0|0; nullFunc_vi(321);
}
function b2904(p0) {
 p0 = p0|0; nullFunc_vi(322);
}
function b2905(p0) {
 p0 = p0|0; nullFunc_vi(323);
}
function b2906(p0) {
 p0 = p0|0; nullFunc_vi(324);
}
function b2907(p0) {
 p0 = p0|0; nullFunc_vi(325);
}
function b2908(p0) {
 p0 = p0|0; nullFunc_vi(326);
}
function b2909(p0) {
 p0 = p0|0; nullFunc_vi(327);
}
function b2910(p0) {
 p0 = p0|0; nullFunc_vi(328);
}
function b2911(p0) {
 p0 = p0|0; nullFunc_vi(329);
}
function b2912(p0) {
 p0 = p0|0; nullFunc_vi(330);
}
function b2913(p0) {
 p0 = p0|0; nullFunc_vi(331);
}
function b2914(p0) {
 p0 = p0|0; nullFunc_vi(332);
}
function b2915(p0) {
 p0 = p0|0; nullFunc_vi(333);
}
function b2916(p0) {
 p0 = p0|0; nullFunc_vi(334);
}
function b2917(p0) {
 p0 = p0|0; nullFunc_vi(335);
}
function b2918(p0) {
 p0 = p0|0; nullFunc_vi(336);
}
function b2919(p0) {
 p0 = p0|0; nullFunc_vi(337);
}
function b2920(p0) {
 p0 = p0|0; nullFunc_vi(338);
}
function b2921(p0) {
 p0 = p0|0; nullFunc_vi(339);
}
function b2922(p0) {
 p0 = p0|0; nullFunc_vi(340);
}
function b2923(p0) {
 p0 = p0|0; nullFunc_vi(341);
}
function b2924(p0) {
 p0 = p0|0; nullFunc_vi(342);
}
function b2925(p0) {
 p0 = p0|0; nullFunc_vi(343);
}
function b2926(p0) {
 p0 = p0|0; nullFunc_vi(344);
}
function b2927(p0) {
 p0 = p0|0; nullFunc_vi(345);
}
function b2928(p0) {
 p0 = p0|0; nullFunc_vi(346);
}
function b2929(p0) {
 p0 = p0|0; nullFunc_vi(347);
}
function b2930(p0) {
 p0 = p0|0; nullFunc_vi(348);
}
function b2931(p0) {
 p0 = p0|0; nullFunc_vi(349);
}
function b2932(p0) {
 p0 = p0|0; nullFunc_vi(350);
}
function b2933(p0) {
 p0 = p0|0; nullFunc_vi(351);
}
function b2934(p0) {
 p0 = p0|0; nullFunc_vi(352);
}
function b2935(p0) {
 p0 = p0|0; nullFunc_vi(353);
}
function b2936(p0) {
 p0 = p0|0; nullFunc_vi(354);
}
function b2937(p0) {
 p0 = p0|0; nullFunc_vi(355);
}
function b2938(p0) {
 p0 = p0|0; nullFunc_vi(356);
}
function b2939(p0) {
 p0 = p0|0; nullFunc_vi(357);
}
function b2940(p0) {
 p0 = p0|0; nullFunc_vi(358);
}
function b2941(p0) {
 p0 = p0|0; nullFunc_vi(359);
}
function b2942(p0) {
 p0 = p0|0; nullFunc_vi(360);
}
function b2943(p0) {
 p0 = p0|0; nullFunc_vi(361);
}
function b2944(p0) {
 p0 = p0|0; nullFunc_vi(362);
}
function b2945(p0) {
 p0 = p0|0; nullFunc_vi(363);
}
function b2946(p0) {
 p0 = p0|0; nullFunc_vi(364);
}
function b2947(p0) {
 p0 = p0|0; nullFunc_vi(365);
}
function b2948(p0) {
 p0 = p0|0; nullFunc_vi(366);
}
function b2949(p0) {
 p0 = p0|0; nullFunc_vi(367);
}
function b2950(p0) {
 p0 = p0|0; nullFunc_vi(368);
}
function b2951(p0) {
 p0 = p0|0; nullFunc_vi(369);
}
function b2952(p0) {
 p0 = p0|0; nullFunc_vi(370);
}
function b2953(p0) {
 p0 = p0|0; nullFunc_vi(371);
}
function b2954(p0) {
 p0 = p0|0; nullFunc_vi(372);
}
function b2955(p0) {
 p0 = p0|0; nullFunc_vi(373);
}
function b2956(p0) {
 p0 = p0|0; nullFunc_vi(374);
}
function b2957(p0) {
 p0 = p0|0; nullFunc_vi(375);
}
function b2958(p0) {
 p0 = p0|0; nullFunc_vi(376);
}
function b2959(p0) {
 p0 = p0|0; nullFunc_vi(377);
}
function b2960(p0) {
 p0 = p0|0; nullFunc_vi(378);
}
function b2961(p0) {
 p0 = p0|0; nullFunc_vi(379);
}
function b2962(p0) {
 p0 = p0|0; nullFunc_vi(380);
}
function b2963(p0) {
 p0 = p0|0; nullFunc_vi(381);
}
function b2964(p0) {
 p0 = p0|0; nullFunc_vi(382);
}
function b2965(p0) {
 p0 = p0|0; nullFunc_vi(383);
}
function b2966(p0) {
 p0 = p0|0; nullFunc_vi(384);
}
function b2967(p0) {
 p0 = p0|0; nullFunc_vi(385);
}
function b2968(p0) {
 p0 = p0|0; nullFunc_vi(386);
}
function b2969(p0) {
 p0 = p0|0; nullFunc_vi(387);
}
function b2970(p0) {
 p0 = p0|0; nullFunc_vi(388);
}
function b2971(p0) {
 p0 = p0|0; nullFunc_vi(389);
}
function b2972(p0) {
 p0 = p0|0; nullFunc_vi(390);
}
function b2973(p0) {
 p0 = p0|0; nullFunc_vi(391);
}
function b2974(p0) {
 p0 = p0|0; nullFunc_vi(392);
}
function b2975(p0) {
 p0 = p0|0; nullFunc_vi(393);
}
function b2976(p0) {
 p0 = p0|0; nullFunc_vi(394);
}
function b2977(p0) {
 p0 = p0|0; nullFunc_vi(395);
}
function b2978(p0) {
 p0 = p0|0; nullFunc_vi(396);
}
function b2979(p0) {
 p0 = p0|0; nullFunc_vi(397);
}
function b2980(p0) {
 p0 = p0|0; nullFunc_vi(398);
}
function b2981(p0) {
 p0 = p0|0; nullFunc_vi(399);
}
function b2982(p0) {
 p0 = p0|0; nullFunc_vi(400);
}
function b2983(p0) {
 p0 = p0|0; nullFunc_vi(401);
}
function b2984(p0) {
 p0 = p0|0; nullFunc_vi(402);
}
function b2985(p0) {
 p0 = p0|0; nullFunc_vi(403);
}
function b2986(p0) {
 p0 = p0|0; nullFunc_vi(404);
}
function b2987(p0) {
 p0 = p0|0; nullFunc_vi(405);
}
function b2988(p0) {
 p0 = p0|0; nullFunc_vi(406);
}
function b2989(p0) {
 p0 = p0|0; nullFunc_vi(407);
}
function b2990(p0) {
 p0 = p0|0; nullFunc_vi(408);
}
function b2991(p0) {
 p0 = p0|0; nullFunc_vi(409);
}
function b2992(p0) {
 p0 = p0|0; nullFunc_vi(410);
}
function b2993(p0) {
 p0 = p0|0; nullFunc_vi(411);
}
function b2994(p0) {
 p0 = p0|0; nullFunc_vi(412);
}
function b2995(p0) {
 p0 = p0|0; nullFunc_vi(413);
}
function b2996(p0) {
 p0 = p0|0; nullFunc_vi(414);
}
function b2997(p0) {
 p0 = p0|0; nullFunc_vi(415);
}
function b2998(p0) {
 p0 = p0|0; nullFunc_vi(416);
}
function b2999(p0) {
 p0 = p0|0; nullFunc_vi(417);
}
function b3000(p0) {
 p0 = p0|0; nullFunc_vi(418);
}
function b3001(p0) {
 p0 = p0|0; nullFunc_vi(419);
}
function b3002(p0) {
 p0 = p0|0; nullFunc_vi(420);
}
function b3003(p0) {
 p0 = p0|0; nullFunc_vi(421);
}
function b3004(p0) {
 p0 = p0|0; nullFunc_vi(422);
}
function b3005(p0) {
 p0 = p0|0; nullFunc_vi(423);
}
function b3006(p0) {
 p0 = p0|0; nullFunc_vi(424);
}
function b3007(p0) {
 p0 = p0|0; nullFunc_vi(425);
}
function b3008(p0) {
 p0 = p0|0; nullFunc_vi(426);
}
function b3009(p0) {
 p0 = p0|0; nullFunc_vi(427);
}
function b3010(p0) {
 p0 = p0|0; nullFunc_vi(428);
}
function b3011(p0) {
 p0 = p0|0; nullFunc_vi(429);
}
function b3012(p0) {
 p0 = p0|0; nullFunc_vi(430);
}
function b3013(p0) {
 p0 = p0|0; nullFunc_vi(431);
}
function b3014(p0) {
 p0 = p0|0; nullFunc_vi(432);
}
function b3015(p0) {
 p0 = p0|0; nullFunc_vi(433);
}
function b3016(p0) {
 p0 = p0|0; nullFunc_vi(434);
}
function b3017(p0) {
 p0 = p0|0; nullFunc_vi(435);
}
function b3018(p0) {
 p0 = p0|0; nullFunc_vi(436);
}
function b3019(p0) {
 p0 = p0|0; nullFunc_vi(437);
}
function b3020(p0) {
 p0 = p0|0; nullFunc_vi(438);
}
function b3021(p0) {
 p0 = p0|0; nullFunc_vi(439);
}
function b3022(p0) {
 p0 = p0|0; nullFunc_vi(440);
}
function b3023(p0) {
 p0 = p0|0; nullFunc_vi(441);
}
function b3024(p0) {
 p0 = p0|0; nullFunc_vi(442);
}
function b3025(p0) {
 p0 = p0|0; nullFunc_vi(443);
}
function b3026(p0) {
 p0 = p0|0; nullFunc_vi(444);
}
function b3027(p0) {
 p0 = p0|0; nullFunc_vi(445);
}
function b3028(p0) {
 p0 = p0|0; nullFunc_vi(446);
}
function b3029(p0) {
 p0 = p0|0; nullFunc_vi(447);
}
function b3030(p0) {
 p0 = p0|0; nullFunc_vi(448);
}
function b3031(p0) {
 p0 = p0|0; nullFunc_vi(449);
}
function b3032(p0) {
 p0 = p0|0; nullFunc_vi(450);
}
function b3033(p0) {
 p0 = p0|0; nullFunc_vi(451);
}
function b3034(p0) {
 p0 = p0|0; nullFunc_vi(452);
}
function b3035(p0) {
 p0 = p0|0; nullFunc_vi(453);
}
function b3036(p0) {
 p0 = p0|0; nullFunc_vi(454);
}
function b3037(p0) {
 p0 = p0|0; nullFunc_vi(455);
}
function b3038(p0) {
 p0 = p0|0; nullFunc_vi(456);
}
function b3039(p0) {
 p0 = p0|0; nullFunc_vi(457);
}
function b3040(p0) {
 p0 = p0|0; nullFunc_vi(458);
}
function b3041(p0) {
 p0 = p0|0; nullFunc_vi(459);
}
function b3042(p0) {
 p0 = p0|0; nullFunc_vi(460);
}
function b3043(p0) {
 p0 = p0|0; nullFunc_vi(461);
}
function b3044(p0) {
 p0 = p0|0; nullFunc_vi(462);
}
function b3045(p0) {
 p0 = p0|0; nullFunc_vi(463);
}
function b3046(p0) {
 p0 = p0|0; nullFunc_vi(464);
}
function b3047(p0) {
 p0 = p0|0; nullFunc_vi(465);
}
function b3048(p0) {
 p0 = p0|0; nullFunc_vi(466);
}
function b3049(p0) {
 p0 = p0|0; nullFunc_vi(467);
}
function b3050(p0) {
 p0 = p0|0; nullFunc_vi(468);
}
function b3051(p0) {
 p0 = p0|0; nullFunc_vi(469);
}
function b3052(p0) {
 p0 = p0|0; nullFunc_vi(470);
}
function b3053(p0) {
 p0 = p0|0; nullFunc_vi(471);
}
function b3054(p0) {
 p0 = p0|0; nullFunc_vi(472);
}
function b3055(p0) {
 p0 = p0|0; nullFunc_vi(473);
}
function b3056(p0) {
 p0 = p0|0; nullFunc_vi(474);
}
function b3057(p0) {
 p0 = p0|0; nullFunc_vi(475);
}
function b3058(p0) {
 p0 = p0|0; nullFunc_vi(476);
}
function b3059(p0) {
 p0 = p0|0; nullFunc_vi(477);
}
function b3060(p0) {
 p0 = p0|0; nullFunc_vi(478);
}
function b3061(p0) {
 p0 = p0|0; nullFunc_vi(479);
}
function b3062(p0) {
 p0 = p0|0; nullFunc_vi(480);
}
function b3063(p0) {
 p0 = p0|0; nullFunc_vi(481);
}
function b3064(p0) {
 p0 = p0|0; nullFunc_vi(482);
}
function b3065(p0) {
 p0 = p0|0; nullFunc_vi(483);
}
function b3066(p0) {
 p0 = p0|0; nullFunc_vi(484);
}
function b3067(p0) {
 p0 = p0|0; nullFunc_vi(485);
}
function b3068(p0) {
 p0 = p0|0; nullFunc_vi(486);
}
function b3069(p0) {
 p0 = p0|0; nullFunc_vi(487);
}
function b3070(p0) {
 p0 = p0|0; nullFunc_vi(488);
}
function b3071(p0) {
 p0 = p0|0; nullFunc_vi(489);
}
function b3072(p0) {
 p0 = p0|0; nullFunc_vi(490);
}
function b3073(p0) {
 p0 = p0|0; nullFunc_vi(491);
}
function b3074(p0) {
 p0 = p0|0; nullFunc_vi(492);
}
function b3075(p0) {
 p0 = p0|0; nullFunc_vi(493);
}
function b3076(p0) {
 p0 = p0|0; nullFunc_vi(494);
}
function b3077(p0) {
 p0 = p0|0; nullFunc_vi(495);
}
function b3078(p0) {
 p0 = p0|0; nullFunc_vi(496);
}
function b3079(p0) {
 p0 = p0|0; nullFunc_vi(497);
}
function b3080(p0) {
 p0 = p0|0; nullFunc_vi(498);
}
function b3081(p0) {
 p0 = p0|0; nullFunc_vi(499);
}
function b3082(p0) {
 p0 = p0|0; nullFunc_vi(500);
}
function b3083(p0) {
 p0 = p0|0; nullFunc_vi(501);
}
function b3084(p0) {
 p0 = p0|0; nullFunc_vi(502);
}
function b3085(p0) {
 p0 = p0|0; nullFunc_vi(503);
}
function b3086(p0) {
 p0 = p0|0; nullFunc_vi(504);
}
function b3087(p0) {
 p0 = p0|0; nullFunc_vi(505);
}
function b3088(p0) {
 p0 = p0|0; nullFunc_vi(506);
}
function b3089(p0) {
 p0 = p0|0; nullFunc_vi(507);
}
function b3090(p0) {
 p0 = p0|0; nullFunc_vi(508);
}
function b3091(p0) {
 p0 = p0|0; nullFunc_vi(509);
}
function b3092(p0) {
 p0 = p0|0; nullFunc_vi(510);
}
function b3093(p0) {
 p0 = p0|0; nullFunc_vi(511);
}
function b3095(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(0);
}
function b3096(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(1);
}
function b3097(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(2);
}
function b3098(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(3);
}
function b3099(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(4);
}
function b3100(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(5);
}
function b3101(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(6);
}
function b3102(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(7);
}
function b3103(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(8);
}
function b3104(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(9);
}
function b3105(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(10);
}
function b3106(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(11);
}
function b3107(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(12);
}
function b3108(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(13);
}
function b3109(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(14);
}
function b3110(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(15);
}
function b3111(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(16);
}
function b3112(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(17);
}
function b3113(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(18);
}
function b3114(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(19);
}
function b3115(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(20);
}
function b3116(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(21);
}
function b3117(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(22);
}
function b3118(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(23);
}
function b3119(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(24);
}
function b3120(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(25);
}
function b3121(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(26);
}
function b3122(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(27);
}
function b3123(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(28);
}
function b3124(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(29);
}
function b3125(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(30);
}
function b3126(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(31);
}
function b3127(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(32);
}
function b3128(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(33);
}
function b3129(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(34);
}
function b3130(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(35);
}
function b3131(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(36);
}
function b3132(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(37);
}
function b3133(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(38);
}
function b3134(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(39);
}
function b3135(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(40);
}
function b3136(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(41);
}
function b3137(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(42);
}
function b3138(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(43);
}
function b3139(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(44);
}
function b3140(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(45);
}
function b3141(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(46);
}
function b3142(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(47);
}
function b3143(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(48);
}
function b3144(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(49);
}
function b3145(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(50);
}
function b3146(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(51);
}
function b3147(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(52);
}
function b3148(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(53);
}
function b3149(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(54);
}
function b3150(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(55);
}
function b3151(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(56);
}
function b3152(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(57);
}
function b3153(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(58);
}
function b3154(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(59);
}
function b3155(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(60);
}
function b3156(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(61);
}
function b3157(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(62);
}
function b3158(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(63);
}
function b3159(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(64);
}
function b3160(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(65);
}
function b3161(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(66);
}
function b3162(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(67);
}
function b3163(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(68);
}
function b3164(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(69);
}
function b3165(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(70);
}
function b3166(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(71);
}
function b3167(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(72);
}
function b3168(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(73);
}
function b3169(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(74);
}
function b3170(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(75);
}
function b3171(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(76);
}
function b3172(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(77);
}
function b3173(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(78);
}
function b3174(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(79);
}
function b3175(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(80);
}
function b3176(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(81);
}
function b3177(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(82);
}
function b3178(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(83);
}
function b3179(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(84);
}
function b3180(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(85);
}
function b3181(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(86);
}
function b3182(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(87);
}
function b3183(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(88);
}
function b3184(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(89);
}
function b3185(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(90);
}
function b3186(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(91);
}
function b3187(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(92);
}
function b3188(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(93);
}
function b3189(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(94);
}
function b3190(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(95);
}
function b3191(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(96);
}
function b3192(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(97);
}
function b3193(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(98);
}
function b3194(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(99);
}
function b3195(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(100);
}
function b3196(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(101);
}
function b3197(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(102);
}
function b3198(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(103);
}
function b3199(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(104);
}
function b3200(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(105);
}
function b3201(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(106);
}
function b3202(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(107);
}
function b3203(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(108);
}
function b3204(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(109);
}
function b3205(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(110);
}
function b3206(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(111);
}
function b3207(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(112);
}
function b3208(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(113);
}
function b3209(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(114);
}
function b3210(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(115);
}
function b3211(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(116);
}
function b3212(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(117);
}
function b3213(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(118);
}
function b3214(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(119);
}
function b3215(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(120);
}
function b3216(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(121);
}
function b3217(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(122);
}
function b3218(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(123);
}
function b3219(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(124);
}
function b3220(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(125);
}
function b3221(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(126);
}
function b3222(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(127);
}
function b3223(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(128);
}
function b3224(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(129);
}
function b3225(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(130);
}
function b3226(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(131);
}
function b3227(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(132);
}
function b3228(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(133);
}
function b3229(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(134);
}
function b3230(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(135);
}
function b3231(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(136);
}
function b3232(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(137);
}
function b3233(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(138);
}
function b3234(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(139);
}
function b3235(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(140);
}
function b3236(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(141);
}
function b3237(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(142);
}
function b3238(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(143);
}
function b3239(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(144);
}
function b3240(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(145);
}
function b3241(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(146);
}
function b3242(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(147);
}
function b3243(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(148);
}
function b3244(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(149);
}
function b3245(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(150);
}
function b3246(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(151);
}
function b3247(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(152);
}
function b3248(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(153);
}
function b3249(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(154);
}
function b3250(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(155);
}
function b3251(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(156);
}
function b3252(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(157);
}
function b3253(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(158);
}
function b3254(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(159);
}
function b3255(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(160);
}
function b3256(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(161);
}
function b3257(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(162);
}
function b3258(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(163);
}
function b3259(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(164);
}
function b3260(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(166);
}
function b3261(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(167);
}
function b3262(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(168);
}
function b3263(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(169);
}
function b3264(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(170);
}
function b3265(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(171);
}
function b3266(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(172);
}
function b3267(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(174);
}
function b3268(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(175);
}
function b3269(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(176);
}
function b3270(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(177);
}
function b3271(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(178);
}
function b3272(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(179);
}
function b3273(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(180);
}
function b3274(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(182);
}
function b3275(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(183);
}
function b3276(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(184);
}
function b3277(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(185);
}
function b3278(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(186);
}
function b3279(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(187);
}
function b3280(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(188);
}
function b3281(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(189);
}
function b3282(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(190);
}
function b3283(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(191);
}
function b3284(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(192);
}
function b3285(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(193);
}
function b3286(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(194);
}
function b3287(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(195);
}
function b3288(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(196);
}
function b3289(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(197);
}
function b3290(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(198);
}
function b3291(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(199);
}
function b3292(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(200);
}
function b3293(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(201);
}
function b3294(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(202);
}
function b3295(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(203);
}
function b3296(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(204);
}
function b3297(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(205);
}
function b3298(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(206);
}
function b3299(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(207);
}
function b3300(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(208);
}
function b3301(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(209);
}
function b3302(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(210);
}
function b3303(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(211);
}
function b3304(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(212);
}
function b3305(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(213);
}
function b3306(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(214);
}
function b3307(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(215);
}
function b3308(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(216);
}
function b3309(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(217);
}
function b3310(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(218);
}
function b3311(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(219);
}
function b3312(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(220);
}
function b3313(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(221);
}
function b3314(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(222);
}
function b3315(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(223);
}
function b3316(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(224);
}
function b3317(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(225);
}
function b3318(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(226);
}
function b3319(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(227);
}
function b3320(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(228);
}
function b3321(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(229);
}
function b3322(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(230);
}
function b3323(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(231);
}
function b3324(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(232);
}
function b3325(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(233);
}
function b3326(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(234);
}
function b3327(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(235);
}
function b3328(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(236);
}
function b3329(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(237);
}
function b3330(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(238);
}
function b3331(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(239);
}
function b3332(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(240);
}
function b3333(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(241);
}
function b3334(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(242);
}
function b3335(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(243);
}
function b3336(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(244);
}
function b3337(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(245);
}
function b3338(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(246);
}
function b3339(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(247);
}
function b3340(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(248);
}
function b3341(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(249);
}
function b3342(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(250);
}
function b3343(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(251);
}
function b3344(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(252);
}
function b3345(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(253);
}
function b3346(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(254);
}
function b3347(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(255);
}
function b3349(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(0);
}
function b3350(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(1);
}
function b3351(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(2);
}
function b3352(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(3);
}
function b3353(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(4);
}
function b3354(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(5);
}
function b3355(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(6);
}
function b3356(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(7);
}
function b3357(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(8);
}
function b3358(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(9);
}
function b3359(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(10);
}
function b3360(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(11);
}
function b3361(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(12);
}
function b3362(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(13);
}
function b3363(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(14);
}
function b3364(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(15);
}
function b3365(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(16);
}
function b3366(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(17);
}
function b3367(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(18);
}
function b3368(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(19);
}
function b3369(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(20);
}
function b3370(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(21);
}
function b3371(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(22);
}
function b3372(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(23);
}
function b3373(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(24);
}
function b3374(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(25);
}
function b3375(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(26);
}
function b3376(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(27);
}
function b3377(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(28);
}
function b3378(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(29);
}
function b3379(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(30);
}
function b3380(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(31);
}
function b3381(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(32);
}
function b3382(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(33);
}
function b3383(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(34);
}
function b3384(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(35);
}
function b3385(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(36);
}
function b3386(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(37);
}
function b3387(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(38);
}
function b3388(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(39);
}
function b3389(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(40);
}
function b3390(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(41);
}
function b3391(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(42);
}
function b3392(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(43);
}
function b3393(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(44);
}
function b3394(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(45);
}
function b3395(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(46);
}
function b3396(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(47);
}
function b3397(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(48);
}
function b3398(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(49);
}
function b3399(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(50);
}
function b3400(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(51);
}
function b3401(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(52);
}
function b3402(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(53);
}
function b3403(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(54);
}
function b3404(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(55);
}
function b3405(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(56);
}
function b3406(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(57);
}
function b3407(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(58);
}
function b3408(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(59);
}
function b3409(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(60);
}
function b3410(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(61);
}
function b3411(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(62);
}
function b3412(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(63);
}
function b3413(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(64);
}
function b3414(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(65);
}
function b3415(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(66);
}
function b3416(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(67);
}
function b3417(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(68);
}
function b3418(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(69);
}
function b3419(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(70);
}
function b3420(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(71);
}
function b3421(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(72);
}
function b3422(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(73);
}
function b3423(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(74);
}
function b3424(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(75);
}
function b3425(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(76);
}
function b3426(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(77);
}
function b3427(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(78);
}
function b3428(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(79);
}
function b3429(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(80);
}
function b3430(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(81);
}
function b3431(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(82);
}
function b3432(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(83);
}
function b3433(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(84);
}
function b3434(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(85);
}
function b3435(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(86);
}
function b3436(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(87);
}
function b3437(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(88);
}
function b3438(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(89);
}
function b3439(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(90);
}
function b3440(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(91);
}
function b3441(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(92);
}
function b3442(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(93);
}
function b3443(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(94);
}
function b3444(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(95);
}
function b3445(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(96);
}
function b3446(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(97);
}
function b3447(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(98);
}
function b3448(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(99);
}
function b3449(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(100);
}
function b3450(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(101);
}
function b3451(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(102);
}
function b3452(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(103);
}
function b3453(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(104);
}
function b3454(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(105);
}
function b3455(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(106);
}
function b3456(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(107);
}
function b3457(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(108);
}
function b3458(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(109);
}
function b3459(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(110);
}
function b3460(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(111);
}
function b3461(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(112);
}
function b3462(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(113);
}
function b3463(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(114);
}
function b3464(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(115);
}
function b3465(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(116);
}
function b3466(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(117);
}
function b3467(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(118);
}
function b3468(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(119);
}
function b3469(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(120);
}
function b3470(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(121);
}
function b3471(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(122);
}
function b3472(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(123);
}
function b3473(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(124);
}
function b3474(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(125);
}
function b3475(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(126);
}
function b3476(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(127);
}
function b3477(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(128);
}
function b3478(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(129);
}
function b3479(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(130);
}
function b3480(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(131);
}
function b3481(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(132);
}
function b3482(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(133);
}
function b3483(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(134);
}
function b3484(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(135);
}
function b3485(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(136);
}
function b3486(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(137);
}
function b3487(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(138);
}
function b3488(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(139);
}
function b3489(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(140);
}
function b3490(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(141);
}
function b3491(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(142);
}
function b3492(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(143);
}
function b3493(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(144);
}
function b3494(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(145);
}
function b3495(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(146);
}
function b3496(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(147);
}
function b3497(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(148);
}
function b3498(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(149);
}
function b3499(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(150);
}
function b3500(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(151);
}
function b3501(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(152);
}
function b3502(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(153);
}
function b3503(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(154);
}
function b3504(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(155);
}
function b3505(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(156);
}
function b3506(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(157);
}
function b3507(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(158);
}
function b3508(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(159);
}
function b3509(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(160);
}
function b3510(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(161);
}
function b3511(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(162);
}
function b3512(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(163);
}
function b3513(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(164);
}
function b3514(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(165);
}
function b3515(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(166);
}
function b3516(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(167);
}
function b3517(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(168);
}
function b3518(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(169);
}
function b3519(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(170);
}
function b3520(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(171);
}
function b3521(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(172);
}
function b3522(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(173);
}
function b3523(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(174);
}
function b3524(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(175);
}
function b3525(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(176);
}
function b3526(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(177);
}
function b3527(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(178);
}
function b3528(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(179);
}
function b3529(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(180);
}
function b3530(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(181);
}
function b3531(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(182);
}
function b3532(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(183);
}
function b3533(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(184);
}
function b3534(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(185);
}
function b3535(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(186);
}
function b3536(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(187);
}
function b3537(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(188);
}
function b3538(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(189);
}
function b3539(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(190);
}
function b3540(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(191);
}
function b3541(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(192);
}
function b3542(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(193);
}
function b3543(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(194);
}
function b3544(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(195);
}
function b3545(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(196);
}
function b3546(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(197);
}
function b3547(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(198);
}
function b3548(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(199);
}
function b3549(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(200);
}
function b3550(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(201);
}
function b3551(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(202);
}
function b3552(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(203);
}
function b3553(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(204);
}
function b3554(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(205);
}
function b3555(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(206);
}
function b3556(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(207);
}
function b3557(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(208);
}
function b3558(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(209);
}
function b3559(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(210);
}
function b3560(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(211);
}
function b3561(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(212);
}
function b3562(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(213);
}
function b3563(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(214);
}
function b3564(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(215);
}
function b3565(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(216);
}
function b3566(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(217);
}
function b3567(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(218);
}
function b3568(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(219);
}
function b3569(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(220);
}
function b3570(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(221);
}
function b3571(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(222);
}
function b3572(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(223);
}
function b3573(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(224);
}
function b3574(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(225);
}
function b3575(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(226);
}
function b3576(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(227);
}
function b3577(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(228);
}
function b3578(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(229);
}
function b3579(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(230);
}
function b3580(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(231);
}
function b3581(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(232);
}
function b3582(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(233);
}
function b3583(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(234);
}
function b3584(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(235);
}
function b3585(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(236);
}
function b3586(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(237);
}
function b3587(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(238);
}
function b3588(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(239);
}
function b3589(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(240);
}
function b3590(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(241);
}
function b3591(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(242);
}
function b3592(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(243);
}
function b3593(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(244);
}
function b3594(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(245);
}
function b3595(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(246);
}
function b3596(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(247);
}
function b3597(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(248);
}
function b3598(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(249);
}
function b3599(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(250);
}
function b3600(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(251);
}
function b3601(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(252);
}
function b3602(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(253);
}
function b3603(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(254);
}
function b3604(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(255);
}
function b3605(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(256);
}
function b3606(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(257);
}
function b3607(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(258);
}
function b3608(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(259);
}
function b3609(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(260);
}
function b3610(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(261);
}
function b3611(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(262);
}
function b3612(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(263);
}
function b3613(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(264);
}
function b3614(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(265);
}
function b3615(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(266);
}
function b3616(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(267);
}
function b3617(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(268);
}
function b3618(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(269);
}
function b3619(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(270);
}
function b3620(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(271);
}
function b3621(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(272);
}
function b3622(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(273);
}
function b3623(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(274);
}
function b3624(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(275);
}
function b3625(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(276);
}
function b3626(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(277);
}
function b3627(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(278);
}
function b3628(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(279);
}
function b3629(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(280);
}
function b3630(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(281);
}
function b3631(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(282);
}
function b3632(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(284);
}
function b3633(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(285);
}
function b3634(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(287);
}
function b3635(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(288);
}
function b3636(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(289);
}
function b3637(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(290);
}
function b3638(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(291);
}
function b3639(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(292);
}
function b3640(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(293);
}
function b3641(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(294);
}
function b3642(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(295);
}
function b3643(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(296);
}
function b3644(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(297);
}
function b3645(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(298);
}
function b3646(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(299);
}
function b3647(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(300);
}
function b3648(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(301);
}
function b3649(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(302);
}
function b3650(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(303);
}
function b3651(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(304);
}
function b3652(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(305);
}
function b3653(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(306);
}
function b3654(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(307);
}
function b3655(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(308);
}
function b3656(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(309);
}
function b3657(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(310);
}
function b3658(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(311);
}
function b3659(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(312);
}
function b3660(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(313);
}
function b3661(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(314);
}
function b3662(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(315);
}
function b3663(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(316);
}
function b3664(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(317);
}
function b3665(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(318);
}
function b3666(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(319);
}
function b3667(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(320);
}
function b3668(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(321);
}
function b3669(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(322);
}
function b3670(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(323);
}
function b3671(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(324);
}
function b3672(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(325);
}
function b3673(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(326);
}
function b3674(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(327);
}
function b3675(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(328);
}
function b3676(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(329);
}
function b3677(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(330);
}
function b3678(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(331);
}
function b3679(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(332);
}
function b3680(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(333);
}
function b3681(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(334);
}
function b3682(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(335);
}
function b3683(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(336);
}
function b3684(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(337);
}
function b3685(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(338);
}
function b3686(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(339);
}
function b3687(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(340);
}
function b3688(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(341);
}
function b3689(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(342);
}
function b3690(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(343);
}
function b3691(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(344);
}
function b3692(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(345);
}
function b3693(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(346);
}
function b3694(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(347);
}
function b3695(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(348);
}
function b3696(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(349);
}
function b3697(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(350);
}
function b3698(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(351);
}
function b3699(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(352);
}
function b3700(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(353);
}
function b3701(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(354);
}
function b3702(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(355);
}
function b3703(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(356);
}
function b3704(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(357);
}
function b3705(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(358);
}
function b3706(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(359);
}
function b3707(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(360);
}
function b3708(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(361);
}
function b3709(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(362);
}
function b3710(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(363);
}
function b3711(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(364);
}
function b3712(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(365);
}
function b3713(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(366);
}
function b3714(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(367);
}
function b3715(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(368);
}
function b3716(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(369);
}
function b3717(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(370);
}
function b3718(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(371);
}
function b3719(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(372);
}
function b3720(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(373);
}
function b3721(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(374);
}
function b3722(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(375);
}
function b3723(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(376);
}
function b3724(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(377);
}
function b3725(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(378);
}
function b3726(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(379);
}
function b3727(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(380);
}
function b3728(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(381);
}
function b3729(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(382);
}
function b3730(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(383);
}
function b3731(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(384);
}
function b3732(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(385);
}
function b3733(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(386);
}
function b3734(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(387);
}
function b3735(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(388);
}
function b3736(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(389);
}
function b3737(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(390);
}
function b3738(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(391);
}
function b3739(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(392);
}
function b3740(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(393);
}
function b3741(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(394);
}
function b3742(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(395);
}
function b3743(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(396);
}
function b3744(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(397);
}
function b3745(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(398);
}
function b3746(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(399);
}
function b3747(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(400);
}
function b3748(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(401);
}
function b3749(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(402);
}
function b3750(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(403);
}
function b3751(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(404);
}
function b3752(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(405);
}
function b3753(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(406);
}
function b3754(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(407);
}
function b3755(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(408);
}
function b3756(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(409);
}
function b3757(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(410);
}
function b3758(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(411);
}
function b3759(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(412);
}
function b3760(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(413);
}
function b3761(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(414);
}
function b3762(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(415);
}
function b3763(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(416);
}
function b3764(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(417);
}
function b3765(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(418);
}
function b3766(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(419);
}
function b3767(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(420);
}
function b3768(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(421);
}
function b3769(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(422);
}
function b3770(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(423);
}
function b3771(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(424);
}
function b3772(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(425);
}
function b3773(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(426);
}
function b3774(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(427);
}
function b3775(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(428);
}
function b3776(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(429);
}
function b3777(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(430);
}
function b3778(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(431);
}
function b3779(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(432);
}
function b3780(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(433);
}
function b3781(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(434);
}
function b3782(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(435);
}
function b3783(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(436);
}
function b3784(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(437);
}
function b3785(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(438);
}
function b3786(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(439);
}
function b3787(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(440);
}
function b3788(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(441);
}
function b3789(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(442);
}
function b3790(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(443);
}
function b3791(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(444);
}
function b3792(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(445);
}
function b3793(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(446);
}
function b3794(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(447);
}
function b3795(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(448);
}
function b3796(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(449);
}
function b3797(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(450);
}
function b3798(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(451);
}
function b3799(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(452);
}
function b3800(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(453);
}
function b3801(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(454);
}
function b3802(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(455);
}
function b3803(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(456);
}
function b3804(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(457);
}
function b3805(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(458);
}
function b3806(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(459);
}
function b3807(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(460);
}
function b3808(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(461);
}
function b3809(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(462);
}
function b3810(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(463);
}
function b3811(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(464);
}
function b3812(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(465);
}
function b3813(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(466);
}
function b3814(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(467);
}
function b3815(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(468);
}
function b3816(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(469);
}
function b3817(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(470);
}
function b3818(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(471);
}
function b3819(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(472);
}
function b3820(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(473);
}
function b3821(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(474);
}
function b3822(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(475);
}
function b3823(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(476);
}
function b3824(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(477);
}
function b3825(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(478);
}
function b3826(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(479);
}
function b3827(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(480);
}
function b3828(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(481);
}
function b3829(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(482);
}
function b3830(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(483);
}
function b3831(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(484);
}
function b3832(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(485);
}
function b3833(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(486);
}
function b3834(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(487);
}
function b3835(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(488);
}
function b3836(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(489);
}
function b3837(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(490);
}
function b3838(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(491);
}
function b3839(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(492);
}
function b3840(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(493);
}
function b3841(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(494);
}
function b3842(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(495);
}
function b3843(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(496);
}
function b3844(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(497);
}
function b3845(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(498);
}
function b3846(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(499);
}
function b3847(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(500);
}
function b3848(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(501);
}
function b3849(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(502);
}
function b3850(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(503);
}
function b3851(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(504);
}
function b3852(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(505);
}
function b3853(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(506);
}
function b3854(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(507);
}
function b3855(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(508);
}
function b3856(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(509);
}
function b3857(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(510);
}
function b3858(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(511);
}
function b3860(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(0);
}
function b3861(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(1);
}
function b3862(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(2);
}
function b3863(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(4);
}
function b3864(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(5);
}
function b3865(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(7);
}
function b3866(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(8);
}
function b3867(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(9);
}
function b3868(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(10);
}
function b3869(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(11);
}
function b3870(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(12);
}
function b3871(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(13);
}
function b3872(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(15);
}
function b3873(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(16);
}
function b3874(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(17);
}
function b3875(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(18);
}
function b3876(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(19);
}
function b3877(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(20);
}
function b3878(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(21);
}
function b3879(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(23);
}
function b3880(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(24);
}
function b3881(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(26);
}
function b3882(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(27);
}
function b3883(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(28);
}
function b3884(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(29);
}
function b3885(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(31);
}
function b3886(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(32);
}
function b3887(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(33);
}
function b3888(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(34);
}
function b3889(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(35);
}
function b3890(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(36);
}
function b3891(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(37);
}
function b3892(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(38);
}
function b3893(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(40);
}
function b3894(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(41);
}
function b3895(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(42);
}
function b3896(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(43);
}
function b3897(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(44);
}
function b3898(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(45);
}
function b3899(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(46);
}
function b3900(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(47);
}
function b3901(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(49);
}
function b3902(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(50);
}
function b3903(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(51);
}
function b3904(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(52);
}
function b3905(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(53);
}
function b3906(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(54);
}
function b3907(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(55);
}
function b3908(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(56);
}
function b3909(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(58);
}
function b3910(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(59);
}
function b3911(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(60);
}
function b3912(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(61);
}
function b3913(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(62);
}
function b3914(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(63);
}
function b3915(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(64);
}
function b3916(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(65);
}
function b3917(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(67);
}
function b3918(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(68);
}
function b3919(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(69);
}
function b3920(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(70);
}
function b3921(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(71);
}
function b3922(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(72);
}
function b3923(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(73);
}
function b3924(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(74);
}
function b3925(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(76);
}
function b3926(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(77);
}
function b3927(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(78);
}
function b3928(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(79);
}
function b3929(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(80);
}
function b3930(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(81);
}
function b3931(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(82);
}
function b3932(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(84);
}
function b3933(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(85);
}
function b3934(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(87);
}
function b3935(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(88);
}
function b3936(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(89);
}
function b3937(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(90);
}
function b3938(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(92);
}
function b3939(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(93);
}
function b3940(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(94);
}
function b3941(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(95);
}
function b3942(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(96);
}
function b3943(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(97);
}
function b3944(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(98);
}
function b3945(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(100);
}
function b3946(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(101);
}
function b3947(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(103);
}
function b3948(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(104);
}
function b3949(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(105);
}
function b3950(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(106);
}
function b3951(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(108);
}
function b3952(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(109);
}
function b3953(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(110);
}
function b3954(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(111);
}
function b3955(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(112);
}
function b3956(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(113);
}
function b3957(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(114);
}
function b3958(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(115);
}
function b3959(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(117);
}
function b3960(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(118);
}
function b3961(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(119);
}
function b3962(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(120);
}
function b3963(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(121);
}
function b3964(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(122);
}
function b3965(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(123);
}
function b3966(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(124);
}
function b3967(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(126);
}
function b3968(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(127);
}
function b3969(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(128);
}
function b3970(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(129);
}
function b3971(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(130);
}
function b3972(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(131);
}
function b3973(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(132);
}
function b3974(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(133);
}
function b3975(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(135);
}
function b3976(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(136);
}
function b3977(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(137);
}
function b3978(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(138);
}
function b3979(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(139);
}
function b3980(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(140);
}
function b3981(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(141);
}
function b3982(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(142);
}
function b3983(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(144);
}
function b3984(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(145);
}
function b3985(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(146);
}
function b3986(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(147);
}
function b3987(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(148);
}
function b3988(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(149);
}
function b3989(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(150);
}
function b3990(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(151);
}
function b3991(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(153);
}
function b3992(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(154);
}
function b3993(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(155);
}
function b3994(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(156);
}
function b3995(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(157);
}
function b3996(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(158);
}
function b3997(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(159);
}
function b3998(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(160);
}
function b3999(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(161);
}
function b4000(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(162);
}
function b4001(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(163);
}
function b4002(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(165);
}
function b4003(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(166);
}
function b4004(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(167);
}
function b4005(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(168);
}
function b4006(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(169);
}
function b4007(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(170);
}
function b4008(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(171);
}
function b4009(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(173);
}
function b4010(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(174);
}
function b4011(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(175);
}
function b4012(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(176);
}
function b4013(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(177);
}
function b4014(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(178);
}
function b4015(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(179);
}
function b4016(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(181);
}
function b4017(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(182);
}
function b4018(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(183);
}
function b4019(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(184);
}
function b4020(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(185);
}
function b4021(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(186);
}
function b4022(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(187);
}
function b4023(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(188);
}
function b4024(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(189);
}
function b4025(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(191);
}
function b4026(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(192);
}
function b4027(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(193);
}
function b4028(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(194);
}
function b4029(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(195);
}
function b4030(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(196);
}
function b4031(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(197);
}
function b4032(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(198);
}
function b4033(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(199);
}
function b4034(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(200);
}
function b4035(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(201);
}
function b4036(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(203);
}
function b4037(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(204);
}
function b4038(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(205);
}
function b4039(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(206);
}
function b4040(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(207);
}
function b4041(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(208);
}
function b4042(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(209);
}
function b4043(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(210);
}
function b4044(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(211);
}
function b4045(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(212);
}
function b4046(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(213);
}
function b4047(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(214);
}
function b4048(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(215);
}
function b4049(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(216);
}
function b4050(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(217);
}
function b4051(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(218);
}
function b4052(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(219);
}
function b4053(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(220);
}
function b4054(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(221);
}
function b4055(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(222);
}
function b4056(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(223);
}
function b4057(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(224);
}
function b4058(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(225);
}
function b4059(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(226);
}
function b4060(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(227);
}
function b4061(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(228);
}
function b4062(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(229);
}
function b4063(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(230);
}
function b4064(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(231);
}
function b4065(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(232);
}
function b4066(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(233);
}
function b4067(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(234);
}
function b4068(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(235);
}
function b4069(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(236);
}
function b4070(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(237);
}
function b4071(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(238);
}
function b4072(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(239);
}
function b4073(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(240);
}
function b4074(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(241);
}
function b4075(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(242);
}
function b4076(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(243);
}
function b4077(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(244);
}
function b4078(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(245);
}
function b4079(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(246);
}
function b4080(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(247);
}
function b4081(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(248);
}
function b4082(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(249);
}
function b4083(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(250);
}
function b4084(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(251);
}
function b4085(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(252);
}
function b4086(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(253);
}
function b4087(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(254);
}
function b4088(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(255);
}
function b4089(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(256);
}
function b4090(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(257);
}
function b4091(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(258);
}
function b4092(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(259);
}
function b4093(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(260);
}
function b4094(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(261);
}
function b4095(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(262);
}
function b4096(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(263);
}
function b4097(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(264);
}
function b4098(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(265);
}
function b4099(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(266);
}
function b4100(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(267);
}
function b4101(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(268);
}
function b4102(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(269);
}
function b4103(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(270);
}
function b4104(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(271);
}
function b4105(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(272);
}
function b4106(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(273);
}
function b4107(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(274);
}
function b4108(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(275);
}
function b4109(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(277);
}
function b4110(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(278);
}
function b4111(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(279);
}
function b4112(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(280);
}
function b4113(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(281);
}
function b4114(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(283);
}
function b4115(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(285);
}
function b4116(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(286);
}
function b4117(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(287);
}
function b4118(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(289);
}
function b4119(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(290);
}
function b4120(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(291);
}
function b4121(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(292);
}
function b4122(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(293);
}
function b4123(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(294);
}
function b4124(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(295);
}
function b4125(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(296);
}
function b4126(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(297);
}
function b4127(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(298);
}
function b4128(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(299);
}
function b4129(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(300);
}
function b4130(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(301);
}
function b4131(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(302);
}
function b4132(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(303);
}
function b4133(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(304);
}
function b4134(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(305);
}
function b4135(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(306);
}
function b4136(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(307);
}
function b4137(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(308);
}
function b4138(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(309);
}
function b4139(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(310);
}
function b4140(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(311);
}
function b4141(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(312);
}
function b4142(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(313);
}
function b4143(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(314);
}
function b4144(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(315);
}
function b4145(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(316);
}
function b4146(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(317);
}
function b4147(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(318);
}
function b4148(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(319);
}
function b4149(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(320);
}
function b4150(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(321);
}
function b4151(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(322);
}
function b4152(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(323);
}
function b4153(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(324);
}
function b4154(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(325);
}
function b4155(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(326);
}
function b4156(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(327);
}
function b4157(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(328);
}
function b4158(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(329);
}
function b4159(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(330);
}
function b4160(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(331);
}
function b4161(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(332);
}
function b4162(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(333);
}
function b4163(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(334);
}
function b4164(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(335);
}
function b4165(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(336);
}
function b4166(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(337);
}
function b4167(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(338);
}
function b4168(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(339);
}
function b4169(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(340);
}
function b4170(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(341);
}
function b4171(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(342);
}
function b4172(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(343);
}
function b4173(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(344);
}
function b4174(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(345);
}
function b4175(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(346);
}
function b4176(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(347);
}
function b4177(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(348);
}
function b4178(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(349);
}
function b4179(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(350);
}
function b4180(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(351);
}
function b4181(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(352);
}
function b4182(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(353);
}
function b4183(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(354);
}
function b4184(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(355);
}
function b4185(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(356);
}
function b4186(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(357);
}
function b4187(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(358);
}
function b4188(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(359);
}
function b4189(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(360);
}
function b4190(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(361);
}
function b4191(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(362);
}
function b4192(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(363);
}
function b4193(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(364);
}
function b4194(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(365);
}
function b4195(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(366);
}
function b4196(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(367);
}
function b4197(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(368);
}
function b4198(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(369);
}
function b4199(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(370);
}
function b4200(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(371);
}
function b4201(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(372);
}
function b4202(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(373);
}
function b4203(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(374);
}
function b4204(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(375);
}
function b4205(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(376);
}
function b4206(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(377);
}
function b4207(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(378);
}
function b4208(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(379);
}
function b4209(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(380);
}
function b4210(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(381);
}
function b4211(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(382);
}
function b4212(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(383);
}
function b4213(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(384);
}
function b4214(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(385);
}
function b4215(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(386);
}
function b4216(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(387);
}
function b4217(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(388);
}
function b4218(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(389);
}
function b4219(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(390);
}
function b4220(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(391);
}
function b4221(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(392);
}
function b4222(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(393);
}
function b4223(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(394);
}
function b4224(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(395);
}
function b4225(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(396);
}
function b4226(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(397);
}
function b4227(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(398);
}
function b4228(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(399);
}
function b4229(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(400);
}
function b4230(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(401);
}
function b4231(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(402);
}
function b4232(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(403);
}
function b4233(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(404);
}
function b4234(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(405);
}
function b4235(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(406);
}
function b4236(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(407);
}
function b4237(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(408);
}
function b4238(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(409);
}
function b4239(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(410);
}
function b4240(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(411);
}
function b4241(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(412);
}
function b4242(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(413);
}
function b4243(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(414);
}
function b4244(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(415);
}
function b4245(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(416);
}
function b4246(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(417);
}
function b4247(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(418);
}
function b4248(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(419);
}
function b4249(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(420);
}
function b4250(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(421);
}
function b4251(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(422);
}
function b4252(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(423);
}
function b4253(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(424);
}
function b4254(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(425);
}
function b4255(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(426);
}
function b4256(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(427);
}
function b4257(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(428);
}
function b4258(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(429);
}
function b4259(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(430);
}
function b4260(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(431);
}
function b4261(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(432);
}
function b4262(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(433);
}
function b4263(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(434);
}
function b4264(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(435);
}
function b4265(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(436);
}
function b4266(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(437);
}
function b4267(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(438);
}
function b4268(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(439);
}
function b4269(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(440);
}
function b4270(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(441);
}
function b4271(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(442);
}
function b4272(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(443);
}
function b4273(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(444);
}
function b4274(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(445);
}
function b4275(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(446);
}
function b4276(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(447);
}
function b4277(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(448);
}
function b4278(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(449);
}
function b4279(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(450);
}
function b4280(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(451);
}
function b4281(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(452);
}
function b4282(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(453);
}
function b4283(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(454);
}
function b4284(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(455);
}
function b4285(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(456);
}
function b4286(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(457);
}
function b4287(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(458);
}
function b4288(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(459);
}
function b4289(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(460);
}
function b4290(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(461);
}
function b4291(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(462);
}
function b4292(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(463);
}
function b4293(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(464);
}
function b4294(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(465);
}
function b4295(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(466);
}
function b4296(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(467);
}
function b4297(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(468);
}
function b4298(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(469);
}
function b4299(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(470);
}
function b4300(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(471);
}
function b4301(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(472);
}
function b4302(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(473);
}
function b4303(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(474);
}
function b4304(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(475);
}
function b4305(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(476);
}
function b4306(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(477);
}
function b4307(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(478);
}
function b4308(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(479);
}
function b4309(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(480);
}
function b4310(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(481);
}
function b4311(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(482);
}
function b4312(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(483);
}
function b4313(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(484);
}
function b4314(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(485);
}
function b4315(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(486);
}
function b4316(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(487);
}
function b4317(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(488);
}
function b4318(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(489);
}
function b4319(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(490);
}
function b4320(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(491);
}
function b4321(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(492);
}
function b4322(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(493);
}
function b4323(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(494);
}
function b4324(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(495);
}
function b4325(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(496);
}
function b4326(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(497);
}
function b4327(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(498);
}
function b4328(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(499);
}
function b4329(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(500);
}
function b4330(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(501);
}
function b4331(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(502);
}
function b4332(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(503);
}
function b4333(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(504);
}
function b4334(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(505);
}
function b4335(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(506);
}
function b4336(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(507);
}
function b4337(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(508);
}
function b4338(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(509);
}
function b4339(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(510);
}
function b4340(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(511);
}
function b4342(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(0);
}
function b4343(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(1);
}
function b4344(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(2);
}
function b4345(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(3);
}
function b4346(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(4);
}
function b4347(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(5);
}
function b4348(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(6);
}
function b4349(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(7);
}
function b4350(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(8);
}
function b4351(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(9);
}
function b4352(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(10);
}
function b4353(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(11);
}
function b4354(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(12);
}
function b4355(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(13);
}
function b4356(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(14);
}
function b4357(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(15);
}
function b4358(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(16);
}
function b4359(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(17);
}
function b4360(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(18);
}
function b4361(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(19);
}
function b4362(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(20);
}
function b4363(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(21);
}
function b4364(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(22);
}
function b4365(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(23);
}
function b4366(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(24);
}
function b4367(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(25);
}
function b4368(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(26);
}
function b4369(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(27);
}
function b4370(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(28);
}
function b4371(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(29);
}
function b4372(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(30);
}
function b4373(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(31);
}
function b4374(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(32);
}
function b4375(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(33);
}
function b4376(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(34);
}
function b4377(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(35);
}
function b4378(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(36);
}
function b4379(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(37);
}
function b4380(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(38);
}
function b4381(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(39);
}
function b4382(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(40);
}
function b4383(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(41);
}
function b4384(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(42);
}
function b4385(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(43);
}
function b4386(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(44);
}
function b4387(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(45);
}
function b4388(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(46);
}
function b4389(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(47);
}
function b4390(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(48);
}
function b4391(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(49);
}
function b4392(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(50);
}
function b4393(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(51);
}
function b4394(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(52);
}
function b4395(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(53);
}
function b4396(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(54);
}
function b4397(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(55);
}
function b4398(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(56);
}
function b4399(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(57);
}
function b4400(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(58);
}
function b4401(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(59);
}
function b4402(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(60);
}
function b4403(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(61);
}
function b4404(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(62);
}
function b4405(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(63);
}
function b4406(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(64);
}
function b4407(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(65);
}
function b4408(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(66);
}
function b4409(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(67);
}
function b4410(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(68);
}
function b4411(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(69);
}
function b4412(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(70);
}
function b4413(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(71);
}
function b4414(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(72);
}
function b4415(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(73);
}
function b4416(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(74);
}
function b4417(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(75);
}
function b4418(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(76);
}
function b4419(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(77);
}
function b4420(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(78);
}
function b4421(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(79);
}
function b4422(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(80);
}
function b4423(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(81);
}
function b4424(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(82);
}
function b4425(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(83);
}
function b4426(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(84);
}
function b4427(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(85);
}
function b4428(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(86);
}
function b4429(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(87);
}
function b4430(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(88);
}
function b4431(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(89);
}
function b4432(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(90);
}
function b4433(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(91);
}
function b4434(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(92);
}
function b4435(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(93);
}
function b4436(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(94);
}
function b4437(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(95);
}
function b4438(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(96);
}
function b4439(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(97);
}
function b4440(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(98);
}
function b4441(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(99);
}
function b4442(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(100);
}
function b4443(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(101);
}
function b4444(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(102);
}
function b4445(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(103);
}
function b4446(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(104);
}
function b4447(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(105);
}
function b4448(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(106);
}
function b4449(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(107);
}
function b4450(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(108);
}
function b4451(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(109);
}
function b4452(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(110);
}
function b4453(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(111);
}
function b4454(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(112);
}
function b4455(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(113);
}
function b4456(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(114);
}
function b4457(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(115);
}
function b4458(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(116);
}
function b4459(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(117);
}
function b4460(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(118);
}
function b4461(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(119);
}
function b4462(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(120);
}
function b4463(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(121);
}
function b4464(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(122);
}
function b4465(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(123);
}
function b4466(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(124);
}
function b4467(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(125);
}
function b4468(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(126);
}
function b4469(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(127);
}
function b4470(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(128);
}
function b4471(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(129);
}
function b4472(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(130);
}
function b4473(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(131);
}
function b4474(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(132);
}
function b4475(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(133);
}
function b4476(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(134);
}
function b4477(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(135);
}
function b4478(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(136);
}
function b4479(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(137);
}
function b4480(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(138);
}
function b4481(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(139);
}
function b4482(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(140);
}
function b4483(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(141);
}
function b4484(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(142);
}
function b4485(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(143);
}
function b4486(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(144);
}
function b4487(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(145);
}
function b4488(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(146);
}
function b4489(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(147);
}
function b4490(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(148);
}
function b4491(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(149);
}
function b4492(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(150);
}
function b4493(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(151);
}
function b4494(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(152);
}
function b4495(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(153);
}
function b4496(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(154);
}
function b4497(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(155);
}
function b4498(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(156);
}
function b4499(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(157);
}
function b4500(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(158);
}
function b4501(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(159);
}
function b4502(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(160);
}
function b4503(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(161);
}
function b4504(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(162);
}
function b4505(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(163);
}
function b4506(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(164);
}
function b4507(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(165);
}
function b4508(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(166);
}
function b4509(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(167);
}
function b4510(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(168);
}
function b4511(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(169);
}
function b4512(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(170);
}
function b4513(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(171);
}
function b4514(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(172);
}
function b4515(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(173);
}
function b4516(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(174);
}
function b4517(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(175);
}
function b4518(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(176);
}
function b4519(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(177);
}
function b4520(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(178);
}
function b4521(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(179);
}
function b4522(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(180);
}
function b4523(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(181);
}
function b4524(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(182);
}
function b4525(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(183);
}
function b4526(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(184);
}
function b4527(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(185);
}
function b4528(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(186);
}
function b4529(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(187);
}
function b4530(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(188);
}
function b4531(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(189);
}
function b4532(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(190);
}
function b4533(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(191);
}
function b4534(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(192);
}
function b4535(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(193);
}
function b4536(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(194);
}
function b4537(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(195);
}
function b4538(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(196);
}
function b4539(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(197);
}
function b4540(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(198);
}
function b4541(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(199);
}
function b4542(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(200);
}
function b4543(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(201);
}
function b4544(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(202);
}
function b4545(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(203);
}
function b4546(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(204);
}
function b4547(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(205);
}
function b4548(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(206);
}
function b4549(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(207);
}
function b4550(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(208);
}
function b4551(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(209);
}
function b4552(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(210);
}
function b4553(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(211);
}
function b4554(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(212);
}
function b4555(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(213);
}
function b4556(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(214);
}
function b4557(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(215);
}
function b4558(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(216);
}
function b4559(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(217);
}
function b4560(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(218);
}
function b4561(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(219);
}
function b4562(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(220);
}
function b4563(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(221);
}
function b4564(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(222);
}
function b4565(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(223);
}
function b4566(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(224);
}
function b4567(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(225);
}
function b4568(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(226);
}
function b4569(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(227);
}
function b4570(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(228);
}
function b4571(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(229);
}
function b4572(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(230);
}
function b4573(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(231);
}
function b4574(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(232);
}
function b4575(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(233);
}
function b4576(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(234);
}
function b4577(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(235);
}
function b4578(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(236);
}
function b4579(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(237);
}
function b4580(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(238);
}
function b4581(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(239);
}
function b4582(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(240);
}
function b4583(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(241);
}
function b4584(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(242);
}
function b4585(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(243);
}
function b4586(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(244);
}
function b4587(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(245);
}
function b4588(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(246);
}
function b4589(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(247);
}
function b4590(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(248);
}
function b4591(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(249);
}
function b4592(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(250);
}
function b4593(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(251);
}
function b4594(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(252);
}
function b4595(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(253);
}
function b4596(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(254);
}
function b4597(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(255);
}
function b4598(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(256);
}
function b4599(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(257);
}
function b4600(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(258);
}
function b4601(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(259);
}
function b4602(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(260);
}
function b4603(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(261);
}
function b4604(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(262);
}
function b4605(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(263);
}
function b4606(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(264);
}
function b4607(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(265);
}
function b4608(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(266);
}
function b4609(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(267);
}
function b4610(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(268);
}
function b4611(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(270);
}
function b4612(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(271);
}
function b4613(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(272);
}
function b4614(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(273);
}
function b4615(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(274);
}
function b4616(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(275);
}
function b4617(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(276);
}
function b4618(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(277);
}
function b4619(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(281);
}
function b4620(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(282);
}
function b4621(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(283);
}
function b4622(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(284);
}
function b4623(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(285);
}
function b4624(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(286);
}
function b4625(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(287);
}
function b4626(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(288);
}
function b4627(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(289);
}
function b4628(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(290);
}
function b4629(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(291);
}
function b4630(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(292);
}
function b4631(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(293);
}
function b4632(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(294);
}
function b4633(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(295);
}
function b4634(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(296);
}
function b4635(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(297);
}
function b4636(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(298);
}
function b4637(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(299);
}
function b4638(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(300);
}
function b4639(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(301);
}
function b4640(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(302);
}
function b4641(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(303);
}
function b4642(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(304);
}
function b4643(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(305);
}
function b4644(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(306);
}
function b4645(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(307);
}
function b4646(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(308);
}
function b4647(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(309);
}
function b4648(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(310);
}
function b4649(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(311);
}
function b4650(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(312);
}
function b4651(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(313);
}
function b4652(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(314);
}
function b4653(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(315);
}
function b4654(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(316);
}
function b4655(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(317);
}
function b4656(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(318);
}
function b4657(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(319);
}
function b4658(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(320);
}
function b4659(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(321);
}
function b4660(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(322);
}
function b4661(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(323);
}
function b4662(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(324);
}
function b4663(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(325);
}
function b4664(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(326);
}
function b4665(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(327);
}
function b4666(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(328);
}
function b4667(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(329);
}
function b4668(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(330);
}
function b4669(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(331);
}
function b4670(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(332);
}
function b4671(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(333);
}
function b4672(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(334);
}
function b4673(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(335);
}
function b4674(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(336);
}
function b4675(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(337);
}
function b4676(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(338);
}
function b4677(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(339);
}
function b4678(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(340);
}
function b4679(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(341);
}
function b4680(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(342);
}
function b4681(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(343);
}
function b4682(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(344);
}
function b4683(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(345);
}
function b4684(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(346);
}
function b4685(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(347);
}
function b4686(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(348);
}
function b4687(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(349);
}
function b4688(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(350);
}
function b4689(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(351);
}
function b4690(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(352);
}
function b4691(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(353);
}
function b4692(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(354);
}
function b4693(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(355);
}
function b4694(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(356);
}
function b4695(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(357);
}
function b4696(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(358);
}
function b4697(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(359);
}
function b4698(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(360);
}
function b4699(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(361);
}
function b4700(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(362);
}
function b4701(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(363);
}
function b4702(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(364);
}
function b4703(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(365);
}
function b4704(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(366);
}
function b4705(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(367);
}
function b4706(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(368);
}
function b4707(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(369);
}
function b4708(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(370);
}
function b4709(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(371);
}
function b4710(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(372);
}
function b4711(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(373);
}
function b4712(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(374);
}
function b4713(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(375);
}
function b4714(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(376);
}
function b4715(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(377);
}
function b4716(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(378);
}
function b4717(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(379);
}
function b4718(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(380);
}
function b4719(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(381);
}
function b4720(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(382);
}
function b4721(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(383);
}
function b4722(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(384);
}
function b4723(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(385);
}
function b4724(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(386);
}
function b4725(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(387);
}
function b4726(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(388);
}
function b4727(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(389);
}
function b4728(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(390);
}
function b4729(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(391);
}
function b4730(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(392);
}
function b4731(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(393);
}
function b4732(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(394);
}
function b4733(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(395);
}
function b4734(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(396);
}
function b4735(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(397);
}
function b4736(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(398);
}
function b4737(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(399);
}
function b4738(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(400);
}
function b4739(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(401);
}
function b4740(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(402);
}
function b4741(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(403);
}
function b4742(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(404);
}
function b4743(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(405);
}
function b4744(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(406);
}
function b4745(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(407);
}
function b4746(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(408);
}
function b4747(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(409);
}
function b4748(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(410);
}
function b4749(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(411);
}
function b4750(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(412);
}
function b4751(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(413);
}
function b4752(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(414);
}
function b4753(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(415);
}
function b4754(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(416);
}
function b4755(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(417);
}
function b4756(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(418);
}
function b4757(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(419);
}
function b4758(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(420);
}
function b4759(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(421);
}
function b4760(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(422);
}
function b4761(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(423);
}
function b4762(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(424);
}
function b4763(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(425);
}
function b4764(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(426);
}
function b4765(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(427);
}
function b4766(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(428);
}
function b4767(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(429);
}
function b4768(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(430);
}
function b4769(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(431);
}
function b4770(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(432);
}
function b4771(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(433);
}
function b4772(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(434);
}
function b4773(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(435);
}
function b4774(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(436);
}
function b4775(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(437);
}
function b4776(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(438);
}
function b4777(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(439);
}
function b4778(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(440);
}
function b4779(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(441);
}
function b4780(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(442);
}
function b4781(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(443);
}
function b4782(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(444);
}
function b4783(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(445);
}
function b4784(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(446);
}
function b4785(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(447);
}
function b4786(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(448);
}
function b4787(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(449);
}
function b4788(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(450);
}
function b4789(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(451);
}
function b4790(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(452);
}
function b4791(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(453);
}
function b4792(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(454);
}
function b4793(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(455);
}
function b4794(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(456);
}
function b4795(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(457);
}
function b4796(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(458);
}
function b4797(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(459);
}
function b4798(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(460);
}
function b4799(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(461);
}
function b4800(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(462);
}
function b4801(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(463);
}
function b4802(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(464);
}
function b4803(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(465);
}
function b4804(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(466);
}
function b4805(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(467);
}
function b4806(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(468);
}
function b4807(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(469);
}
function b4808(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(470);
}
function b4809(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(471);
}
function b4810(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(472);
}
function b4811(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(473);
}
function b4812(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(474);
}
function b4813(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(475);
}
function b4814(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(476);
}
function b4815(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(477);
}
function b4816(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(478);
}
function b4817(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(479);
}
function b4818(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(480);
}
function b4819(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(481);
}
function b4820(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(482);
}
function b4821(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(483);
}
function b4822(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(484);
}
function b4823(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(485);
}
function b4824(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(486);
}
function b4825(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(487);
}
function b4826(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(488);
}
function b4827(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(489);
}
function b4828(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(490);
}
function b4829(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(491);
}
function b4830(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(492);
}
function b4831(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(493);
}
function b4832(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(494);
}
function b4833(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(495);
}
function b4834(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(496);
}
function b4835(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(497);
}
function b4836(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(498);
}
function b4837(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(499);
}
function b4838(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(500);
}
function b4839(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(501);
}
function b4840(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(502);
}
function b4841(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(503);
}
function b4842(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(504);
}
function b4843(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(505);
}
function b4844(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(506);
}
function b4845(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(507);
}
function b4846(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(508);
}
function b4847(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(509);
}
function b4848(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(510);
}
function b4849(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(511);
}
function b4851(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(0);
}
function b4852(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(1);
}
function b4853(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(2);
}
function b4854(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(3);
}
function b4855(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(4);
}
function b4856(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(5);
}
function b4857(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(6);
}
function b4858(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(7);
}
function b4859(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(8);
}
function b4860(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(9);
}
function b4861(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(10);
}
function b4862(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(11);
}
function b4863(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(12);
}
function b4864(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(13);
}
function b4865(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(14);
}
function b4866(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(15);
}
function b4867(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(16);
}
function b4868(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(17);
}
function b4869(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(18);
}
function b4870(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(19);
}
function b4871(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(20);
}
function b4872(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(21);
}
function b4873(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(22);
}
function b4874(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(23);
}
function b4875(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(24);
}
function b4876(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(25);
}
function b4877(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(26);
}
function b4878(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(27);
}
function b4879(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(28);
}
function b4880(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(29);
}
function b4881(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(30);
}
function b4882(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(31);
}
function b4883(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(32);
}
function b4884(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(33);
}
function b4885(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(34);
}
function b4886(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(35);
}
function b4887(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(36);
}
function b4888(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(37);
}
function b4889(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(38);
}
function b4890(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(39);
}
function b4891(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(40);
}
function b4892(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(41);
}
function b4893(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(42);
}
function b4894(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(43);
}
function b4895(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(44);
}
function b4896(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(45);
}
function b4897(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(46);
}
function b4898(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(47);
}
function b4899(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(48);
}
function b4900(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(49);
}
function b4901(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(50);
}
function b4902(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(51);
}
function b4903(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(52);
}
function b4904(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(53);
}
function b4905(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(54);
}
function b4906(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(55);
}
function b4907(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(56);
}
function b4908(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(57);
}
function b4909(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(58);
}
function b4910(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(59);
}
function b4911(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(60);
}
function b4912(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(61);
}
function b4913(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(62);
}
function b4914(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(63);
}
function b4915(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(64);
}
function b4916(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(65);
}
function b4917(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(66);
}
function b4918(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(67);
}
function b4919(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(68);
}
function b4920(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(69);
}
function b4921(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(70);
}
function b4922(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(71);
}
function b4923(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(72);
}
function b4924(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(73);
}
function b4925(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(74);
}
function b4926(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(75);
}
function b4927(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(76);
}
function b4928(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(77);
}
function b4929(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(78);
}
function b4930(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(79);
}
function b4931(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(80);
}
function b4932(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(81);
}
function b4933(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(82);
}
function b4934(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(83);
}
function b4935(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(84);
}
function b4936(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(85);
}
function b4937(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(86);
}
function b4938(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(87);
}
function b4939(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(88);
}
function b4940(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(89);
}
function b4941(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(90);
}
function b4942(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(91);
}
function b4943(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(92);
}
function b4944(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(93);
}
function b4945(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(94);
}
function b4946(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(95);
}
function b4947(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(96);
}
function b4948(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(97);
}
function b4949(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(98);
}
function b4950(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(99);
}
function b4951(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(100);
}
function b4952(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(101);
}
function b4953(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(102);
}
function b4954(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(103);
}
function b4955(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(104);
}
function b4956(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(105);
}
function b4957(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(106);
}
function b4958(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(107);
}
function b4959(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(108);
}
function b4960(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(109);
}
function b4961(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(110);
}
function b4962(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(111);
}
function b4963(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(112);
}
function b4964(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(113);
}
function b4965(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(114);
}
function b4966(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(115);
}
function b4967(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(116);
}
function b4968(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(117);
}
function b4969(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(118);
}
function b4970(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(119);
}
function b4971(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(120);
}
function b4972(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(121);
}
function b4973(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(122);
}
function b4974(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(123);
}
function b4975(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(124);
}
function b4976(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(125);
}
function b4977(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(126);
}
function b4978(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(127);
}
function b4979(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(128);
}
function b4980(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(129);
}
function b4981(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(130);
}
function b4982(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(131);
}
function b4983(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(132);
}
function b4984(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(133);
}
function b4985(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(134);
}
function b4986(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(135);
}
function b4987(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(136);
}
function b4988(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(137);
}
function b4989(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(138);
}
function b4990(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(139);
}
function b4991(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(140);
}
function b4992(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(141);
}
function b4993(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(142);
}
function b4994(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(143);
}
function b4995(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(144);
}
function b4996(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(145);
}
function b4997(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(146);
}
function b4998(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(147);
}
function b4999(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(148);
}
function b5000(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(149);
}
function b5001(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(150);
}
function b5002(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(151);
}
function b5003(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(152);
}
function b5004(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(153);
}
function b5005(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(154);
}
function b5006(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(155);
}
function b5007(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(156);
}
function b5008(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(157);
}
function b5009(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(158);
}
function b5010(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(159);
}
function b5011(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(160);
}
function b5012(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(161);
}
function b5013(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(162);
}
function b5014(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(163);
}
function b5015(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(164);
}
function b5016(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(165);
}
function b5017(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(166);
}
function b5018(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(167);
}
function b5019(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(168);
}
function b5020(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(169);
}
function b5021(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(170);
}
function b5022(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(171);
}
function b5023(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(172);
}
function b5024(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(173);
}
function b5025(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(174);
}
function b5026(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(175);
}
function b5027(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(176);
}
function b5028(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(177);
}
function b5029(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(178);
}
function b5030(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(179);
}
function b5031(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(180);
}
function b5032(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(181);
}
function b5033(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(182);
}
function b5034(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(183);
}
function b5035(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(184);
}
function b5036(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(185);
}
function b5037(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(186);
}
function b5038(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(187);
}
function b5039(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(188);
}
function b5040(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(189);
}
function b5041(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(190);
}
function b5042(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(191);
}
function b5043(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(192);
}
function b5044(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(193);
}
function b5045(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(194);
}
function b5046(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(195);
}
function b5047(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(196);
}
function b5048(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(197);
}
function b5049(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(198);
}
function b5050(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(199);
}
function b5051(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(200);
}
function b5052(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(201);
}
function b5053(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(202);
}
function b5054(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(203);
}
function b5055(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(204);
}
function b5056(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(205);
}
function b5057(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(206);
}
function b5058(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(207);
}
function b5059(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(208);
}
function b5060(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(209);
}
function b5061(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(210);
}
function b5062(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(211);
}
function b5063(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(212);
}
function b5064(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(213);
}
function b5065(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(214);
}
function b5066(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(215);
}
function b5067(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(216);
}
function b5068(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(217);
}
function b5069(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(218);
}
function b5070(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(219);
}
function b5071(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(221);
}
function b5072(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(222);
}
function b5073(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(223);
}
function b5074(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(225);
}
function b5075(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(226);
}
function b5076(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(227);
}
function b5077(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(228);
}
function b5078(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(229);
}
function b5079(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(230);
}
function b5080(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(231);
}
function b5081(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(232);
}
function b5082(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(233);
}
function b5083(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(234);
}
function b5084(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(235);
}
function b5085(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(236);
}
function b5086(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(237);
}
function b5087(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(238);
}
function b5088(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(239);
}
function b5089(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(240);
}
function b5090(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(241);
}
function b5091(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(242);
}
function b5092(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(243);
}
function b5093(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(244);
}
function b5094(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(245);
}
function b5095(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(246);
}
function b5096(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(247);
}
function b5097(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(248);
}
function b5098(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(249);
}
function b5099(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(250);
}
function b5100(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(251);
}
function b5101(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(252);
}
function b5102(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(253);
}
function b5103(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(254);
}
function b5104(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(255);
}
function b5105(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(256);
}
function b5106(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(257);
}
function b5107(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(258);
}
function b5108(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(259);
}
function b5109(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(260);
}
function b5110(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(261);
}
function b5111(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(262);
}
function b5112(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(263);
}
function b5113(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(264);
}
function b5114(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(265);
}
function b5115(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(266);
}
function b5116(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(267);
}
function b5117(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(268);
}
function b5118(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(269);
}
function b5119(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(270);
}
function b5120(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(271);
}
function b5121(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(272);
}
function b5122(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(273);
}
function b5123(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(274);
}
function b5124(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(275);
}
function b5125(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(276);
}
function b5126(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(277);
}
function b5127(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(278);
}
function b5128(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(279);
}
function b5129(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(280);
}
function b5130(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(281);
}
function b5131(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(282);
}
function b5132(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(283);
}
function b5133(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(284);
}
function b5134(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(286);
}
function b5135(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(287);
}
function b5136(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(288);
}
function b5137(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(289);
}
function b5138(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(290);
}
function b5139(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(291);
}
function b5140(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(292);
}
function b5141(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(293);
}
function b5142(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(294);
}
function b5143(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(295);
}
function b5144(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(296);
}
function b5145(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(297);
}
function b5146(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(298);
}
function b5147(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(299);
}
function b5148(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(300);
}
function b5149(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(301);
}
function b5150(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(302);
}
function b5151(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(303);
}
function b5152(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(304);
}
function b5153(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(305);
}
function b5154(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(306);
}
function b5155(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(307);
}
function b5156(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(308);
}
function b5157(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(309);
}
function b5158(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(310);
}
function b5159(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(311);
}
function b5160(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(312);
}
function b5161(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(313);
}
function b5162(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(314);
}
function b5163(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(315);
}
function b5164(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(316);
}
function b5165(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(317);
}
function b5166(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(318);
}
function b5167(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(319);
}
function b5168(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(320);
}
function b5169(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(321);
}
function b5170(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(322);
}
function b5171(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(323);
}
function b5172(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(324);
}
function b5173(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(325);
}
function b5174(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(326);
}
function b5175(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(327);
}
function b5176(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(328);
}
function b5177(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(329);
}
function b5178(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(330);
}
function b5179(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(331);
}
function b5180(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(332);
}
function b5181(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(333);
}
function b5182(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(334);
}
function b5183(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(335);
}
function b5184(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(336);
}
function b5185(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(337);
}
function b5186(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(338);
}
function b5187(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(339);
}
function b5188(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(340);
}
function b5189(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(341);
}
function b5190(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(342);
}
function b5191(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(343);
}
function b5192(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(344);
}
function b5193(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(345);
}
function b5194(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(346);
}
function b5195(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(347);
}
function b5196(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(348);
}
function b5197(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(349);
}
function b5198(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(350);
}
function b5199(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(351);
}
function b5200(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(352);
}
function b5201(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(353);
}
function b5202(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(354);
}
function b5203(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(355);
}
function b5204(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(356);
}
function b5205(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(357);
}
function b5206(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(358);
}
function b5207(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(359);
}
function b5208(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(360);
}
function b5209(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(361);
}
function b5210(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(362);
}
function b5211(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(363);
}
function b5212(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(364);
}
function b5213(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(365);
}
function b5214(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(366);
}
function b5215(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(367);
}
function b5216(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(368);
}
function b5217(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(369);
}
function b5218(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(370);
}
function b5219(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(371);
}
function b5220(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(372);
}
function b5221(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(373);
}
function b5222(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(374);
}
function b5223(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(375);
}
function b5224(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(376);
}
function b5225(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(377);
}
function b5226(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(378);
}
function b5227(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(379);
}
function b5228(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(380);
}
function b5229(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(381);
}
function b5230(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(382);
}
function b5231(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(383);
}
function b5232(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(384);
}
function b5233(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(385);
}
function b5234(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(386);
}
function b5235(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(387);
}
function b5236(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(388);
}
function b5237(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(389);
}
function b5238(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(390);
}
function b5239(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(391);
}
function b5240(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(392);
}
function b5241(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(393);
}
function b5242(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(394);
}
function b5243(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(395);
}
function b5244(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(396);
}
function b5245(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(397);
}
function b5246(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(398);
}
function b5247(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(399);
}
function b5248(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(400);
}
function b5249(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(401);
}
function b5250(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(402);
}
function b5251(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(403);
}
function b5252(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(404);
}
function b5253(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(405);
}
function b5254(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(406);
}
function b5255(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(407);
}
function b5256(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(408);
}
function b5257(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(409);
}
function b5258(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(410);
}
function b5259(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(411);
}
function b5260(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(412);
}
function b5261(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(413);
}
function b5262(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(414);
}
function b5263(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(415);
}
function b5264(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(416);
}
function b5265(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(417);
}
function b5266(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(418);
}
function b5267(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(419);
}
function b5268(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(420);
}
function b5269(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(421);
}
function b5270(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(422);
}
function b5271(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(423);
}
function b5272(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(424);
}
function b5273(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(425);
}
function b5274(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(426);
}
function b5275(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(427);
}
function b5276(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(428);
}
function b5277(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(429);
}
function b5278(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(430);
}
function b5279(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(431);
}
function b5280(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(432);
}
function b5281(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(433);
}
function b5282(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(434);
}
function b5283(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(435);
}
function b5284(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(436);
}
function b5285(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(437);
}
function b5286(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(438);
}
function b5287(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(439);
}
function b5288(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(440);
}
function b5289(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(441);
}
function b5290(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(442);
}
function b5291(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(443);
}
function b5292(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(444);
}
function b5293(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(445);
}
function b5294(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(446);
}
function b5295(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(447);
}
function b5296(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(448);
}
function b5297(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(449);
}
function b5298(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(450);
}
function b5299(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(451);
}
function b5300(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(452);
}
function b5301(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(453);
}
function b5302(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(454);
}
function b5303(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(455);
}
function b5304(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(456);
}
function b5305(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(457);
}
function b5306(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(458);
}
function b5307(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(459);
}
function b5308(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(460);
}
function b5309(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(461);
}
function b5310(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(462);
}
function b5311(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(463);
}
function b5312(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(464);
}
function b5313(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(465);
}
function b5314(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(466);
}
function b5315(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(467);
}
function b5316(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(468);
}
function b5317(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(469);
}
function b5318(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(470);
}
function b5319(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(471);
}
function b5320(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(472);
}
function b5321(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(473);
}
function b5322(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(474);
}
function b5323(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(475);
}
function b5324(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(476);
}
function b5325(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(477);
}
function b5326(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(478);
}
function b5327(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(479);
}
function b5328(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(480);
}
function b5329(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(481);
}
function b5330(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(482);
}
function b5331(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(483);
}
function b5332(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(484);
}
function b5333(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(485);
}
function b5334(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(486);
}
function b5335(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(487);
}
function b5336(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(488);
}
function b5337(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(489);
}
function b5338(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(490);
}
function b5339(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(491);
}
function b5340(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(492);
}
function b5341(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(493);
}
function b5342(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(494);
}
function b5343(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(495);
}
function b5344(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(496);
}
function b5345(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(497);
}
function b5346(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(498);
}
function b5347(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(499);
}
function b5348(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(500);
}
function b5349(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(501);
}
function b5350(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(502);
}
function b5351(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(503);
}
function b5352(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(504);
}
function b5353(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(505);
}
function b5354(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(506);
}
function b5355(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(507);
}
function b5356(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(508);
}
function b5357(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(509);
}
function b5358(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(510);
}
function b5359(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(511);
}
function b5361(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(0);
}
function b5362(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(1);
}
function b5363(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(2);
}
function b5364(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(3);
}
function b5365(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(4);
}
function b5366(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(5);
}
function b5367(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(6);
}
function b5368(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(7);
}
function b5369(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(8);
}
function b5370(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(9);
}
function b5371(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(10);
}
function b5372(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(11);
}
function b5373(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(12);
}
function b5374(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(13);
}
function b5375(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(14);
}
function b5376(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(15);
}
function b5377(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(16);
}
function b5378(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(17);
}
function b5379(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(18);
}
function b5380(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(19);
}
function b5381(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(20);
}
function b5382(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(21);
}
function b5383(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(22);
}
function b5384(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(23);
}
function b5385(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(24);
}
function b5386(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(25);
}
function b5387(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(26);
}
function b5388(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(27);
}
function b5389(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(28);
}
function b5390(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(29);
}
function b5391(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(30);
}
function b5392(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(31);
}
function b5393(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(32);
}
function b5394(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(33);
}
function b5395(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(34);
}
function b5396(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(35);
}
function b5397(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(36);
}
function b5398(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(37);
}
function b5399(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(38);
}
function b5400(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(39);
}
function b5401(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(40);
}
function b5402(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(41);
}
function b5403(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(42);
}
function b5404(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(43);
}
function b5405(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(44);
}
function b5406(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(45);
}
function b5407(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(46);
}
function b5408(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(47);
}
function b5409(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(48);
}
function b5410(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(49);
}
function b5411(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(50);
}
function b5412(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(51);
}
function b5413(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(52);
}
function b5414(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(53);
}
function b5415(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(54);
}
function b5416(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(55);
}
function b5417(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(56);
}
function b5418(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(57);
}
function b5419(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(58);
}
function b5420(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(59);
}
function b5421(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(60);
}
function b5422(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(61);
}
function b5423(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(62);
}
function b5424(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(63);
}
function b5425(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(64);
}
function b5426(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(65);
}
function b5427(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(66);
}
function b5428(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(67);
}
function b5429(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(68);
}
function b5430(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(69);
}
function b5431(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(70);
}
function b5432(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(71);
}
function b5433(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(72);
}
function b5434(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(73);
}
function b5435(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(74);
}
function b5436(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(75);
}
function b5437(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(76);
}
function b5438(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(77);
}
function b5439(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(78);
}
function b5440(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(79);
}
function b5441(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(80);
}
function b5442(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(81);
}
function b5443(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(82);
}
function b5444(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(83);
}
function b5445(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(84);
}
function b5446(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(85);
}
function b5447(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(86);
}
function b5448(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(87);
}
function b5449(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(88);
}
function b5450(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(89);
}
function b5451(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(90);
}
function b5452(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(91);
}
function b5453(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(92);
}
function b5454(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(93);
}
function b5455(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(94);
}
function b5456(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(95);
}
function b5457(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(96);
}
function b5458(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(97);
}
function b5459(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(98);
}
function b5460(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(99);
}
function b5461(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(100);
}
function b5462(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(101);
}
function b5463(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(102);
}
function b5464(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(103);
}
function b5465(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(104);
}
function b5466(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(105);
}
function b5467(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(106);
}
function b5468(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(107);
}
function b5469(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(108);
}
function b5470(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(109);
}
function b5471(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(110);
}
function b5472(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(111);
}
function b5473(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(112);
}
function b5474(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(113);
}
function b5475(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(114);
}
function b5476(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(115);
}
function b5477(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(116);
}
function b5478(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(117);
}
function b5479(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(118);
}
function b5480(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(119);
}
function b5481(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(120);
}
function b5482(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(121);
}
function b5483(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(122);
}
function b5484(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(123);
}
function b5485(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(124);
}
function b5486(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(125);
}
function b5487(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(126);
}
function b5488(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(127);
}
function b5489(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(128);
}
function b5490(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(129);
}
function b5491(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(130);
}
function b5492(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(131);
}
function b5493(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(132);
}
function b5494(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(133);
}
function b5495(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(134);
}
function b5496(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(135);
}
function b5497(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(136);
}
function b5498(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(137);
}
function b5499(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(138);
}
function b5500(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(139);
}
function b5501(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(140);
}
function b5502(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(141);
}
function b5503(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(142);
}
function b5504(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(143);
}
function b5505(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(144);
}
function b5506(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(145);
}
function b5507(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(146);
}
function b5508(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(147);
}
function b5509(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(148);
}
function b5510(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(149);
}
function b5511(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(150);
}
function b5512(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(151);
}
function b5513(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(152);
}
function b5514(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(153);
}
function b5515(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(154);
}
function b5516(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(155);
}
function b5517(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(156);
}
function b5518(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(157);
}
function b5519(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(158);
}
function b5520(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(159);
}
function b5521(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(160);
}
function b5522(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(161);
}
function b5523(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(162);
}
function b5524(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(163);
}
function b5525(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(164);
}
function b5526(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(165);
}
function b5527(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(166);
}
function b5528(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(167);
}
function b5529(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(168);
}
function b5530(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(169);
}
function b5531(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(170);
}
function b5532(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(171);
}
function b5533(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(172);
}
function b5534(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(173);
}
function b5535(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(174);
}
function b5536(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(175);
}
function b5537(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(176);
}
function b5538(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(177);
}
function b5539(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(178);
}
function b5540(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(179);
}
function b5541(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(180);
}
function b5542(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(181);
}
function b5543(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(182);
}
function b5544(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(183);
}
function b5545(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(184);
}
function b5546(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(185);
}
function b5547(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(186);
}
function b5548(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(187);
}
function b5549(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(188);
}
function b5550(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(189);
}
function b5551(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(190);
}
function b5552(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(191);
}
function b5553(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(192);
}
function b5554(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(193);
}
function b5555(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(194);
}
function b5556(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(195);
}
function b5557(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(196);
}
function b5558(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(197);
}
function b5559(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(198);
}
function b5560(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(199);
}
function b5561(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(200);
}
function b5562(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(201);
}
function b5563(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(202);
}
function b5564(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(203);
}
function b5565(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(204);
}
function b5566(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(205);
}
function b5567(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(206);
}
function b5568(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(207);
}
function b5569(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(208);
}
function b5570(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(209);
}
function b5571(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(210);
}
function b5572(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(211);
}
function b5573(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(212);
}
function b5574(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(213);
}
function b5575(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(214);
}
function b5576(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(215);
}
function b5577(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(216);
}
function b5578(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(217);
}
function b5579(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(218);
}
function b5580(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(220);
}
function b5581(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(221);
}
function b5582(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(222);
}
function b5583(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(224);
}
function b5584(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(225);
}
function b5585(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(226);
}
function b5586(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(227);
}
function b5587(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(228);
}
function b5588(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(229);
}
function b5589(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(230);
}
function b5590(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(231);
}
function b5591(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(232);
}
function b5592(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(233);
}
function b5593(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(234);
}
function b5594(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(235);
}
function b5595(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(236);
}
function b5596(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(237);
}
function b5597(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(238);
}
function b5598(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(239);
}
function b5599(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(240);
}
function b5600(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(241);
}
function b5601(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(242);
}
function b5602(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(243);
}
function b5603(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(244);
}
function b5604(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(245);
}
function b5605(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(246);
}
function b5606(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(247);
}
function b5607(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(248);
}
function b5608(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(249);
}
function b5609(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(250);
}
function b5610(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(251);
}
function b5611(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(252);
}
function b5612(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(253);
}
function b5613(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(254);
}
function b5614(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(255);
}
function b5615(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(256);
}
function b5616(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(257);
}
function b5617(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(258);
}
function b5618(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(259);
}
function b5619(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(260);
}
function b5620(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(261);
}
function b5621(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(262);
}
function b5622(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(263);
}
function b5623(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(264);
}
function b5624(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(265);
}
function b5625(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(266);
}
function b5626(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(267);
}
function b5627(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(268);
}
function b5628(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(269);
}
function b5629(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(270);
}
function b5630(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(271);
}
function b5631(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(272);
}
function b5632(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(273);
}
function b5633(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(274);
}
function b5634(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(275);
}
function b5635(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(276);
}
function b5636(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(277);
}
function b5637(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(278);
}
function b5638(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(279);
}
function b5639(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(280);
}
function b5640(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(282);
}
function b5641(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(283);
}
function b5642(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(284);
}
function b5643(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(285);
}
function b5644(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(286);
}
function b5645(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(287);
}
function b5646(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(288);
}
function b5647(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(289);
}
function b5648(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(290);
}
function b5649(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(291);
}
function b5650(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(292);
}
function b5651(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(293);
}
function b5652(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(294);
}
function b5653(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(295);
}
function b5654(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(296);
}
function b5655(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(297);
}
function b5656(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(298);
}
function b5657(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(299);
}
function b5658(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(300);
}
function b5659(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(301);
}
function b5660(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(302);
}
function b5661(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(303);
}
function b5662(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(304);
}
function b5663(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(305);
}
function b5664(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(306);
}
function b5665(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(307);
}
function b5666(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(308);
}
function b5667(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(309);
}
function b5668(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(310);
}
function b5669(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(311);
}
function b5670(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(312);
}
function b5671(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(313);
}
function b5672(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(314);
}
function b5673(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(315);
}
function b5674(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(316);
}
function b5675(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(317);
}
function b5676(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(318);
}
function b5677(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(319);
}
function b5678(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(320);
}
function b5679(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(321);
}
function b5680(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(322);
}
function b5681(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(323);
}
function b5682(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(324);
}
function b5683(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(325);
}
function b5684(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(326);
}
function b5685(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(327);
}
function b5686(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(328);
}
function b5687(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(329);
}
function b5688(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(330);
}
function b5689(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(331);
}
function b5690(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(332);
}
function b5691(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(333);
}
function b5692(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(334);
}
function b5693(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(335);
}
function b5694(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(336);
}
function b5695(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(337);
}
function b5696(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(338);
}
function b5697(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(339);
}
function b5698(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(340);
}
function b5699(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(341);
}
function b5700(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(342);
}
function b5701(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(343);
}
function b5702(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(344);
}
function b5703(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(345);
}
function b5704(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(346);
}
function b5705(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(347);
}
function b5706(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(348);
}
function b5707(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(349);
}
function b5708(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(350);
}
function b5709(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(351);
}
function b5710(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(352);
}
function b5711(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(353);
}
function b5712(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(354);
}
function b5713(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(355);
}
function b5714(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(356);
}
function b5715(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(357);
}
function b5716(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(358);
}
function b5717(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(359);
}
function b5718(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(360);
}
function b5719(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(361);
}
function b5720(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(362);
}
function b5721(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(363);
}
function b5722(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(364);
}
function b5723(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(365);
}
function b5724(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(366);
}
function b5725(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(367);
}
function b5726(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(368);
}
function b5727(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(369);
}
function b5728(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(370);
}
function b5729(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(371);
}
function b5730(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(372);
}
function b5731(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(373);
}
function b5732(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(374);
}
function b5733(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(375);
}
function b5734(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(376);
}
function b5735(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(377);
}
function b5736(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(378);
}
function b5737(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(379);
}
function b5738(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(380);
}
function b5739(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(381);
}
function b5740(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(382);
}
function b5741(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(383);
}
function b5742(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(384);
}
function b5743(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(385);
}
function b5744(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(386);
}
function b5745(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(387);
}
function b5746(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(388);
}
function b5747(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(389);
}
function b5748(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(390);
}
function b5749(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(391);
}
function b5750(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(392);
}
function b5751(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(393);
}
function b5752(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(394);
}
function b5753(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(395);
}
function b5754(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(396);
}
function b5755(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(397);
}
function b5756(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(398);
}
function b5757(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(399);
}
function b5758(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(400);
}
function b5759(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(401);
}
function b5760(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(402);
}
function b5761(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(403);
}
function b5762(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(404);
}
function b5763(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(405);
}
function b5764(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(406);
}
function b5765(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(407);
}
function b5766(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(408);
}
function b5767(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(409);
}
function b5768(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(410);
}
function b5769(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(411);
}
function b5770(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(412);
}
function b5771(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(413);
}
function b5772(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(414);
}
function b5773(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(415);
}
function b5774(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(416);
}
function b5775(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(417);
}
function b5776(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(418);
}
function b5777(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(419);
}
function b5778(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(420);
}
function b5779(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(421);
}
function b5780(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(422);
}
function b5781(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(423);
}
function b5782(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(424);
}
function b5783(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(425);
}
function b5784(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(426);
}
function b5785(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(427);
}
function b5786(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(428);
}
function b5787(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(429);
}
function b5788(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(430);
}
function b5789(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(431);
}
function b5790(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(432);
}
function b5791(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(433);
}
function b5792(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(434);
}
function b5793(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(435);
}
function b5794(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(436);
}
function b5795(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(437);
}
function b5796(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(438);
}
function b5797(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(439);
}
function b5798(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(440);
}
function b5799(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(441);
}
function b5800(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(442);
}
function b5801(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(443);
}
function b5802(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(444);
}
function b5803(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(445);
}
function b5804(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(446);
}
function b5805(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(447);
}
function b5806(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(448);
}
function b5807(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(449);
}
function b5808(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(450);
}
function b5809(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(451);
}
function b5810(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(452);
}
function b5811(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(453);
}
function b5812(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(454);
}
function b5813(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(455);
}
function b5814(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(456);
}
function b5815(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(457);
}
function b5816(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(458);
}
function b5817(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(459);
}
function b5818(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(460);
}
function b5819(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(461);
}
function b5820(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(462);
}
function b5821(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(463);
}
function b5822(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(464);
}
function b5823(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(465);
}
function b5824(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(466);
}
function b5825(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(467);
}
function b5826(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(468);
}
function b5827(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(469);
}
function b5828(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(470);
}
function b5829(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(471);
}
function b5830(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(472);
}
function b5831(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(473);
}
function b5832(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(474);
}
function b5833(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(475);
}
function b5834(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(476);
}
function b5835(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(477);
}
function b5836(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(478);
}
function b5837(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(479);
}
function b5838(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(480);
}
function b5839(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(481);
}
function b5840(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(482);
}
function b5841(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(483);
}
function b5842(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(484);
}
function b5843(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(485);
}
function b5844(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(486);
}
function b5845(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(487);
}
function b5846(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(488);
}
function b5847(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(489);
}
function b5848(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(490);
}
function b5849(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(491);
}
function b5850(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(492);
}
function b5851(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(493);
}
function b5852(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(494);
}
function b5853(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(495);
}
function b5854(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(496);
}
function b5855(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(497);
}
function b5856(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(498);
}
function b5857(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(499);
}
function b5858(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(500);
}
function b5859(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(501);
}
function b5860(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(502);
}
function b5861(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(503);
}
function b5862(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(504);
}
function b5863(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(505);
}
function b5864(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(506);
}
function b5865(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(507);
}
function b5866(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(508);
}
function b5867(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(509);
}
function b5868(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(510);
}
function b5869(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(511);
}
function b5871(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(0);
}
function b5872(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(1);
}
function b5873(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(2);
}
function b5874(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(3);
}
function b5875(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(4);
}
function b5876(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(5);
}
function b5877(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(6);
}
function b5878(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(7);
}
function b5879(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(8);
}
function b5880(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(9);
}
function b5881(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(10);
}
function b5882(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(11);
}
function b5883(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(12);
}
function b5884(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(13);
}
function b5885(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(14);
}
function b5886(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(15);
}
function b5887(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(16);
}
function b5888(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(17);
}
function b5889(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(18);
}
function b5890(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(19);
}
function b5891(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(20);
}
function b5892(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(21);
}
function b5893(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(22);
}
function b5894(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(23);
}
function b5895(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(24);
}
function b5896(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(25);
}
function b5897(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(26);
}
function b5898(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(27);
}
function b5899(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(28);
}
function b5900(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(29);
}
function b5901(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(30);
}
function b5902(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(31);
}
function b5903(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(32);
}
function b5904(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(33);
}
function b5905(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(34);
}
function b5906(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(35);
}
function b5907(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(36);
}
function b5908(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(37);
}
function b5909(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(38);
}
function b5910(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(39);
}
function b5911(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(40);
}
function b5912(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(41);
}
function b5913(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(42);
}
function b5914(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(43);
}
function b5915(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(44);
}
function b5916(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(45);
}
function b5917(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(46);
}
function b5918(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(47);
}
function b5919(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(48);
}
function b5920(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(49);
}
function b5921(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(50);
}
function b5922(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(51);
}
function b5923(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(52);
}
function b5924(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(53);
}
function b5925(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(54);
}
function b5926(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(55);
}
function b5927(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(56);
}
function b5928(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(57);
}
function b5929(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(58);
}
function b5930(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(59);
}
function b5931(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(60);
}
function b5932(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(61);
}
function b5933(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(62);
}
function b5934(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(63);
}
function b5935(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(64);
}
function b5936(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(65);
}
function b5937(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(66);
}
function b5938(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(67);
}
function b5939(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(68);
}
function b5940(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(69);
}
function b5941(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(70);
}
function b5942(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(71);
}
function b5943(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(72);
}
function b5944(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(73);
}
function b5945(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(74);
}
function b5946(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(75);
}
function b5947(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(76);
}
function b5948(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(77);
}
function b5949(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(78);
}
function b5950(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(79);
}
function b5951(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(80);
}
function b5952(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(81);
}
function b5953(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(82);
}
function b5954(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(83);
}
function b5955(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(84);
}
function b5956(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(85);
}
function b5957(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(86);
}
function b5958(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(87);
}
function b5959(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(88);
}
function b5960(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(89);
}
function b5961(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(90);
}
function b5962(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(91);
}
function b5963(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(92);
}
function b5964(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(93);
}
function b5965(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(94);
}
function b5966(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(95);
}
function b5967(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(96);
}
function b5968(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(97);
}
function b5969(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(98);
}
function b5970(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(99);
}
function b5971(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(100);
}
function b5972(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(101);
}
function b5973(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(102);
}
function b5974(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(103);
}
function b5975(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(104);
}
function b5976(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(105);
}
function b5977(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(106);
}
function b5978(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(107);
}
function b5979(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(108);
}
function b5980(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(109);
}
function b5981(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(110);
}
function b5982(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(111);
}
function b5983(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(112);
}
function b5984(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(113);
}
function b5985(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(114);
}
function b5986(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(115);
}
function b5987(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(116);
}
function b5988(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(117);
}
function b5989(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(118);
}
function b5990(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(119);
}
function b5991(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(120);
}
function b5992(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(121);
}
function b5993(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(122);
}
function b5994(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(123);
}
function b5995(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(124);
}
function b5996(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(125);
}
function b5997(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(126);
}
function b5998(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(127);
}
function b5999(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(128);
}
function b6000(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(129);
}
function b6001(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(130);
}
function b6002(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(131);
}
function b6003(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(132);
}
function b6004(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(133);
}
function b6005(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(134);
}
function b6006(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(135);
}
function b6007(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(136);
}
function b6008(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(137);
}
function b6009(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(138);
}
function b6010(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(139);
}
function b6011(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(140);
}
function b6012(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(141);
}
function b6013(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(142);
}
function b6014(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(143);
}
function b6015(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(144);
}
function b6016(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(145);
}
function b6017(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(146);
}
function b6018(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(147);
}
function b6019(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(148);
}
function b6020(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(149);
}
function b6021(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(150);
}
function b6022(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(151);
}
function b6023(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(152);
}
function b6024(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(153);
}
function b6025(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(154);
}
function b6026(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(155);
}
function b6027(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(156);
}
function b6028(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(157);
}
function b6029(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(158);
}
function b6030(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(159);
}
function b6031(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(160);
}
function b6032(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(161);
}
function b6033(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(162);
}
function b6034(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(163);
}
function b6035(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(164);
}
function b6036(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(165);
}
function b6037(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(166);
}
function b6038(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(167);
}
function b6039(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(168);
}
function b6040(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(169);
}
function b6041(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(170);
}
function b6042(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(171);
}
function b6043(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(172);
}
function b6044(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(173);
}
function b6045(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(174);
}
function b6046(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(175);
}
function b6047(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(176);
}
function b6048(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(177);
}
function b6049(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(178);
}
function b6050(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(179);
}
function b6051(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(180);
}
function b6052(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(181);
}
function b6053(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(182);
}
function b6054(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(183);
}
function b6055(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(184);
}
function b6056(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(185);
}
function b6057(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(186);
}
function b6058(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(187);
}
function b6059(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(188);
}
function b6060(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(189);
}
function b6061(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(190);
}
function b6062(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(191);
}
function b6063(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(192);
}
function b6064(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(193);
}
function b6065(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(194);
}
function b6066(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(195);
}
function b6067(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(196);
}
function b6068(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(197);
}
function b6069(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(198);
}
function b6070(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(199);
}
function b6071(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(200);
}
function b6072(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(201);
}
function b6073(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(202);
}
function b6074(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(203);
}
function b6075(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(204);
}
function b6076(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(205);
}
function b6077(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(206);
}
function b6078(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(207);
}
function b6079(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(208);
}
function b6080(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(209);
}
function b6081(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(210);
}
function b6082(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(211);
}
function b6083(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(212);
}
function b6084(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(213);
}
function b6085(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(214);
}
function b6086(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(215);
}
function b6087(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(216);
}
function b6088(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(217);
}
function b6089(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(219);
}
function b6090(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(220);
}
function b6091(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(221);
}
function b6092(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(223);
}
function b6093(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(224);
}
function b6094(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(225);
}
function b6095(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(226);
}
function b6096(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(227);
}
function b6097(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(228);
}
function b6098(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(229);
}
function b6099(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(230);
}
function b6100(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(231);
}
function b6101(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(232);
}
function b6102(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(233);
}
function b6103(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(234);
}
function b6104(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(235);
}
function b6105(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(236);
}
function b6106(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(237);
}
function b6107(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(238);
}
function b6108(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(239);
}
function b6109(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(240);
}
function b6110(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(241);
}
function b6111(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(242);
}
function b6112(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(243);
}
function b6113(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(244);
}
function b6114(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(245);
}
function b6115(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(246);
}
function b6116(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(247);
}
function b6117(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(248);
}
function b6118(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(249);
}
function b6119(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(250);
}
function b6120(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(251);
}
function b6121(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(252);
}
function b6122(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(253);
}
function b6123(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(254);
}
function b6124(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(255);
}
function b6125(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(256);
}
function b6126(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(257);
}
function b6127(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(258);
}
function b6128(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(259);
}
function b6129(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(260);
}
function b6130(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(261);
}
function b6131(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(262);
}
function b6132(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(263);
}
function b6133(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(264);
}
function b6134(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(265);
}
function b6135(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(266);
}
function b6136(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(267);
}
function b6137(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(268);
}
function b6138(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(269);
}
function b6139(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(271);
}
function b6140(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(272);
}
function b6141(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(273);
}
function b6142(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(274);
}
function b6143(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(275);
}
function b6144(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(276);
}
function b6145(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(277);
}
function b6146(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(278);
}
function b6147(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(279);
}
function b6148(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(280);
}
function b6149(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(281);
}
function b6150(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(282);
}
function b6151(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(283);
}
function b6152(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(284);
}
function b6153(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(285);
}
function b6154(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(286);
}
function b6155(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(287);
}
function b6156(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(288);
}
function b6157(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(289);
}
function b6158(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(290);
}
function b6159(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(291);
}
function b6160(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(292);
}
function b6161(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(293);
}
function b6162(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(294);
}
function b6163(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(295);
}
function b6164(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(296);
}
function b6165(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(297);
}
function b6166(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(298);
}
function b6167(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(299);
}
function b6168(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(300);
}
function b6169(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(301);
}
function b6170(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(302);
}
function b6171(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(303);
}
function b6172(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(304);
}
function b6173(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(305);
}
function b6174(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(306);
}
function b6175(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(307);
}
function b6176(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(308);
}
function b6177(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(309);
}
function b6178(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(310);
}
function b6179(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(311);
}
function b6180(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(312);
}
function b6181(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(313);
}
function b6182(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(314);
}
function b6183(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(315);
}
function b6184(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(316);
}
function b6185(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(317);
}
function b6186(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(318);
}
function b6187(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(319);
}
function b6188(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(320);
}
function b6189(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(321);
}
function b6190(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(322);
}
function b6191(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(323);
}
function b6192(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(324);
}
function b6193(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(325);
}
function b6194(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(326);
}
function b6195(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(327);
}
function b6196(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(328);
}
function b6197(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(329);
}
function b6198(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(330);
}
function b6199(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(331);
}
function b6200(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(332);
}
function b6201(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(333);
}
function b6202(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(334);
}
function b6203(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(335);
}
function b6204(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(336);
}
function b6205(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(337);
}
function b6206(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(338);
}
function b6207(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(339);
}
function b6208(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(340);
}
function b6209(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(341);
}
function b6210(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(342);
}
function b6211(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(343);
}
function b6212(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(344);
}
function b6213(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(345);
}
function b6214(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(346);
}
function b6215(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(347);
}
function b6216(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(348);
}
function b6217(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(349);
}
function b6218(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(350);
}
function b6219(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(351);
}
function b6220(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(352);
}
function b6221(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(353);
}
function b6222(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(354);
}
function b6223(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(355);
}
function b6224(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(356);
}
function b6225(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(357);
}
function b6226(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(358);
}
function b6227(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(359);
}
function b6228(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(360);
}
function b6229(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(361);
}
function b6230(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(362);
}
function b6231(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(363);
}
function b6232(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(364);
}
function b6233(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(365);
}
function b6234(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(366);
}
function b6235(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(367);
}
function b6236(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(368);
}
function b6237(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(369);
}
function b6238(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(370);
}
function b6239(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(371);
}
function b6240(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(372);
}
function b6241(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(373);
}
function b6242(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(374);
}
function b6243(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(375);
}
function b6244(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(376);
}
function b6245(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(377);
}
function b6246(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(378);
}
function b6247(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(379);
}
function b6248(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(380);
}
function b6249(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(381);
}
function b6250(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(382);
}
function b6251(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(383);
}
function b6252(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(384);
}
function b6253(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(385);
}
function b6254(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(386);
}
function b6255(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(387);
}
function b6256(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(388);
}
function b6257(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(389);
}
function b6258(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(390);
}
function b6259(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(391);
}
function b6260(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(392);
}
function b6261(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(393);
}
function b6262(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(394);
}
function b6263(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(395);
}
function b6264(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(396);
}
function b6265(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(397);
}
function b6266(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(398);
}
function b6267(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(399);
}
function b6268(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(400);
}
function b6269(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(401);
}
function b6270(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(402);
}
function b6271(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(403);
}
function b6272(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(404);
}
function b6273(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(405);
}
function b6274(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(406);
}
function b6275(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(407);
}
function b6276(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(408);
}
function b6277(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(409);
}
function b6278(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(410);
}
function b6279(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(411);
}
function b6280(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(412);
}
function b6281(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(413);
}
function b6282(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(414);
}
function b6283(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(415);
}
function b6284(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(416);
}
function b6285(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(417);
}
function b6286(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(418);
}
function b6287(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(419);
}
function b6288(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(420);
}
function b6289(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(421);
}
function b6290(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(422);
}
function b6291(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(423);
}
function b6292(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(424);
}
function b6293(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(425);
}
function b6294(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(426);
}
function b6295(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(427);
}
function b6296(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(428);
}
function b6297(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(429);
}
function b6298(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(430);
}
function b6299(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(431);
}
function b6300(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(432);
}
function b6301(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(433);
}
function b6302(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(434);
}
function b6303(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(435);
}
function b6304(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(436);
}
function b6305(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(437);
}
function b6306(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(438);
}
function b6307(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(439);
}
function b6308(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(440);
}
function b6309(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(441);
}
function b6310(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(442);
}
function b6311(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(443);
}
function b6312(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(444);
}
function b6313(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(445);
}
function b6314(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(446);
}
function b6315(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(447);
}
function b6316(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(448);
}
function b6317(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(449);
}
function b6318(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(450);
}
function b6319(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(451);
}
function b6320(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(452);
}
function b6321(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(453);
}
function b6322(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(454);
}
function b6323(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(455);
}
function b6324(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(456);
}
function b6325(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(457);
}
function b6326(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(458);
}
function b6327(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(459);
}
function b6328(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(460);
}
function b6329(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(461);
}
function b6330(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(462);
}
function b6331(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(463);
}
function b6332(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(464);
}
function b6333(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(465);
}
function b6334(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(466);
}
function b6335(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(467);
}
function b6336(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(468);
}
function b6337(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(469);
}
function b6338(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(470);
}
function b6339(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(471);
}
function b6340(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(472);
}
function b6341(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(473);
}
function b6342(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(474);
}
function b6343(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(475);
}
function b6344(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(476);
}
function b6345(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(477);
}
function b6346(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(478);
}
function b6347(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(479);
}
function b6348(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(480);
}
function b6349(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(481);
}
function b6350(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(482);
}
function b6351(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(483);
}
function b6352(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(484);
}
function b6353(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(485);
}
function b6354(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(486);
}
function b6355(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(487);
}
function b6356(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(488);
}
function b6357(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(489);
}
function b6358(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(490);
}
function b6359(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(491);
}
function b6360(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(492);
}
function b6361(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(493);
}
function b6362(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(494);
}
function b6363(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(495);
}
function b6364(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(496);
}
function b6365(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(497);
}
function b6366(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(498);
}
function b6367(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(499);
}
function b6368(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(500);
}
function b6369(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(501);
}
function b6370(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(502);
}
function b6371(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(503);
}
function b6372(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(504);
}
function b6373(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(505);
}
function b6374(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(506);
}
function b6375(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(507);
}
function b6376(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(508);
}
function b6377(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(509);
}
function b6378(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(510);
}
function b6379(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(511);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_ii = [b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,__ZNKSt3__210__function6__funcIZN23MainMenuBackgroundLayer7OnEventERK5EventE3__0NS_9allocatorIS6_EEFbS5_EE7__cloneEv,b14,b15,b16,b17,b18,__ZNKSt3__210__function6__funcIZN23MainMenuBackgroundLayer7OnEventERK5EventE3__0NS_9allocatorIS6_EEFbS5_EE11target_typeEv,b19,b20,b21,b22,b23,b24,b25,b26,b27
,__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EE7__cloneEv,b28,b29,b30,b31,b32,__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EE11target_typeEv,b33,b34,__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EE7__cloneEv,b35,b36,b37,b38,b39,__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EE11target_typeEv,b40,b41,__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EE7__cloneEv,b42,b43,b44,b45,b46,__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EE11target_typeEv,b47,b48,__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EE7__cloneEv,b49,b50
,b51,b52,b53,__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EE11target_typeEv,b54,b55,__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EE7__cloneEv,b56,b57,b58,b59,b60,__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EE11target_typeEv,b61,b62,__ZNKSt3__210__function6__funcIZN16MainMenuGUILayer7OnEventERK5EventE4__16NS_9allocatorIS6_EEFbS5_EE7__cloneEv,b63,b64,b65,b66,b67,__ZNKSt3__210__function6__funcIZN16MainMenuGUILayer7OnEventERK5EventE4__16NS_9allocatorIS6_EEFbS5_EE11target_typeEv,b68,b69,b70,b71,b72,b73,b74,b75
,b76,__ZNKSt3__210__function6__funcIZN27SettingsMainBackgroundLayer7OnEventERK5EventE4__17NS_9allocatorIS6_EEFbS5_EE7__cloneEv,b77,b78,b79,b80,b81,__ZNKSt3__210__function6__funcIZN27SettingsMainBackgroundLayer7OnEventERK5EventE4__17NS_9allocatorIS6_EEFbS5_EE11target_typeEv,b82,b83,b84,b85,b86,b87,b88,b89,b90,__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EE7__cloneEv,b91,b92,b93,b94,b95,__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EE11target_typeEv,b96,b97,__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EE7__cloneEv,b98,b99,b100
,b101,b102,__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EE11target_typeEv,b103,b104,__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EE7__cloneEv,b105,b106,b107,b108,b109,__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EE11target_typeEv,b110,b111,__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EE7__cloneEv,b112,b113,b114,b115,b116,__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EE11target_typeEv,b117,b118,__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EE7__cloneEv,b119,b120,b121,b122,b123,__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EE11target_typeEv
,b124,b125,__ZNKSt3__210__function6__funcIZN20SettingsMainGUILayer7OnEventERK5EventE4__39NS_9allocatorIS6_EEFbS5_EE7__cloneEv,b126,b127,b128,b129,b130,__ZNKSt3__210__function6__funcIZN20SettingsMainGUILayer7OnEventERK5EventE4__39NS_9allocatorIS6_EEFbS5_EE11target_typeEv,b131,b132,b133,b134,b135,b136,b137,b138,b139,b140,b141,b142,b143,b144,b145,b146,b147,b148,b149,b150,b151
,b152,b153,b154,b155,b156,b157,b158,b159,b160,b161,__ZNKSt3__210__function6__funcIZ4mainE3__0NS_9allocatorIS2_EEFvvEE7__cloneEv,b162,b163,b164,b165,b166,__ZNKSt3__210__function6__funcIZ4mainE3__0NS_9allocatorIS2_EEFvvEE11target_typeEv,b167,b168,b169,b170,b171,b172,b173,__ZL15stbi__stdio_eofPv,___stdio_close,b174,b175,b176,b177
,b178,b179,__ZNKSt3__217bad_function_call4whatEv,b180,b181,b182,b183,b184,b185,b186,b187,b188,b189,b190,b191,b192,b193,b194,__ZNKSt9exception4whatEv,b195,b196,__ZNKSt11logic_error4whatEv,b197,b198,b199,b200,b201,b202,b203,b204
,b205,b206,b207,b208,b209,b210,b211,b212,b213,b214,b215,b216,b217,b218,b219,b220,b221];
var FUNCTION_TABLE_iidiiii = [b223,b224,b225,b226,b227,b228,b229,b230,b231,b232,b233,b234,b235,b236,b237,b238,b239,b240,b241,b242,b243,b244,b245,b246,b247,b248,b249,b250,b251
,b252,b253,b254,b255,b256,b257,b258,b259,b260,b261,b262,b263,b264,b265,b266,b267,b268,b269,b270,b271,b272,b273,b274,b275,b276,b277,b278,b279,b280,b281
,b282,b283,b284,b285,b286,b287,b288,b289,b290,b291,b292,b293,b294,b295,b296,b297,b298,b299,b300,b301,b302,b303,b304,b305,b306,b307,b308,b309,b310,b311
,b312,b313,b314,b315,b316,b317,b318,b319,b320,b321,b322,b323,b324,b325,b326,b327,b328,b329,b330,b331,b332,b333,b334,b335,b336,b337,b338,b339,b340,b341
,b342,b343,b344,b345,b346,b347,b348,b349,b350,b351,b352,b353,b354,b355,b356,b357,b358,b359,b360,b361,b362,b363,b364,b365,b366,b367,b368,b369,b370,b371
,b372,b373,b374,b375,b376,b377,b378,b379,b380,b381,b382,b383,b384,b385,b386,b387,b388,b389,b390,b391,b392,b393,b394,b395,b396,b397,b398,b399,b400,b401
,b402,b403,b404,b405,b406,b407,b408,b409,b410,b411,b412,b413,b414,b415,b416,b417,b418,b419,b420,b421,b422,b423,b424,b425,b426,b427,b428,b429,b430,b431
,b432,b433,b434,b435,b436,b437,b438,b439,b440,b441,b442,b443,b444,b445,b446,b447,b448,b449,b450,b451,b452,b453,b454,b455,b456,b457,b458,b459,b460,b461
,b462,b463,b464,b465,b466,b467,b468,b469,b470,b471,b472,b473,b474,b475,b476,b477,b478,b479,b480,b481,b482,b483,b484,b485,b486,b487,b488,b489,b490,b491
,b492,b493,b494,b495,b496,b497,b498,b499,b500,b501,b502,b503,b504,b505,b506,b507,b508,b509,_fmt_fp,b510,b511,b512,b513,b514,b515,b516,b517,b518,b519,b520
,b521,b522,b523,b524,b525,b526,b527,b528,b529,b530,b531,b532,b533,b534,b535,b536,b537,b538,b539,b540,b541,b542,b543,b544,b545,b546,b547,b548,b549,b550
,b551,b552,b553,b554,b555,b556,b557,b558,b559,b560,b561,b562,b563,b564,b565,b566,b567,b568,b569,b570,b571,b572,b573,b574,b575,b576,b577,b578,b579,b580
,b581,b582,b583,b584,b585,b586,b587,b588,b589,b590,b591,b592,b593,b594,b595,b596,b597,b598,b599,b600,b601,b602,b603,b604,b605,b606,b607,b608,b609,b610
,b611,b612,b613,b614,b615,b616,b617,b618,b619,b620,b621,b622,b623,b624,b625,b626,b627,b628,b629,b630,b631,b632,b633,b634,b635,b636,b637,b638,b639,b640
,b641,b642,b643,b644,b645,b646,b647,b648,b649,b650,b651,b652,b653,b654,b655,b656,b657,b658,b659,b660,b661,b662,b663,b664,b665,b666,b667,b668,b669,b670
,b671,b672,b673,b674,b675,b676,b677,b678,b679,b680,b681,b682,b683,b684,b685,b686,b687,b688,b689,b690,b691,b692,b693,b694,b695,b696,b697,b698,b699,b700
,b701,b702,b703,b704,b705,b706,b707,b708,b709,b710,b711,b712,b713,b714,b715,b716,b717,b718,b719,b720,b721,b722,b723,b724,b725,b726,b727,b728,b729,b730
,b731,b732,b733];
var FUNCTION_TABLE_iii = [b735,b736,b737,b738,b739,b740,b741,b742,b743,b744,b745,b746,b747,b748,b749,b750,b751,__ZNSt3__210__function6__funcIZN23MainMenuBackgroundLayer7OnEventERK5EventE3__0NS_9allocatorIS6_EEFbS5_EEclES5_,__ZNKSt3__210__function6__funcIZN23MainMenuBackgroundLayer7OnEventERK5EventE3__0NS_9allocatorIS6_EEFbS5_EE6targetERKSt9type_info,b752,b753,b754,b755,b756,b757,b758,b759,b760,b761
,b762,b763,b764,b765,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EEclES6_,__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EE6targetERKSt9type_info,b766,b767,b768,b769,b770,b771,b772,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EEclES6_,__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EE6targetERKSt9type_info,b773,b774,b775,b776,b777,b778,b779,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EEclES6_,__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EE6targetERKSt9type_info,b780,b781,b782,b783,b784,b785
,b786,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EEclES6_,__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EE6targetERKSt9type_info,b787,b788,b789,b790,b791,b792,b793,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EEclES6_,__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EE6targetERKSt9type_info,b794,b795,b796,b797,b798,b799,b800,__ZNSt3__210__function6__funcIZN16MainMenuGUILayer7OnEventERK5EventE4__16NS_9allocatorIS6_EEFbS5_EEclES5_,__ZNKSt3__210__function6__funcIZN16MainMenuGUILayer7OnEventERK5EventE4__16NS_9allocatorIS6_EEFbS5_EE6targetERKSt9type_info,b801,b802,b803,b804,b805,b806,b807,b808,b809
,b810,b811,b812,b813,b814,__ZNSt3__210__function6__funcIZN27SettingsMainBackgroundLayer7OnEventERK5EventE4__17NS_9allocatorIS6_EEFbS5_EEclES5_,__ZNKSt3__210__function6__funcIZN27SettingsMainBackgroundLayer7OnEventERK5EventE4__17NS_9allocatorIS6_EEFbS5_EE6targetERKSt9type_info,b815,b816,b817,b818,b819,b820,b821,b822,b823,b824,b825,b826,b827,b828,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EEclES6_,__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EE6targetERKSt9type_info,b829,b830,b831,b832,b833,b834,b835
,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EEclES6_,__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EE6targetERKSt9type_info,b836,b837,b838,b839,b840,b841,b842,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EEclES6_,__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EE6targetERKSt9type_info,b843,b844,b845,b846,b847,b848,b849,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EEclES6_,__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EE6targetERKSt9type_info,b850,b851,b852,b853,b854,b855,b856,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EEclES6_,__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EE6targetERKSt9type_info,b857
,b858,b859,b860,b861,b862,b863,__ZNSt3__210__function6__funcIZN20SettingsMainGUILayer7OnEventERK5EventE4__39NS_9allocatorIS6_EEFbS5_EEclES5_,__ZNKSt3__210__function6__funcIZN20SettingsMainGUILayer7OnEventERK5EventE4__39NS_9allocatorIS6_EEFbS5_EE6targetERKSt9type_info,b864,b865,b866,b867,b868,b869,b870,b871,b872,b873,b874,b875,b876,b877,b878,b879,b880,b881,b882,b883,b884,b885
,b886,b887,b888,b889,b890,b891,b892,b893,b894,b895,b896,b897,b898,b899,b900,__ZNKSt3__210__function6__funcIZ4mainE3__0NS_9allocatorIS2_EEFvvEE6targetERKSt9type_info,b901,b902,b903,__ZNK15SettingsConfigs13GetFieldValueEt,b904,b905,b906,b907,b908,b909,b910,b911,b912,b913
,b914,b915,b916,b917,b918,b919,b920,b921,b922,b923,b924,b925,b926,b927,b928,b929,b930,b931,b932,b933,b934,b935,b936,b937,b938,b939,b940,b941,b942,b943
,b944,b945,b946,b947,b948,b949,b950,b951,b952,b953,b954,b955,b956,b957,b958,b959,b960];
var FUNCTION_TABLE_iiii = [b962,b963,b964,b965,b966,b967,b968,b969,b970,b971,b972,b973,b974,b975,b976,b977,b978,b979,b980,b981,b982,b983,b984,b985,b986,b987,b988,b989,b990
,b991,b992,b993,b994,b995,b996,b997,b998,b999,b1000,b1001,b1002,b1003,b1004,b1005,b1006,b1007,b1008,b1009,b1010,b1011,b1012,b1013,b1014,b1015,b1016,b1017,b1018,b1019,b1020
,b1021,b1022,b1023,b1024,b1025,b1026,b1027,b1028,b1029,b1030,b1031,b1032,b1033,b1034,b1035,b1036,b1037,b1038,b1039,b1040,b1041,b1042,b1043,b1044,b1045,b1046,b1047,b1048,b1049,b1050
,b1051,b1052,b1053,b1054,b1055,b1056,b1057,b1058,b1059,b1060,b1061,b1062,b1063,b1064,b1065,b1066,b1067,b1068,b1069,b1070,b1071,b1072,b1073,b1074,b1075,b1076,b1077,b1078,b1079,b1080
,b1081,b1082,b1083,b1084,b1085,b1086,b1087,b1088,b1089,b1090,b1091,b1092,b1093,b1094,b1095,b1096,b1097,b1098,b1099,b1100,b1101,b1102,b1103,b1104,b1105,b1106,b1107,b1108,b1109,b1110
,b1111,b1112,b1113,b1114,b1115,b1116,b1117,b1118,b1119,b1120,b1121,b1122,b1123,b1124,b1125,b1126,b1127,b1128,b1129,b1130,b1131,b1132,b1133,b1134,b1135,b1136,b1137,b1138,b1139,b1140
,b1141,b1142,b1143,b1144,b1145,b1146,b1147,b1148,b1149,b1150,b1151,b1152,b1153,b1154,b1155,b1156,b1157,b1158,b1159,b1160,b1161,b1162,__ZL16stbi__stdio_readPvPci,b1163,b1164,b1165,___stdio_write,b1166,___stdout_write,_sn_write
,b1167,b1168,b1169,b1170,b1171,b1172,b1173,b1174,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b1175,b1176,b1177,b1178,b1179,b1180,b1181,b1182,b1183,b1184,b1185,b1186,b1187,b1188,b1189,b1190,b1191,b1192,b1193,b1194,b1195
,b1196,b1197,b1198,b1199,b1200,b1201,b1202,b1203,b1204,b1205,b1206,b1207,b1208,b1209,b1210,b1211,b1212,b1213,b1214,b1215,b1216,b1217,b1218,b1219,b1220,b1221,b1222,b1223,b1224,b1225
,b1226,b1227,b1228,b1229,b1230,b1231,b1232,b1233,b1234,b1235,b1236,b1237,b1238,b1239,b1240,b1241,b1242,b1243,b1244,b1245,___stdio_read,b1246,b1247,b1248,b1249,b1250,b1251,b1252,b1253,b1254
,b1255,b1256,b1257,b1258,b1259,b1260,b1261,b1262,b1263,b1264,b1265,b1266,b1267,b1268,b1269,b1270,b1271,b1272,b1273,b1274,b1275,b1276,b1277,b1278,b1279,b1280,b1281,b1282,b1283,b1284
,b1285,b1286,b1287,b1288,b1289,b1290,b1291,b1292,b1293,b1294,b1295,b1296,b1297,b1298,b1299,b1300,b1301,b1302,b1303,b1304,b1305,b1306,b1307,b1308,b1309,b1310,b1311,b1312,b1313,b1314
,b1315,b1316,b1317,b1318,b1319,b1320,b1321,b1322,b1323,b1324,b1325,b1326,b1327,b1328,b1329,b1330,b1331,b1332,b1333,b1334,b1335,b1336,b1337,b1338,b1339,b1340,b1341,b1342,b1343,b1344
,b1345,b1346,b1347,b1348,b1349,b1350,b1351,b1352,b1353,b1354,b1355,b1356,b1357,b1358,b1359,b1360,b1361,b1362,b1363,b1364,b1365,b1366,b1367,b1368,b1369,b1370,b1371,b1372,b1373,b1374
,b1375,b1376,b1377,b1378,b1379,b1380,b1381,b1382,b1383,b1384,b1385,b1386,b1387,b1388,b1389,b1390,b1391,b1392,b1393,b1394,b1395,b1396,b1397,b1398,b1399,b1400,b1401,b1402,b1403,b1404
,b1405,b1406,b1407,b1408,b1409,b1410,b1411,b1412,b1413,b1414,b1415,b1416,b1417,b1418,b1419,b1420,b1421,b1422,b1423,b1424,b1425,b1426,b1427,b1428,b1429,b1430,b1431,b1432,b1433,b1434
,b1435,b1436,b1437,b1438,b1439,b1440,b1441,b1442,b1443,b1444,b1445,b1446,b1447,b1448,b1449,b1450,b1451,b1452,b1453,b1454,b1455,b1456,b1457,b1458,b1459,b1460,b1461,b1462,b1463,b1464
,b1465,b1466,b1467];
var FUNCTION_TABLE_iiiii = [b1469,b1470,b1471,b1472,b1473,b1474,b1475,b1476,b1477,b1478,b1479,b1480,b1481,b1482,b1483,b1484,b1485,b1486,b1487,b1488,b1489,b1490,b1491,b1492,b1493,b1494,b1495,b1496,b1497
,b1498,b1499,b1500,b1501,b1502,b1503,b1504,b1505,b1506,b1507,b1508,b1509,b1510,b1511,b1512,b1513,b1514,b1515,b1516,b1517,b1518,b1519,b1520,b1521,b1522,b1523,b1524,b1525,b1526,b1527
,b1528,b1529,b1530,b1531,b1532,b1533,b1534,b1535,b1536,b1537,b1538,b1539,b1540,b1541,b1542,b1543,b1544,b1545,b1546,b1547,b1548,b1549,b1550,b1551,b1552,b1553,b1554,b1555,b1556,b1557
,b1558,b1559,b1560,b1561,b1562,b1563,b1564,b1565,b1566,b1567,b1568,b1569,b1570,b1571,b1572,b1573,b1574,b1575,b1576,b1577,b1578,b1579,b1580,b1581,b1582,b1583,b1584,b1585,b1586,b1587
,b1588,b1589,b1590,b1591,b1592,b1593,b1594,b1595,b1596,b1597,b1598,b1599,b1600,b1601,b1602,b1603,b1604,b1605,b1606,b1607,b1608,b1609,b1610,b1611,b1612,b1613,b1614,b1615,b1616,b1617
,b1618,b1619,b1620,b1621,b1622,b1623,b1624,b1625,b1626,b1627,b1628,b1629,b1630,b1631,b1632,b1633,b1634,b1635,b1636,b1637,b1638,b1639,b1640,b1641,b1642,b1643,b1644,b1645,b1646,b1647
,b1648,b1649,b1650,b1651,b1652,b1653,b1654,b1655,b1656,b1657,b1658,b1659,b1660,b1661,b1662,b1663,b1664,b1665,b1666,b1667,b1668,b1669,b1670,b1671,b1672,b1673,b1674,___stdio_seek,b1675,b1676
,b1677,b1678,b1679,b1680,b1681,b1682,b1683,b1684,b1685,b1686,b1687,b1688,b1689,b1690,b1691,b1692,b1693,b1694,b1695,b1696,b1697,b1698,b1699,b1700,b1701,b1702,b1703,b1704,b1705,b1706
,b1707,b1708,b1709,b1710,b1711,b1712,b1713,b1714,b1715,b1716,b1717,b1718,b1719,b1720,b1721,b1722,b1723];
var FUNCTION_TABLE_iiiiii = [b1725,b1726,b1727,b1728,b1729,b1730,b1731,b1732,b1733,b1734,b1735,b1736,b1737,b1738,b1739,b1740,b1741,b1742,b1743,b1744,b1745,b1746,b1747,b1748,b1749,b1750,b1751,b1752,b1753
,b1754,b1755,b1756,b1757,b1758,b1759,b1760,b1761,b1762,b1763,b1764,b1765,b1766,b1767,b1768,b1769,b1770,b1771,b1772,b1773,b1774,b1775,b1776,b1777,b1778,b1779,b1780,b1781,b1782,b1783
,b1784,b1785,b1786,b1787,b1788,b1789,b1790,b1791,b1792,b1793,b1794,b1795,b1796,b1797,b1798,b1799,b1800,b1801,b1802,b1803,b1804,b1805,b1806,b1807,b1808,b1809,b1810,b1811,b1812,b1813
,b1814,b1815,b1816,b1817,b1818,b1819,b1820,b1821,b1822,b1823,b1824,b1825,b1826,b1827,b1828,b1829,b1830,b1831,b1832,b1833,b1834,b1835,b1836,b1837,b1838,b1839,b1840,b1841,b1842,b1843
,b1844,b1845,b1846,b1847,b1848,b1849,b1850,b1851,b1852,b1853,b1854,b1855,b1856,b1857,b1858,b1859,b1860,b1861,b1862,b1863,b1864,b1865,b1866,b1867,b1868,b1869,b1870,b1871,b1872,b1873
,b1874,b1875,b1876,b1877,b1878,b1879,b1880,b1881,b1882,b1883,b1884,b1885,b1886,b1887,b1888,b1889,b1890,b1891,b1892,b1893,b1894,b1895,b1896,b1897,b1898,b1899,b1900,b1901,b1902,b1903
,b1904,b1905,b1906,b1907,b1908,b1909,b1910,b1911,b1912,b1913,b1914,b1915,b1916,b1917,b1918,b1919,b1920,b1921,b1922,b1923,b1924,b1925,b1926,b1927,b1928,b1929,b1930,b1931,b1932,b1933
,b1934,b1935,b1936,b1937,b1938,b1939,b1940,b1941,b1942,b1943,b1944,b1945,b1946,b1947,b1948,b1949,b1950,b1951,b1952,b1953,b1954,b1955,b1956,b1957,b1958,b1959,b1960,b1961,b1962,b1963
,b1964,b1965,b1966,b1967,b1968,b1969,b1970,b1971,b1972,b1973,b1974,b1975,b1976,b1977,b1978,b1979,b1980,b1981,b1982,b1983,b1984,b1985,b1986,b1987,b1988,b1989,b1990,b1991,b1992,b1993
,b1994,b1995,__ZL23stbi__resample_row_hv_2PhS_S_ii,__ZL14resample_row_1PhS_S_ii,__ZL22stbi__resample_row_v_2PhS_S_ii,__ZL22stbi__resample_row_h_2PhS_S_ii,__ZL26stbi__resample_row_genericPhS_S_ii,b1996,b1997,b1998,b1999,b2000,b2001,b2002,b2003,b2004,b2005,b2006,b2007,b2008,b2009,b2010,b2011,b2012,b2013,b2014,b2015,b2016,b2017,b2018
,b2019,b2020,b2021,b2022,b2023,b2024,b2025,b2026,b2027,b2028,b2029,b2030,b2031,b2032,b2033,b2034,b2035,b2036,b2037,b2038,b2039,b2040,b2041,b2042,b2043,b2044,b2045,b2046,b2047,b2048
,b2049,b2050,b2051,b2052,b2053,b2054,b2055,b2056,b2057,b2058,b2059,b2060,b2061,b2062,b2063,b2064,b2065,b2066,b2067,b2068,b2069,b2070,b2071,b2072,b2073,b2074,b2075,b2076,b2077,b2078
,b2079,b2080,b2081,b2082,b2083,b2084,b2085,b2086,b2087,b2088,b2089,b2090,b2091,b2092,b2093,b2094,b2095,b2096,b2097,b2098,b2099,b2100,b2101,b2102,b2103,b2104,b2105,b2106,b2107,b2108
,b2109,b2110,b2111,b2112,b2113,b2114,b2115,b2116,b2117,b2118,b2119,b2120,b2121,b2122,b2123,b2124,b2125,b2126,b2127,b2128,b2129,b2130,b2131,b2132,b2133,b2134,b2135,b2136,b2137,b2138
,b2139,b2140,b2141,b2142,b2143,b2144,b2145,b2146,b2147,b2148,b2149,b2150,b2151,b2152,b2153,b2154,b2155,b2156,b2157,b2158,b2159,b2160,b2161,b2162,b2163,b2164,b2165,b2166,b2167,b2168
,b2169,b2170,b2171,b2172,b2173,b2174,b2175,b2176,b2177,b2178,b2179,b2180,b2181,b2182,b2183,b2184,b2185,b2186,b2187,b2188,b2189,b2190,b2191,b2192,b2193,b2194,b2195,b2196,b2197,b2198
,b2199,b2200,b2201,b2202,b2203,b2204,b2205,b2206,b2207,b2208,b2209,b2210,b2211,b2212,b2213,b2214,b2215,b2216,b2217,b2218,b2219,b2220,b2221,b2222,b2223,b2224,b2225,b2226,b2227,b2228
,b2229,b2230,b2231];
var FUNCTION_TABLE_v = [b2233,b2234,b2235,b2236,b2237,b2238,b2239,b2240,b2241,b2242,___cxa_pure_virtual__wrapper,b2243,b2244,b2245,b2246,b2247,b2248,b2249,b2250,b2251,b2252,b2253,b2254,b2255,b2256,b2257,b2258,b2259,b2260
,b2261,b2262,b2263,b2264,b2265,b2266,b2267,b2268,b2269,b2270,b2271,b2272,b2273,b2274,b2275,b2276,b2277,b2278,b2279,b2280,b2281,b2282,b2283,b2284,b2285,b2286,b2287,b2288,b2289,b2290
,b2291,b2292,b2293,b2294,b2295,b2296,b2297,b2298,b2299,b2300,b2301,b2302,b2303,b2304,b2305,b2306,b2307,b2308,b2309,b2310,b2311,b2312,b2313,b2314,b2315,b2316,b2317,b2318,b2319,b2320
,b2321,b2322,b2323,b2324,b2325,b2326,b2327,b2328,b2329,b2330,b2331,b2332,b2333,b2334,b2335,b2336,b2337,b2338,b2339,b2340,b2341,b2342,b2343,b2344,b2345,b2346,b2347,b2348,b2349,b2350
,b2351,b2352,b2353,b2354,b2355,b2356,b2357,b2358,b2359,b2360,b2361,b2362,b2363,b2364,b2365,b2366,b2367,b2368,b2369,b2370,b2371,b2372,b2373,b2374,b2375,b2376,b2377,b2378,b2379,b2380
,b2381,b2382,b2383,b2384,b2385,b2386,b2387,b2388,b2389,b2390,b2391,b2392,b2393,b2394,b2395,b2396,b2397,b2398,b2399,b2400,b2401,b2402,b2403,b2404,b2405,b2406,b2407,b2408,b2409,b2410
,b2411,b2412,b2413,b2414,b2415,b2416,b2417,b2418,b2419,b2420,b2421,b2422,b2423,b2424,b2425,b2426,b2427,b2428,b2429,b2430,b2431,b2432,b2433,b2434,b2435,b2436,b2437,b2438,b2439,b2440
,b2441,b2442,b2443,__ZL25default_terminate_handlerv,b2444,b2445,b2446,b2447,b2448,b2449,b2450,b2451,b2452,b2453,b2454,b2455,b2456,b2457,b2458,b2459,b2460,b2461,b2462,__ZZN16MainMenuGUILayerC1EvEN3__18__invokeEv,__ZZN16MainMenuGUILayerC1EvEN3__28__invokeEv,__ZZN16MainMenuGUILayerC1EvEN3__38__invokeEv,__ZZN16MainMenuGUILayerC1EvEN3__48__invokeEv,__ZZN16MainMenuGUILayerC1EvEN3__58__invokeEv,__ZZN16MainMenuGUILayerC1EvEN3__68__invokeEv,__ZZN16MainMenuGUILayerC1EvEN3__78__invokeEv
,__ZZN16MainMenuGUILayerC1EvEN3__88__invokeEv,__ZZN16MainMenuGUILayerC1EvEN3__98__invokeEv,__ZZN16MainMenuGUILayerC1EvEN4__108__invokeEv,__ZZN16MainMenuGUILayerC1EvEN4__118__invokeEv,__ZZN16MainMenuGUILayerC1EvEN4__128__invokeEv,__ZZN16MainMenuGUILayerC1EvEN4__138__invokeEv,__ZZN16MainMenuGUILayerC1EvEN4__148__invokeEv,__ZZN16MainMenuGUILayerC1EvEN4__158__invokeEv,__ZZN20SettingsMainGUILayerC1EvEN4__188__invokeEv,__ZZN20SettingsMainGUILayerC1EvEN4__198__invokeEv,__ZZN20SettingsMainGUILayerC1EvEN4__208__invokeEv,__ZZN20SettingsMainGUILayerC1EvEN4__218__invokeEv,__ZZN20SettingsMainGUILayerC1EvEN4__228__invokeEv,__ZZN20SettingsMainGUILayerC1EvEN4__238__invokeEv,__ZZN20SettingsMainGUILayerC1EvEN4__248__invokeEv,__ZZN20SettingsMainGUILayerC1EvEN4__258__invokeEv,__ZZN20SettingsMainGUILayerC1EvEN4__268__invokeEv,__ZZN20SettingsMainGUILayerC1EvEN4__278__invokeEv,__ZZN20SettingsMainGUILayerC1EvEN4__288__invokeEv,__ZZN20SettingsMainGUILayerC1EvEN4__298__invokeEv,__ZZN20SettingsMainGUILayerC1EvEN4__308__invokeEv,__ZZN20SettingsMainGUILayerC1EvEN4__318__invokeEv,__ZZN20SettingsMainGUILayerC1EvEN4__328__invokeEv,__ZZN20SettingsMainGUILayerC1EvEN4__338__invokeEv,__ZZN20SettingsMainGUILayerC1EvEN4__348__invokeEv,__ZZN20SettingsMainGUILayerC1EvEN4__358__invokeEv,__ZZN20SettingsMainGUILayerC1EvEN4__368__invokeEv,__ZZN20SettingsMainGUILayerC1EvEN4__378__invokeEv,__ZZN20SettingsMainGUILayerC1EvEN4__388__invokeEv,b2463
,b2464,b2465,b2466,b2467,b2468,b2469,b2470,b2471,b2472,b2473,b2474,b2475,b2476,b2477,b2478,b2479,b2480,b2481,b2482,b2483,b2484,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b2485,b2486,b2487,b2488,b2489,b2490,b2491,b2492
,b2493,b2494,b2495,b2496,b2497,b2498,b2499,b2500,b2501,b2502,b2503,b2504,b2505,b2506,b2507,b2508,b2509,b2510,b2511,b2512,b2513,b2514,b2515,b2516,b2517,b2518,b2519,b2520,b2521,b2522
,b2523,b2524,b2525,b2526,b2527,b2528,b2529,b2530,b2531,b2532,b2533,b2534,b2535,b2536,b2537,b2538,b2539,b2540,b2541,b2542,b2543,b2544,b2545,b2546,b2547,b2548,b2549,b2550,b2551,b2552
,b2553,b2554,b2555,b2556,b2557,b2558,b2559,b2560,b2561,b2562,b2563,b2564,b2565,b2566,b2567,b2568,b2569,b2570,b2571,b2572,b2573,b2574,b2575,b2576,b2577,b2578,b2579,b2580,b2581,b2582
,b2583,b2584,b2585,b2586,b2587,b2588,b2589,b2590,b2591,b2592,b2593,b2594,b2595,b2596,b2597,b2598,b2599,b2600,b2601,b2602,b2603,b2604,b2605,b2606,b2607,b2608,b2609,b2610,b2611,b2612
,b2613,b2614,b2615,b2616,b2617,b2618,b2619,b2620,b2621,b2622,b2623,b2624,b2625,b2626,b2627,b2628,b2629,b2630,b2631,b2632,b2633,b2634,b2635,b2636,b2637,b2638,b2639,b2640,b2641,b2642
,b2643,b2644,b2645,b2646,b2647,b2648,b2649,b2650,b2651,b2652,b2653,b2654,b2655,b2656,b2657,b2658,b2659,b2660,b2661,b2662,b2663,b2664,b2665,b2666,b2667,b2668,b2669,b2670,b2671,b2672
,b2673,b2674,b2675,b2676,b2677,b2678,b2679,b2680,b2681,b2682,b2683,b2684,b2685,b2686,b2687,b2688,b2689,b2690,b2691,b2692,b2693,b2694,b2695,b2696,b2697,b2698,b2699,b2700,b2701,b2702
,b2703,b2704,b2705];
var FUNCTION_TABLE_vi = [b2707,__ZN23MainMenuBackgroundLayerD2Ev,__ZN23MainMenuBackgroundLayerD0Ev,b2708,__ZN23MainMenuBackgroundLayer4InitEv,__ZN23MainMenuBackgroundLayer4DestEv,b2709,__ZN23MainMenuBackgroundLayer8OnRenderEv,__ZNSt3__210__function6__baseIFbRK5EventEED2Ev,__ZNSt3__210__function6__baseIFbRK5EventEED0Ev,b2710,__ZNSt3__210__function6__funcIZN23MainMenuBackgroundLayer7OnEventERK5EventE3__0NS_9allocatorIS6_EEFbS5_EED2Ev,__ZNSt3__210__function6__funcIZN23MainMenuBackgroundLayer7OnEventERK5EventE3__0NS_9allocatorIS6_EEFbS5_EED0Ev,b2711,b2712,__ZNSt3__210__function6__funcIZN23MainMenuBackgroundLayer7OnEventERK5EventE3__0NS_9allocatorIS6_EEFbS5_EE7destroyEv,__ZNSt3__210__function6__funcIZN23MainMenuBackgroundLayer7OnEventERK5EventE3__0NS_9allocatorIS6_EEFbS5_EE18destroy_deallocateEv,b2713,b2714,b2715,__ZN16MainMenuGUILayerD2Ev,__ZN16MainMenuGUILayerD0Ev,b2716,__ZN16MainMenuGUILayer4InitEv,__ZN16MainMenuGUILayer4DestEv,b2717,__ZN16MainMenuGUILayer8OnRenderEv,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EED2Ev,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EED0Ev
,b2718,b2719,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EE7destroyEv,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EE18destroy_deallocateEv,b2720,b2721,b2722,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EED2Ev,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EED0Ev,b2723,b2724,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EE7destroyEv,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EE18destroy_deallocateEv,b2725,b2726,b2727,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EED2Ev,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EED0Ev,b2728,b2729,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EE7destroyEv,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EE18destroy_deallocateEv,b2730,b2731,b2732,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EED2Ev,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EED0Ev,b2733,b2734,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EE7destroyEv
,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EE18destroy_deallocateEv,b2735,b2736,b2737,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EED2Ev,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EED0Ev,b2738,b2739,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EE7destroyEv,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EE18destroy_deallocateEv,b2740,b2741,b2742,__ZNSt3__210__function6__funcIZN16MainMenuGUILayer7OnEventERK5EventE4__16NS_9allocatorIS6_EEFbS5_EED2Ev,__ZNSt3__210__function6__funcIZN16MainMenuGUILayer7OnEventERK5EventE4__16NS_9allocatorIS6_EEFbS5_EED0Ev,b2743,b2744,__ZNSt3__210__function6__funcIZN16MainMenuGUILayer7OnEventERK5EventE4__16NS_9allocatorIS6_EEFbS5_EE7destroyEv,__ZNSt3__210__function6__funcIZN16MainMenuGUILayer7OnEventERK5EventE4__16NS_9allocatorIS6_EEFbS5_EE18destroy_deallocateEv,b2745,b2746,b2747,__ZN27SettingsMainBackgroundLayerD2Ev,__ZN27SettingsMainBackgroundLayerD0Ev,b2748,__ZN27SettingsMainBackgroundLayer4InitEv,__ZN27SettingsMainBackgroundLayer4DestEv,b2749,__ZN27SettingsMainBackgroundLayer8OnRenderEv,__ZNSt3__210__function6__funcIZN27SettingsMainBackgroundLayer7OnEventERK5EventE4__17NS_9allocatorIS6_EEFbS5_EED2Ev
,__ZNSt3__210__function6__funcIZN27SettingsMainBackgroundLayer7OnEventERK5EventE4__17NS_9allocatorIS6_EEFbS5_EED0Ev,b2750,b2751,__ZNSt3__210__function6__funcIZN27SettingsMainBackgroundLayer7OnEventERK5EventE4__17NS_9allocatorIS6_EEFbS5_EE7destroyEv,__ZNSt3__210__function6__funcIZN27SettingsMainBackgroundLayer7OnEventERK5EventE4__17NS_9allocatorIS6_EEFbS5_EE18destroy_deallocateEv,b2752,b2753,b2754,__ZN20SettingsMainGUILayerD2Ev,__ZN20SettingsMainGUILayerD0Ev,b2755,__ZN20SettingsMainGUILayer4InitEv,__ZN20SettingsMainGUILayer4DestEv,b2756,__ZN20SettingsMainGUILayer8OnRenderEv,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EED2Ev,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EED0Ev,b2757,b2758,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EE7destroyEv,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EE18destroy_deallocateEv,b2759,b2760,b2761,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EED2Ev,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EED0Ev,b2762,b2763,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EE7destroyEv,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EE18destroy_deallocateEv
,b2764,b2765,b2766,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EED2Ev,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EED0Ev,b2767,b2768,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EE7destroyEv,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EE18destroy_deallocateEv,b2769,b2770,b2771,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EED2Ev,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EED0Ev,b2772,b2773,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EE7destroyEv,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EE18destroy_deallocateEv,b2774,b2775,b2776,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EED2Ev,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EED0Ev,b2777,b2778,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EE7destroyEv,__ZNSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EE18destroy_deallocateEv,b2779,b2780,b2781
,__ZNSt3__210__function6__funcIZN20SettingsMainGUILayer7OnEventERK5EventE4__39NS_9allocatorIS6_EEFbS5_EED2Ev,__ZNSt3__210__function6__funcIZN20SettingsMainGUILayer7OnEventERK5EventE4__39NS_9allocatorIS6_EEFbS5_EED0Ev,b2782,b2783,__ZNSt3__210__function6__funcIZN20SettingsMainGUILayer7OnEventERK5EventE4__39NS_9allocatorIS6_EEFbS5_EE7destroyEv,__ZNSt3__210__function6__funcIZN20SettingsMainGUILayer7OnEventERK5EventE4__39NS_9allocatorIS6_EEFbS5_EE18destroy_deallocateEv,b2784,b2785,b2786,__ZN5LayerD2Ev,__ZN5LayerD0Ev,__ZN13EventListenerD2Ev,__ZN13EventListenerD0Ev,__ZN16GUIButtonClusterILm5EED2Ev,__ZN16GUIButtonClusterILm5EED0Ev,b2787,b2788,__ZN10GUIClusterI13GUIButtonDataLm5EED2Ev,__ZN10GUIClusterI13GUIButtonDataLm5EED0Ev,__ZN15GUIMasterObjectD2Ev,__ZN15GUIMasterObjectD0Ev,__ZN16GUIButtonClusterILm7EED2Ev,__ZN16GUIButtonClusterILm7EED0Ev,b2789,b2790,__ZN10GUIClusterI13GUIButtonDataLm7EED2Ev,__ZN10GUIClusterI13GUIButtonDataLm7EED0Ev,__ZN9MenuStateD2Ev,__ZN9MenuStateD0Ev,__ZN9MenuState4InitEv
,__ZN9MenuState4DestEv,b2791,b2792,__ZN9MenuState8OnRenderEv,__ZN5StateD2Ev,__ZN5StateD0Ev,__ZNSt3__210__function6__baseIFvvEED2Ev,__ZNSt3__210__function6__baseIFvvEED0Ev,__ZNSt3__210__function6__funcIZ4mainE3__0NS_9allocatorIS2_EEFvvEED2Ev,__ZNSt3__210__function6__funcIZ4mainE3__0NS_9allocatorIS2_EEFvvEED0Ev,b2793,b2794,__ZNSt3__210__function6__funcIZ4mainE3__0NS_9allocatorIS2_EEFvvEE7destroyEv,__ZNSt3__210__function6__funcIZ4mainE3__0NS_9allocatorIS2_EEFvvEE18destroy_deallocateEv,__ZNSt3__210__function6__funcIZ4mainE3__0NS_9allocatorIS2_EEFvvEEclEv,b2795,b2796,__ZN15SettingsConfigsD2Ev,__ZN15SettingsConfigsD0Ev,b2797,__ZN6ConfigD2Ev,__ZN6ConfigD0Ev,b2798,b2799,b2800,b2801,b2802,b2803,b2804,b2805
,__ZNSt3__217bad_function_callD2Ev,__ZNSt3__217bad_function_callD0Ev,b2806,b2807,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b2808,b2809,b2810,b2811,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b2812,b2813,b2814,__ZNSt9exceptionD2Ev,__ZNSt9exceptionD0Ev,b2815,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,b2816,__ZNSt12length_errorD0Ev,b2817,b2818,b2819,b2820,b2821,b2822,b2823
,b2824,b2825,b2826,b2827,b2828,b2829,b2830,b2831,b2832,b2833,b2834,b2835,b2836,b2837,b2838,b2839,b2840,b2841,b2842,b2843,b2844,b2845,b2846,b2847,b2848,b2849,b2850,b2851,b2852,__Z13dispatch_mainPv
,b2853,b2854,b2855,b2856,b2857,b2858,b2859,b2860,__ZL21window_close_callbackP10GLFWwindow,b2861,b2862,b2863,b2864,b2865,b2866,b2867,b2868,b2869,b2870,b2871,b2872,b2873,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b2874,b2875,b2876,b2877,b2878,b2879,b2880
,b2881,b2882,b2883,b2884,b2885,b2886,b2887,b2888,b2889,b2890,b2891,b2892,b2893,b2894,b2895,b2896,b2897,b2898,b2899,b2900,b2901,b2902,b2903,b2904,b2905,b2906,b2907,b2908,b2909,b2910
,b2911,b2912,b2913,b2914,b2915,b2916,b2917,b2918,b2919,b2920,b2921,b2922,b2923,b2924,b2925,b2926,b2927,b2928,b2929,b2930,b2931,b2932,b2933,b2934,b2935,b2936,b2937,b2938,b2939,b2940
,b2941,b2942,b2943,b2944,b2945,b2946,b2947,b2948,b2949,b2950,b2951,b2952,b2953,b2954,b2955,b2956,b2957,b2958,b2959,b2960,b2961,b2962,b2963,b2964,b2965,b2966,b2967,b2968,b2969,b2970
,b2971,b2972,b2973,b2974,b2975,b2976,b2977,b2978,b2979,b2980,b2981,b2982,b2983,b2984,b2985,b2986,b2987,b2988,b2989,b2990,b2991,b2992,b2993,b2994,b2995,b2996,b2997,b2998,b2999,b3000
,b3001,b3002,b3003,b3004,b3005,b3006,b3007,b3008,b3009,b3010,b3011,b3012,b3013,b3014,b3015,b3016,b3017,b3018,b3019,b3020,b3021,b3022,b3023,b3024,b3025,b3026,b3027,b3028,b3029,b3030
,b3031,b3032,b3033,b3034,b3035,b3036,b3037,b3038,b3039,b3040,b3041,b3042,b3043,b3044,b3045,b3046,b3047,b3048,b3049,b3050,b3051,b3052,b3053,b3054,b3055,b3056,b3057,b3058,b3059,b3060
,b3061,b3062,b3063,b3064,b3065,b3066,b3067,b3068,b3069,b3070,b3071,b3072,b3073,b3074,b3075,b3076,b3077,b3078,b3079,b3080,b3081,b3082,b3083,b3084,b3085,b3086,b3087,b3088,b3089,b3090
,b3091,b3092,b3093];
var FUNCTION_TABLE_vid = [b3095,b3096,b3097,b3098,b3099,b3100,b3101,b3102,b3103,b3104,b3105,b3106,b3107,b3108,b3109,b3110,b3111,b3112,b3113,b3114,b3115,b3116,b3117,b3118,b3119,b3120,b3121,b3122,b3123
,b3124,b3125,b3126,b3127,b3128,b3129,b3130,b3131,b3132,b3133,b3134,b3135,b3136,b3137,b3138,b3139,b3140,b3141,b3142,b3143,b3144,b3145,b3146,b3147,b3148,b3149,b3150,b3151,b3152,b3153
,b3154,b3155,b3156,b3157,b3158,b3159,b3160,b3161,b3162,b3163,b3164,b3165,b3166,b3167,b3168,b3169,b3170,b3171,b3172,b3173,b3174,b3175,b3176,b3177,b3178,b3179,b3180,b3181,b3182,b3183
,b3184,b3185,b3186,b3187,b3188,b3189,b3190,b3191,b3192,b3193,b3194,b3195,b3196,b3197,b3198,b3199,b3200,b3201,b3202,b3203,b3204,b3205,b3206,b3207,b3208,b3209,b3210,b3211,b3212,b3213
,b3214,b3215,b3216,b3217,b3218,b3219,b3220,b3221,b3222,b3223,b3224,b3225,b3226,b3227,b3228,b3229,b3230,b3231,b3232,b3233,b3234,b3235,b3236,b3237,b3238,b3239,b3240,b3241,b3242,b3243
,b3244,b3245,b3246,b3247,b3248,b3249,b3250,b3251,b3252,b3253,b3254,b3255,b3256,b3257,b3258,b3259,__ZN16GUIButtonClusterILm5EE8OnUpdateEf,b3260,b3261,b3262,b3263,b3264,b3265,b3266,__ZN16GUIButtonClusterILm7EE8OnUpdateEf,b3267,b3268,b3269,b3270,b3271
,b3272,b3273,__ZN9MenuState8OnUpdateEf,b3274,b3275,b3276,b3277,b3278,b3279,b3280,b3281,b3282,b3283,b3284,b3285,b3286,b3287,b3288,b3289,b3290,b3291,b3292,b3293,b3294,b3295,b3296,b3297,b3298,b3299,b3300
,b3301,b3302,b3303,b3304,b3305,b3306,b3307,b3308,b3309,b3310,b3311,b3312,b3313,b3314,b3315,b3316,b3317,b3318,b3319,b3320,b3321,b3322,b3323,b3324,b3325,b3326,b3327,b3328,b3329,b3330
,b3331,b3332,b3333,b3334,b3335,b3336,b3337,b3338,b3339,b3340,b3341,b3342,b3343,b3344,b3345,b3346,b3347];
var FUNCTION_TABLE_vidd = [b3349,b3350,b3351,b3352,b3353,b3354,b3355,b3356,b3357,b3358,b3359,b3360,b3361,b3362,b3363,b3364,b3365,b3366,b3367,b3368,b3369,b3370,b3371,b3372,b3373,b3374,b3375,b3376,b3377
,b3378,b3379,b3380,b3381,b3382,b3383,b3384,b3385,b3386,b3387,b3388,b3389,b3390,b3391,b3392,b3393,b3394,b3395,b3396,b3397,b3398,b3399,b3400,b3401,b3402,b3403,b3404,b3405,b3406,b3407
,b3408,b3409,b3410,b3411,b3412,b3413,b3414,b3415,b3416,b3417,b3418,b3419,b3420,b3421,b3422,b3423,b3424,b3425,b3426,b3427,b3428,b3429,b3430,b3431,b3432,b3433,b3434,b3435,b3436,b3437
,b3438,b3439,b3440,b3441,b3442,b3443,b3444,b3445,b3446,b3447,b3448,b3449,b3450,b3451,b3452,b3453,b3454,b3455,b3456,b3457,b3458,b3459,b3460,b3461,b3462,b3463,b3464,b3465,b3466,b3467
,b3468,b3469,b3470,b3471,b3472,b3473,b3474,b3475,b3476,b3477,b3478,b3479,b3480,b3481,b3482,b3483,b3484,b3485,b3486,b3487,b3488,b3489,b3490,b3491,b3492,b3493,b3494,b3495,b3496,b3497
,b3498,b3499,b3500,b3501,b3502,b3503,b3504,b3505,b3506,b3507,b3508,b3509,b3510,b3511,b3512,b3513,b3514,b3515,b3516,b3517,b3518,b3519,b3520,b3521,b3522,b3523,b3524,b3525,b3526,b3527
,b3528,b3529,b3530,b3531,b3532,b3533,b3534,b3535,b3536,b3537,b3538,b3539,b3540,b3541,b3542,b3543,b3544,b3545,b3546,b3547,b3548,b3549,b3550,b3551,b3552,b3553,b3554,b3555,b3556,b3557
,b3558,b3559,b3560,b3561,b3562,b3563,b3564,b3565,b3566,b3567,b3568,b3569,b3570,b3571,b3572,b3573,b3574,b3575,b3576,b3577,b3578,b3579,b3580,b3581,b3582,b3583,b3584,b3585,b3586,b3587
,b3588,b3589,b3590,b3591,b3592,b3593,b3594,b3595,b3596,b3597,b3598,b3599,b3600,b3601,b3602,b3603,b3604,b3605,b3606,b3607,b3608,b3609,b3610,b3611,b3612,b3613,b3614,b3615,b3616,b3617
,b3618,b3619,b3620,b3621,b3622,b3623,b3624,b3625,b3626,b3627,b3628,b3629,b3630,b3631,__ZL24cursor_position_callbackP10GLFWwindowdd,b3632,b3633,__ZL15scroll_callbackP10GLFWwindowdd,b3634,b3635,b3636,b3637,b3638,b3639,b3640,b3641,b3642,b3643,b3644,b3645
,b3646,b3647,b3648,b3649,b3650,b3651,b3652,b3653,b3654,b3655,b3656,b3657,b3658,b3659,b3660,b3661,b3662,b3663,b3664,b3665,b3666,b3667,b3668,b3669,b3670,b3671,b3672,b3673,b3674,b3675
,b3676,b3677,b3678,b3679,b3680,b3681,b3682,b3683,b3684,b3685,b3686,b3687,b3688,b3689,b3690,b3691,b3692,b3693,b3694,b3695,b3696,b3697,b3698,b3699,b3700,b3701,b3702,b3703,b3704,b3705
,b3706,b3707,b3708,b3709,b3710,b3711,b3712,b3713,b3714,b3715,b3716,b3717,b3718,b3719,b3720,b3721,b3722,b3723,b3724,b3725,b3726,b3727,b3728,b3729,b3730,b3731,b3732,b3733,b3734,b3735
,b3736,b3737,b3738,b3739,b3740,b3741,b3742,b3743,b3744,b3745,b3746,b3747,b3748,b3749,b3750,b3751,b3752,b3753,b3754,b3755,b3756,b3757,b3758,b3759,b3760,b3761,b3762,b3763,b3764,b3765
,b3766,b3767,b3768,b3769,b3770,b3771,b3772,b3773,b3774,b3775,b3776,b3777,b3778,b3779,b3780,b3781,b3782,b3783,b3784,b3785,b3786,b3787,b3788,b3789,b3790,b3791,b3792,b3793,b3794,b3795
,b3796,b3797,b3798,b3799,b3800,b3801,b3802,b3803,b3804,b3805,b3806,b3807,b3808,b3809,b3810,b3811,b3812,b3813,b3814,b3815,b3816,b3817,b3818,b3819,b3820,b3821,b3822,b3823,b3824,b3825
,b3826,b3827,b3828,b3829,b3830,b3831,b3832,b3833,b3834,b3835,b3836,b3837,b3838,b3839,b3840,b3841,b3842,b3843,b3844,b3845,b3846,b3847,b3848,b3849,b3850,b3851,b3852,b3853,b3854,b3855
,b3856,b3857,b3858];
var FUNCTION_TABLE_vii = [b3860,b3861,b3862,__ZN23MainMenuBackgroundLayer7OnEventERK5Event,b3863,b3864,__ZN23MainMenuBackgroundLayer8OnUpdateERKf,b3865,b3866,b3867,b3868,b3869,b3870,b3871,__ZNKSt3__210__function6__funcIZN23MainMenuBackgroundLayer7OnEventERK5EventE3__0NS_9allocatorIS6_EEFbS5_EE7__cloneEPNS0_6__baseIS9_EE,b3872,b3873,b3874,b3875,b3876,b3877,b3878,__ZN16MainMenuGUILayer7OnEventERK5Event,b3879,b3880,__ZN16MainMenuGUILayer8OnUpdateERKf,b3881,b3882,b3883
,b3884,__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EE7__cloneEPNS0_6__baseISA_EE,b3885,b3886,b3887,b3888,b3889,b3890,b3891,b3892,__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EE7__cloneEPNS0_6__baseISA_EE,b3893,b3894,b3895,b3896,b3897,b3898,b3899,b3900,__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EE7__cloneEPNS0_6__baseISA_EE,b3901,b3902,b3903,b3904,b3905,b3906,b3907,b3908,__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EE7__cloneEPNS0_6__baseISA_EE,b3909
,b3910,b3911,b3912,b3913,b3914,b3915,b3916,__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm5EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EE7__cloneEPNS0_6__baseISA_EE,b3917,b3918,b3919,b3920,b3921,b3922,b3923,b3924,__ZNKSt3__210__function6__funcIZN16MainMenuGUILayer7OnEventERK5EventE4__16NS_9allocatorIS6_EEFbS5_EE7__cloneEPNS0_6__baseIS9_EE,b3925,b3926,b3927,b3928,b3929,b3930,b3931,__ZN27SettingsMainBackgroundLayer7OnEventERK5Event,b3932,b3933,__ZN27SettingsMainBackgroundLayer8OnUpdateERKf,b3934,b3935
,b3936,b3937,__ZNKSt3__210__function6__funcIZN27SettingsMainBackgroundLayer7OnEventERK5EventE4__17NS_9allocatorIS6_EEFbS5_EE7__cloneEPNS0_6__baseIS9_EE,b3938,b3939,b3940,b3941,b3942,b3943,b3944,__ZN20SettingsMainGUILayer7OnEventERK5Event,b3945,b3946,__ZN20SettingsMainGUILayer8OnUpdateERKf,b3947,b3948,b3949,b3950,__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E3_NS_9allocatorIS7_EEFbS6_EE7__cloneEPNS0_6__baseISA_EE,b3951,b3952,b3953,b3954,b3955,b3956,b3957,b3958,__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E2_NS_9allocatorIS7_EEFbS6_EE7__cloneEPNS0_6__baseISA_EE,b3959,b3960
,b3961,b3962,b3963,b3964,b3965,b3966,__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E1_NS_9allocatorIS7_EEFbS6_EE7__cloneEPNS0_6__baseISA_EE,b3967,b3968,b3969,b3970,b3971,b3972,b3973,b3974,__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E0_NS_9allocatorIS7_EEFbS6_EE7__cloneEPNS0_6__baseISA_EE,b3975,b3976,b3977,b3978,b3979,b3980,b3981,b3982,__ZNKSt3__210__function6__funcIZN16GUIButtonClusterILm7EE7OnEventERK5EventEUlS6_E_NS_9allocatorIS7_EEFbS6_EE7__cloneEPNS0_6__baseISA_EE,b3983,b3984,b3985,b3986,b3987
,b3988,b3989,b3990,__ZNKSt3__210__function6__funcIZN20SettingsMainGUILayer7OnEventERK5EventE4__39NS_9allocatorIS6_EEFbS5_EE7__cloneEPNS0_6__baseIS9_EE,b3991,b3992,b3993,b3994,b3995,b3996,b3997,b3998,b3999,b4000,b4001,__ZN16GUIButtonClusterILm5EE7OnEventERK5Event,b4002,b4003,b4004,b4005,b4006,b4007,b4008,__ZN16GUIButtonClusterILm7EE7OnEventERK5Event,b4009,b4010,b4011,b4012,b4013,b4014
,b4015,__ZN9MenuState7OnEventERK5Event,b4016,b4017,b4018,b4019,b4020,b4021,b4022,b4023,b4024,__ZNKSt3__210__function6__funcIZ4mainE3__0NS_9allocatorIS2_EEFvvEE7__cloneEPNS0_6__baseIS5_EE,b4025,b4026,b4027,b4028,b4029,b4030,b4031,b4032,b4033,b4034,b4035,__ZL16stbi__stdio_skipPvi,b4036,b4037,b4038,b4039,b4040,b4041
,b4042,b4043,b4044,b4045,b4046,b4047,b4048,b4049,b4050,b4051,b4052,b4053,b4054,b4055,b4056,b4057,b4058,b4059,b4060,b4061,b4062,b4063,b4064,b4065,b4066,b4067,b4068,b4069,b4070,b4071
,b4072,b4073,b4074,b4075,b4076,b4077,b4078,b4079,b4080,b4081,b4082,b4083,b4084,b4085,b4086,b4087,b4088,b4089,b4090,b4091,b4092,b4093,b4094,b4095,b4096,b4097,b4098,b4099,b4100,b4101
,b4102,b4103,b4104,b4105,b4106,b4107,b4108,__ZL14error_callbackiPKc,b4109,b4110,b4111,b4112,b4113,__ZL18character_callbackP10GLFWwindowj,b4114,__ZL21cursor_enter_callbackP10GLFWwindowi,b4115,b4116,b4117,_pop_arg_long_double,b4118,b4119,b4120,b4121,b4122,b4123,b4124,b4125,b4126,b4127
,b4128,b4129,b4130,b4131,b4132,b4133,b4134,b4135,b4136,b4137,b4138,b4139,b4140,b4141,b4142,b4143,b4144,b4145,b4146,b4147,b4148,b4149,b4150,b4151,b4152,b4153,b4154,b4155,b4156,b4157
,b4158,b4159,b4160,b4161,b4162,b4163,b4164,b4165,b4166,b4167,b4168,b4169,b4170,b4171,b4172,b4173,b4174,b4175,b4176,b4177,b4178,b4179,b4180,b4181,b4182,b4183,b4184,b4185,b4186,b4187
,b4188,b4189,b4190,b4191,b4192,b4193,b4194,b4195,b4196,b4197,b4198,b4199,b4200,b4201,b4202,b4203,b4204,b4205,b4206,b4207,b4208,b4209,b4210,b4211,b4212,b4213,b4214,b4215,b4216,b4217
,b4218,b4219,b4220,b4221,b4222,b4223,b4224,b4225,b4226,b4227,b4228,b4229,b4230,b4231,b4232,b4233,b4234,b4235,b4236,b4237,b4238,b4239,b4240,b4241,b4242,b4243,b4244,b4245,b4246,b4247
,b4248,b4249,b4250,b4251,b4252,b4253,b4254,b4255,b4256,b4257,b4258,b4259,b4260,b4261,b4262,b4263,b4264,b4265,b4266,b4267,b4268,b4269,b4270,b4271,b4272,b4273,b4274,b4275,b4276,b4277
,b4278,b4279,b4280,b4281,b4282,b4283,b4284,b4285,b4286,b4287,b4288,b4289,b4290,b4291,b4292,b4293,b4294,b4295,b4296,b4297,b4298,b4299,b4300,b4301,b4302,b4303,b4304,b4305,b4306,b4307
,b4308,b4309,b4310,b4311,b4312,b4313,b4314,b4315,b4316,b4317,b4318,b4319,b4320,b4321,b4322,b4323,b4324,b4325,b4326,b4327,b4328,b4329,b4330,b4331,b4332,b4333,b4334,b4335,b4336,b4337
,b4338,b4339,b4340];
var FUNCTION_TABLE_viii = [b4342,b4343,b4344,b4345,b4346,b4347,b4348,b4349,b4350,b4351,b4352,b4353,b4354,b4355,b4356,b4357,b4358,b4359,b4360,b4361,b4362,b4363,b4364,b4365,b4366,b4367,b4368,b4369,b4370
,b4371,b4372,b4373,b4374,b4375,b4376,b4377,b4378,b4379,b4380,b4381,b4382,b4383,b4384,b4385,b4386,b4387,b4388,b4389,b4390,b4391,b4392,b4393,b4394,b4395,b4396,b4397,b4398,b4399,b4400
,b4401,b4402,b4403,b4404,b4405,b4406,b4407,b4408,b4409,b4410,b4411,b4412,b4413,b4414,b4415,b4416,b4417,b4418,b4419,b4420,b4421,b4422,b4423,b4424,b4425,b4426,b4427,b4428,b4429,b4430
,b4431,b4432,b4433,b4434,b4435,b4436,b4437,b4438,b4439,b4440,b4441,b4442,b4443,b4444,b4445,b4446,b4447,b4448,b4449,b4450,b4451,b4452,b4453,b4454,b4455,b4456,b4457,b4458,b4459,b4460
,b4461,b4462,b4463,b4464,b4465,b4466,b4467,b4468,b4469,b4470,b4471,b4472,b4473,b4474,b4475,b4476,b4477,b4478,b4479,b4480,b4481,b4482,b4483,b4484,b4485,b4486,b4487,b4488,b4489,b4490
,b4491,b4492,b4493,b4494,b4495,b4496,b4497,b4498,b4499,b4500,b4501,b4502,b4503,b4504,b4505,b4506,b4507,b4508,b4509,b4510,b4511,b4512,b4513,b4514,b4515,b4516,b4517,b4518,b4519,b4520
,b4521,b4522,b4523,b4524,b4525,b4526,b4527,b4528,b4529,b4530,b4531,b4532,b4533,b4534,b4535,b4536,b4537,b4538,b4539,b4540,b4541,b4542,b4543,b4544,b4545,b4546,b4547,b4548,b4549,b4550
,b4551,b4552,b4553,b4554,b4555,b4556,b4557,b4558,b4559,b4560,b4561,b4562,b4563,b4564,b4565,b4566,b4567,b4568,b4569,b4570,b4571,b4572,b4573,b4574,b4575,b4576,b4577,b4578,b4579,b4580
,b4581,b4582,b4583,b4584,b4585,b4586,b4587,b4588,b4589,b4590,b4591,b4592,b4593,b4594,b4595,b4596,b4597,b4598,b4599,b4600,b4601,b4602,b4603,b4604,b4605,b4606,b4607,b4608,b4609,b4610
,__ZL16stbi__idct_blockPhiPs,b4611,b4612,b4613,b4614,b4615,b4616,b4617,b4618,__ZL20window_size_callbackP10GLFWwindowii,__ZL19window_pos_callbackP10GLFWwindowii,__ZL25framebuffer_size_callbackP10GLFWwindowii,b4619,b4620,b4621,b4622,b4623,b4624,b4625,b4626,b4627,b4628,b4629,b4630,b4631,b4632,b4633,b4634,b4635,b4636
,b4637,b4638,b4639,b4640,b4641,b4642,b4643,b4644,b4645,b4646,b4647,b4648,b4649,b4650,b4651,b4652,b4653,b4654,b4655,b4656,b4657,b4658,b4659,b4660,b4661,b4662,b4663,b4664,b4665,b4666
,b4667,b4668,b4669,b4670,b4671,b4672,b4673,b4674,b4675,b4676,b4677,b4678,b4679,b4680,b4681,b4682,b4683,b4684,b4685,b4686,b4687,b4688,b4689,b4690,b4691,b4692,b4693,b4694,b4695,b4696
,b4697,b4698,b4699,b4700,b4701,b4702,b4703,b4704,b4705,b4706,b4707,b4708,b4709,b4710,b4711,b4712,b4713,b4714,b4715,b4716,b4717,b4718,b4719,b4720,b4721,b4722,b4723,b4724,b4725,b4726
,b4727,b4728,b4729,b4730,b4731,b4732,b4733,b4734,b4735,b4736,b4737,b4738,b4739,b4740,b4741,b4742,b4743,b4744,b4745,b4746,b4747,b4748,b4749,b4750,b4751,b4752,b4753,b4754,b4755,b4756
,b4757,b4758,b4759,b4760,b4761,b4762,b4763,b4764,b4765,b4766,b4767,b4768,b4769,b4770,b4771,b4772,b4773,b4774,b4775,b4776,b4777,b4778,b4779,b4780,b4781,b4782,b4783,b4784,b4785,b4786
,b4787,b4788,b4789,b4790,b4791,b4792,b4793,b4794,b4795,b4796,b4797,b4798,b4799,b4800,b4801,b4802,b4803,b4804,b4805,b4806,b4807,b4808,b4809,b4810,b4811,b4812,b4813,b4814,b4815,b4816
,b4817,b4818,b4819,b4820,b4821,b4822,b4823,b4824,b4825,b4826,b4827,b4828,b4829,b4830,b4831,b4832,b4833,b4834,b4835,b4836,b4837,b4838,b4839,b4840,b4841,b4842,b4843,b4844,b4845,b4846
,b4847,b4848,b4849];
var FUNCTION_TABLE_viiii = [b4851,b4852,b4853,b4854,b4855,b4856,b4857,b4858,b4859,b4860,b4861,b4862,b4863,b4864,b4865,b4866,b4867,b4868,b4869,b4870,b4871,b4872,b4873,b4874,b4875,b4876,b4877,b4878,b4879
,b4880,b4881,b4882,b4883,b4884,b4885,b4886,b4887,b4888,b4889,b4890,b4891,b4892,b4893,b4894,b4895,b4896,b4897,b4898,b4899,b4900,b4901,b4902,b4903,b4904,b4905,b4906,b4907,b4908,b4909
,b4910,b4911,b4912,b4913,b4914,b4915,b4916,b4917,b4918,b4919,b4920,b4921,b4922,b4923,b4924,b4925,b4926,b4927,b4928,b4929,b4930,b4931,b4932,b4933,b4934,b4935,b4936,b4937,b4938,b4939
,b4940,b4941,b4942,b4943,b4944,b4945,b4946,b4947,b4948,b4949,b4950,b4951,b4952,b4953,b4954,b4955,b4956,b4957,b4958,b4959,b4960,b4961,b4962,b4963,b4964,b4965,b4966,b4967,b4968,b4969
,b4970,b4971,b4972,b4973,b4974,b4975,b4976,b4977,b4978,b4979,b4980,b4981,b4982,b4983,b4984,b4985,b4986,b4987,b4988,b4989,b4990,b4991,b4992,b4993,b4994,b4995,b4996,b4997,b4998,b4999
,b5000,b5001,b5002,b5003,b5004,b5005,b5006,b5007,b5008,b5009,b5010,b5011,b5012,b5013,b5014,b5015,b5016,b5017,b5018,b5019,b5020,b5021,b5022,b5023,b5024,b5025,b5026,b5027,b5028,b5029
,b5030,b5031,b5032,b5033,b5034,b5035,b5036,b5037,b5038,b5039,b5040,b5041,b5042,b5043,b5044,b5045,b5046,b5047,b5048,b5049,b5050,b5051,b5052,b5053,b5054,b5055,b5056,b5057,b5058,b5059
,b5060,b5061,b5062,b5063,b5064,b5065,b5066,b5067,b5068,b5069,b5070,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b5071,b5072,b5073,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b5074,b5075,b5076,b5077,b5078,b5079,b5080,b5081,b5082,b5083,b5084,b5085,b5086,b5087
,b5088,b5089,b5090,b5091,b5092,b5093,b5094,b5095,b5096,b5097,b5098,b5099,b5100,b5101,b5102,b5103,b5104,b5105,b5106,b5107,b5108,b5109,b5110,b5111,b5112,b5113,b5114,b5115,b5116,b5117
,b5118,b5119,b5120,b5121,b5122,b5123,b5124,b5125,b5126,b5127,b5128,b5129,b5130,b5131,b5132,b5133,__ZL21mouse_button_callbackP10GLFWwindowiii,b5134,b5135,b5136,b5137,b5138,b5139,b5140,b5141,b5142,b5143,b5144,b5145,b5146
,b5147,b5148,b5149,b5150,b5151,b5152,b5153,b5154,b5155,b5156,b5157,b5158,b5159,b5160,b5161,b5162,b5163,b5164,b5165,b5166,b5167,b5168,b5169,b5170,b5171,b5172,b5173,b5174,b5175,b5176
,b5177,b5178,b5179,b5180,b5181,b5182,b5183,b5184,b5185,b5186,b5187,b5188,b5189,b5190,b5191,b5192,b5193,b5194,b5195,b5196,b5197,b5198,b5199,b5200,b5201,b5202,b5203,b5204,b5205,b5206
,b5207,b5208,b5209,b5210,b5211,b5212,b5213,b5214,b5215,b5216,b5217,b5218,b5219,b5220,b5221,b5222,b5223,b5224,b5225,b5226,b5227,b5228,b5229,b5230,b5231,b5232,b5233,b5234,b5235,b5236
,b5237,b5238,b5239,b5240,b5241,b5242,b5243,b5244,b5245,b5246,b5247,b5248,b5249,b5250,b5251,b5252,b5253,b5254,b5255,b5256,b5257,b5258,b5259,b5260,b5261,b5262,b5263,b5264,b5265,b5266
,b5267,b5268,b5269,b5270,b5271,b5272,b5273,b5274,b5275,b5276,b5277,b5278,b5279,b5280,b5281,b5282,b5283,b5284,b5285,b5286,b5287,b5288,b5289,b5290,b5291,b5292,b5293,b5294,b5295,b5296
,b5297,b5298,b5299,b5300,b5301,b5302,b5303,b5304,b5305,b5306,b5307,b5308,b5309,b5310,b5311,b5312,b5313,b5314,b5315,b5316,b5317,b5318,b5319,b5320,b5321,b5322,b5323,b5324,b5325,b5326
,b5327,b5328,b5329,b5330,b5331,b5332,b5333,b5334,b5335,b5336,b5337,b5338,b5339,b5340,b5341,b5342,b5343,b5344,b5345,b5346,b5347,b5348,b5349,b5350,b5351,b5352,b5353,b5354,b5355,b5356
,b5357,b5358,b5359];
var FUNCTION_TABLE_viiiii = [b5361,b5362,b5363,b5364,b5365,b5366,b5367,b5368,b5369,b5370,b5371,b5372,b5373,b5374,b5375,b5376,b5377,b5378,b5379,b5380,b5381,b5382,b5383,b5384,b5385,b5386,b5387,b5388,b5389
,b5390,b5391,b5392,b5393,b5394,b5395,b5396,b5397,b5398,b5399,b5400,b5401,b5402,b5403,b5404,b5405,b5406,b5407,b5408,b5409,b5410,b5411,b5412,b5413,b5414,b5415,b5416,b5417,b5418,b5419
,b5420,b5421,b5422,b5423,b5424,b5425,b5426,b5427,b5428,b5429,b5430,b5431,b5432,b5433,b5434,b5435,b5436,b5437,b5438,b5439,b5440,b5441,b5442,b5443,b5444,b5445,b5446,b5447,b5448,b5449
,b5450,b5451,b5452,b5453,b5454,b5455,b5456,b5457,b5458,b5459,b5460,b5461,b5462,b5463,b5464,b5465,b5466,b5467,b5468,b5469,b5470,b5471,b5472,b5473,b5474,b5475,b5476,b5477,b5478,b5479
,b5480,b5481,b5482,b5483,b5484,b5485,b5486,b5487,b5488,b5489,b5490,b5491,b5492,b5493,b5494,b5495,b5496,b5497,b5498,b5499,b5500,b5501,b5502,b5503,b5504,b5505,b5506,b5507,b5508,b5509
,b5510,b5511,b5512,b5513,b5514,b5515,b5516,b5517,b5518,b5519,b5520,b5521,b5522,b5523,b5524,b5525,b5526,b5527,b5528,b5529,b5530,b5531,b5532,b5533,b5534,b5535,b5536,b5537,b5538,b5539
,b5540,b5541,b5542,b5543,b5544,b5545,b5546,b5547,b5548,b5549,b5550,b5551,b5552,b5553,b5554,b5555,b5556,b5557,b5558,b5559,b5560,b5561,b5562,b5563,b5564,b5565,b5566,b5567,b5568,b5569
,b5570,b5571,b5572,b5573,b5574,b5575,b5576,b5577,b5578,b5579,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b5580,b5581,b5582,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b5583,b5584,b5585,b5586,b5587,b5588,b5589,b5590,b5591,b5592,b5593,b5594,b5595,b5596,b5597
,b5598,b5599,b5600,b5601,b5602,b5603,b5604,b5605,b5606,b5607,b5608,b5609,b5610,b5611,b5612,b5613,b5614,b5615,b5616,b5617,b5618,b5619,b5620,b5621,b5622,b5623,b5624,b5625,b5626,b5627
,b5628,b5629,b5630,b5631,b5632,b5633,b5634,b5635,b5636,b5637,b5638,b5639,__ZL12key_callbackP10GLFWwindowiiii,b5640,b5641,b5642,b5643,b5644,b5645,b5646,b5647,b5648,b5649,b5650,b5651,b5652,b5653,b5654,b5655,b5656
,b5657,b5658,b5659,b5660,b5661,b5662,b5663,b5664,b5665,b5666,b5667,b5668,b5669,b5670,b5671,b5672,b5673,b5674,b5675,b5676,b5677,b5678,b5679,b5680,b5681,b5682,b5683,b5684,b5685,b5686
,b5687,b5688,b5689,b5690,b5691,b5692,b5693,b5694,b5695,b5696,b5697,b5698,b5699,b5700,b5701,b5702,b5703,b5704,b5705,b5706,b5707,b5708,b5709,b5710,b5711,b5712,b5713,b5714,b5715,b5716
,b5717,b5718,b5719,b5720,b5721,b5722,b5723,b5724,b5725,b5726,b5727,b5728,b5729,b5730,b5731,b5732,b5733,b5734,b5735,b5736,b5737,b5738,b5739,b5740,b5741,b5742,b5743,b5744,b5745,b5746
,b5747,b5748,b5749,b5750,b5751,b5752,b5753,b5754,b5755,b5756,b5757,b5758,b5759,b5760,b5761,b5762,b5763,b5764,b5765,b5766,b5767,b5768,b5769,b5770,b5771,b5772,b5773,b5774,b5775,b5776
,b5777,b5778,b5779,b5780,b5781,b5782,b5783,b5784,b5785,b5786,b5787,b5788,b5789,b5790,b5791,b5792,b5793,b5794,b5795,b5796,b5797,b5798,b5799,b5800,b5801,b5802,b5803,b5804,b5805,b5806
,b5807,b5808,b5809,b5810,b5811,b5812,b5813,b5814,b5815,b5816,b5817,b5818,b5819,b5820,b5821,b5822,b5823,b5824,b5825,b5826,b5827,b5828,b5829,b5830,b5831,b5832,b5833,b5834,b5835,b5836
,b5837,b5838,b5839,b5840,b5841,b5842,b5843,b5844,b5845,b5846,b5847,b5848,b5849,b5850,b5851,b5852,b5853,b5854,b5855,b5856,b5857,b5858,b5859,b5860,b5861,b5862,b5863,b5864,b5865,b5866
,b5867,b5868,b5869];
var FUNCTION_TABLE_viiiiii = [b5871,b5872,b5873,b5874,b5875,b5876,b5877,b5878,b5879,b5880,b5881,b5882,b5883,b5884,b5885,b5886,b5887,b5888,b5889,b5890,b5891,b5892,b5893,b5894,b5895,b5896,b5897,b5898,b5899
,b5900,b5901,b5902,b5903,b5904,b5905,b5906,b5907,b5908,b5909,b5910,b5911,b5912,b5913,b5914,b5915,b5916,b5917,b5918,b5919,b5920,b5921,b5922,b5923,b5924,b5925,b5926,b5927,b5928,b5929
,b5930,b5931,b5932,b5933,b5934,b5935,b5936,b5937,b5938,b5939,b5940,b5941,b5942,b5943,b5944,b5945,b5946,b5947,b5948,b5949,b5950,b5951,b5952,b5953,b5954,b5955,b5956,b5957,b5958,b5959
,b5960,b5961,b5962,b5963,b5964,b5965,b5966,b5967,b5968,b5969,b5970,b5971,b5972,b5973,b5974,b5975,b5976,b5977,b5978,b5979,b5980,b5981,b5982,b5983,b5984,b5985,b5986,b5987,b5988,b5989
,b5990,b5991,b5992,b5993,b5994,b5995,b5996,b5997,b5998,b5999,b6000,b6001,b6002,b6003,b6004,b6005,b6006,b6007,b6008,b6009,b6010,b6011,b6012,b6013,b6014,b6015,b6016,b6017,b6018,b6019
,b6020,b6021,b6022,b6023,b6024,b6025,b6026,b6027,b6028,b6029,b6030,b6031,b6032,b6033,b6034,b6035,b6036,b6037,b6038,b6039,b6040,b6041,b6042,b6043,b6044,b6045,b6046,b6047,b6048,b6049
,b6050,b6051,b6052,b6053,b6054,b6055,b6056,b6057,b6058,b6059,b6060,b6061,b6062,b6063,b6064,b6065,b6066,b6067,b6068,b6069,b6070,b6071,b6072,b6073,b6074,b6075,b6076,b6077,b6078,b6079
,b6080,b6081,b6082,b6083,b6084,b6085,b6086,b6087,b6088,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b6089,b6090,b6091,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b6092,b6093,b6094,b6095,b6096,b6097,b6098,b6099,b6100,b6101,b6102,b6103,b6104,b6105,b6106,b6107
,b6108,b6109,b6110,b6111,b6112,b6113,b6114,b6115,b6116,b6117,b6118,b6119,b6120,b6121,b6122,b6123,b6124,b6125,b6126,b6127,b6128,b6129,b6130,b6131,b6132,b6133,b6134,b6135,b6136,b6137
,b6138,__ZL22stbi__YCbCr_to_RGB_rowPhPKhS1_S1_ii,b6139,b6140,b6141,b6142,b6143,b6144,b6145,b6146,b6147,b6148,b6149,b6150,b6151,b6152,b6153,b6154,b6155,b6156,b6157,b6158,b6159,b6160,b6161,b6162,b6163,b6164,b6165,b6166
,b6167,b6168,b6169,b6170,b6171,b6172,b6173,b6174,b6175,b6176,b6177,b6178,b6179,b6180,b6181,b6182,b6183,b6184,b6185,b6186,b6187,b6188,b6189,b6190,b6191,b6192,b6193,b6194,b6195,b6196
,b6197,b6198,b6199,b6200,b6201,b6202,b6203,b6204,b6205,b6206,b6207,b6208,b6209,b6210,b6211,b6212,b6213,b6214,b6215,b6216,b6217,b6218,b6219,b6220,b6221,b6222,b6223,b6224,b6225,b6226
,b6227,b6228,b6229,b6230,b6231,b6232,b6233,b6234,b6235,b6236,b6237,b6238,b6239,b6240,b6241,b6242,b6243,b6244,b6245,b6246,b6247,b6248,b6249,b6250,b6251,b6252,b6253,b6254,b6255,b6256
,b6257,b6258,b6259,b6260,b6261,b6262,b6263,b6264,b6265,b6266,b6267,b6268,b6269,b6270,b6271,b6272,b6273,b6274,b6275,b6276,b6277,b6278,b6279,b6280,b6281,b6282,b6283,b6284,b6285,b6286
,b6287,b6288,b6289,b6290,b6291,b6292,b6293,b6294,b6295,b6296,b6297,b6298,b6299,b6300,b6301,b6302,b6303,b6304,b6305,b6306,b6307,b6308,b6309,b6310,b6311,b6312,b6313,b6314,b6315,b6316
,b6317,b6318,b6319,b6320,b6321,b6322,b6323,b6324,b6325,b6326,b6327,b6328,b6329,b6330,b6331,b6332,b6333,b6334,b6335,b6336,b6337,b6338,b6339,b6340,b6341,b6342,b6343,b6344,b6345,b6346
,b6347,b6348,b6349,b6350,b6351,b6352,b6353,b6354,b6355,b6356,b6357,b6358,b6359,b6360,b6361,b6362,b6363,b6364,b6365,b6366,b6367,b6368,b6369,b6370,b6371,b6372,b6373,b6374,b6375,b6376
,b6377,b6378,b6379];

  return { ___cxa_can_catch: ___cxa_can_catch, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___em_js__say_hello: ___em_js__say_hello, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _fflush: _fflush, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memset: _memset, _sbrk: _sbrk, dynCall_ii: dynCall_ii, dynCall_iidiiii: dynCall_iidiiii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiii: dynCall_iiiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vid: dynCall_vid, dynCall_vidd: dynCall_vidd, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, establishStackSpace: establishStackSpace, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(asmGlobalArg, asmLibraryArg, buffer);

var real____cxa_can_catch = asm["___cxa_can_catch"];
asm["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_can_catch.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"];
asm["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_is_pointer_type.apply(null, arguments);
};

var real____em_js__say_hello = asm["___em_js__say_hello"];
asm["___em_js__say_hello"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____em_js__say_hello.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"];
asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"];
asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"];
asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"];
asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"];
asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__fflush = asm["_fflush"];
asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"];
asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"];
asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"];
asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__main = asm["_main"];
asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real__malloc = asm["_malloc"];
asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"];
asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"];
asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"];
asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"];
asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"];
asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var ___em_js__say_hello = Module["___em_js__say_hello"] = asm["___em_js__say_hello"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _main = Module["_main"] = asm["_main"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memset = Module["_memset"] = asm["_memset"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iidiiii = Module["dynCall_iidiiii"] = asm["dynCall_iidiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];
var dynCall_vidd = Module["dynCall_vidd"] = asm["dynCall_vidd"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["getMemory"] = getMemory;
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["addRunDependency"] = addRunDependency;
Module["removeRunDependency"] = removeRunDependency;
if (!Module["ENV"]) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["FS_createFolder"] = FS.createFolder;
Module["FS_createPath"] = FS.createPath;
Module["FS_createDataFile"] = FS.createDataFile;
Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
Module["FS_createLazyFile"] = FS.createLazyFile;
Module["FS_createLink"] = FS.createLink;
Module["FS_createDevice"] = FS.createDevice;
Module["FS_unlink"] = FS.unlink;
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackSave"]) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackRestore"]) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackAlloc"]) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["establishStackSpace"]) Module["establishStackSpace"] = function() { abort("'establishStackSpace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["print"]) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["printErr"]) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getTempRet0"]) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setTempRet0"]) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayFromBase64"]) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["tryParseAsDataURI"]) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    memoryInitializer = locateFile(memoryInitializer);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    var doBrowserLoad = function() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
    if (memoryInitializerBytes) {
      applyMemoryInitializer(memoryInitializerBytes.buffer);
    } else
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      var useRequest = function() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
          var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);
          if (data) {
            response = data.buffer;
          } else {
            // If you see this warning, the issue may be that you are using locateFile and defining it in JS. That
            // means that the HTML file doesn't know about it, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
          }
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on Module["onRuntimeInitialized"])');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      err('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    ['stdout', 'stderr'].forEach(function(name) {
      var info = FS.analyzePath('/dev/' + name);
      if (!info) return;
      var stream = info.object;
      var rdev = stream.rdev;
      var tty = TTY.ttys[rdev];
      if (tty && tty.output && tty.output.length) {
        has = true;
      }
    });
  } catch(e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      err('exit(' + status + ') called, but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  Module['quit'](status, new ExitStatus(status));
}

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    out(what);
    err(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

  Module["noExitRuntime"] = true;

run();





// {{MODULE_ADDITIONS}}



